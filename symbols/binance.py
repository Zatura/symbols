from ._model import Symbol


class ONEINCHBTC(Symbol):
    """
        name: 1INCHBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "1INCHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHBTC"

    def __str__(self):
        return "1INCHBTC"

    def __call__(self):
        return "1INCHBTC"


ONEINCHBTC = ONEINCHBTC(*ONEINCHBTC._fields)
"""
    name: 1INCHBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONEINCHBUSD(Symbol):
    """
        name: 1INCHBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "1INCHBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHBUSD"

    def __str__(self):
        return "1INCHBUSD"

    def __call__(self):
        return "1INCHBUSD"


ONEINCHBUSD = ONEINCHBUSD(*ONEINCHBUSD._fields)
"""
    name: 1INCHBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEINCHDOWNUSDT(Symbol):
    """
        name: 1INCHDOWNUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "1INCHDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHDOWNUSDT"

    def __str__(self):
        return "1INCHDOWNUSDT"

    def __call__(self):
        return "1INCHDOWNUSDT"


ONEINCHDOWNUSDT = ONEINCHDOWNUSDT(*ONEINCHDOWNUSDT._fields)
"""
    name: 1INCHDOWNUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEINCHUPUSDT(Symbol):
    """
        name: 1INCHUPUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "1INCHUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHUPUSDT"

    def __str__(self):
        return "1INCHUPUSDT"

    def __call__(self):
        return "1INCHUPUSDT"


ONEINCHUPUSDT = ONEINCHUPUSDT(*ONEINCHUPUSDT._fields)
"""
    name: 1INCHUPUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEINCHUSDT(Symbol):
    """
        name: 1INCHUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "1INCHUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHUSDT"

    def __str__(self):
        return "1INCHUSDT"

    def __call__(self):
        return "1INCHUSDT"


ONEINCHUSDT = ONEINCHUSDT(*ONEINCHUSDT._fields)
"""
    name: 1INCHUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AAVEBKRW(Symbol):
    """
        name: AAVEBKRW
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEBKRW"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBKRW"

    def __str__(self):
        return "AAVEBKRW"

    def __call__(self):
        return "AAVEBKRW"


AAVEBKRW = AAVEBKRW(*AAVEBKRW._fields)
"""
    name: AAVEBKRW
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEBNB(Symbol):
    """
        name: AAVEBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBNB"

    def __str__(self):
        return "AAVEBNB"

    def __call__(self):
        return "AAVEBNB"


AAVEBNB = AAVEBNB(*AAVEBNB._fields)
"""
    name: AAVEBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEBRL(Symbol):
    """
        name: AAVEBRL
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEBRL"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBRL"

    def __str__(self):
        return "AAVEBRL"

    def __call__(self):
        return "AAVEBRL"


AAVEBRL = AAVEBRL(*AAVEBRL._fields)
"""
    name: AAVEBRL
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEBTC(Symbol):
    """
        name: AAVEBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AAVEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBTC"

    def __str__(self):
        return "AAVEBTC"

    def __call__(self):
        return "AAVEBTC"


AAVEBTC = AAVEBTC(*AAVEBTC._fields)
"""
    name: AAVEBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AAVEBUSD(Symbol):
    """
        name: AAVEBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBUSD"

    def __str__(self):
        return "AAVEBUSD"

    def __call__(self):
        return "AAVEBUSD"


AAVEBUSD = AAVEBUSD(*AAVEBUSD._fields)
"""
    name: AAVEBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEDOWNUSDT(Symbol):
    """
        name: AAVEDOWNUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEDOWNUSDT"

    def __str__(self):
        return "AAVEDOWNUSDT"

    def __call__(self):
        return "AAVEDOWNUSDT"


AAVEDOWNUSDT = AAVEDOWNUSDT(*AAVEDOWNUSDT._fields)
"""
    name: AAVEDOWNUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEETH(Symbol):
    """
        name: AAVEETH
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEETH"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEETH"

    def __str__(self):
        return "AAVEETH"

    def __call__(self):
        return "AAVEETH"


AAVEETH = AAVEETH(*AAVEETH._fields)
"""
    name: AAVEETH
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEUPUSDT(Symbol):
    """
        name: AAVEUPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEUPUSDT"

    def __str__(self):
        return "AAVEUPUSDT"

    def __call__(self):
        return "AAVEUPUSDT"


AAVEUPUSDT = AAVEUPUSDT(*AAVEUPUSDT._fields)
"""
    name: AAVEUPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEUSDT(Symbol):
    """
        name: AAVEUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AAVEUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEUSDT"

    def __str__(self):
        return "AAVEUSDT"

    def __call__(self):
        return "AAVEUSDT"


AAVEUSDT = AAVEUSDT(*AAVEUSDT._fields)
"""
    name: AAVEUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ACABTC(Symbol):
    """
        name: ACABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACABTC"

    def __str__(self):
        return "ACABTC"

    def __call__(self):
        return "ACABTC"


ACABTC = ACABTC(*ACABTC._fields)
"""
    name: ACABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACABUSD(Symbol):
    """
        name: ACABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACABUSD"

    def __str__(self):
        return "ACABUSD"

    def __call__(self):
        return "ACABUSD"


ACABUSD = ACABUSD(*ACABUSD._fields)
"""
    name: ACABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACAUSDT(Symbol):
    """
        name: ACAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACAUSDT"

    def __str__(self):
        return "ACAUSDT"

    def __call__(self):
        return "ACAUSDT"


ACAUSDT = ACAUSDT(*ACAUSDT._fields)
"""
    name: ACAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACHBTC(Symbol):
    """
        name: ACHBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACHBTC"

    def __str__(self):
        return "ACHBTC"

    def __call__(self):
        return "ACHBTC"


ACHBTC = ACHBTC(*ACHBTC._fields)
"""
    name: ACHBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACHBUSD(Symbol):
    """
        name: ACHBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ACHBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACHBUSD"

    def __str__(self):
        return "ACHBUSD"

    def __call__(self):
        return "ACHBUSD"


ACHBUSD = ACHBUSD(*ACHBUSD._fields)
"""
    name: ACHBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ACHTRY(Symbol):
    """
        name: ACHTRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACHTRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACHTRY"

    def __str__(self):
        return "ACHTRY"

    def __call__(self):
        return "ACHTRY"


ACHTRY = ACHTRY(*ACHTRY._fields)
"""
    name: ACHTRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ACHUSDT(Symbol):
    """
        name: ACHUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ACHUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACHUSDT"

    def __str__(self):
        return "ACHUSDT"

    def __call__(self):
        return "ACHUSDT"


ACHUSDT = ACHUSDT(*ACHUSDT._fields)
"""
    name: ACHUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ACMBTC(Symbol):
    """
        name: ACMBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACMBTC"

    def __str__(self):
        return "ACMBTC"

    def __call__(self):
        return "ACMBTC"


ACMBTC = ACMBTC(*ACMBTC._fields)
"""
    name: ACMBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACMBUSD(Symbol):
    """
        name: ACMBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACMBUSD"

    def __str__(self):
        return "ACMBUSD"

    def __call__(self):
        return "ACMBUSD"


ACMBUSD = ACMBUSD(*ACMBUSD._fields)
"""
    name: ACMBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACMUSDT(Symbol):
    """
        name: ACMUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACMUSDT"

    def __str__(self):
        return "ACMUSDT"

    def __call__(self):
        return "ACMUSDT"


ACMUSDT = ACMUSDT(*ACMUSDT._fields)
"""
    name: ACMUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAAUD(Symbol):
    """
        name: ADAAUD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAAUD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAAUD"

    def __str__(self):
        return "ADAAUD"

    def __call__(self):
        return "ADAAUD"


ADAAUD = ADAAUD(*ADAAUD._fields)
"""
    name: ADAAUD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADABIDR(Symbol):
    """
        name: ADABIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ADABIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABIDR"

    def __str__(self):
        return "ADABIDR"

    def __call__(self):
        return "ADABIDR"


ADABIDR = ADABIDR(*ADABIDR._fields)
"""
    name: ADABIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ADABKRW(Symbol):
    """
        name: ADABKRW
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADABKRW"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABKRW"

    def __str__(self):
        return "ADABKRW"

    def __call__(self):
        return "ADABKRW"


ADABKRW = ADABKRW(*ADABKRW._fields)
"""
    name: ADABKRW
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADABNB(Symbol):
    """
        name: ADABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABNB"

    def __str__(self):
        return "ADABNB"

    def __call__(self):
        return "ADABNB"


ADABNB = ADABNB(*ADABNB._fields)
"""
    name: ADABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADABRL(Symbol):
    """
        name: ADABRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADABRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABRL"

    def __str__(self):
        return "ADABRL"

    def __call__(self):
        return "ADABRL"


ADABRL = ADABRL(*ADABRL._fields)
"""
    name: ADABRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADABTC(Symbol):
    """
        name: ADABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ADABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABTC"

    def __str__(self):
        return "ADABTC"

    def __call__(self):
        return "ADABTC"


ADABTC = ADABTC(*ADABTC._fields)
"""
    name: ADABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ADABUSD(Symbol):
    """
        name: ADABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ADABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABUSD"

    def __str__(self):
        return "ADABUSD"

    def __call__(self):
        return "ADABUSD"


ADABUSD = ADABUSD(*ADABUSD._fields)
"""
    name: ADABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ADADOWNUSDT(Symbol):
    """
        name: ADADOWNUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADADOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADADOWNUSDT"

    def __str__(self):
        return "ADADOWNUSDT"

    def __call__(self):
        return "ADADOWNUSDT"


ADADOWNUSDT = ADADOWNUSDT(*ADADOWNUSDT._fields)
"""
    name: ADADOWNUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAETH(Symbol):
    """
        name: ADAETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ADAETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAETH"

    def __str__(self):
        return "ADAETH"

    def __call__(self):
        return "ADAETH"


ADAETH = ADAETH(*ADAETH._fields)
"""
    name: ADAETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ADAEUR(Symbol):
    """
        name: ADAEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAEUR"

    def __str__(self):
        return "ADAEUR"

    def __call__(self):
        return "ADAEUR"


ADAEUR = ADAEUR(*ADAEUR._fields)
"""
    name: ADAEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAGBP(Symbol):
    """
        name: ADAGBP
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAGBP"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAGBP"

    def __str__(self):
        return "ADAGBP"

    def __call__(self):
        return "ADAGBP"


ADAGBP = ADAGBP(*ADAGBP._fields)
"""
    name: ADAGBP
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAPAX(Symbol):
    """
        name: ADAPAX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAPAX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAPAX"

    def __str__(self):
        return "ADAPAX"

    def __call__(self):
        return "ADAPAX"


ADAPAX = ADAPAX(*ADAPAX._fields)
"""
    name: ADAPAX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADARUB(Symbol):
    """
        name: ADARUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADARUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADARUB"

    def __str__(self):
        return "ADARUB"

    def __call__(self):
        return "ADARUB"


ADARUB = ADARUB(*ADARUB._fields)
"""
    name: ADARUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ADATRY(Symbol):
    """
        name: ADATRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADATRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADATRY"

    def __str__(self):
        return "ADATRY"

    def __call__(self):
        return "ADATRY"


ADATRY = ADATRY(*ADATRY._fields)
"""
    name: ADATRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ADATUSD(Symbol):
    """
        name: ADATUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADATUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADATUSD"

    def __str__(self):
        return "ADATUSD"

    def __call__(self):
        return "ADATUSD"


ADATUSD = ADATUSD(*ADATUSD._fields)
"""
    name: ADATUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAUPUSDT(Symbol):
    """
        name: ADAUPUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAUPUSDT"

    def __str__(self):
        return "ADAUPUSDT"

    def __call__(self):
        return "ADAUPUSDT"


ADAUPUSDT = ADAUPUSDT(*ADAUPUSDT._fields)
"""
    name: ADAUPUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAUSDC(Symbol):
    """
        name: ADAUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAUSDC"

    def __str__(self):
        return "ADAUSDC"

    def __call__(self):
        return "ADAUSDC"


ADAUSDC = ADAUSDC(*ADAUSDC._fields)
"""
    name: ADAUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAUSDT(Symbol):
    """
        name: ADAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ADAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAUSDT"

    def __str__(self):
        return "ADAUSDT"

    def __call__(self):
        return "ADAUSDT"


ADAUSDT = ADAUSDT(*ADAUSDT._fields)
"""
    name: ADAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ADXBNB(Symbol):
    """
        name: ADXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXBNB"

    def __str__(self):
        return "ADXBNB"

    def __call__(self):
        return "ADXBNB"


ADXBNB = ADXBNB(*ADXBNB._fields)
"""
    name: ADXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADXBTC(Symbol):
    """
        name: ADXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXBTC"

    def __str__(self):
        return "ADXBTC"

    def __call__(self):
        return "ADXBTC"


ADXBTC = ADXBTC(*ADXBTC._fields)
"""
    name: ADXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADXBUSD(Symbol):
    """
        name: ADXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXBUSD"

    def __str__(self):
        return "ADXBUSD"

    def __call__(self):
        return "ADXBUSD"


ADXBUSD = ADXBUSD(*ADXBUSD._fields)
"""
    name: ADXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADXETH(Symbol):
    """
        name: ADXETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXETH"

    def __str__(self):
        return "ADXETH"

    def __call__(self):
        return "ADXETH"


ADXETH = ADXETH(*ADXETH._fields)
"""
    name: ADXETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADXUSDT(Symbol):
    """
        name: ADXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXUSDT"

    def __str__(self):
        return "ADXUSDT"

    def __call__(self):
        return "ADXUSDT"


ADXUSDT = ADXUSDT(*ADXUSDT._fields)
"""
    name: ADXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AEBNB(Symbol):
    """
        name: AEBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AEBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AEBNB"

    def __str__(self):
        return "AEBNB"

    def __call__(self):
        return "AEBNB"


AEBNB = AEBNB(*AEBNB._fields)
"""
    name: AEBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AEBTC(Symbol):
    """
        name: AEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AEBTC"

    def __str__(self):
        return "AEBTC"

    def __call__(self):
        return "AEBTC"


AEBTC = AEBTC(*AEBTC._fields)
"""
    name: AEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AEETH(Symbol):
    """
        name: AEETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AEETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AEETH"

    def __str__(self):
        return "AEETH"

    def __call__(self):
        return "AEETH"


AEETH = AEETH(*AEETH._fields)
"""
    name: AEETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AERGOBTC(Symbol):
    """
        name: AERGOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AERGOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGOBTC"

    def __str__(self):
        return "AERGOBTC"

    def __call__(self):
        return "AERGOBTC"


AERGOBTC = AERGOBTC(*AERGOBTC._fields)
"""
    name: AERGOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AERGOBUSD(Symbol):
    """
        name: AERGOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AERGOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGOBUSD"

    def __str__(self):
        return "AERGOBUSD"

    def __call__(self):
        return "AERGOBUSD"


AERGOBUSD = AERGOBUSD(*AERGOBUSD._fields)
"""
    name: AERGOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AERGOUSDT(Symbol):
    """
        name: AERGOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AERGOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGOUSDT"

    def __str__(self):
        return "AERGOUSDT"

    def __call__(self):
        return "AERGOUSDT"


AERGOUSDT = AERGOUSDT(*AERGOUSDT._fields)
"""
    name: AERGOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIBNB(Symbol):
    """
        name: AGIBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIBNB"

    def __str__(self):
        return "AGIBNB"

    def __call__(self):
        return "AGIBNB"


AGIBNB = AGIBNB(*AGIBNB._fields)
"""
    name: AGIBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIBTC(Symbol):
    """
        name: AGIBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIBTC"

    def __str__(self):
        return "AGIBTC"

    def __call__(self):
        return "AGIBTC"


AGIBTC = AGIBTC(*AGIBTC._fields)
"""
    name: AGIBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIETH(Symbol):
    """
        name: AGIETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGIETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIETH"

    def __str__(self):
        return "AGIETH"

    def __call__(self):
        return "AGIETH"


AGIETH = AGIETH(*AGIETH._fields)
"""
    name: AGIETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIXBTC(Symbol):
    """
        name: AGIXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AGIXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIXBTC"

    def __str__(self):
        return "AGIXBTC"

    def __call__(self):
        return "AGIXBTC"


AGIXBTC = AGIXBTC(*AGIXBTC._fields)
"""
    name: AGIXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AGIXBUSD(Symbol):
    """
        name: AGIXBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AGIXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIXBUSD"

    def __str__(self):
        return "AGIXBUSD"

    def __call__(self):
        return "AGIXBUSD"


AGIXBUSD = AGIXBUSD(*AGIXBUSD._fields)
"""
    name: AGIXBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AGIXTRY(Symbol):
    """
        name: AGIXTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGIXTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIXTRY"

    def __str__(self):
        return "AGIXTRY"

    def __call__(self):
        return "AGIXTRY"


AGIXTRY = AGIXTRY(*AGIXTRY._fields)
"""
    name: AGIXTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIXUSDT(Symbol):
    """
        name: AGIXUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AGIXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIXUSDT"

    def __str__(self):
        return "AGIXUSDT"

    def __call__(self):
        return "AGIXUSDT"


AGIXUSDT = AGIXUSDT(*AGIXUSDT._fields)
"""
    name: AGIXUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AGLDBNB(Symbol):
    """
        name: AGLDBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGLDBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLDBNB"

    def __str__(self):
        return "AGLDBNB"

    def __call__(self):
        return "AGLDBNB"


AGLDBNB = AGLDBNB(*AGLDBNB._fields)
"""
    name: AGLDBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGLDBTC(Symbol):
    """
        name: AGLDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGLDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLDBTC"

    def __str__(self):
        return "AGLDBTC"

    def __call__(self):
        return "AGLDBTC"


AGLDBTC = AGLDBTC(*AGLDBTC._fields)
"""
    name: AGLDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGLDBUSD(Symbol):
    """
        name: AGLDBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGLDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLDBUSD"

    def __str__(self):
        return "AGLDBUSD"

    def __call__(self):
        return "AGLDBUSD"


AGLDBUSD = AGLDBUSD(*AGLDBUSD._fields)
"""
    name: AGLDBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGLDUSDT(Symbol):
    """
        name: AGLDUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGLDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLDUSDT"

    def __str__(self):
        return "AGLDUSDT"

    def __call__(self):
        return "AGLDUSDT"


AGLDUSDT = AGLDUSDT(*AGLDUSDT._fields)
"""
    name: AGLDUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONBNB(Symbol):
    """
        name: AIONBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONBNB"

    def __str__(self):
        return "AIONBNB"

    def __call__(self):
        return "AIONBNB"


AIONBNB = AIONBNB(*AIONBNB._fields)
"""
    name: AIONBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONBTC(Symbol):
    """
        name: AIONBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONBTC"

    def __str__(self):
        return "AIONBTC"

    def __call__(self):
        return "AIONBTC"


AIONBTC = AIONBTC(*AIONBTC._fields)
"""
    name: AIONBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONBUSD(Symbol):
    """
        name: AIONBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONBUSD"

    def __str__(self):
        return "AIONBUSD"

    def __call__(self):
        return "AIONBUSD"


AIONBUSD = AIONBUSD(*AIONBUSD._fields)
"""
    name: AIONBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONETH(Symbol):
    """
        name: AIONETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONETH"

    def __str__(self):
        return "AIONETH"

    def __call__(self):
        return "AIONETH"


AIONETH = AIONETH(*AIONETH._fields)
"""
    name: AIONETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONUSDT(Symbol):
    """
        name: AIONUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONUSDT"

    def __str__(self):
        return "AIONUSDT"

    def __call__(self):
        return "AIONUSDT"


AIONUSDT = AIONUSDT(*AIONUSDT._fields)
"""
    name: AIONUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AKROBTC(Symbol):
    """
        name: AKROBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AKROBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKROBTC"

    def __str__(self):
        return "AKROBTC"

    def __call__(self):
        return "AKROBTC"


AKROBTC = AKROBTC(*AKROBTC._fields)
"""
    name: AKROBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AKROBUSD(Symbol):
    """
        name: AKROBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AKROBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKROBUSD"

    def __str__(self):
        return "AKROBUSD"

    def __call__(self):
        return "AKROBUSD"


AKROBUSD = AKROBUSD(*AKROBUSD._fields)
"""
    name: AKROBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AKROUSDT(Symbol):
    """
        name: AKROUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AKROUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKROUSDT"

    def __str__(self):
        return "AKROUSDT"

    def __call__(self):
        return "AKROUSDT"


AKROUSDT = AKROUSDT(*AKROUSDT._fields)
"""
    name: AKROUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALCXBTC(Symbol):
    """
        name: ALCXBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALCXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALCXBTC"

    def __str__(self):
        return "ALCXBTC"

    def __call__(self):
        return "ALCXBTC"


ALCXBTC = ALCXBTC(*ALCXBTC._fields)
"""
    name: ALCXBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALCXBUSD(Symbol):
    """
        name: ALCXBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALCXBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALCXBUSD"

    def __str__(self):
        return "ALCXBUSD"

    def __call__(self):
        return "ALCXBUSD"


ALCXBUSD = ALCXBUSD(*ALCXBUSD._fields)
"""
    name: ALCXBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALCXUSDT(Symbol):
    """
        name: ALCXUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALCXUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALCXUSDT"

    def __str__(self):
        return "ALCXUSDT"

    def __call__(self):
        return "ALCXUSDT"


ALCXUSDT = ALCXUSDT(*ALCXUSDT._fields)
"""
    name: ALCXUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALGOBIDR(Symbol):
    """
        name: ALGOBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOBIDR"

    def __str__(self):
        return "ALGOBIDR"

    def __call__(self):
        return "ALGOBIDR"


ALGOBIDR = ALGOBIDR(*ALGOBIDR._fields)
"""
    name: ALGOBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ALGOBNB(Symbol):
    """
        name: ALGOBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOBNB"

    def __str__(self):
        return "ALGOBNB"

    def __call__(self):
        return "ALGOBNB"


ALGOBNB = ALGOBNB(*ALGOBNB._fields)
"""
    name: ALGOBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOBTC(Symbol):
    """
        name: ALGOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALGOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOBTC"

    def __str__(self):
        return "ALGOBTC"

    def __call__(self):
        return "ALGOBTC"


ALGOBTC = ALGOBTC(*ALGOBTC._fields)
"""
    name: ALGOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALGOBUSD(Symbol):
    """
        name: ALGOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALGOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOBUSD"

    def __str__(self):
        return "ALGOBUSD"

    def __call__(self):
        return "ALGOBUSD"


ALGOBUSD = ALGOBUSD(*ALGOBUSD._fields)
"""
    name: ALGOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALGOETH(Symbol):
    """
        name: ALGOETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOETH"

    def __str__(self):
        return "ALGOETH"

    def __call__(self):
        return "ALGOETH"


ALGOETH = ALGOETH(*ALGOETH._fields)
"""
    name: ALGOETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOPAX(Symbol):
    """
        name: ALGOPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOPAX"

    def __str__(self):
        return "ALGOPAX"

    def __call__(self):
        return "ALGOPAX"


ALGOPAX = ALGOPAX(*ALGOPAX._fields)
"""
    name: ALGOPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGORUB(Symbol):
    """
        name: ALGORUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGORUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGORUB"

    def __str__(self):
        return "ALGORUB"

    def __call__(self):
        return "ALGORUB"


ALGORUB = ALGORUB(*ALGORUB._fields)
"""
    name: ALGORUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOTRY(Symbol):
    """
        name: ALGOTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOTRY"

    def __str__(self):
        return "ALGOTRY"

    def __call__(self):
        return "ALGOTRY"


ALGOTRY = ALGOTRY(*ALGOTRY._fields)
"""
    name: ALGOTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOTUSD(Symbol):
    """
        name: ALGOTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOTUSD"

    def __str__(self):
        return "ALGOTUSD"

    def __call__(self):
        return "ALGOTUSD"


ALGOTUSD = ALGOTUSD(*ALGOTUSD._fields)
"""
    name: ALGOTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOUSDC(Symbol):
    """
        name: ALGOUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOUSDC"

    def __str__(self):
        return "ALGOUSDC"

    def __call__(self):
        return "ALGOUSDC"


ALGOUSDC = ALGOUSDC(*ALGOUSDC._fields)
"""
    name: ALGOUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOUSDT(Symbol):
    """
        name: ALGOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALGOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOUSDT"

    def __str__(self):
        return "ALGOUSDT"

    def __call__(self):
        return "ALGOUSDT"


ALGOUSDT = ALGOUSDT(*ALGOUSDT._fields)
"""
    name: ALGOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALICEBIDR(Symbol):
    """
        name: ALICEBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ALICEBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEBIDR"

    def __str__(self):
        return "ALICEBIDR"

    def __call__(self):
        return "ALICEBIDR"


ALICEBIDR = ALICEBIDR(*ALICEBIDR._fields)
"""
    name: ALICEBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ALICEBNB(Symbol):
    """
        name: ALICEBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALICEBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEBNB"

    def __str__(self):
        return "ALICEBNB"

    def __call__(self):
        return "ALICEBNB"


ALICEBNB = ALICEBNB(*ALICEBNB._fields)
"""
    name: ALICEBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALICEBTC(Symbol):
    """
        name: ALICEBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALICEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEBTC"

    def __str__(self):
        return "ALICEBTC"

    def __call__(self):
        return "ALICEBTC"


ALICEBTC = ALICEBTC(*ALICEBTC._fields)
"""
    name: ALICEBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALICEBUSD(Symbol):
    """
        name: ALICEBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALICEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEBUSD"

    def __str__(self):
        return "ALICEBUSD"

    def __call__(self):
        return "ALICEBUSD"


ALICEBUSD = ALICEBUSD(*ALICEBUSD._fields)
"""
    name: ALICEBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALICETRY(Symbol):
    """
        name: ALICETRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALICETRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICETRY"

    def __str__(self):
        return "ALICETRY"

    def __call__(self):
        return "ALICETRY"


ALICETRY = ALICETRY(*ALICETRY._fields)
"""
    name: ALICETRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ALICEUSDT(Symbol):
    """
        name: ALICEUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALICEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEUSDT"

    def __str__(self):
        return "ALICEUSDT"

    def __call__(self):
        return "ALICEUSDT"


ALICEUSDT = ALICEUSDT(*ALICEUSDT._fields)
"""
    name: ALICEUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALPACABNB(Symbol):
    """
        name: ALPACABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPACABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPACABNB"

    def __str__(self):
        return "ALPACABNB"

    def __call__(self):
        return "ALPACABNB"


ALPACABNB = ALPACABNB(*ALPACABNB._fields)
"""
    name: ALPACABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPACABTC(Symbol):
    """
        name: ALPACABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPACABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPACABTC"

    def __str__(self):
        return "ALPACABTC"

    def __call__(self):
        return "ALPACABTC"


ALPACABTC = ALPACABTC(*ALPACABTC._fields)
"""
    name: ALPACABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPACABUSD(Symbol):
    """
        name: ALPACABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPACABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPACABUSD"

    def __str__(self):
        return "ALPACABUSD"

    def __call__(self):
        return "ALPACABUSD"


ALPACABUSD = ALPACABUSD(*ALPACABUSD._fields)
"""
    name: ALPACABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPACAUSDT(Symbol):
    """
        name: ALPACAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPACAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPACAUSDT"

    def __str__(self):
        return "ALPACAUSDT"

    def __call__(self):
        return "ALPACAUSDT"


ALPACAUSDT = ALPACAUSDT(*ALPACAUSDT._fields)
"""
    name: ALPACAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPHABNB(Symbol):
    """
        name: ALPHABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPHABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHABNB"

    def __str__(self):
        return "ALPHABNB"

    def __call__(self):
        return "ALPHABNB"


ALPHABNB = ALPHABNB(*ALPHABNB._fields)
"""
    name: ALPHABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPHABTC(Symbol):
    """
        name: ALPHABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALPHABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHABTC"

    def __str__(self):
        return "ALPHABTC"

    def __call__(self):
        return "ALPHABTC"


ALPHABTC = ALPHABTC(*ALPHABTC._fields)
"""
    name: ALPHABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALPHABUSD(Symbol):
    """
        name: ALPHABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPHABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHABUSD"

    def __str__(self):
        return "ALPHABUSD"

    def __call__(self):
        return "ALPHABUSD"


ALPHABUSD = ALPHABUSD(*ALPHABUSD._fields)
"""
    name: ALPHABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPHAUSDT(Symbol):
    """
        name: ALPHAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALPHAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHAUSDT"

    def __str__(self):
        return "ALPHAUSDT"

    def __call__(self):
        return "ALPHAUSDT"


ALPHAUSDT = ALPHAUSDT(*ALPHAUSDT._fields)
"""
    name: ALPHAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALPINEBTC(Symbol):
    """
        name: ALPINEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINEBTC"

    def __str__(self):
        return "ALPINEBTC"

    def __call__(self):
        return "ALPINEBTC"


ALPINEBTC = ALPINEBTC(*ALPINEBTC._fields)
"""
    name: ALPINEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPINEBUSD(Symbol):
    """
        name: ALPINEBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINEBUSD"

    def __str__(self):
        return "ALPINEBUSD"

    def __call__(self):
        return "ALPINEBUSD"


ALPINEBUSD = ALPINEBUSD(*ALPINEBUSD._fields)
"""
    name: ALPINEBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPINEEUR(Symbol):
    """
        name: ALPINEEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINEEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINEEUR"

    def __str__(self):
        return "ALPINEEUR"

    def __call__(self):
        return "ALPINEEUR"


ALPINEEUR = ALPINEEUR(*ALPINEEUR._fields)
"""
    name: ALPINEEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPINETRY(Symbol):
    """
        name: ALPINETRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINETRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINETRY"

    def __str__(self):
        return "ALPINETRY"

    def __call__(self):
        return "ALPINETRY"


ALPINETRY = ALPINETRY(*ALPINETRY._fields)
"""
    name: ALPINETRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPINEUSDT(Symbol):
    """
        name: ALPINEUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINEUSDT"

    def __str__(self):
        return "ALPINEUSDT"

    def __call__(self):
        return "ALPINEUSDT"


ALPINEUSDT = ALPINEUSDT(*ALPINEUSDT._fields)
"""
    name: ALPINEUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMBBNB(Symbol):
    """
        name: AMBBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMBBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBBNB"

    def __str__(self):
        return "AMBBNB"

    def __call__(self):
        return "AMBBNB"


AMBBNB = AMBBNB(*AMBBNB._fields)
"""
    name: AMBBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMBBTC(Symbol):
    """
        name: AMBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBBTC"

    def __str__(self):
        return "AMBBTC"

    def __call__(self):
        return "AMBBTC"


AMBBTC = AMBBTC(*AMBBTC._fields)
"""
    name: AMBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMBBUSD(Symbol):
    """
        name: AMBBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AMBBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBBUSD"

    def __str__(self):
        return "AMBBUSD"

    def __call__(self):
        return "AMBBUSD"


AMBBUSD = AMBBUSD(*AMBBUSD._fields)
"""
    name: AMBBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AMBETH(Symbol):
    """
        name: AMBETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMBETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBETH"

    def __str__(self):
        return "AMBETH"

    def __call__(self):
        return "AMBETH"


AMBETH = AMBETH(*AMBETH._fields)
"""
    name: AMBETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMBUSDT(Symbol):
    """
        name: AMBUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AMBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBUSDT"

    def __str__(self):
        return "AMBUSDT"

    def __call__(self):
        return "AMBUSDT"


AMBUSDT = AMBUSDT(*AMBUSDT._fields)
"""
    name: AMBUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AMPBNB(Symbol):
    """
        name: AMPBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPBNB"

    def __str__(self):
        return "AMPBNB"

    def __call__(self):
        return "AMPBNB"


AMPBNB = AMPBNB(*AMPBNB._fields)
"""
    name: AMPBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMPBTC(Symbol):
    """
        name: AMPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPBTC"

    def __str__(self):
        return "AMPBTC"

    def __call__(self):
        return "AMPBTC"


AMPBTC = AMPBTC(*AMPBTC._fields)
"""
    name: AMPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMPBUSD(Symbol):
    """
        name: AMPBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPBUSD"

    def __str__(self):
        return "AMPBUSD"

    def __call__(self):
        return "AMPBUSD"


AMPBUSD = AMPBUSD(*AMPBUSD._fields)
"""
    name: AMPBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMPUSDT(Symbol):
    """
        name: AMPUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPUSDT"

    def __str__(self):
        return "AMPUSDT"

    def __call__(self):
        return "AMPUSDT"


AMPUSDT = AMPUSDT(*AMPUSDT._fields)
"""
    name: AMPUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANCBNB(Symbol):
    """
        name: ANCBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANCBNB"

    def __str__(self):
        return "ANCBNB"

    def __call__(self):
        return "ANCBNB"


ANCBNB = ANCBNB(*ANCBNB._fields)
"""
    name: ANCBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANCBTC(Symbol):
    """
        name: ANCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANCBTC"

    def __str__(self):
        return "ANCBTC"

    def __call__(self):
        return "ANCBTC"


ANCBTC = ANCBTC(*ANCBTC._fields)
"""
    name: ANCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANCBUSD(Symbol):
    """
        name: ANCBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANCBUSD"

    def __str__(self):
        return "ANCBUSD"

    def __call__(self):
        return "ANCBUSD"


ANCBUSD = ANCBUSD(*ANCBUSD._fields)
"""
    name: ANCBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANCUSDT(Symbol):
    """
        name: ANCUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANCUSDT"

    def __str__(self):
        return "ANCUSDT"

    def __call__(self):
        return "ANCUSDT"


ANCUSDT = ANCUSDT(*ANCUSDT._fields)
"""
    name: ANCUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRBNB(Symbol):
    """
        name: ANKRBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRBNB"

    def __str__(self):
        return "ANKRBNB"

    def __call__(self):
        return "ANKRBNB"


ANKRBNB = ANKRBNB(*ANKRBNB._fields)
"""
    name: ANKRBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRBTC(Symbol):
    """
        name: ANKRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANKRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRBTC"

    def __str__(self):
        return "ANKRBTC"

    def __call__(self):
        return "ANKRBTC"


ANKRBTC = ANKRBTC(*ANKRBTC._fields)
"""
    name: ANKRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANKRBUSD(Symbol):
    """
        name: ANKRBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANKRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRBUSD"

    def __str__(self):
        return "ANKRBUSD"

    def __call__(self):
        return "ANKRBUSD"


ANKRBUSD = ANKRBUSD(*ANKRBUSD._fields)
"""
    name: ANKRBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANKRPAX(Symbol):
    """
        name: ANKRPAX
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRPAX"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRPAX"

    def __str__(self):
        return "ANKRPAX"

    def __call__(self):
        return "ANKRPAX"


ANKRPAX = ANKRPAX(*ANKRPAX._fields)
"""
    name: ANKRPAX
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRTRY(Symbol):
    """
        name: ANKRTRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRTRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRTRY"

    def __str__(self):
        return "ANKRTRY"

    def __call__(self):
        return "ANKRTRY"


ANKRTRY = ANKRTRY(*ANKRTRY._fields)
"""
    name: ANKRTRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRTUSD(Symbol):
    """
        name: ANKRTUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRTUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRTUSD"

    def __str__(self):
        return "ANKRTUSD"

    def __call__(self):
        return "ANKRTUSD"


ANKRTUSD = ANKRTUSD(*ANKRTUSD._fields)
"""
    name: ANKRTUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRUSDC(Symbol):
    """
        name: ANKRUSDC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRUSDC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRUSDC"

    def __str__(self):
        return "ANKRUSDC"

    def __call__(self):
        return "ANKRUSDC"


ANKRUSDC = ANKRUSDC(*ANKRUSDC._fields)
"""
    name: ANKRUSDC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRUSDT(Symbol):
    """
        name: ANKRUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANKRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRUSDT"

    def __str__(self):
        return "ANKRUSDT"

    def __call__(self):
        return "ANKRUSDT"


ANKRUSDT = ANKRUSDT(*ANKRUSDT._fields)
"""
    name: ANKRUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANTBNB(Symbol):
    """
        name: ANTBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANTBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANTBNB"

    def __str__(self):
        return "ANTBNB"

    def __call__(self):
        return "ANTBNB"


ANTBNB = ANTBNB(*ANTBNB._fields)
"""
    name: ANTBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANTBTC(Symbol):
    """
        name: ANTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANTBTC"

    def __str__(self):
        return "ANTBTC"

    def __call__(self):
        return "ANTBTC"


ANTBTC = ANTBTC(*ANTBTC._fields)
"""
    name: ANTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANTBUSD(Symbol):
    """
        name: ANTBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANTBUSD"

    def __str__(self):
        return "ANTBUSD"

    def __call__(self):
        return "ANTBUSD"


ANTBUSD = ANTBUSD(*ANTBUSD._fields)
"""
    name: ANTBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANTUSDT(Symbol):
    """
        name: ANTUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANTUSDT"

    def __str__(self):
        return "ANTUSDT"

    def __call__(self):
        return "ANTUSDT"


ANTUSDT = ANTUSDT(*ANTUSDT._fields)
"""
    name: ANTUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANYBTC(Symbol):
    """
        name: ANYBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANYBTC"

    def __str__(self):
        return "ANYBTC"

    def __call__(self):
        return "ANYBTC"


ANYBTC = ANYBTC(*ANYBTC._fields)
"""
    name: ANYBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANYBUSD(Symbol):
    """
        name: ANYBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANYBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANYBUSD"

    def __str__(self):
        return "ANYBUSD"

    def __call__(self):
        return "ANYBUSD"


ANYBUSD = ANYBUSD(*ANYBUSD._fields)
"""
    name: ANYBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANYUSDT(Symbol):
    """
        name: ANYUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANYUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANYUSDT"

    def __str__(self):
        return "ANYUSDT"

    def __call__(self):
        return "ANYUSDT"


ANYUSDT = ANYUSDT(*ANYUSDT._fields)
"""
    name: ANYUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEAUD(Symbol):
    """
        name: APEAUD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEAUD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEAUD"

    def __str__(self):
        return "APEAUD"

    def __call__(self):
        return "APEAUD"


APEAUD = APEAUD(*APEAUD._fields)
"""
    name: APEAUD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEBNB(Symbol):
    """
        name: APEBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEBNB"

    def __str__(self):
        return "APEBNB"

    def __call__(self):
        return "APEBNB"


APEBNB = APEBNB(*APEBNB._fields)
"""
    name: APEBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEBRL(Symbol):
    """
        name: APEBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEBRL"

    def __str__(self):
        return "APEBRL"

    def __call__(self):
        return "APEBRL"


APEBRL = APEBRL(*APEBRL._fields)
"""
    name: APEBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEBTC(Symbol):
    """
        name: APEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEBTC"

    def __str__(self):
        return "APEBTC"

    def __call__(self):
        return "APEBTC"


APEBTC = APEBTC(*APEBTC._fields)
"""
    name: APEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APEBUSD(Symbol):
    """
        name: APEBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEBUSD"

    def __str__(self):
        return "APEBUSD"

    def __call__(self):
        return "APEBUSD"


APEBUSD = APEBUSD(*APEBUSD._fields)
"""
    name: APEBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APEETH(Symbol):
    """
        name: APEETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APEETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEETH"

    def __str__(self):
        return "APEETH"

    def __call__(self):
        return "APEETH"


APEETH = APEETH(*APEETH._fields)
"""
    name: APEETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APEEUR(Symbol):
    """
        name: APEEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEEUR"

    def __str__(self):
        return "APEEUR"

    def __call__(self):
        return "APEEUR"


APEEUR = APEEUR(*APEEUR._fields)
"""
    name: APEEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEGBP(Symbol):
    """
        name: APEGBP
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEGBP"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEGBP"

    def __str__(self):
        return "APEGBP"

    def __call__(self):
        return "APEGBP"


APEGBP = APEGBP(*APEGBP._fields)
"""
    name: APEGBP
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APETRY(Symbol):
    """
        name: APETRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APETRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APETRY"

    def __str__(self):
        return "APETRY"

    def __call__(self):
        return "APETRY"


APETRY = APETRY(*APETRY._fields)
"""
    name: APETRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class APEUSDT(Symbol):
    """
        name: APEUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEUSDT"

    def __str__(self):
        return "APEUSDT"

    def __call__(self):
        return "APEUSDT"


APEUSDT = APEUSDT(*APEUSDT._fields)
"""
    name: APEUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class API3BNB(Symbol):
    """
        name: API3BNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "API3BNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3BNB"

    def __str__(self):
        return "API3BNB"

    def __call__(self):
        return "API3BNB"


API3BNB = API3BNB(*API3BNB._fields)
"""
    name: API3BNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class API3BTC(Symbol):
    """
        name: API3BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "API3BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3BTC"

    def __str__(self):
        return "API3BTC"

    def __call__(self):
        return "API3BTC"


API3BTC = API3BTC(*API3BTC._fields)
"""
    name: API3BTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class API3BUSD(Symbol):
    """
        name: API3BUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "API3BUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3BUSD"

    def __str__(self):
        return "API3BUSD"

    def __call__(self):
        return "API3BUSD"


API3BUSD = API3BUSD(*API3BUSD._fields)
"""
    name: API3BUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class API3TRY(Symbol):
    """
        name: API3TRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "API3TRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3TRY"

    def __str__(self):
        return "API3TRY"

    def __call__(self):
        return "API3TRY"


API3TRY = API3TRY(*API3TRY._fields)
"""
    name: API3TRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class API3USDT(Symbol):
    """
        name: API3USDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "API3USDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3USDT"

    def __str__(self):
        return "API3USDT"

    def __call__(self):
        return "API3USDT"


API3USDT = API3USDT(*API3USDT._fields)
"""
    name: API3USDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APPCBNB(Symbol):
    """
        name: APPCBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APPCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APPCBNB"

    def __str__(self):
        return "APPCBNB"

    def __call__(self):
        return "APPCBNB"


APPCBNB = APPCBNB(*APPCBNB._fields)
"""
    name: APPCBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APPCBTC(Symbol):
    """
        name: APPCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APPCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APPCBTC"

    def __str__(self):
        return "APPCBTC"

    def __call__(self):
        return "APPCBTC"


APPCBTC = APPCBTC(*APPCBTC._fields)
"""
    name: APPCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APPCETH(Symbol):
    """
        name: APPCETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APPCETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APPCETH"

    def __str__(self):
        return "APPCETH"

    def __call__(self):
        return "APPCETH"


APPCETH = APPCETH(*APPCETH._fields)
"""
    name: APPCETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTBRL(Symbol):
    """
        name: APTBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTBRL"

    def __str__(self):
        return "APTBRL"

    def __call__(self):
        return "APTBRL"


APTBRL = APTBRL(*APTBRL._fields)
"""
    name: APTBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTBTC(Symbol):
    """
        name: APTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTBTC"

    def __str__(self):
        return "APTBTC"

    def __call__(self):
        return "APTBTC"


APTBTC = APTBTC(*APTBTC._fields)
"""
    name: APTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTBUSD(Symbol):
    """
        name: APTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTBUSD"

    def __str__(self):
        return "APTBUSD"

    def __call__(self):
        return "APTBUSD"


APTBUSD = APTBUSD(*APTBUSD._fields)
"""
    name: APTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APTETH(Symbol):
    """
        name: APTETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTETH"

    def __str__(self):
        return "APTETH"

    def __call__(self):
        return "APTETH"


APTETH = APTETH(*APTETH._fields)
"""
    name: APTETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTEUR(Symbol):
    """
        name: APTEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTEUR"

    def __str__(self):
        return "APTEUR"

    def __call__(self):
        return "APTEUR"


APTEUR = APTEUR(*APTEUR._fields)
"""
    name: APTEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTTRY(Symbol):
    """
        name: APTTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTTRY"

    def __str__(self):
        return "APTTRY"

    def __call__(self):
        return "APTTRY"


APTTRY = APTTRY(*APTTRY._fields)
"""
    name: APTTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class APTUSDT(Symbol):
    """
        name: APTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTUSDT"

    def __str__(self):
        return "APTUSDT"

    def __call__(self):
        return "APTUSDT"


APTUSDT = APTUSDT(*APTUSDT._fields)
"""
    name: APTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARBBTC(Symbol):
    """
        name: ARBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBBTC"

    def __str__(self):
        return "ARBBTC"

    def __call__(self):
        return "ARBBTC"


ARBBTC = ARBBTC(*ARBBTC._fields)
"""
    name: ARBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARBEUR(Symbol):
    """
        name: ARBEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBEUR"

    def __str__(self):
        return "ARBEUR"

    def __call__(self):
        return "ARBEUR"


ARBEUR = ARBEUR(*ARBEUR._fields)
"""
    name: ARBEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBNB(Symbol):
    """
        name: ARBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBNB"

    def __str__(self):
        return "ARBNB"

    def __call__(self):
        return "ARBNB"


ARBNB = ARBNB(*ARBNB._fields)
"""
    name: ARBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBRUB(Symbol):
    """
        name: ARBRUB
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBRUB"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBRUB"

    def __str__(self):
        return "ARBRUB"

    def __call__(self):
        return "ARBRUB"


ARBRUB = ARBRUB(*ARBRUB._fields)
"""
    name: ARBRUB
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBTC(Symbol):
    """
        name: ARBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBTC"

    def __str__(self):
        return "ARBTC"

    def __call__(self):
        return "ARBTC"


ARBTC = ARBTC(*ARBTC._fields)
"""
    name: ARBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBTRY(Symbol):
    """
        name: ARBTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBTRY"

    def __str__(self):
        return "ARBTRY"

    def __call__(self):
        return "ARBTRY"


ARBTRY = ARBTRY(*ARBTRY._fields)
"""
    name: ARBTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBTUSD(Symbol):
    """
        name: ARBTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARBTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBTUSD"

    def __str__(self):
        return "ARBTUSD"

    def __call__(self):
        return "ARBTUSD"


ARBTUSD = ARBTUSD(*ARBTUSD._fields)
"""
    name: ARBTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARBUSD(Symbol):
    """
        name: ARBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBUSD"

    def __str__(self):
        return "ARBUSD"

    def __call__(self):
        return "ARBUSD"


ARBUSD = ARBUSD(*ARBUSD._fields)
"""
    name: ARBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBUSDT(Symbol):
    """
        name: ARBUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBUSDT"

    def __str__(self):
        return "ARBUSDT"

    def __call__(self):
        return "ARBUSDT"


ARBUSDT = ARBUSDT(*ARBUSDT._fields)
"""
    name: ARBUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARDRBNB(Symbol):
    """
        name: ARDRBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARDRBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARDRBNB"

    def __str__(self):
        return "ARDRBNB"

    def __call__(self):
        return "ARDRBNB"


ARDRBNB = ARDRBNB(*ARDRBNB._fields)
"""
    name: ARDRBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARDRBTC(Symbol):
    """
        name: ARDRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARDRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARDRBTC"

    def __str__(self):
        return "ARDRBTC"

    def __call__(self):
        return "ARDRBTC"


ARDRBTC = ARDRBTC(*ARDRBTC._fields)
"""
    name: ARDRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARDRETH(Symbol):
    """
        name: ARDRETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARDRETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARDRETH"

    def __str__(self):
        return "ARDRETH"

    def __call__(self):
        return "ARDRETH"


ARDRETH = ARDRETH(*ARDRETH._fields)
"""
    name: ARDRETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARDRUSDT(Symbol):
    """
        name: ARDRUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARDRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARDRUSDT"

    def __str__(self):
        return "ARDRUSDT"

    def __call__(self):
        return "ARDRUSDT"


ARDRUSDT = ARDRUSDT(*ARDRUSDT._fields)
"""
    name: ARDRUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARKBTC(Symbol):
    """
        name: ARKBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARKBTC"

    def __str__(self):
        return "ARKBTC"

    def __call__(self):
        return "ARKBTC"


ARKBTC = ARKBTC(*ARKBTC._fields)
"""
    name: ARKBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARKBUSD(Symbol):
    """
        name: ARKBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARKBUSD"

    def __str__(self):
        return "ARKBUSD"

    def __call__(self):
        return "ARKBUSD"


ARKBUSD = ARKBUSD(*ARKBUSD._fields)
"""
    name: ARKBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARKETH(Symbol):
    """
        name: ARKETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARKETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARKETH"

    def __str__(self):
        return "ARKETH"

    def __call__(self):
        return "ARKETH"


ARKETH = ARKETH(*ARKETH._fields)
"""
    name: ARKETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARNBTC(Symbol):
    """
        name: ARNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARNBTC"

    def __str__(self):
        return "ARNBTC"

    def __call__(self):
        return "ARNBTC"


ARNBTC = ARNBTC(*ARNBTC._fields)
"""
    name: ARNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARNETH(Symbol):
    """
        name: ARNETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARNETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARNETH"

    def __str__(self):
        return "ARNETH"

    def __call__(self):
        return "ARNETH"


ARNETH = ARNETH(*ARNETH._fields)
"""
    name: ARNETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPABNB(Symbol):
    """
        name: ARPABNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARPABNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPABNB"

    def __str__(self):
        return "ARPABNB"

    def __call__(self):
        return "ARPABNB"


ARPABNB = ARPABNB(*ARPABNB._fields)
"""
    name: ARPABNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPABTC(Symbol):
    """
        name: ARPABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARPABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPABTC"

    def __str__(self):
        return "ARPABTC"

    def __call__(self):
        return "ARPABTC"


ARPABTC = ARPABTC(*ARPABTC._fields)
"""
    name: ARPABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARPABUSD(Symbol):
    """
        name: ARPABUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARPABUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPABUSD"

    def __str__(self):
        return "ARPABUSD"

    def __call__(self):
        return "ARPABUSD"


ARPABUSD = ARPABUSD(*ARPABUSD._fields)
"""
    name: ARPABUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARPAETH(Symbol):
    """
        name: ARPAETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARPAETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPAETH"

    def __str__(self):
        return "ARPAETH"

    def __call__(self):
        return "ARPAETH"


ARPAETH = ARPAETH(*ARPAETH._fields)
"""
    name: ARPAETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPARUB(Symbol):
    """
        name: ARPARUB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARPARUB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPARUB"

    def __str__(self):
        return "ARPARUB"

    def __call__(self):
        return "ARPARUB"


ARPARUB = ARPARUB(*ARPARUB._fields)
"""
    name: ARPARUB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPATRY(Symbol):
    """
        name: ARPATRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARPATRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPATRY"

    def __str__(self):
        return "ARPATRY"

    def __call__(self):
        return "ARPATRY"


ARPATRY = ARPATRY(*ARPATRY._fields)
"""
    name: ARPATRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPAUSDT(Symbol):
    """
        name: ARPAUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARPAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPAUSDT"

    def __str__(self):
        return "ARPAUSDT"

    def __call__(self):
        return "ARPAUSDT"


ARPAUSDT = ARPAUSDT(*ARPAUSDT._fields)
"""
    name: ARPAUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARUSDT(Symbol):
    """
        name: ARUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARUSDT"

    def __str__(self):
        return "ARUSDT"

    def __call__(self):
        return "ARUSDT"


ARUSDT = ARUSDT(*ARUSDT._fields)
"""
    name: ARUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ASRBTC(Symbol):
    """
        name: ASRBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASRBTC"

    def __str__(self):
        return "ASRBTC"

    def __call__(self):
        return "ASRBTC"


ASRBTC = ASRBTC(*ASRBTC._fields)
"""
    name: ASRBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASRBUSD(Symbol):
    """
        name: ASRBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASRBUSD"

    def __str__(self):
        return "ASRBUSD"

    def __call__(self):
        return "ASRBUSD"


ASRBUSD = ASRBUSD(*ASRBUSD._fields)
"""
    name: ASRBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASRUSDT(Symbol):
    """
        name: ASRUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASRUSDT"

    def __str__(self):
        return "ASRUSDT"

    def __call__(self):
        return "ASRUSDT"


ASRUSDT = ASRUSDT(*ASRUSDT._fields)
"""
    name: ASRUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTBTC(Symbol):
    """
        name: ASTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTBTC"

    def __str__(self):
        return "ASTBTC"

    def __call__(self):
        return "ASTBTC"


ASTBTC = ASTBTC(*ASTBTC._fields)
"""
    name: ASTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTETH(Symbol):
    """
        name: ASTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTETH"

    def __str__(self):
        return "ASTETH"

    def __call__(self):
        return "ASTETH"


ASTETH = ASTETH(*ASTETH._fields)
"""
    name: ASTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTRBTC(Symbol):
    """
        name: ASTRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASTRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRBTC"

    def __str__(self):
        return "ASTRBTC"

    def __call__(self):
        return "ASTRBTC"


ASTRBTC = ASTRBTC(*ASTRBTC._fields)
"""
    name: ASTRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTRBUSD(Symbol):
    """
        name: ASTRBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ASTRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRBUSD"

    def __str__(self):
        return "ASTRBUSD"

    def __call__(self):
        return "ASTRBUSD"


ASTRBUSD = ASTRBUSD(*ASTRBUSD._fields)
"""
    name: ASTRBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ASTRETH(Symbol):
    """
        name: ASTRETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASTRETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRETH"

    def __str__(self):
        return "ASTRETH"

    def __call__(self):
        return "ASTRETH"


ASTRETH = ASTRETH(*ASTRETH._fields)
"""
    name: ASTRETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTRUSDT(Symbol):
    """
        name: ASTRUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ASTRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRUSDT"

    def __str__(self):
        return "ASTRUSDT"

    def __call__(self):
        return "ASTRUSDT"


ASTRUSDT = ASTRUSDT(*ASTRUSDT._fields)
"""
    name: ASTRUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ATABNB(Symbol):
    """
        name: ATABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATABNB"

    def __str__(self):
        return "ATABNB"

    def __call__(self):
        return "ATABNB"


ATABNB = ATABNB(*ATABNB._fields)
"""
    name: ATABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATABTC(Symbol):
    """
        name: ATABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATABTC"

    def __str__(self):
        return "ATABTC"

    def __call__(self):
        return "ATABTC"


ATABTC = ATABTC(*ATABTC._fields)
"""
    name: ATABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATABUSD(Symbol):
    """
        name: ATABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATABUSD"

    def __str__(self):
        return "ATABUSD"

    def __call__(self):
        return "ATABUSD"


ATABUSD = ATABUSD(*ATABUSD._fields)
"""
    name: ATABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATAUSDT(Symbol):
    """
        name: ATAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATAUSDT"

    def __str__(self):
        return "ATAUSDT"

    def __call__(self):
        return "ATAUSDT"


ATAUSDT = ATAUSDT(*ATAUSDT._fields)
"""
    name: ATAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATMBTC(Symbol):
    """
        name: ATMBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATMBTC"

    def __str__(self):
        return "ATMBTC"

    def __call__(self):
        return "ATMBTC"


ATMBTC = ATMBTC(*ATMBTC._fields)
"""
    name: ATMBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATMBUSD(Symbol):
    """
        name: ATMBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATMBUSD"

    def __str__(self):
        return "ATMBUSD"

    def __call__(self):
        return "ATMBUSD"


ATMBUSD = ATMBUSD(*ATMBUSD._fields)
"""
    name: ATMBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATMUSDT(Symbol):
    """
        name: ATMUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATMUSDT"

    def __str__(self):
        return "ATMUSDT"

    def __call__(self):
        return "ATMUSDT"


ATMUSDT = ATMUSDT(*ATMUSDT._fields)
"""
    name: ATMUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMBIDR(Symbol):
    """
        name: ATOMBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBIDR"

    def __str__(self):
        return "ATOMBIDR"

    def __call__(self):
        return "ATOMBIDR"


ATOMBIDR = ATOMBIDR(*ATOMBIDR._fields)
"""
    name: ATOMBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ATOMBNB(Symbol):
    """
        name: ATOMBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBNB"

    def __str__(self):
        return "ATOMBNB"

    def __call__(self):
        return "ATOMBNB"


ATOMBNB = ATOMBNB(*ATOMBNB._fields)
"""
    name: ATOMBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMBRL(Symbol):
    """
        name: ATOMBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBRL"

    def __str__(self):
        return "ATOMBRL"

    def __call__(self):
        return "ATOMBRL"


ATOMBRL = ATOMBRL(*ATOMBRL._fields)
"""
    name: ATOMBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMBTC(Symbol):
    """
        name: ATOMBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ATOMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBTC"

    def __str__(self):
        return "ATOMBTC"

    def __call__(self):
        return "ATOMBTC"


ATOMBTC = ATOMBTC(*ATOMBTC._fields)
"""
    name: ATOMBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ATOMBUSD(Symbol):
    """
        name: ATOMBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ATOMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBUSD"

    def __str__(self):
        return "ATOMBUSD"

    def __call__(self):
        return "ATOMBUSD"


ATOMBUSD = ATOMBUSD(*ATOMBUSD._fields)
"""
    name: ATOMBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ATOMETH(Symbol):
    """
        name: ATOMETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMETH"

    def __str__(self):
        return "ATOMETH"

    def __call__(self):
        return "ATOMETH"


ATOMETH = ATOMETH(*ATOMETH._fields)
"""
    name: ATOMETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMEUR(Symbol):
    """
        name: ATOMEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMEUR"

    def __str__(self):
        return "ATOMEUR"

    def __call__(self):
        return "ATOMEUR"


ATOMEUR = ATOMEUR(*ATOMEUR._fields)
"""
    name: ATOMEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMPAX(Symbol):
    """
        name: ATOMPAX
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMPAX"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMPAX"

    def __str__(self):
        return "ATOMPAX"

    def __call__(self):
        return "ATOMPAX"


ATOMPAX = ATOMPAX(*ATOMPAX._fields)
"""
    name: ATOMPAX
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMTRY(Symbol):
    """
        name: ATOMTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMTRY"

    def __str__(self):
        return "ATOMTRY"

    def __call__(self):
        return "ATOMTRY"


ATOMTRY = ATOMTRY(*ATOMTRY._fields)
"""
    name: ATOMTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMTUSD(Symbol):
    """
        name: ATOMTUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMTUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMTUSD"

    def __str__(self):
        return "ATOMTUSD"

    def __call__(self):
        return "ATOMTUSD"


ATOMTUSD = ATOMTUSD(*ATOMTUSD._fields)
"""
    name: ATOMTUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMUSDC(Symbol):
    """
        name: ATOMUSDC
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMUSDC"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMUSDC"

    def __str__(self):
        return "ATOMUSDC"

    def __call__(self):
        return "ATOMUSDC"


ATOMUSDC = ATOMUSDC(*ATOMUSDC._fields)
"""
    name: ATOMUSDC
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMUSDT(Symbol):
    """
        name: ATOMUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ATOMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMUSDT"

    def __str__(self):
        return "ATOMUSDT"

    def __call__(self):
        return "ATOMUSDT"


ATOMUSDT = ATOMUSDT(*ATOMUSDT._fields)
"""
    name: ATOMUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUCTIONBTC(Symbol):
    """
        name: AUCTIONBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUCTIONBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUCTIONBTC"

    def __str__(self):
        return "AUCTIONBTC"

    def __call__(self):
        return "AUCTIONBTC"


AUCTIONBTC = AUCTIONBTC(*AUCTIONBTC._fields)
"""
    name: AUCTIONBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUCTIONBUSD(Symbol):
    """
        name: AUCTIONBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUCTIONBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUCTIONBUSD"

    def __str__(self):
        return "AUCTIONBUSD"

    def __call__(self):
        return "AUCTIONBUSD"


AUCTIONBUSD = AUCTIONBUSD(*AUCTIONBUSD._fields)
"""
    name: AUCTIONBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUCTIONUSDT(Symbol):
    """
        name: AUCTIONUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUCTIONUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUCTIONUSDT"

    def __str__(self):
        return "AUCTIONUSDT"

    def __call__(self):
        return "AUCTIONUSDT"


AUCTIONUSDT = AUCTIONUSDT(*AUCTIONUSDT._fields)
"""
    name: AUCTIONUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUDBUSD(Symbol):
    """
        name: AUDBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDBUSD"

    def __str__(self):
        return "AUDBUSD"

    def __call__(self):
        return "AUDBUSD"


AUDBUSD = AUDBUSD(*AUDBUSD._fields)
"""
    name: AUDBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUDIOBTC(Symbol):
    """
        name: AUDIOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUDIOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIOBTC"

    def __str__(self):
        return "AUDIOBTC"

    def __call__(self):
        return "AUDIOBTC"


AUDIOBTC = AUDIOBTC(*AUDIOBTC._fields)
"""
    name: AUDIOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUDIOBUSD(Symbol):
    """
        name: AUDIOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUDIOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIOBUSD"

    def __str__(self):
        return "AUDIOBUSD"

    def __call__(self):
        return "AUDIOBUSD"


AUDIOBUSD = AUDIOBUSD(*AUDIOBUSD._fields)
"""
    name: AUDIOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUDIOTRY(Symbol):
    """
        name: AUDIOTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUDIOTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIOTRY"

    def __str__(self):
        return "AUDIOTRY"

    def __call__(self):
        return "AUDIOTRY"


AUDIOTRY = AUDIOTRY(*AUDIOTRY._fields)
"""
    name: AUDIOTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class AUDIOUSDT(Symbol):
    """
        name: AUDIOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUDIOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIOUSDT"

    def __str__(self):
        return "AUDIOUSDT"

    def __call__(self):
        return "AUDIOUSDT"


AUDIOUSDT = AUDIOUSDT(*AUDIOUSDT._fields)
"""
    name: AUDIOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUDUSDC(Symbol):
    """
        name: AUDUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUDUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDUSDC"

    def __str__(self):
        return "AUDUSDC"

    def __call__(self):
        return "AUDUSDC"


AUDUSDC = AUDUSDC(*AUDUSDC._fields)
"""
    name: AUDUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUDUSDT(Symbol):
    """
        name: AUDUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDUSDT"

    def __str__(self):
        return "AUDUSDT"

    def __call__(self):
        return "AUDUSDT"


AUDUSDT = AUDUSDT(*AUDUSDT._fields)
"""
    name: AUDUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUTOBTC(Symbol):
    """
        name: AUTOBTC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUTOBTC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUTOBTC"

    def __str__(self):
        return "AUTOBTC"

    def __call__(self):
        return "AUTOBTC"


AUTOBTC = AUTOBTC(*AUTOBTC._fields)
"""
    name: AUTOBTC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUTOBUSD(Symbol):
    """
        name: AUTOBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUTOBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUTOBUSD"

    def __str__(self):
        return "AUTOBUSD"

    def __call__(self):
        return "AUTOBUSD"


AUTOBUSD = AUTOBUSD(*AUTOBUSD._fields)
"""
    name: AUTOBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUTOUSDT(Symbol):
    """
        name: AUTOUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUTOUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUTOUSDT"

    def __str__(self):
        return "AUTOUSDT"

    def __call__(self):
        return "AUTOUSDT"


AUTOUSDT = AUTOUSDT(*AUTOUSDT._fields)
"""
    name: AUTOUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVABNB(Symbol):
    """
        name: AVABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVABNB"

    def __str__(self):
        return "AVABNB"

    def __call__(self):
        return "AVABNB"


AVABNB = AVABNB(*AVABNB._fields)
"""
    name: AVABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVABTC(Symbol):
    """
        name: AVABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVABTC"

    def __str__(self):
        return "AVABTC"

    def __call__(self):
        return "AVABTC"


AVABTC = AVABTC(*AVABTC._fields)
"""
    name: AVABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVABUSD(Symbol):
    """
        name: AVABUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVABUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVABUSD"

    def __str__(self):
        return "AVABUSD"

    def __call__(self):
        return "AVABUSD"


AVABUSD = AVABUSD(*AVABUSD._fields)
"""
    name: AVABUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AVAUSDT(Symbol):
    """
        name: AVAUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAUSDT"

    def __str__(self):
        return "AVAUSDT"

    def __call__(self):
        return "AVAUSDT"


AVAUSDT = AVAUSDT(*AVAUSDT._fields)
"""
    name: AVAUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AVAXAUD(Symbol):
    """
        name: AVAXAUD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXAUD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXAUD"

    def __str__(self):
        return "AVAXAUD"

    def __call__(self):
        return "AVAXAUD"


AVAXAUD = AVAXAUD(*AVAXAUD._fields)
"""
    name: AVAXAUD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXBIDR(Symbol):
    """
        name: AVAXBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBIDR"

    def __str__(self):
        return "AVAXBIDR"

    def __call__(self):
        return "AVAXBIDR"


AVAXBIDR = AVAXBIDR(*AVAXBIDR._fields)
"""
    name: AVAXBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class AVAXBNB(Symbol):
    """
        name: AVAXBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBNB"

    def __str__(self):
        return "AVAXBNB"

    def __call__(self):
        return "AVAXBNB"


AVAXBNB = AVAXBNB(*AVAXBNB._fields)
"""
    name: AVAXBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXBRL(Symbol):
    """
        name: AVAXBRL
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXBRL"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBRL"

    def __str__(self):
        return "AVAXBRL"

    def __call__(self):
        return "AVAXBRL"


AVAXBRL = AVAXBRL(*AVAXBRL._fields)
"""
    name: AVAXBRL
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXBTC(Symbol):
    """
        name: AVAXBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVAXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBTC"

    def __str__(self):
        return "AVAXBTC"

    def __call__(self):
        return "AVAXBTC"


AVAXBTC = AVAXBTC(*AVAXBTC._fields)
"""
    name: AVAXBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AVAXBUSD(Symbol):
    """
        name: AVAXBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVAXBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBUSD"

    def __str__(self):
        return "AVAXBUSD"

    def __call__(self):
        return "AVAXBUSD"


AVAXBUSD = AVAXBUSD(*AVAXBUSD._fields)
"""
    name: AVAXBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AVAXETH(Symbol):
    """
        name: AVAXETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXETH"

    def __str__(self):
        return "AVAXETH"

    def __call__(self):
        return "AVAXETH"


AVAXETH = AVAXETH(*AVAXETH._fields)
"""
    name: AVAXETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXEUR(Symbol):
    """
        name: AVAXEUR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXEUR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXEUR"

    def __str__(self):
        return "AVAXEUR"

    def __call__(self):
        return "AVAXEUR"


AVAXEUR = AVAXEUR(*AVAXEUR._fields)
"""
    name: AVAXEUR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXGBP(Symbol):
    """
        name: AVAXGBP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXGBP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXGBP"

    def __str__(self):
        return "AVAXGBP"

    def __call__(self):
        return "AVAXGBP"


AVAXGBP = AVAXGBP(*AVAXGBP._fields)
"""
    name: AVAXGBP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXTRY(Symbol):
    """
        name: AVAXTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXTRY"

    def __str__(self):
        return "AVAXTRY"

    def __call__(self):
        return "AVAXTRY"


AVAXTRY = AVAXTRY(*AVAXTRY._fields)
"""
    name: AVAXTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXUSDT(Symbol):
    """
        name: AVAXUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVAXUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXUSDT"

    def __str__(self):
        return "AVAXUSDT"

    def __call__(self):
        return "AVAXUSDT"


AVAXUSDT = AVAXUSDT(*AVAXUSDT._fields)
"""
    name: AVAXUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AXSAUD(Symbol):
    """
        name: AXSAUD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSAUD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSAUD"

    def __str__(self):
        return "AXSAUD"

    def __call__(self):
        return "AXSAUD"


AXSAUD = AXSAUD(*AXSAUD._fields)
"""
    name: AXSAUD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSBNB(Symbol):
    """
        name: AXSBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSBNB"

    def __str__(self):
        return "AXSBNB"

    def __call__(self):
        return "AXSBNB"


AXSBNB = AXSBNB(*AXSBNB._fields)
"""
    name: AXSBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSBRL(Symbol):
    """
        name: AXSBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSBRL"

    def __str__(self):
        return "AXSBRL"

    def __call__(self):
        return "AXSBRL"


AXSBRL = AXSBRL(*AXSBRL._fields)
"""
    name: AXSBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSBTC(Symbol):
    """
        name: AXSBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AXSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSBTC"

    def __str__(self):
        return "AXSBTC"

    def __call__(self):
        return "AXSBTC"


AXSBTC = AXSBTC(*AXSBTC._fields)
"""
    name: AXSBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AXSBUSD(Symbol):
    """
        name: AXSBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AXSBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSBUSD"

    def __str__(self):
        return "AXSBUSD"

    def __call__(self):
        return "AXSBUSD"


AXSBUSD = AXSBUSD(*AXSBUSD._fields)
"""
    name: AXSBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AXSETH(Symbol):
    """
        name: AXSETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSETH"

    def __str__(self):
        return "AXSETH"

    def __call__(self):
        return "AXSETH"


AXSETH = AXSETH(*AXSETH._fields)
"""
    name: AXSETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSTRY(Symbol):
    """
        name: AXSTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSTRY"

    def __str__(self):
        return "AXSTRY"

    def __call__(self):
        return "AXSTRY"


AXSTRY = AXSTRY(*AXSTRY._fields)
"""
    name: AXSTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSUSDT(Symbol):
    """
        name: AXSUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AXSUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSUSDT"

    def __str__(self):
        return "AXSUSDT"

    def __call__(self):
        return "AXSUSDT"


AXSUSDT = AXSUSDT(*AXSUSDT._fields)
"""
    name: AXSUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BADGERBTC(Symbol):
    """
        name: BADGERBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BADGERBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BADGERBTC"

    def __str__(self):
        return "BADGERBTC"

    def __call__(self):
        return "BADGERBTC"


BADGERBTC = BADGERBTC(*BADGERBTC._fields)
"""
    name: BADGERBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BADGERBUSD(Symbol):
    """
        name: BADGERBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BADGERBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BADGERBUSD"

    def __str__(self):
        return "BADGERBUSD"

    def __call__(self):
        return "BADGERBUSD"


BADGERBUSD = BADGERBUSD(*BADGERBUSD._fields)
"""
    name: BADGERBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BADGERUSDT(Symbol):
    """
        name: BADGERUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BADGERUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BADGERUSDT"

    def __str__(self):
        return "BADGERUSDT"

    def __call__(self):
        return "BADGERUSDT"


BADGERUSDT = BADGERUSDT(*BADGERUSDT._fields)
"""
    name: BADGERUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BAKEBNB(Symbol):
    """
        name: BAKEBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BAKEBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAKEBNB"

    def __str__(self):
        return "BAKEBNB"

    def __call__(self):
        return "BAKEBNB"


BAKEBNB = BAKEBNB(*BAKEBNB._fields)
"""
    name: BAKEBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BAKEBTC(Symbol):
    """
        name: BAKEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BAKEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAKEBTC"

    def __str__(self):
        return "BAKEBTC"

    def __call__(self):
        return "BAKEBTC"


BAKEBTC = BAKEBTC(*BAKEBTC._fields)
"""
    name: BAKEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BAKEBUSD(Symbol):
    """
        name: BAKEBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BAKEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAKEBUSD"

    def __str__(self):
        return "BAKEBUSD"

    def __call__(self):
        return "BAKEBUSD"


BAKEBUSD = BAKEBUSD(*BAKEBUSD._fields)
"""
    name: BAKEBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BAKEUSDT(Symbol):
    """
        name: BAKEUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BAKEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAKEUSDT"

    def __str__(self):
        return "BAKEUSDT"

    def __call__(self):
        return "BAKEUSDT"


BAKEUSDT = BAKEUSDT(*BAKEUSDT._fields)
"""
    name: BAKEUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BALBNB(Symbol):
    """
        name: BALBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BALBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BALBNB"

    def __str__(self):
        return "BALBNB"

    def __call__(self):
        return "BALBNB"


BALBNB = BALBNB(*BALBNB._fields)
"""
    name: BALBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BALBTC(Symbol):
    """
        name: BALBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BALBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BALBTC"

    def __str__(self):
        return "BALBTC"

    def __call__(self):
        return "BALBTC"


BALBTC = BALBTC(*BALBTC._fields)
"""
    name: BALBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BALBUSD(Symbol):
    """
        name: BALBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BALBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BALBUSD"

    def __str__(self):
        return "BALBUSD"

    def __call__(self):
        return "BALBUSD"


BALBUSD = BALBUSD(*BALBUSD._fields)
"""
    name: BALBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BALUSDT(Symbol):
    """
        name: BALUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BALUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BALUSDT"

    def __str__(self):
        return "BALUSDT"

    def __call__(self):
        return "BALUSDT"


BALUSDT = BALUSDT(*BALUSDT._fields)
"""
    name: BALUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BANDBNB(Symbol):
    """
        name: BANDBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BANDBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BANDBNB"

    def __str__(self):
        return "BANDBNB"

    def __call__(self):
        return "BANDBNB"


BANDBNB = BANDBNB(*BANDBNB._fields)
"""
    name: BANDBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BANDBTC(Symbol):
    """
        name: BANDBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BANDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BANDBTC"

    def __str__(self):
        return "BANDBTC"

    def __call__(self):
        return "BANDBTC"


BANDBTC = BANDBTC(*BANDBTC._fields)
"""
    name: BANDBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BANDBUSD(Symbol):
    """
        name: BANDBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BANDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BANDBUSD"

    def __str__(self):
        return "BANDBUSD"

    def __call__(self):
        return "BANDBUSD"


BANDBUSD = BANDBUSD(*BANDBUSD._fields)
"""
    name: BANDBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BANDUSDT(Symbol):
    """
        name: BANDUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BANDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BANDUSDT"

    def __str__(self):
        return "BANDUSDT"

    def __call__(self):
        return "BANDUSDT"


BANDUSDT = BANDUSDT(*BANDUSDT._fields)
"""
    name: BANDUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BARBTC(Symbol):
    """
        name: BARBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BARBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BARBTC"

    def __str__(self):
        return "BARBTC"

    def __call__(self):
        return "BARBTC"


BARBTC = BARBTC(*BARBTC._fields)
"""
    name: BARBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BARBUSD(Symbol):
    """
        name: BARBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BARBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BARBUSD"

    def __str__(self):
        return "BARBUSD"

    def __call__(self):
        return "BARBUSD"


BARBUSD = BARBUSD(*BARBUSD._fields)
"""
    name: BARBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BARUSDT(Symbol):
    """
        name: BARUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BARUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BARUSDT"

    def __str__(self):
        return "BARUSDT"

    def __call__(self):
        return "BARUSDT"


BARUSDT = BARUSDT(*BARUSDT._fields)
"""
    name: BARUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATBNB(Symbol):
    """
        name: BATBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATBNB"

    def __str__(self):
        return "BATBNB"

    def __call__(self):
        return "BATBNB"


BATBNB = BATBNB(*BATBNB._fields)
"""
    name: BATBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATBTC(Symbol):
    """
        name: BATBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BATBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATBTC"

    def __str__(self):
        return "BATBTC"

    def __call__(self):
        return "BATBTC"


BATBTC = BATBTC(*BATBTC._fields)
"""
    name: BATBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BATBUSD(Symbol):
    """
        name: BATBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BATBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATBUSD"

    def __str__(self):
        return "BATBUSD"

    def __call__(self):
        return "BATBUSD"


BATBUSD = BATBUSD(*BATBUSD._fields)
"""
    name: BATBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BATETH(Symbol):
    """
        name: BATETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATETH"

    def __str__(self):
        return "BATETH"

    def __call__(self):
        return "BATETH"


BATETH = BATETH(*BATETH._fields)
"""
    name: BATETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATPAX(Symbol):
    """
        name: BATPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATPAX"

    def __str__(self):
        return "BATPAX"

    def __call__(self):
        return "BATPAX"


BATPAX = BATPAX(*BATPAX._fields)
"""
    name: BATPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATTUSD(Symbol):
    """
        name: BATTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATTUSD"

    def __str__(self):
        return "BATTUSD"

    def __call__(self):
        return "BATTUSD"


BATTUSD = BATTUSD(*BATTUSD._fields)
"""
    name: BATTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATUSDC(Symbol):
    """
        name: BATUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATUSDC"

    def __str__(self):
        return "BATUSDC"

    def __call__(self):
        return "BATUSDC"


BATUSDC = BATUSDC(*BATUSDC._fields)
"""
    name: BATUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATUSDT(Symbol):
    """
        name: BATUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BATUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATUSDT"

    def __str__(self):
        return "BATUSDT"

    def __call__(self):
        return "BATUSDT"


BATUSDT = BATUSDT(*BATUSDT._fields)
"""
    name: BATUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BCCBNB(Symbol):
    """
        name: BCCBNB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCCBNB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCCBNB"

    def __str__(self):
        return "BCCBNB"

    def __call__(self):
        return "BCCBNB"


BCCBNB = BCCBNB(*BCCBNB._fields)
"""
    name: BCCBNB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCCBTC(Symbol):
    """
        name: BCCBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCCBTC"

    def __str__(self):
        return "BCCBTC"

    def __call__(self):
        return "BCCBTC"


BCCBTC = BCCBTC(*BCCBTC._fields)
"""
    name: BCCBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCCETH(Symbol):
    """
        name: BCCETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCCETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCCETH"

    def __str__(self):
        return "BCCETH"

    def __call__(self):
        return "BCCETH"


BCCETH = BCCETH(*BCCETH._fields)
"""
    name: BCCETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCCUSDT(Symbol):
    """
        name: BCCUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCCUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCCUSDT"

    def __str__(self):
        return "BCCUSDT"

    def __call__(self):
        return "BCCUSDT"


BCCUSDT = BCCUSDT(*BCCUSDT._fields)
"""
    name: BCCUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCDBTC(Symbol):
    """
        name: BCDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCDBTC"

    def __str__(self):
        return "BCDBTC"

    def __call__(self):
        return "BCDBTC"


BCDBTC = BCDBTC(*BCDBTC._fields)
"""
    name: BCDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCDETH(Symbol):
    """
        name: BCDETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCDETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCDETH"

    def __str__(self):
        return "BCDETH"

    def __call__(self):
        return "BCDETH"


BCDETH = BCDETH(*BCDETH._fields)
"""
    name: BCDETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCBTC(Symbol):
    """
        name: BCHABCBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCBTC"

    def __str__(self):
        return "BCHABCBTC"

    def __call__(self):
        return "BCHABCBTC"


BCHABCBTC = BCHABCBTC(*BCHABCBTC._fields)
"""
    name: BCHABCBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCBUSD(Symbol):
    """
        name: BCHABCBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCBUSD"

    def __str__(self):
        return "BCHABCBUSD"

    def __call__(self):
        return "BCHABCBUSD"


BCHABCBUSD = BCHABCBUSD(*BCHABCBUSD._fields)
"""
    name: BCHABCBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCPAX(Symbol):
    """
        name: BCHABCPAX
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCPAX"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCPAX"

    def __str__(self):
        return "BCHABCPAX"

    def __call__(self):
        return "BCHABCPAX"


BCHABCPAX = BCHABCPAX(*BCHABCPAX._fields)
"""
    name: BCHABCPAX
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCTUSD(Symbol):
    """
        name: BCHABCTUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCTUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCTUSD"

    def __str__(self):
        return "BCHABCTUSD"

    def __call__(self):
        return "BCHABCTUSD"


BCHABCTUSD = BCHABCTUSD(*BCHABCTUSD._fields)
"""
    name: BCHABCTUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCUSDC(Symbol):
    """
        name: BCHABCUSDC
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCUSDC"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCUSDC"

    def __str__(self):
        return "BCHABCUSDC"

    def __call__(self):
        return "BCHABCUSDC"


BCHABCUSDC = BCHABCUSDC(*BCHABCUSDC._fields)
"""
    name: BCHABCUSDC
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCUSDT(Symbol):
    """
        name: BCHABCUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCUSDT"

    def __str__(self):
        return "BCHABCUSDT"

    def __call__(self):
        return "BCHABCUSDT"


BCHABCUSDT = BCHABCUSDT(*BCHABCUSDT._fields)
"""
    name: BCHABCUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABUSD(Symbol):
    """
        name: BCHABUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABUSD"

    def __str__(self):
        return "BCHABUSD"

    def __call__(self):
        return "BCHABUSD"


BCHABUSD = BCHABUSD(*BCHABUSD._fields)
"""
    name: BCHABUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHBNB(Symbol):
    """
        name: BCHBNB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHBNB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHBNB"

    def __str__(self):
        return "BCHBNB"

    def __call__(self):
        return "BCHBNB"


BCHBNB = BCHBNB(*BCHBNB._fields)
"""
    name: BCHBNB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHBTC(Symbol):
    """
        name: BCHBTC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BCHBTC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHBTC"

    def __str__(self):
        return "BCHBTC"

    def __call__(self):
        return "BCHBTC"


BCHBTC = BCHBTC(*BCHBTC._fields)
"""
    name: BCHBTC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BCHBUSD(Symbol):
    """
        name: BCHBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BCHBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHBUSD"

    def __str__(self):
        return "BCHBUSD"

    def __call__(self):
        return "BCHBUSD"


BCHBUSD = BCHBUSD(*BCHBUSD._fields)
"""
    name: BCHBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BCHDOWNUSDT(Symbol):
    """
        name: BCHDOWNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHDOWNUSDT"

    def __str__(self):
        return "BCHDOWNUSDT"

    def __call__(self):
        return "BCHDOWNUSDT"


BCHDOWNUSDT = BCHDOWNUSDT(*BCHDOWNUSDT._fields)
"""
    name: BCHDOWNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHEUR(Symbol):
    """
        name: BCHEUR
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHEUR"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHEUR"

    def __str__(self):
        return "BCHEUR"

    def __call__(self):
        return "BCHEUR"


BCHEUR = BCHEUR(*BCHEUR._fields)
"""
    name: BCHEUR
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHPAX(Symbol):
    """
        name: BCHPAX
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHPAX"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHPAX"

    def __str__(self):
        return "BCHPAX"

    def __call__(self):
        return "BCHPAX"


BCHPAX = BCHPAX(*BCHPAX._fields)
"""
    name: BCHPAX
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVBTC(Symbol):
    """
        name: BCHSVBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVBTC"

    def __str__(self):
        return "BCHSVBTC"

    def __call__(self):
        return "BCHSVBTC"


BCHSVBTC = BCHSVBTC(*BCHSVBTC._fields)
"""
    name: BCHSVBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVPAX(Symbol):
    """
        name: BCHSVPAX
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVPAX"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVPAX"

    def __str__(self):
        return "BCHSVPAX"

    def __call__(self):
        return "BCHSVPAX"


BCHSVPAX = BCHSVPAX(*BCHSVPAX._fields)
"""
    name: BCHSVPAX
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVTUSD(Symbol):
    """
        name: BCHSVTUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVTUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVTUSD"

    def __str__(self):
        return "BCHSVTUSD"

    def __call__(self):
        return "BCHSVTUSD"


BCHSVTUSD = BCHSVTUSD(*BCHSVTUSD._fields)
"""
    name: BCHSVTUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVUSDC(Symbol):
    """
        name: BCHSVUSDC
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVUSDC"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVUSDC"

    def __str__(self):
        return "BCHSVUSDC"

    def __call__(self):
        return "BCHSVUSDC"


BCHSVUSDC = BCHSVUSDC(*BCHSVUSDC._fields)
"""
    name: BCHSVUSDC
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVUSDT(Symbol):
    """
        name: BCHSVUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVUSDT"

    def __str__(self):
        return "BCHSVUSDT"

    def __call__(self):
        return "BCHSVUSDT"


BCHSVUSDT = BCHSVUSDT(*BCHSVUSDT._fields)
"""
    name: BCHSVUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHTUSD(Symbol):
    """
        name: BCHTUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHTUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHTUSD"

    def __str__(self):
        return "BCHTUSD"

    def __call__(self):
        return "BCHTUSD"


BCHTUSD = BCHTUSD(*BCHTUSD._fields)
"""
    name: BCHTUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHUPUSDT(Symbol):
    """
        name: BCHUPUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHUPUSDT"

    def __str__(self):
        return "BCHUPUSDT"

    def __call__(self):
        return "BCHUPUSDT"


BCHUPUSDT = BCHUPUSDT(*BCHUPUSDT._fields)
"""
    name: BCHUPUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHUSDC(Symbol):
    """
        name: BCHUSDC
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHUSDC"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHUSDC"

    def __str__(self):
        return "BCHUSDC"

    def __call__(self):
        return "BCHUSDC"


BCHUSDC = BCHUSDC(*BCHUSDC._fields)
"""
    name: BCHUSDC
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHUSDT(Symbol):
    """
        name: BCHUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BCHUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHUSDT"

    def __str__(self):
        return "BCHUSDT"

    def __call__(self):
        return "BCHUSDT"


BCHUSDT = BCHUSDT(*BCHUSDT._fields)
"""
    name: BCHUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BCNBNB(Symbol):
    """
        name: BCNBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCNBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCNBNB"

    def __str__(self):
        return "BCNBNB"

    def __call__(self):
        return "BCNBNB"


BCNBNB = BCNBNB(*BCNBNB._fields)
"""
    name: BCNBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCNBTC(Symbol):
    """
        name: BCNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCNBTC"

    def __str__(self):
        return "BCNBTC"

    def __call__(self):
        return "BCNBTC"


BCNBTC = BCNBTC(*BCNBTC._fields)
"""
    name: BCNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCNETH(Symbol):
    """
        name: BCNETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCNETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCNETH"

    def __str__(self):
        return "BCNETH"

    def __call__(self):
        return "BCNETH"


BCNETH = BCNETH(*BCNETH._fields)
"""
    name: BCNETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTBNB(Symbol):
    """
        name: BCPTBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTBNB"

    def __str__(self):
        return "BCPTBNB"

    def __call__(self):
        return "BCPTBNB"


BCPTBNB = BCPTBNB(*BCPTBNB._fields)
"""
    name: BCPTBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTBTC(Symbol):
    """
        name: BCPTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTBTC"

    def __str__(self):
        return "BCPTBTC"

    def __call__(self):
        return "BCPTBTC"


BCPTBTC = BCPTBTC(*BCPTBTC._fields)
"""
    name: BCPTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTETH(Symbol):
    """
        name: BCPTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTETH"

    def __str__(self):
        return "BCPTETH"

    def __call__(self):
        return "BCPTETH"


BCPTETH = BCPTETH(*BCPTETH._fields)
"""
    name: BCPTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTPAX(Symbol):
    """
        name: BCPTPAX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTPAX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTPAX"

    def __str__(self):
        return "BCPTPAX"

    def __call__(self):
        return "BCPTPAX"


BCPTPAX = BCPTPAX(*BCPTPAX._fields)
"""
    name: BCPTPAX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTTUSD(Symbol):
    """
        name: BCPTTUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTTUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTTUSD"

    def __str__(self):
        return "BCPTTUSD"

    def __call__(self):
        return "BCPTTUSD"


BCPTTUSD = BCPTTUSD(*BCPTTUSD._fields)
"""
    name: BCPTTUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTUSDC(Symbol):
    """
        name: BCPTUSDC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTUSDC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTUSDC"

    def __str__(self):
        return "BCPTUSDC"

    def __call__(self):
        return "BCPTUSDC"


BCPTUSDC = BCPTUSDC(*BCPTUSDC._fields)
"""
    name: BCPTUSDC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BDOTDOT(Symbol):
    """
        name: BDOTDOT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.30000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BDOTDOT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.30000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BDOTDOT"

    def __str__(self):
        return "BDOTDOT"

    def __call__(self):
        return "BDOTDOT"


BDOTDOT = BDOTDOT(*BDOTDOT._fields)
"""
    name: BDOTDOT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.30000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEAMBNB(Symbol):
    """
        name: BEAMBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEAMBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEAMBNB"

    def __str__(self):
        return "BEAMBNB"

    def __call__(self):
        return "BEAMBNB"


BEAMBNB = BEAMBNB(*BEAMBNB._fields)
"""
    name: BEAMBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEAMBTC(Symbol):
    """
        name: BEAMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEAMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEAMBTC"

    def __str__(self):
        return "BEAMBTC"

    def __call__(self):
        return "BEAMBTC"


BEAMBTC = BEAMBTC(*BEAMBTC._fields)
"""
    name: BEAMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEAMUSDT(Symbol):
    """
        name: BEAMUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEAMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEAMUSDT"

    def __str__(self):
        return "BEAMUSDT"

    def __call__(self):
        return "BEAMUSDT"


BEAMUSDT = BEAMUSDT(*BEAMUSDT._fields)
"""
    name: BEAMUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEARBUSD(Symbol):
    """
        name: BEARBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEARBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEARBUSD"

    def __str__(self):
        return "BEARBUSD"

    def __call__(self):
        return "BEARBUSD"


BEARBUSD = BEARBUSD(*BEARBUSD._fields)
"""
    name: BEARBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEARUSDT(Symbol):
    """
        name: BEARUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEARUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEARUSDT"

    def __str__(self):
        return "BEARUSDT"

    def __call__(self):
        return "BEARUSDT"


BEARUSDT = BEARUSDT(*BEARUSDT._fields)
"""
    name: BEARUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELBNB(Symbol):
    """
        name: BELBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BELBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELBNB"

    def __str__(self):
        return "BELBNB"

    def __call__(self):
        return "BELBNB"


BELBNB = BELBNB(*BELBNB._fields)
"""
    name: BELBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELBTC(Symbol):
    """
        name: BELBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BELBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELBTC"

    def __str__(self):
        return "BELBTC"

    def __call__(self):
        return "BELBTC"


BELBTC = BELBTC(*BELBTC._fields)
"""
    name: BELBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELBUSD(Symbol):
    """
        name: BELBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BELBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELBUSD"

    def __str__(self):
        return "BELBUSD"

    def __call__(self):
        return "BELBUSD"


BELBUSD = BELBUSD(*BELBUSD._fields)
"""
    name: BELBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BELETH(Symbol):
    """
        name: BELETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BELETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELETH"

    def __str__(self):
        return "BELETH"

    def __call__(self):
        return "BELETH"


BELETH = BELETH(*BELETH._fields)
"""
    name: BELETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELTRY(Symbol):
    """
        name: BELTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BELTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELTRY"

    def __str__(self):
        return "BELTRY"

    def __call__(self):
        return "BELTRY"


BELTRY = BELTRY(*BELTRY._fields)
"""
    name: BELTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BELUSDT(Symbol):
    """
        name: BELUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BELUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELUSDT"

    def __str__(self):
        return "BELUSDT"

    def __call__(self):
        return "BELUSDT"


BELUSDT = BELUSDT(*BELUSDT._fields)
"""
    name: BELUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BETABNB(Symbol):
    """
        name: BETABNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETABNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETABNB"

    def __str__(self):
        return "BETABNB"

    def __call__(self):
        return "BETABNB"


BETABNB = BETABNB(*BETABNB._fields)
"""
    name: BETABNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETABTC(Symbol):
    """
        name: BETABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETABTC"

    def __str__(self):
        return "BETABTC"

    def __call__(self):
        return "BETABTC"


BETABTC = BETABTC(*BETABTC._fields)
"""
    name: BETABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETABUSD(Symbol):
    """
        name: BETABUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETABUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETABUSD"

    def __str__(self):
        return "BETABUSD"

    def __call__(self):
        return "BETABUSD"


BETABUSD = BETABUSD(*BETABUSD._fields)
"""
    name: BETABUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETAETH(Symbol):
    """
        name: BETAETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETAETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETAETH"

    def __str__(self):
        return "BETAETH"

    def __call__(self):
        return "BETAETH"


BETAETH = BETAETH(*BETAETH._fields)
"""
    name: BETAETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETAUSDT(Symbol):
    """
        name: BETAUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BETAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETAUSDT"

    def __str__(self):
        return "BETAUSDT"

    def __call__(self):
        return "BETAUSDT"


BETAUSDT = BETAUSDT(*BETAUSDT._fields)
"""
    name: BETAUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BETHBUSD(Symbol):
    """
        name: BETHBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETHBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETHBUSD"

    def __str__(self):
        return "BETHBUSD"

    def __call__(self):
        return "BETHBUSD"


BETHBUSD = BETHBUSD(*BETHBUSD._fields)
"""
    name: BETHBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETHETH(Symbol):
    """
        name: BETHETH
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETHETH"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETHETH"

    def __str__(self):
        return "BETHETH"

    def __call__(self):
        return "BETHETH"


BETHETH = BETHETH(*BETHETH._fields)
"""
    name: BETHETH
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETHUSDT(Symbol):
    """
        name: BETHUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETHUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETHUSDT"

    def __str__(self):
        return "BETHUSDT"

    def __call__(self):
        return "BETHUSDT"


BETHUSDT = BETHUSDT(*BETHUSDT._fields)
"""
    name: BETHUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BGBPUSDC(Symbol):
    """
        name: BGBPUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BGBPUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BGBPUSDC"

    def __str__(self):
        return "BGBPUSDC"

    def __call__(self):
        return "BGBPUSDC"


BGBPUSDC = BGBPUSDC(*BGBPUSDC._fields)
"""
    name: BGBPUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BICOBTC(Symbol):
    """
        name: BICOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BICOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BICOBTC"

    def __str__(self):
        return "BICOBTC"

    def __call__(self):
        return "BICOBTC"


BICOBTC = BICOBTC(*BICOBTC._fields)
"""
    name: BICOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BICOBUSD(Symbol):
    """
        name: BICOBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BICOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BICOBUSD"

    def __str__(self):
        return "BICOBUSD"

    def __call__(self):
        return "BICOBUSD"


BICOBUSD = BICOBUSD(*BICOBUSD._fields)
"""
    name: BICOBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BICOUSDT(Symbol):
    """
        name: BICOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BICOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BICOUSDT"

    def __str__(self):
        return "BICOUSDT"

    def __call__(self):
        return "BICOUSDT"


BICOUSDT = BICOUSDT(*BICOUSDT._fields)
"""
    name: BICOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BIFIBNB(Symbol):
    """
        name: BIFIBNB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BIFIBNB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BIFIBNB"

    def __str__(self):
        return "BIFIBNB"

    def __call__(self):
        return "BIFIBNB"


BIFIBNB = BIFIBNB(*BIFIBNB._fields)
"""
    name: BIFIBNB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BIFIBUSD(Symbol):
    """
        name: BIFIBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BIFIBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BIFIBUSD"

    def __str__(self):
        return "BIFIBUSD"

    def __call__(self):
        return "BIFIBUSD"


BIFIBUSD = BIFIBUSD(*BIFIBUSD._fields)
"""
    name: BIFIBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BIFIUSDT(Symbol):
    """
        name: BIFIUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BIFIUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BIFIUSDT"

    def __str__(self):
        return "BIFIUSDT"

    def __call__(self):
        return "BIFIUSDT"


BIFIUSDT = BIFIUSDT(*BIFIUSDT._fields)
"""
    name: BIFIUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BKRWBUSD(Symbol):
    """
        name: BKRWBUSD
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BKRWBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BKRWBUSD"

    def __str__(self):
        return "BKRWBUSD"

    def __call__(self):
        return "BKRWBUSD"


BKRWBUSD = BKRWBUSD(*BKRWBUSD._fields)
"""
    name: BKRWBUSD
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BKRWUSDT(Symbol):
    """
        name: BKRWUSDT
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BKRWUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BKRWUSDT"

    def __str__(self):
        return "BKRWUSDT"

    def __call__(self):
        return "BKRWUSDT"


BKRWUSDT = BKRWUSDT(*BKRWUSDT._fields)
"""
    name: BKRWUSDT
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BLZBNB(Symbol):
    """
        name: BLZBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BLZBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZBNB"

    def __str__(self):
        return "BLZBNB"

    def __call__(self):
        return "BLZBNB"


BLZBNB = BLZBNB(*BLZBNB._fields)
"""
    name: BLZBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BLZBTC(Symbol):
    """
        name: BLZBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BLZBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZBTC"

    def __str__(self):
        return "BLZBTC"

    def __call__(self):
        return "BLZBTC"


BLZBTC = BLZBTC(*BLZBTC._fields)
"""
    name: BLZBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BLZBUSD(Symbol):
    """
        name: BLZBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BLZBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZBUSD"

    def __str__(self):
        return "BLZBUSD"

    def __call__(self):
        return "BLZBUSD"


BLZBUSD = BLZBUSD(*BLZBUSD._fields)
"""
    name: BLZBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BLZETH(Symbol):
    """
        name: BLZETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BLZETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZETH"

    def __str__(self):
        return "BLZETH"

    def __call__(self):
        return "BLZETH"


BLZETH = BLZETH(*BLZETH._fields)
"""
    name: BLZETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BLZUSDT(Symbol):
    """
        name: BLZUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BLZUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZUSDT"

    def __str__(self):
        return "BLZUSDT"

    def __call__(self):
        return "BLZUSDT"


BLZUSDT = BLZUSDT(*BLZUSDT._fields)
"""
    name: BLZUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBAUD(Symbol):
    """
        name: BNBAUD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBAUD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBAUD"

    def __str__(self):
        return "BNBAUD"

    def __call__(self):
        return "BNBAUD"


BNBAUD = BNBAUD(*BNBAUD._fields)
"""
    name: BNBAUD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBEARBUSD(Symbol):
    """
        name: BNBBEARBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBEARBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBEARBUSD"

    def __str__(self):
        return "BNBBEARBUSD"

    def __call__(self):
        return "BNBBEARBUSD"


BNBBEARBUSD = BNBBEARBUSD(*BNBBEARBUSD._fields)
"""
    name: BNBBEARBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBEARUSDT(Symbol):
    """
        name: BNBBEARUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBEARUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBEARUSDT"

    def __str__(self):
        return "BNBBEARUSDT"

    def __call__(self):
        return "BNBBEARUSDT"


BNBBEARUSDT = BNBBEARUSDT(*BNBBEARUSDT._fields)
"""
    name: BNBBEARUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBIDR(Symbol):
    """
        name: BNBBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBIDR"

    def __str__(self):
        return "BNBBIDR"

    def __call__(self):
        return "BNBBIDR"


BNBBIDR = BNBBIDR(*BNBBIDR._fields)
"""
    name: BNBBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BNBBKRW(Symbol):
    """
        name: BNBBKRW
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBKRW"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBKRW"

    def __str__(self):
        return "BNBBKRW"

    def __call__(self):
        return "BNBBKRW"


BNBBKRW = BNBBKRW(*BNBBKRW._fields)
"""
    name: BNBBKRW
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBRL(Symbol):
    """
        name: BNBBRL
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBRL"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBRL"

    def __str__(self):
        return "BNBBRL"

    def __call__(self):
        return "BNBBRL"


BNBBRL = BNBBRL(*BNBBRL._fields)
"""
    name: BNBBRL
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBTC(Symbol):
    """
        name: BNBBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBTC"

    def __str__(self):
        return "BNBBTC"

    def __call__(self):
        return "BNBBTC"


BNBBTC = BNBBTC(*BNBBTC._fields)
"""
    name: BNBBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBBULLBUSD(Symbol):
    """
        name: BNBBULLBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBULLBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBULLBUSD"

    def __str__(self):
        return "BNBBULLBUSD"

    def __call__(self):
        return "BNBBULLBUSD"


BNBBULLBUSD = BNBBULLBUSD(*BNBBULLBUSD._fields)
"""
    name: BNBBULLBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBULLUSDT(Symbol):
    """
        name: BNBBULLUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBULLUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBULLUSDT"

    def __str__(self):
        return "BNBBULLUSDT"

    def __call__(self):
        return "BNBBULLUSDT"


BNBBULLUSDT = BNBBULLUSDT(*BNBBULLUSDT._fields)
"""
    name: BNBBULLUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBUSD(Symbol):
    """
        name: BNBBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBUSD"

    def __str__(self):
        return "BNBBUSD"

    def __call__(self):
        return "BNBBUSD"


BNBBUSD = BNBBUSD(*BNBBUSD._fields)
"""
    name: BNBBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBDAI(Symbol):
    """
        name: BNBDAI
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBDAI"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBDAI"

    def __str__(self):
        return "BNBDAI"

    def __call__(self):
        return "BNBDAI"


BNBDAI = BNBDAI(*BNBDAI._fields)
"""
    name: BNBDAI
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBDOWNUSDT(Symbol):
    """
        name: BNBDOWNUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBDOWNUSDT"

    def __str__(self):
        return "BNBDOWNUSDT"

    def __call__(self):
        return "BNBDOWNUSDT"


BNBDOWNUSDT = BNBDOWNUSDT(*BNBDOWNUSDT._fields)
"""
    name: BNBDOWNUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBETH(Symbol):
    """
        name: BNBETH
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBETH"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBETH"

    def __str__(self):
        return "BNBETH"

    def __call__(self):
        return "BNBETH"


BNBETH = BNBETH(*BNBETH._fields)
"""
    name: BNBETH
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBEUR(Symbol):
    """
        name: BNBEUR
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBEUR"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBEUR"

    def __str__(self):
        return "BNBEUR"

    def __call__(self):
        return "BNBEUR"


BNBEUR = BNBEUR(*BNBEUR._fields)
"""
    name: BNBEUR
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBGBP(Symbol):
    """
        name: BNBGBP
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBGBP"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBGBP"

    def __str__(self):
        return "BNBGBP"

    def __call__(self):
        return "BNBGBP"


BNBGBP = BNBGBP(*BNBGBP._fields)
"""
    name: BNBGBP
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBIDRT(Symbol):
    """
        name: BNBIDRT
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BNBIDRT"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBIDRT"

    def __str__(self):
        return "BNBIDRT"

    def __call__(self):
        return "BNBIDRT"


BNBIDRT = BNBIDRT(*BNBIDRT._fields)
"""
    name: BNBIDRT
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BNBNGN(Symbol):
    """
        name: BNBNGN
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBNGN"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBNGN"

    def __str__(self):
        return "BNBNGN"

    def __call__(self):
        return "BNBNGN"


BNBNGN = BNBNGN(*BNBNGN._fields)
"""
    name: BNBNGN
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBPAX(Symbol):
    """
        name: BNBPAX
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBPAX"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBPAX"

    def __str__(self):
        return "BNBPAX"

    def __call__(self):
        return "BNBPAX"


BNBPAX = BNBPAX(*BNBPAX._fields)
"""
    name: BNBPAX
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBRUB(Symbol):
    """
        name: BNBRUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBRUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBRUB"

    def __str__(self):
        return "BNBRUB"

    def __call__(self):
        return "BNBRUB"


BNBRUB = BNBRUB(*BNBRUB._fields)
"""
    name: BNBRUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBTRY(Symbol):
    """
        name: BNBTRY
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBTRY"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBTRY"

    def __str__(self):
        return "BNBTRY"

    def __call__(self):
        return "BNBTRY"


BNBTRY = BNBTRY(*BNBTRY._fields)
"""
    name: BNBTRY
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBTUSD(Symbol):
    """
        name: BNBTUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBTUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBTUSD"

    def __str__(self):
        return "BNBTUSD"

    def __call__(self):
        return "BNBTUSD"


BNBTUSD = BNBTUSD(*BNBTUSD._fields)
"""
    name: BNBTUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBUAH(Symbol):
    """
        name: BNBUAH
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUAH"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUAH"

    def __str__(self):
        return "BNBUAH"

    def __call__(self):
        return "BNBUAH"


BNBUAH = BNBUAH(*BNBUAH._fields)
"""
    name: BNBUAH
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUPUSDT(Symbol):
    """
        name: BNBUPUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUPUSDT"

    def __str__(self):
        return "BNBUPUSDT"

    def __call__(self):
        return "BNBUPUSDT"


BNBUPUSDT = BNBUPUSDT(*BNBUPUSDT._fields)
"""
    name: BNBUPUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUSDC(Symbol):
    """
        name: BNBUSDC
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUSDC"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUSDC"

    def __str__(self):
        return "BNBUSDC"

    def __call__(self):
        return "BNBUSDC"


BNBUSDC = BNBUSDC(*BNBUSDC._fields)
"""
    name: BNBUSDC
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUSDP(Symbol):
    """
        name: BNBUSDP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUSDP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUSDP"

    def __str__(self):
        return "BNBUSDP"

    def __call__(self):
        return "BNBUSDP"


BNBUSDP = BNBUSDP(*BNBUSDP._fields)
"""
    name: BNBUSDP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUSDS(Symbol):
    """
        name: BNBUSDS
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUSDS"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUSDS"

    def __str__(self):
        return "BNBUSDS"

    def __call__(self):
        return "BNBUSDS"


BNBUSDS = BNBUSDS(*BNBUSDS._fields)
"""
    name: BNBUSDS
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUSDT(Symbol):
    """
        name: BNBUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUSDT"

    def __str__(self):
        return "BNBUSDT"

    def __call__(self):
        return "BNBUSDT"


BNBUSDT = BNBUSDT(*BNBUSDT._fields)
"""
    name: BNBUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBUST(Symbol):
    """
        name: BNBUST
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUST"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUST"

    def __str__(self):
        return "BNBUST"

    def __call__(self):
        return "BNBUST"


BNBUST = BNBUST(*BNBUST._fields)
"""
    name: BNBUST
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBZAR(Symbol):
    """
        name: BNBZAR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBZAR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBZAR"

    def __str__(self):
        return "BNBZAR"

    def __call__(self):
        return "BNBZAR"


BNBZAR = BNBZAR(*BNBZAR._fields)
"""
    name: BNBZAR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNTBTC(Symbol):
    """
        name: BNTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNTBTC"

    def __str__(self):
        return "BNTBTC"

    def __call__(self):
        return "BNTBTC"


BNTBTC = BNTBTC(*BNTBTC._fields)
"""
    name: BNTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNTBUSD(Symbol):
    """
        name: BNTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNTBUSD"

    def __str__(self):
        return "BNTBUSD"

    def __call__(self):
        return "BNTBUSD"


BNTBUSD = BNTBUSD(*BNTBUSD._fields)
"""
    name: BNTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNTETH(Symbol):
    """
        name: BNTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNTETH"

    def __str__(self):
        return "BNTETH"

    def __call__(self):
        return "BNTETH"


BNTETH = BNTETH(*BNTETH._fields)
"""
    name: BNTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNTUSDT(Symbol):
    """
        name: BNTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNTUSDT"

    def __str__(self):
        return "BNTUSDT"

    def __call__(self):
        return "BNTUSDT"


BNTUSDT = BNTUSDT(*BNTUSDT._fields)
"""
    name: BNTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNXBNB(Symbol):
    """
        name: BNXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNXBNB"

    def __str__(self):
        return "BNXBNB"

    def __call__(self):
        return "BNXBNB"


BNXBNB = BNXBNB(*BNXBNB._fields)
"""
    name: BNXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNXBTC(Symbol):
    """
        name: BNXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNXBTC"

    def __str__(self):
        return "BNXBTC"

    def __call__(self):
        return "BNXBTC"


BNXBTC = BNXBTC(*BNXBTC._fields)
"""
    name: BNXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNXBUSD(Symbol):
    """
        name: BNXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNXBUSD"

    def __str__(self):
        return "BNXBUSD"

    def __call__(self):
        return "BNXBUSD"


BNXBUSD = BNXBUSD(*BNXBUSD._fields)
"""
    name: BNXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNXUSDT(Symbol):
    """
        name: BNXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNXUSDT"

    def __str__(self):
        return "BNXUSDT"

    def __call__(self):
        return "BNXUSDT"


BNXUSDT = BNXUSDT(*BNXUSDT._fields)
"""
    name: BNXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BONDBNB(Symbol):
    """
        name: BONDBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BONDBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDBNB"

    def __str__(self):
        return "BONDBNB"

    def __call__(self):
        return "BONDBNB"


BONDBNB = BONDBNB(*BONDBNB._fields)
"""
    name: BONDBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BONDBTC(Symbol):
    """
        name: BONDBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BONDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDBTC"

    def __str__(self):
        return "BONDBTC"

    def __call__(self):
        return "BONDBTC"


BONDBTC = BONDBTC(*BONDBTC._fields)
"""
    name: BONDBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BONDBUSD(Symbol):
    """
        name: BONDBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BONDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDBUSD"

    def __str__(self):
        return "BONDBUSD"

    def __call__(self):
        return "BONDBUSD"


BONDBUSD = BONDBUSD(*BONDBUSD._fields)
"""
    name: BONDBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BONDETH(Symbol):
    """
        name: BONDETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BONDETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDETH"

    def __str__(self):
        return "BONDETH"

    def __call__(self):
        return "BONDETH"


BONDETH = BONDETH(*BONDETH._fields)
"""
    name: BONDETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BONDUSDT(Symbol):
    """
        name: BONDUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BONDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDUSDT"

    def __str__(self):
        return "BONDUSDT"

    def __call__(self):
        return "BONDUSDT"


BONDUSDT = BONDUSDT(*BONDUSDT._fields)
"""
    name: BONDUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BOTBTC(Symbol):
    """
        name: BOTBTC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BOTBTC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOTBTC"

    def __str__(self):
        return "BOTBTC"

    def __call__(self):
        return "BOTBTC"


BOTBTC = BOTBTC(*BOTBTC._fields)
"""
    name: BOTBTC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BOTBUSD(Symbol):
    """
        name: BOTBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BOTBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOTBUSD"

    def __str__(self):
        return "BOTBUSD"

    def __call__(self):
        return "BOTBUSD"


BOTBUSD = BOTBUSD(*BOTBUSD._fields)
"""
    name: BOTBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BQXBTC(Symbol):
    """
        name: BQXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BQXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BQXBTC"

    def __str__(self):
        return "BQXBTC"

    def __call__(self):
        return "BQXBTC"


BQXBTC = BQXBTC(*BQXBTC._fields)
"""
    name: BQXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BQXETH(Symbol):
    """
        name: BQXETH
        significant_digits: None
        tick_size: 10.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BQXETH"
    significant_digits: int = None
    tick_size: int = 10.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BQXETH"

    def __str__(self):
        return "BQXETH"

    def __call__(self):
        return "BQXETH"


BQXETH = BQXETH(*BQXETH._fields)
"""
    name: BQXETH
    significant_digits: None
    tick_size: 10.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BRDBNB(Symbol):
    """
        name: BRDBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BRDBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRDBNB"

    def __str__(self):
        return "BRDBNB"

    def __call__(self):
        return "BRDBNB"


BRDBNB = BRDBNB(*BRDBNB._fields)
"""
    name: BRDBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BRDBTC(Symbol):
    """
        name: BRDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BRDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRDBTC"

    def __str__(self):
        return "BRDBTC"

    def __call__(self):
        return "BRDBTC"


BRDBTC = BRDBTC(*BRDBTC._fields)
"""
    name: BRDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BRDETH(Symbol):
    """
        name: BRDETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BRDETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRDETH"

    def __str__(self):
        return "BRDETH"

    def __call__(self):
        return "BRDETH"


BRDETH = BRDETH(*BRDETH._fields)
"""
    name: BRDETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BSWBNB(Symbol):
    """
        name: BSWBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BSWBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWBNB"

    def __str__(self):
        return "BSWBNB"

    def __call__(self):
        return "BSWBNB"


BSWBNB = BSWBNB(*BSWBNB._fields)
"""
    name: BSWBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BSWBUSD(Symbol):
    """
        name: BSWBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BSWBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWBUSD"

    def __str__(self):
        return "BSWBUSD"

    def __call__(self):
        return "BSWBUSD"


BSWBUSD = BSWBUSD(*BSWBUSD._fields)
"""
    name: BSWBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BSWETH(Symbol):
    """
        name: BSWETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BSWETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWETH"

    def __str__(self):
        return "BSWETH"

    def __call__(self):
        return "BSWETH"


BSWETH = BSWETH(*BSWETH._fields)
"""
    name: BSWETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BSWTRY(Symbol):
    """
        name: BSWTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BSWTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWTRY"

    def __str__(self):
        return "BSWTRY"

    def __call__(self):
        return "BSWTRY"


BSWTRY = BSWTRY(*BSWTRY._fields)
"""
    name: BSWTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BSWUSDT(Symbol):
    """
        name: BSWUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BSWUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWUSDT"

    def __str__(self):
        return "BSWUSDT"

    def __call__(self):
        return "BSWUSDT"


BSWUSDT = BSWUSDT(*BSWUSDT._fields)
"""
    name: BSWUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCAUD(Symbol):
    """
        name: BTCAUD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCAUD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCAUD"

    def __str__(self):
        return "BTCAUD"

    def __call__(self):
        return "BTCAUD"


BTCAUD = BTCAUD(*BTCAUD._fields)
"""
    name: BTCAUD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCBBTC(Symbol):
    """
        name: BTCBBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBBTC"

    def __str__(self):
        return "BTCBBTC"

    def __call__(self):
        return "BTCBBTC"


BTCBBTC = BTCBBTC(*BTCBBTC._fields)
"""
    name: BTCBBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCBIDR(Symbol):
    """
        name: BTCBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BTCBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBIDR"

    def __str__(self):
        return "BTCBIDR"

    def __call__(self):
        return "BTCBIDR"


BTCBIDR = BTCBIDR(*BTCBIDR._fields)
"""
    name: BTCBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BTCBKRW(Symbol):
    """
        name: BTCBKRW
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCBKRW"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBKRW"

    def __str__(self):
        return "BTCBKRW"

    def __call__(self):
        return "BTCBKRW"


BTCBKRW = BTCBKRW(*BTCBKRW._fields)
"""
    name: BTCBKRW
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCBRL(Symbol):
    """
        name: BTCBRL
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCBRL"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBRL"

    def __str__(self):
        return "BTCBRL"

    def __call__(self):
        return "BTCBRL"


BTCBRL = BTCBRL(*BTCBRL._fields)
"""
    name: BTCBRL
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCBUSD(Symbol):
    """
        name: BTCBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTCBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBUSD"

    def __str__(self):
        return "BTCBUSD"

    def __call__(self):
        return "BTCBUSD"


BTCBUSD = BTCBUSD(*BTCBUSD._fields)
"""
    name: BTCBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCDAI(Symbol):
    """
        name: BTCDAI
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCDAI"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCDAI"

    def __str__(self):
        return "BTCDAI"

    def __call__(self):
        return "BTCDAI"


BTCDAI = BTCDAI(*BTCDAI._fields)
"""
    name: BTCDAI
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCDOWNUSDT(Symbol):
    """
        name: BTCDOWNUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCDOWNUSDT"

    def __str__(self):
        return "BTCDOWNUSDT"

    def __call__(self):
        return "BTCDOWNUSDT"


BTCDOWNUSDT = BTCDOWNUSDT(*BTCDOWNUSDT._fields)
"""
    name: BTCDOWNUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCEUR(Symbol):
    """
        name: BTCEUR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCEUR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCEUR"

    def __str__(self):
        return "BTCEUR"

    def __call__(self):
        return "BTCEUR"


BTCEUR = BTCEUR(*BTCEUR._fields)
"""
    name: BTCEUR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCGBP(Symbol):
    """
        name: BTCGBP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCGBP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCGBP"

    def __str__(self):
        return "BTCGBP"

    def __call__(self):
        return "BTCGBP"


BTCGBP = BTCGBP(*BTCGBP._fields)
"""
    name: BTCGBP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCIDRT(Symbol):
    """
        name: BTCIDRT
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BTCIDRT"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCIDRT"

    def __str__(self):
        return "BTCIDRT"

    def __call__(self):
        return "BTCIDRT"


BTCIDRT = BTCIDRT(*BTCIDRT._fields)
"""
    name: BTCIDRT
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BTCNGN(Symbol):
    """
        name: BTCNGN
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCNGN"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCNGN"

    def __str__(self):
        return "BTCNGN"

    def __call__(self):
        return "BTCNGN"


BTCNGN = BTCNGN(*BTCNGN._fields)
"""
    name: BTCNGN
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCPAX(Symbol):
    """
        name: BTCPAX
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCPAX"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCPAX"

    def __str__(self):
        return "BTCPAX"

    def __call__(self):
        return "BTCPAX"


BTCPAX = BTCPAX(*BTCPAX._fields)
"""
    name: BTCPAX
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCPLN(Symbol):
    """
        name: BTCPLN
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 50.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCPLN"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 50.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCPLN"

    def __str__(self):
        return "BTCPLN"

    def __call__(self):
        return "BTCPLN"


BTCPLN = BTCPLN(*BTCPLN._fields)
"""
    name: BTCPLN
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 50.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCRON(Symbol):
    """
        name: BTCRON
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 40.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCRON"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 40.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCRON"

    def __str__(self):
        return "BTCRON"

    def __call__(self):
        return "BTCRON"


BTCRON = BTCRON(*BTCRON._fields)
"""
    name: BTCRON
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 40.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCRUB(Symbol):
    """
        name: BTCRUB
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCRUB"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCRUB"

    def __str__(self):
        return "BTCRUB"

    def __call__(self):
        return "BTCRUB"


BTCRUB = BTCRUB(*BTCRUB._fields)
"""
    name: BTCRUB
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCSTBTC(Symbol):
    """
        name: BTCSTBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCSTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCSTBTC"

    def __str__(self):
        return "BTCSTBTC"

    def __call__(self):
        return "BTCSTBTC"


BTCSTBTC = BTCSTBTC(*BTCSTBTC._fields)
"""
    name: BTCSTBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCSTBUSD(Symbol):
    """
        name: BTCSTBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCSTBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCSTBUSD"

    def __str__(self):
        return "BTCSTBUSD"

    def __call__(self):
        return "BTCSTBUSD"


BTCSTBUSD = BTCSTBUSD(*BTCSTBUSD._fields)
"""
    name: BTCSTBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCSTUSDT(Symbol):
    """
        name: BTCSTUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCSTUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCSTUSDT"

    def __str__(self):
        return "BTCSTUSDT"

    def __call__(self):
        return "BTCSTUSDT"


BTCSTUSDT = BTCSTUSDT(*BTCSTUSDT._fields)
"""
    name: BTCSTUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCTRY(Symbol):
    """
        name: BTCTRY
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCTRY"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCTRY"

    def __str__(self):
        return "BTCTRY"

    def __call__(self):
        return "BTCTRY"


BTCTRY = BTCTRY(*BTCTRY._fields)
"""
    name: BTCTRY
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCTUSD(Symbol):
    """
        name: BTCTUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTCTUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCTUSD"

    def __str__(self):
        return "BTCTUSD"

    def __call__(self):
        return "BTCTUSD"


BTCTUSD = BTCTUSD(*BTCTUSD._fields)
"""
    name: BTCTUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCUAH(Symbol):
    """
        name: BTCUAH
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUAH"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUAH"

    def __str__(self):
        return "BTCUAH"

    def __call__(self):
        return "BTCUAH"


BTCUAH = BTCUAH(*BTCUAH._fields)
"""
    name: BTCUAH
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCUPUSDT(Symbol):
    """
        name: BTCUPUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUPUSDT"

    def __str__(self):
        return "BTCUPUSDT"

    def __call__(self):
        return "BTCUPUSDT"


BTCUPUSDT = BTCUPUSDT(*BTCUPUSDT._fields)
"""
    name: BTCUPUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCUSDC(Symbol):
    """
        name: BTCUSDC
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTCUSDC"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUSDC"

    def __str__(self):
        return "BTCUSDC"

    def __call__(self):
        return "BTCUSDC"


BTCUSDC = BTCUSDC(*BTCUSDC._fields)
"""
    name: BTCUSDC
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCUSDP(Symbol):
    """
        name: BTCUSDP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUSDP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUSDP"

    def __str__(self):
        return "BTCUSDP"

    def __call__(self):
        return "BTCUSDP"


BTCUSDP = BTCUSDP(*BTCUSDP._fields)
"""
    name: BTCUSDP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCUSDS(Symbol):
    """
        name: BTCUSDS
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUSDS"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUSDS"

    def __str__(self):
        return "BTCUSDS"

    def __call__(self):
        return "BTCUSDS"


BTCUSDS = BTCUSDS(*BTCUSDS._fields)
"""
    name: BTCUSDS
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCUSDT(Symbol):
    """
        name: BTCUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTCUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUSDT"

    def __str__(self):
        return "BTCUSDT"

    def __call__(self):
        return "BTCUSDT"


BTCUSDT = BTCUSDT(*BTCUSDT._fields)
"""
    name: BTCUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCUST(Symbol):
    """
        name: BTCUST
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUST"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUST"

    def __str__(self):
        return "BTCUST"

    def __call__(self):
        return "BTCUST"


BTCUST = BTCUST(*BTCUST._fields)
"""
    name: BTCUST
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCVAI(Symbol):
    """
        name: BTCVAI
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCVAI"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCVAI"

    def __str__(self):
        return "BTCVAI"

    def __call__(self):
        return "BTCVAI"


BTCVAI = BTCVAI(*BTCVAI._fields)
"""
    name: BTCVAI
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCZAR(Symbol):
    """
        name: BTCZAR
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 200.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCZAR"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 200.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCZAR"

    def __str__(self):
        return "BTCZAR"

    def __call__(self):
        return "BTCZAR"


BTCZAR = BTCZAR(*BTCZAR._fields)
"""
    name: BTCZAR
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 200.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTGBTC(Symbol):
    """
        name: BTGBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTGBTC"

    def __str__(self):
        return "BTGBTC"

    def __call__(self):
        return "BTGBTC"


BTGBTC = BTGBTC(*BTGBTC._fields)
"""
    name: BTGBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTGBUSD(Symbol):
    """
        name: BTGBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTGBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTGBUSD"

    def __str__(self):
        return "BTGBUSD"

    def __call__(self):
        return "BTGBUSD"


BTGBUSD = BTGBUSD(*BTGBUSD._fields)
"""
    name: BTGBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTGETH(Symbol):
    """
        name: BTGETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTGETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTGETH"

    def __str__(self):
        return "BTGETH"

    def __call__(self):
        return "BTGETH"


BTGETH = BTGETH(*BTGETH._fields)
"""
    name: BTGETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTGUSDT(Symbol):
    """
        name: BTGUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTGUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTGUSDT"

    def __str__(self):
        return "BTGUSDT"

    def __call__(self):
        return "BTGUSDT"


BTGUSDT = BTGUSDT(*BTGUSDT._fields)
"""
    name: BTGUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTSBNB(Symbol):
    """
        name: BTSBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTSBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSBNB"

    def __str__(self):
        return "BTSBNB"

    def __call__(self):
        return "BTSBNB"


BTSBNB = BTSBNB(*BTSBNB._fields)
"""
    name: BTSBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTSBTC(Symbol):
    """
        name: BTSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSBTC"

    def __str__(self):
        return "BTSBTC"

    def __call__(self):
        return "BTSBTC"


BTSBTC = BTSBTC(*BTSBTC._fields)
"""
    name: BTSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTSBUSD(Symbol):
    """
        name: BTSBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSBUSD"

    def __str__(self):
        return "BTSBUSD"

    def __call__(self):
        return "BTSBUSD"


BTSBUSD = BTSBUSD(*BTSBUSD._fields)
"""
    name: BTSBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTSETH(Symbol):
    """
        name: BTSETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTSETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSETH"

    def __str__(self):
        return "BTSETH"

    def __call__(self):
        return "BTSETH"


BTSETH = BTSETH(*BTSETH._fields)
"""
    name: BTSETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTSUSDT(Symbol):
    """
        name: BTSUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSUSDT"

    def __str__(self):
        return "BTSUSDT"

    def __call__(self):
        return "BTSUSDT"


BTSUSDT = BTSUSDT(*BTSUSDT._fields)
"""
    name: BTSUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTTBNB(Symbol):
    """
        name: BTTBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTBNB"

    def __str__(self):
        return "BTTBNB"

    def __call__(self):
        return "BTTBNB"


BTTBNB = BTTBNB(*BTTBNB._fields)
"""
    name: BTTBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTBRL(Symbol):
    """
        name: BTTBRL
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTBRL"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTBRL"

    def __str__(self):
        return "BTTBRL"

    def __call__(self):
        return "BTTBRL"


BTTBRL = BTTBRL(*BTTBRL._fields)
"""
    name: BTTBRL
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTBTC(Symbol):
    """
        name: BTTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTBTC"

    def __str__(self):
        return "BTTBTC"

    def __call__(self):
        return "BTTBTC"


BTTBTC = BTTBTC(*BTTBTC._fields)
"""
    name: BTTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTBUSD(Symbol):
    """
        name: BTTBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTBUSD"

    def __str__(self):
        return "BTTBUSD"

    def __call__(self):
        return "BTTBUSD"


BTTBUSD = BTTBUSD(*BTTBUSD._fields)
"""
    name: BTTBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTCBUSD(Symbol):
    """
        name: BTTCBUSD
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTCBUSD"

    def __str__(self):
        return "BTTCBUSD"

    def __call__(self):
        return "BTTCBUSD"


BTTCBUSD = BTTCBUSD(*BTTCBUSD._fields)
"""
    name: BTTCBUSD
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTCTRY(Symbol):
    """
        name: BTTCTRY
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTCTRY"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTCTRY"

    def __str__(self):
        return "BTTCTRY"

    def __call__(self):
        return "BTTCTRY"


BTTCTRY = BTTCTRY(*BTTCTRY._fields)
"""
    name: BTTCTRY
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTCUSDC(Symbol):
    """
        name: BTTCUSDC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTCUSDC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTCUSDC"

    def __str__(self):
        return "BTTCUSDC"

    def __call__(self):
        return "BTTCUSDC"


BTTCUSDC = BTTCUSDC(*BTTCUSDC._fields)
"""
    name: BTTCUSDC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTCUSDT(Symbol):
    """
        name: BTTCUSDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTCUSDT"

    def __str__(self):
        return "BTTCUSDT"

    def __call__(self):
        return "BTTCUSDT"


BTTCUSDT = BTTCUSDT(*BTTCUSDT._fields)
"""
    name: BTTCUSDT
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTEUR(Symbol):
    """
        name: BTTEUR
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTEUR"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTEUR"

    def __str__(self):
        return "BTTEUR"

    def __call__(self):
        return "BTTEUR"


BTTEUR = BTTEUR(*BTTEUR._fields)
"""
    name: BTTEUR
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTPAX(Symbol):
    """
        name: BTTPAX
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTPAX"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTPAX"

    def __str__(self):
        return "BTTPAX"

    def __call__(self):
        return "BTTPAX"


BTTPAX = BTTPAX(*BTTPAX._fields)
"""
    name: BTTPAX
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTTRX(Symbol):
    """
        name: BTTTRX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTTRX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTTRX"

    def __str__(self):
        return "BTTTRX"

    def __call__(self):
        return "BTTTRX"


BTTTRX = BTTTRX(*BTTTRX._fields)
"""
    name: BTTTRX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTTRY(Symbol):
    """
        name: BTTTRY
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTTRY"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTTRY"

    def __str__(self):
        return "BTTTRY"

    def __call__(self):
        return "BTTTRY"


BTTTRY = BTTTRY(*BTTTRY._fields)
"""
    name: BTTTRY
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTTUSD(Symbol):
    """
        name: BTTTUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTTUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTTUSD"

    def __str__(self):
        return "BTTTUSD"

    def __call__(self):
        return "BTTTUSD"


BTTTUSD = BTTTUSD(*BTTTUSD._fields)
"""
    name: BTTTUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTUSDC(Symbol):
    """
        name: BTTUSDC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTUSDC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTUSDC"

    def __str__(self):
        return "BTTUSDC"

    def __call__(self):
        return "BTTUSDC"


BTTUSDC = BTTUSDC(*BTTUSDC._fields)
"""
    name: BTTUSDC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTUSDT(Symbol):
    """
        name: BTTUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTUSDT"

    def __str__(self):
        return "BTTUSDT"

    def __call__(self):
        return "BTTUSDT"


BTTUSDT = BTTUSDT(*BTTUSDT._fields)
"""
    name: BTTUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BULLBUSD(Symbol):
    """
        name: BULLBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BULLBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BULLBUSD"

    def __str__(self):
        return "BULLBUSD"

    def __call__(self):
        return "BULLBUSD"


BULLBUSD = BULLBUSD(*BULLBUSD._fields)
"""
    name: BULLBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BULLUSDT(Symbol):
    """
        name: BULLUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BULLUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BULLUSDT"

    def __str__(self):
        return "BULLUSDT"

    def __call__(self):
        return "BULLUSDT"


BULLUSDT = BULLUSDT(*BULLUSDT._fields)
"""
    name: BULLUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BURGERBNB(Symbol):
    """
        name: BURGERBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BURGERBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGERBNB"

    def __str__(self):
        return "BURGERBNB"

    def __call__(self):
        return "BURGERBNB"


BURGERBNB = BURGERBNB(*BURGERBNB._fields)
"""
    name: BURGERBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BURGERBUSD(Symbol):
    """
        name: BURGERBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BURGERBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGERBUSD"

    def __str__(self):
        return "BURGERBUSD"

    def __call__(self):
        return "BURGERBUSD"


BURGERBUSD = BURGERBUSD(*BURGERBUSD._fields)
"""
    name: BURGERBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BURGERETH(Symbol):
    """
        name: BURGERETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BURGERETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGERETH"

    def __str__(self):
        return "BURGERETH"

    def __call__(self):
        return "BURGERETH"


BURGERETH = BURGERETH(*BURGERETH._fields)
"""
    name: BURGERETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BURGERUSDT(Symbol):
    """
        name: BURGERUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BURGERUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGERUSDT"

    def __str__(self):
        return "BURGERUSDT"

    def __call__(self):
        return "BURGERUSDT"


BURGERUSDT = BURGERUSDT(*BURGERUSDT._fields)
"""
    name: BURGERUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BUSDBIDR(Symbol):
    """
        name: BUSDBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDBIDR"

    def __str__(self):
        return "BUSDBIDR"

    def __call__(self):
        return "BUSDBIDR"


BUSDBIDR = BUSDBIDR(*BUSDBIDR._fields)
"""
    name: BUSDBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BUSDBKRW(Symbol):
    """
        name: BUSDBKRW
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDBKRW"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDBKRW"

    def __str__(self):
        return "BUSDBKRW"

    def __call__(self):
        return "BUSDBKRW"


BUSDBKRW = BUSDBKRW(*BUSDBKRW._fields)
"""
    name: BUSDBKRW
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDBRL(Symbol):
    """
        name: BUSDBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDBRL"

    def __str__(self):
        return "BUSDBRL"

    def __call__(self):
        return "BUSDBRL"


BUSDBRL = BUSDBRL(*BUSDBRL._fields)
"""
    name: BUSDBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDBVND(Symbol):
    """
        name: BUSDBVND
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 30000.00
        max_order_size: 9000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDBVND"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 30000.00
    max_order_size: float = 9000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDBVND"

    def __str__(self):
        return "BUSDBVND"

    def __call__(self):
        return "BUSDBVND"


BUSDBVND = BUSDBVND(*BUSDBVND._fields)
"""
    name: BUSDBVND
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 30000.00
    max_order_size: 9000000.00
    has_margin: False
    exchange: binance
"""


class BUSDDAI(Symbol):
    """
        name: BUSDDAI
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDDAI"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDDAI"

    def __str__(self):
        return "BUSDDAI"

    def __call__(self):
        return "BUSDDAI"


BUSDDAI = BUSDDAI(*BUSDDAI._fields)
"""
    name: BUSDDAI
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDIDRT(Symbol):
    """
        name: BUSDIDRT
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDIDRT"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDIDRT"

    def __str__(self):
        return "BUSDIDRT"

    def __call__(self):
        return "BUSDIDRT"


BUSDIDRT = BUSDIDRT(*BUSDIDRT._fields)
"""
    name: BUSDIDRT
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BUSDNGN(Symbol):
    """
        name: BUSDNGN
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDNGN"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDNGN"

    def __str__(self):
        return "BUSDNGN"

    def __call__(self):
        return "BUSDNGN"


BUSDNGN = BUSDNGN(*BUSDNGN._fields)
"""
    name: BUSDNGN
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDPLN(Symbol):
    """
        name: BUSDPLN
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 50.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDPLN"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 50.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDPLN"

    def __str__(self):
        return "BUSDPLN"

    def __call__(self):
        return "BUSDPLN"


BUSDPLN = BUSDPLN(*BUSDPLN._fields)
"""
    name: BUSDPLN
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 50.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDRON(Symbol):
    """
        name: BUSDRON
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 40.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDRON"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 40.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDRON"

    def __str__(self):
        return "BUSDRON"

    def __call__(self):
        return "BUSDRON"


BUSDRON = BUSDRON(*BUSDRON._fields)
"""
    name: BUSDRON
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 40.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDRUB(Symbol):
    """
        name: BUSDRUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDRUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDRUB"

    def __str__(self):
        return "BUSDRUB"

    def __call__(self):
        return "BUSDRUB"


BUSDRUB = BUSDRUB(*BUSDRUB._fields)
"""
    name: BUSDRUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDTRY(Symbol):
    """
        name: BUSDTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDTRY"

    def __str__(self):
        return "BUSDTRY"

    def __call__(self):
        return "BUSDTRY"


BUSDTRY = BUSDTRY(*BUSDTRY._fields)
"""
    name: BUSDTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDUAH(Symbol):
    """
        name: BUSDUAH
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDUAH"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDUAH"

    def __str__(self):
        return "BUSDUAH"

    def __call__(self):
        return "BUSDUAH"


BUSDUAH = BUSDUAH(*BUSDUAH._fields)
"""
    name: BUSDUAH
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDUSDT(Symbol):
    """
        name: BUSDUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BUSDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDUSDT"

    def __str__(self):
        return "BUSDUSDT"

    def __call__(self):
        return "BUSDUSDT"


BUSDUSDT = BUSDUSDT(*BUSDUSDT._fields)
"""
    name: BUSDUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BUSDVAI(Symbol):
    """
        name: BUSDVAI
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDVAI"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDVAI"

    def __str__(self):
        return "BUSDVAI"

    def __call__(self):
        return "BUSDVAI"


BUSDVAI = BUSDVAI(*BUSDVAI._fields)
"""
    name: BUSDVAI
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDZAR(Symbol):
    """
        name: BUSDZAR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 200.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDZAR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 200.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDZAR"

    def __str__(self):
        return "BUSDZAR"

    def __call__(self):
        return "BUSDZAR"


BUSDZAR = BUSDZAR(*BUSDZAR._fields)
"""
    name: BUSDZAR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 200.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BZRXBNB(Symbol):
    """
        name: BZRXBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BZRXBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BZRXBNB"

    def __str__(self):
        return "BZRXBNB"

    def __call__(self):
        return "BZRXBNB"


BZRXBNB = BZRXBNB(*BZRXBNB._fields)
"""
    name: BZRXBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BZRXBTC(Symbol):
    """
        name: BZRXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BZRXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BZRXBTC"

    def __str__(self):
        return "BZRXBTC"

    def __call__(self):
        return "BZRXBTC"


BZRXBTC = BZRXBTC(*BZRXBTC._fields)
"""
    name: BZRXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BZRXBUSD(Symbol):
    """
        name: BZRXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BZRXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BZRXBUSD"

    def __str__(self):
        return "BZRXBUSD"

    def __call__(self):
        return "BZRXBUSD"


BZRXBUSD = BZRXBUSD(*BZRXBUSD._fields)
"""
    name: BZRXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BZRXUSDT(Symbol):
    """
        name: BZRXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BZRXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BZRXUSDT"

    def __str__(self):
        return "BZRXUSDT"

    def __call__(self):
        return "BZRXUSDT"


BZRXUSDT = BZRXUSDT(*BZRXUSDT._fields)
"""
    name: BZRXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class C98BNB(Symbol):
    """
        name: C98BNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "C98BNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98BNB"

    def __str__(self):
        return "C98BNB"

    def __call__(self):
        return "C98BNB"


C98BNB = C98BNB(*C98BNB._fields)
"""
    name: C98BNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class C98BRL(Symbol):
    """
        name: C98BRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "C98BRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98BRL"

    def __str__(self):
        return "C98BRL"

    def __call__(self):
        return "C98BRL"


C98BRL = C98BRL(*C98BRL._fields)
"""
    name: C98BRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class C98BTC(Symbol):
    """
        name: C98BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "C98BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98BTC"

    def __str__(self):
        return "C98BTC"

    def __call__(self):
        return "C98BTC"


C98BTC = C98BTC(*C98BTC._fields)
"""
    name: C98BTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class C98BUSD(Symbol):
    """
        name: C98BUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "C98BUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98BUSD"

    def __str__(self):
        return "C98BUSD"

    def __call__(self):
        return "C98BUSD"


C98BUSD = C98BUSD(*C98BUSD._fields)
"""
    name: C98BUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class C98USDT(Symbol):
    """
        name: C98USDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "C98USDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98USDT"

    def __str__(self):
        return "C98USDT"

    def __call__(self):
        return "C98USDT"


C98USDT = C98USDT(*C98USDT._fields)
"""
    name: C98USDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CAKEAUD(Symbol):
    """
        name: CAKEAUD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CAKEAUD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEAUD"

    def __str__(self):
        return "CAKEAUD"

    def __call__(self):
        return "CAKEAUD"


CAKEAUD = CAKEAUD(*CAKEAUD._fields)
"""
    name: CAKEAUD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CAKEBNB(Symbol):
    """
        name: CAKEBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CAKEBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEBNB"

    def __str__(self):
        return "CAKEBNB"

    def __call__(self):
        return "CAKEBNB"


CAKEBNB = CAKEBNB(*CAKEBNB._fields)
"""
    name: CAKEBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CAKEBRL(Symbol):
    """
        name: CAKEBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CAKEBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEBRL"

    def __str__(self):
        return "CAKEBRL"

    def __call__(self):
        return "CAKEBRL"


CAKEBRL = CAKEBRL(*CAKEBRL._fields)
"""
    name: CAKEBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CAKEBTC(Symbol):
    """
        name: CAKEBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CAKEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEBTC"

    def __str__(self):
        return "CAKEBTC"

    def __call__(self):
        return "CAKEBTC"


CAKEBTC = CAKEBTC(*CAKEBTC._fields)
"""
    name: CAKEBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CAKEBUSD(Symbol):
    """
        name: CAKEBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CAKEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEBUSD"

    def __str__(self):
        return "CAKEBUSD"

    def __call__(self):
        return "CAKEBUSD"


CAKEBUSD = CAKEBUSD(*CAKEBUSD._fields)
"""
    name: CAKEBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CAKEGBP(Symbol):
    """
        name: CAKEGBP
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CAKEGBP"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEGBP"

    def __str__(self):
        return "CAKEGBP"

    def __call__(self):
        return "CAKEGBP"


CAKEGBP = CAKEGBP(*CAKEGBP._fields)
"""
    name: CAKEGBP
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CAKEUSDT(Symbol):
    """
        name: CAKEUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CAKEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEUSDT"

    def __str__(self):
        return "CAKEUSDT"

    def __call__(self):
        return "CAKEUSDT"


CAKEUSDT = CAKEUSDT(*CAKEUSDT._fields)
"""
    name: CAKEUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CDTBTC(Symbol):
    """
        name: CDTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CDTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CDTBTC"

    def __str__(self):
        return "CDTBTC"

    def __call__(self):
        return "CDTBTC"


CDTBTC = CDTBTC(*CDTBTC._fields)
"""
    name: CDTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CDTETH(Symbol):
    """
        name: CDTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CDTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CDTETH"

    def __str__(self):
        return "CDTETH"

    def __call__(self):
        return "CDTETH"


CDTETH = CDTETH(*CDTETH._fields)
"""
    name: CDTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELOBTC(Symbol):
    """
        name: CELOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELOBTC"

    def __str__(self):
        return "CELOBTC"

    def __call__(self):
        return "CELOBTC"


CELOBTC = CELOBTC(*CELOBTC._fields)
"""
    name: CELOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELOBUSD(Symbol):
    """
        name: CELOBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CELOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELOBUSD"

    def __str__(self):
        return "CELOBUSD"

    def __call__(self):
        return "CELOBUSD"


CELOBUSD = CELOBUSD(*CELOBUSD._fields)
"""
    name: CELOBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CELOUSDT(Symbol):
    """
        name: CELOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CELOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELOUSDT"

    def __str__(self):
        return "CELOUSDT"

    def __call__(self):
        return "CELOUSDT"


CELOUSDT = CELOUSDT(*CELOUSDT._fields)
"""
    name: CELOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CELRBNB(Symbol):
    """
        name: CELRBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELRBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRBNB"

    def __str__(self):
        return "CELRBNB"

    def __call__(self):
        return "CELRBNB"


CELRBNB = CELRBNB(*CELRBNB._fields)
"""
    name: CELRBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELRBTC(Symbol):
    """
        name: CELRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRBTC"

    def __str__(self):
        return "CELRBTC"

    def __call__(self):
        return "CELRBTC"


CELRBTC = CELRBTC(*CELRBTC._fields)
"""
    name: CELRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELRBUSD(Symbol):
    """
        name: CELRBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRBUSD"

    def __str__(self):
        return "CELRBUSD"

    def __call__(self):
        return "CELRBUSD"


CELRBUSD = CELRBUSD(*CELRBUSD._fields)
"""
    name: CELRBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELRETH(Symbol):
    """
        name: CELRETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELRETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRETH"

    def __str__(self):
        return "CELRETH"

    def __call__(self):
        return "CELRETH"


CELRETH = CELRETH(*CELRETH._fields)
"""
    name: CELRETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELRUSDT(Symbol):
    """
        name: CELRUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CELRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRUSDT"

    def __str__(self):
        return "CELRUSDT"

    def __call__(self):
        return "CELRUSDT"


CELRUSDT = CELRUSDT(*CELRUSDT._fields)
"""
    name: CELRUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CFXBTC(Symbol):
    """
        name: CFXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CFXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFXBTC"

    def __str__(self):
        return "CFXBTC"

    def __call__(self):
        return "CFXBTC"


CFXBTC = CFXBTC(*CFXBTC._fields)
"""
    name: CFXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CFXBUSD(Symbol):
    """
        name: CFXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CFXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFXBUSD"

    def __str__(self):
        return "CFXBUSD"

    def __call__(self):
        return "CFXBUSD"


CFXBUSD = CFXBUSD(*CFXBUSD._fields)
"""
    name: CFXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CFXTRY(Symbol):
    """
        name: CFXTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CFXTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFXTRY"

    def __str__(self):
        return "CFXTRY"

    def __call__(self):
        return "CFXTRY"


CFXTRY = CFXTRY(*CFXTRY._fields)
"""
    name: CFXTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class CFXUSDT(Symbol):
    """
        name: CFXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CFXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFXUSDT"

    def __str__(self):
        return "CFXUSDT"

    def __call__(self):
        return "CFXUSDT"


CFXUSDT = CFXUSDT(*CFXUSDT._fields)
"""
    name: CFXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHATBTC(Symbol):
    """
        name: CHATBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHATBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHATBTC"

    def __str__(self):
        return "CHATBTC"

    def __call__(self):
        return "CHATBTC"


CHATBTC = CHATBTC(*CHATBTC._fields)
"""
    name: CHATBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHATETH(Symbol):
    """
        name: CHATETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHATETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHATETH"

    def __str__(self):
        return "CHATETH"

    def __call__(self):
        return "CHATETH"


CHATETH = CHATETH(*CHATETH._fields)
"""
    name: CHATETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHESSBNB(Symbol):
    """
        name: CHESSBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHESSBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHESSBNB"

    def __str__(self):
        return "CHESSBNB"

    def __call__(self):
        return "CHESSBNB"


CHESSBNB = CHESSBNB(*CHESSBNB._fields)
"""
    name: CHESSBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHESSBTC(Symbol):
    """
        name: CHESSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHESSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHESSBTC"

    def __str__(self):
        return "CHESSBTC"

    def __call__(self):
        return "CHESSBTC"


CHESSBTC = CHESSBTC(*CHESSBTC._fields)
"""
    name: CHESSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHESSBUSD(Symbol):
    """
        name: CHESSBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHESSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHESSBUSD"

    def __str__(self):
        return "CHESSBUSD"

    def __call__(self):
        return "CHESSBUSD"


CHESSBUSD = CHESSBUSD(*CHESSBUSD._fields)
"""
    name: CHESSBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHESSUSDT(Symbol):
    """
        name: CHESSUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHESSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHESSUSDT"

    def __str__(self):
        return "CHESSUSDT"

    def __call__(self):
        return "CHESSUSDT"


CHESSUSDT = CHESSUSDT(*CHESSUSDT._fields)
"""
    name: CHESSUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHRBNB(Symbol):
    """
        name: CHRBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHRBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRBNB"

    def __str__(self):
        return "CHRBNB"

    def __call__(self):
        return "CHRBNB"


CHRBNB = CHRBNB(*CHRBNB._fields)
"""
    name: CHRBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHRBTC(Symbol):
    """
        name: CHRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRBTC"

    def __str__(self):
        return "CHRBTC"

    def __call__(self):
        return "CHRBTC"


CHRBTC = CHRBTC(*CHRBTC._fields)
"""
    name: CHRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHRBUSD(Symbol):
    """
        name: CHRBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRBUSD"

    def __str__(self):
        return "CHRBUSD"

    def __call__(self):
        return "CHRBUSD"


CHRBUSD = CHRBUSD(*CHRBUSD._fields)
"""
    name: CHRBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHRETH(Symbol):
    """
        name: CHRETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHRETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRETH"

    def __str__(self):
        return "CHRETH"

    def __call__(self):
        return "CHRETH"


CHRETH = CHRETH(*CHRETH._fields)
"""
    name: CHRETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHRUSDT(Symbol):
    """
        name: CHRUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRUSDT"

    def __str__(self):
        return "CHRUSDT"

    def __call__(self):
        return "CHRUSDT"


CHRUSDT = CHRUSDT(*CHRUSDT._fields)
"""
    name: CHRUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHZBNB(Symbol):
    """
        name: CHZBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZBNB"

    def __str__(self):
        return "CHZBNB"

    def __call__(self):
        return "CHZBNB"


CHZBNB = CHZBNB(*CHZBNB._fields)
"""
    name: CHZBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZBRL(Symbol):
    """
        name: CHZBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZBRL"

    def __str__(self):
        return "CHZBRL"

    def __call__(self):
        return "CHZBRL"


CHZBRL = CHZBRL(*CHZBRL._fields)
"""
    name: CHZBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZBTC(Symbol):
    """
        name: CHZBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHZBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZBTC"

    def __str__(self):
        return "CHZBTC"

    def __call__(self):
        return "CHZBTC"


CHZBTC = CHZBTC(*CHZBTC._fields)
"""
    name: CHZBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHZBUSD(Symbol):
    """
        name: CHZBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZBUSD"

    def __str__(self):
        return "CHZBUSD"

    def __call__(self):
        return "CHZBUSD"


CHZBUSD = CHZBUSD(*CHZBUSD._fields)
"""
    name: CHZBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZEUR(Symbol):
    """
        name: CHZEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZEUR"

    def __str__(self):
        return "CHZEUR"

    def __call__(self):
        return "CHZEUR"


CHZEUR = CHZEUR(*CHZEUR._fields)
"""
    name: CHZEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZGBP(Symbol):
    """
        name: CHZGBP
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZGBP"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZGBP"

    def __str__(self):
        return "CHZGBP"

    def __call__(self):
        return "CHZGBP"


CHZGBP = CHZGBP(*CHZGBP._fields)
"""
    name: CHZGBP
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZTRY(Symbol):
    """
        name: CHZTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZTRY"

    def __str__(self):
        return "CHZTRY"

    def __call__(self):
        return "CHZTRY"


CHZTRY = CHZTRY(*CHZTRY._fields)
"""
    name: CHZTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZUSDT(Symbol):
    """
        name: CHZUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHZUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZUSDT"

    def __str__(self):
        return "CHZUSDT"

    def __call__(self):
        return "CHZUSDT"


CHZUSDT = CHZUSDT(*CHZUSDT._fields)
"""
    name: CHZUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CITYBNB(Symbol):
    """
        name: CITYBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CITYBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CITYBNB"

    def __str__(self):
        return "CITYBNB"

    def __call__(self):
        return "CITYBNB"


CITYBNB = CITYBNB(*CITYBNB._fields)
"""
    name: CITYBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CITYBTC(Symbol):
    """
        name: CITYBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CITYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CITYBTC"

    def __str__(self):
        return "CITYBTC"

    def __call__(self):
        return "CITYBTC"


CITYBTC = CITYBTC(*CITYBTC._fields)
"""
    name: CITYBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CITYBUSD(Symbol):
    """
        name: CITYBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CITYBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CITYBUSD"

    def __str__(self):
        return "CITYBUSD"

    def __call__(self):
        return "CITYBUSD"


CITYBUSD = CITYBUSD(*CITYBUSD._fields)
"""
    name: CITYBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CITYUSDT(Symbol):
    """
        name: CITYUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CITYUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CITYUSDT"

    def __str__(self):
        return "CITYUSDT"

    def __call__(self):
        return "CITYUSDT"


CITYUSDT = CITYUSDT(*CITYUSDT._fields)
"""
    name: CITYUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CKBBTC(Symbol):
    """
        name: CKBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CKBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKBBTC"

    def __str__(self):
        return "CKBBTC"

    def __call__(self):
        return "CKBBTC"


CKBBTC = CKBBTC(*CKBBTC._fields)
"""
    name: CKBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CKBBUSD(Symbol):
    """
        name: CKBBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CKBBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKBBUSD"

    def __str__(self):
        return "CKBBUSD"

    def __call__(self):
        return "CKBBUSD"


CKBBUSD = CKBBUSD(*CKBBUSD._fields)
"""
    name: CKBBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CKBUSDT(Symbol):
    """
        name: CKBUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CKBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKBUSDT"

    def __str__(self):
        return "CKBUSDT"

    def __call__(self):
        return "CKBUSDT"


CKBUSDT = CKBUSDT(*CKBUSDT._fields)
"""
    name: CKBUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CLOAKBTC(Symbol):
    """
        name: CLOAKBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CLOAKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLOAKBTC"

    def __str__(self):
        return "CLOAKBTC"

    def __call__(self):
        return "CLOAKBTC"


CLOAKBTC = CLOAKBTC(*CLOAKBTC._fields)
"""
    name: CLOAKBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CLOAKETH(Symbol):
    """
        name: CLOAKETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CLOAKETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLOAKETH"

    def __str__(self):
        return "CLOAKETH"

    def __call__(self):
        return "CLOAKETH"


CLOAKETH = CLOAKETH(*CLOAKETH._fields)
"""
    name: CLOAKETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CLVBNB(Symbol):
    """
        name: CLVBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CLVBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLVBNB"

    def __str__(self):
        return "CLVBNB"

    def __call__(self):
        return "CLVBNB"


CLVBNB = CLVBNB(*CLVBNB._fields)
"""
    name: CLVBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CLVBTC(Symbol):
    """
        name: CLVBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CLVBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLVBTC"

    def __str__(self):
        return "CLVBTC"

    def __call__(self):
        return "CLVBTC"


CLVBTC = CLVBTC(*CLVBTC._fields)
"""
    name: CLVBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CLVBUSD(Symbol):
    """
        name: CLVBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CLVBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLVBUSD"

    def __str__(self):
        return "CLVBUSD"

    def __call__(self):
        return "CLVBUSD"


CLVBUSD = CLVBUSD(*CLVBUSD._fields)
"""
    name: CLVBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CLVUSDT(Symbol):
    """
        name: CLVUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CLVUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLVUSDT"

    def __str__(self):
        return "CLVUSDT"

    def __call__(self):
        return "CLVUSDT"


CLVUSDT = CLVUSDT(*CLVUSDT._fields)
"""
    name: CLVUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CMTBNB(Symbol):
    """
        name: CMTBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CMTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CMTBNB"

    def __str__(self):
        return "CMTBNB"

    def __call__(self):
        return "CMTBNB"


CMTBNB = CMTBNB(*CMTBNB._fields)
"""
    name: CMTBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CMTBTC(Symbol):
    """
        name: CMTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CMTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CMTBTC"

    def __str__(self):
        return "CMTBTC"

    def __call__(self):
        return "CMTBTC"


CMTBTC = CMTBTC(*CMTBTC._fields)
"""
    name: CMTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CMTETH(Symbol):
    """
        name: CMTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CMTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CMTETH"

    def __str__(self):
        return "CMTETH"

    def __call__(self):
        return "CMTETH"


CMTETH = CMTETH(*CMTETH._fields)
"""
    name: CMTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CNDBNB(Symbol):
    """
        name: CNDBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CNDBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CNDBNB"

    def __str__(self):
        return "CNDBNB"

    def __call__(self):
        return "CNDBNB"


CNDBNB = CNDBNB(*CNDBNB._fields)
"""
    name: CNDBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CNDBTC(Symbol):
    """
        name: CNDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CNDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CNDBTC"

    def __str__(self):
        return "CNDBTC"

    def __call__(self):
        return "CNDBTC"


CNDBTC = CNDBTC(*CNDBTC._fields)
"""
    name: CNDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CNDETH(Symbol):
    """
        name: CNDETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CNDETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CNDETH"

    def __str__(self):
        return "CNDETH"

    def __call__(self):
        return "CNDETH"


CNDETH = CNDETH(*CNDETH._fields)
"""
    name: CNDETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSBNB(Symbol):
    """
        name: COCOSBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COCOSBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSBNB"

    def __str__(self):
        return "COCOSBNB"

    def __call__(self):
        return "COCOSBNB"


COCOSBNB = COCOSBNB(*COCOSBNB._fields)
"""
    name: COCOSBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSBTC(Symbol):
    """
        name: COCOSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COCOSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSBTC"

    def __str__(self):
        return "COCOSBTC"

    def __call__(self):
        return "COCOSBTC"


COCOSBTC = COCOSBTC(*COCOSBTC._fields)
"""
    name: COCOSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSBUSD(Symbol):
    """
        name: COCOSBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COCOSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSBUSD"

    def __str__(self):
        return "COCOSBUSD"

    def __call__(self):
        return "COCOSBUSD"


COCOSBUSD = COCOSBUSD(*COCOSBUSD._fields)
"""
    name: COCOSBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSTRY(Symbol):
    """
        name: COCOSTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COCOSTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSTRY"

    def __str__(self):
        return "COCOSTRY"

    def __call__(self):
        return "COCOSTRY"


COCOSTRY = COCOSTRY(*COCOSTRY._fields)
"""
    name: COCOSTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSUSDT(Symbol):
    """
        name: COCOSUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COCOSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSUSDT"

    def __str__(self):
        return "COCOSUSDT"

    def __call__(self):
        return "COCOSUSDT"


COCOSUSDT = COCOSUSDT(*COCOSUSDT._fields)
"""
    name: COCOSUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COMPBNB(Symbol):
    """
        name: COMPBNB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COMPBNB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMPBNB"

    def __str__(self):
        return "COMPBNB"

    def __call__(self):
        return "COMPBNB"


COMPBNB = COMPBNB(*COMPBNB._fields)
"""
    name: COMPBNB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COMPBTC(Symbol):
    """
        name: COMPBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COMPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMPBTC"

    def __str__(self):
        return "COMPBTC"

    def __call__(self):
        return "COMPBTC"


COMPBTC = COMPBTC(*COMPBTC._fields)
"""
    name: COMPBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COMPBUSD(Symbol):
    """
        name: COMPBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COMPBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMPBUSD"

    def __str__(self):
        return "COMPBUSD"

    def __call__(self):
        return "COMPBUSD"


COMPBUSD = COMPBUSD(*COMPBUSD._fields)
"""
    name: COMPBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COMPUSDT(Symbol):
    """
        name: COMPUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COMPUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMPUSDT"

    def __str__(self):
        return "COMPUSDT"

    def __call__(self):
        return "COMPUSDT"


COMPUSDT = COMPUSDT(*COMPUSDT._fields)
"""
    name: COMPUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COSBNB(Symbol):
    """
        name: COSBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COSBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSBNB"

    def __str__(self):
        return "COSBNB"

    def __call__(self):
        return "COSBNB"


COSBNB = COSBNB(*COSBNB._fields)
"""
    name: COSBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COSBTC(Symbol):
    """
        name: COSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSBTC"

    def __str__(self):
        return "COSBTC"

    def __call__(self):
        return "COSBTC"


COSBTC = COSBTC(*COSBTC._fields)
"""
    name: COSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COSBUSD(Symbol):
    """
        name: COSBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSBUSD"

    def __str__(self):
        return "COSBUSD"

    def __call__(self):
        return "COSBUSD"


COSBUSD = COSBUSD(*COSBUSD._fields)
"""
    name: COSBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COSTRY(Symbol):
    """
        name: COSTRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COSTRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSTRY"

    def __str__(self):
        return "COSTRY"

    def __call__(self):
        return "COSTRY"


COSTRY = COSTRY(*COSTRY._fields)
"""
    name: COSTRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class COSUSDT(Symbol):
    """
        name: COSUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSUSDT"

    def __str__(self):
        return "COSUSDT"

    def __call__(self):
        return "COSUSDT"


COSUSDT = COSUSDT(*COSUSDT._fields)
"""
    name: COSUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COTIBNB(Symbol):
    """
        name: COTIBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COTIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTIBNB"

    def __str__(self):
        return "COTIBNB"

    def __call__(self):
        return "COTIBNB"


COTIBNB = COTIBNB(*COTIBNB._fields)
"""
    name: COTIBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COTIBTC(Symbol):
    """
        name: COTIBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COTIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTIBTC"

    def __str__(self):
        return "COTIBTC"

    def __call__(self):
        return "COTIBTC"


COTIBTC = COTIBTC(*COTIBTC._fields)
"""
    name: COTIBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COTIBUSD(Symbol):
    """
        name: COTIBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COTIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTIBUSD"

    def __str__(self):
        return "COTIBUSD"

    def __call__(self):
        return "COTIBUSD"


COTIBUSD = COTIBUSD(*COTIBUSD._fields)
"""
    name: COTIBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COTIUSDT(Symbol):
    """
        name: COTIUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COTIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTIUSDT"

    def __str__(self):
        return "COTIUSDT"

    def __call__(self):
        return "COTIUSDT"


COTIUSDT = COTIUSDT(*COTIUSDT._fields)
"""
    name: COTIUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COVERBUSD(Symbol):
    """
        name: COVERBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COVERBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COVERBUSD"

    def __str__(self):
        return "COVERBUSD"

    def __call__(self):
        return "COVERBUSD"


COVERBUSD = COVERBUSD(*COVERBUSD._fields)
"""
    name: COVERBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COVERETH(Symbol):
    """
        name: COVERETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COVERETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COVERETH"

    def __str__(self):
        return "COVERETH"

    def __call__(self):
        return "COVERETH"


COVERETH = COVERETH(*COVERETH._fields)
"""
    name: COVERETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CREAMBNB(Symbol):
    """
        name: CREAMBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CREAMBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREAMBNB"

    def __str__(self):
        return "CREAMBNB"

    def __call__(self):
        return "CREAMBNB"


CREAMBNB = CREAMBNB(*CREAMBNB._fields)
"""
    name: CREAMBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CREAMBUSD(Symbol):
    """
        name: CREAMBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CREAMBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREAMBUSD"

    def __str__(self):
        return "CREAMBUSD"

    def __call__(self):
        return "CREAMBUSD"


CREAMBUSD = CREAMBUSD(*CREAMBUSD._fields)
"""
    name: CREAMBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CRVBNB(Symbol):
    """
        name: CRVBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CRVBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVBNB"

    def __str__(self):
        return "CRVBNB"

    def __call__(self):
        return "CRVBNB"


CRVBNB = CRVBNB(*CRVBNB._fields)
"""
    name: CRVBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CRVBTC(Symbol):
    """
        name: CRVBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CRVBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVBTC"

    def __str__(self):
        return "CRVBTC"

    def __call__(self):
        return "CRVBTC"


CRVBTC = CRVBTC(*CRVBTC._fields)
"""
    name: CRVBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CRVBUSD(Symbol):
    """
        name: CRVBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CRVBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVBUSD"

    def __str__(self):
        return "CRVBUSD"

    def __call__(self):
        return "CRVBUSD"


CRVBUSD = CRVBUSD(*CRVBUSD._fields)
"""
    name: CRVBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CRVETH(Symbol):
    """
        name: CRVETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CRVETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVETH"

    def __str__(self):
        return "CRVETH"

    def __call__(self):
        return "CRVETH"


CRVETH = CRVETH(*CRVETH._fields)
"""
    name: CRVETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CRVUSDT(Symbol):
    """
        name: CRVUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CRVUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVUSDT"

    def __str__(self):
        return "CRVUSDT"

    def __call__(self):
        return "CRVUSDT"


CRVUSDT = CRVUSDT(*CRVUSDT._fields)
"""
    name: CRVUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTKBNB(Symbol):
    """
        name: CTKBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTKBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTKBNB"

    def __str__(self):
        return "CTKBNB"

    def __call__(self):
        return "CTKBNB"


CTKBNB = CTKBNB(*CTKBNB._fields)
"""
    name: CTKBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTKBTC(Symbol):
    """
        name: CTKBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTKBTC"

    def __str__(self):
        return "CTKBTC"

    def __call__(self):
        return "CTKBTC"


CTKBTC = CTKBTC(*CTKBTC._fields)
"""
    name: CTKBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTKBUSD(Symbol):
    """
        name: CTKBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTKBUSD"

    def __str__(self):
        return "CTKBUSD"

    def __call__(self):
        return "CTKBUSD"


CTKBUSD = CTKBUSD(*CTKBUSD._fields)
"""
    name: CTKBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTKUSDT(Symbol):
    """
        name: CTKUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTKUSDT"

    def __str__(self):
        return "CTKUSDT"

    def __call__(self):
        return "CTKUSDT"


CTKUSDT = CTKUSDT(*CTKUSDT._fields)
"""
    name: CTKUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTSIBNB(Symbol):
    """
        name: CTSIBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTSIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSIBNB"

    def __str__(self):
        return "CTSIBNB"

    def __call__(self):
        return "CTSIBNB"


CTSIBNB = CTSIBNB(*CTSIBNB._fields)
"""
    name: CTSIBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTSIBTC(Symbol):
    """
        name: CTSIBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTSIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSIBTC"

    def __str__(self):
        return "CTSIBTC"

    def __call__(self):
        return "CTSIBTC"


CTSIBTC = CTSIBTC(*CTSIBTC._fields)
"""
    name: CTSIBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTSIBUSD(Symbol):
    """
        name: CTSIBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTSIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSIBUSD"

    def __str__(self):
        return "CTSIBUSD"

    def __call__(self):
        return "CTSIBUSD"


CTSIBUSD = CTSIBUSD(*CTSIBUSD._fields)
"""
    name: CTSIBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTSIUSDT(Symbol):
    """
        name: CTSIUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTSIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSIUSDT"

    def __str__(self):
        return "CTSIUSDT"

    def __call__(self):
        return "CTSIUSDT"


CTSIUSDT = CTSIUSDT(*CTSIUSDT._fields)
"""
    name: CTSIUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTXCBNB(Symbol):
    """
        name: CTXCBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTXCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTXCBNB"

    def __str__(self):
        return "CTXCBNB"

    def __call__(self):
        return "CTXCBNB"


CTXCBNB = CTXCBNB(*CTXCBNB._fields)
"""
    name: CTXCBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTXCBTC(Symbol):
    """
        name: CTXCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTXCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTXCBTC"

    def __str__(self):
        return "CTXCBTC"

    def __call__(self):
        return "CTXCBTC"


CTXCBTC = CTXCBTC(*CTXCBTC._fields)
"""
    name: CTXCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTXCBUSD(Symbol):
    """
        name: CTXCBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTXCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTXCBUSD"

    def __str__(self):
        return "CTXCBUSD"

    def __call__(self):
        return "CTXCBUSD"


CTXCBUSD = CTXCBUSD(*CTXCBUSD._fields)
"""
    name: CTXCBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTXCUSDT(Symbol):
    """
        name: CTXCUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTXCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTXCUSDT"

    def __str__(self):
        return "CTXCUSDT"

    def __call__(self):
        return "CTXCUSDT"


CTXCUSDT = CTXCUSDT(*CTXCUSDT._fields)
"""
    name: CTXCUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CVCBNB(Symbol):
    """
        name: CVCBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCBNB"

    def __str__(self):
        return "CVCBNB"

    def __call__(self):
        return "CVCBNB"


CVCBNB = CVCBNB(*CVCBNB._fields)
"""
    name: CVCBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVCBTC(Symbol):
    """
        name: CVCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCBTC"

    def __str__(self):
        return "CVCBTC"

    def __call__(self):
        return "CVCBTC"


CVCBTC = CVCBTC(*CVCBTC._fields)
"""
    name: CVCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVCBUSD(Symbol):
    """
        name: CVCBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCBUSD"

    def __str__(self):
        return "CVCBUSD"

    def __call__(self):
        return "CVCBUSD"


CVCBUSD = CVCBUSD(*CVCBUSD._fields)
"""
    name: CVCBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVCETH(Symbol):
    """
        name: CVCETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCETH"

    def __str__(self):
        return "CVCETH"

    def __call__(self):
        return "CVCETH"


CVCETH = CVCETH(*CVCETH._fields)
"""
    name: CVCETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVCUSDT(Symbol):
    """
        name: CVCUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCUSDT"

    def __str__(self):
        return "CVCUSDT"

    def __call__(self):
        return "CVCUSDT"


CVCUSDT = CVCUSDT(*CVCUSDT._fields)
"""
    name: CVCUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVPBUSD(Symbol):
    """
        name: CVPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVPBUSD"

    def __str__(self):
        return "CVPBUSD"

    def __call__(self):
        return "CVPBUSD"


CVPBUSD = CVPBUSD(*CVPBUSD._fields)
"""
    name: CVPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVPETH(Symbol):
    """
        name: CVPETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVPETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVPETH"

    def __str__(self):
        return "CVPETH"

    def __call__(self):
        return "CVPETH"


CVPETH = CVPETH(*CVPETH._fields)
"""
    name: CVPETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVPUSDT(Symbol):
    """
        name: CVPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVPUSDT"

    def __str__(self):
        return "CVPUSDT"

    def __call__(self):
        return "CVPUSDT"


CVPUSDT = CVPUSDT(*CVPUSDT._fields)
"""
    name: CVPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVXBTC(Symbol):
    """
        name: CVXBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVXBTC"

    def __str__(self):
        return "CVXBTC"

    def __call__(self):
        return "CVXBTC"


CVXBTC = CVXBTC(*CVXBTC._fields)
"""
    name: CVXBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVXBUSD(Symbol):
    """
        name: CVXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVXBUSD"

    def __str__(self):
        return "CVXBUSD"

    def __call__(self):
        return "CVXBUSD"


CVXBUSD = CVXBUSD(*CVXBUSD._fields)
"""
    name: CVXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVXUSDT(Symbol):
    """
        name: CVXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVXUSDT"

    def __str__(self):
        return "CVXUSDT"

    def __call__(self):
        return "CVXUSDT"


CVXUSDT = CVXUSDT(*CVXUSDT._fields)
"""
    name: CVXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAIBNB(Symbol):
    """
        name: DAIBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAIBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAIBNB"

    def __str__(self):
        return "DAIBNB"

    def __call__(self):
        return "DAIBNB"


DAIBNB = DAIBNB(*DAIBNB._fields)
"""
    name: DAIBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAIBTC(Symbol):
    """
        name: DAIBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAIBTC"

    def __str__(self):
        return "DAIBTC"

    def __call__(self):
        return "DAIBTC"


DAIBTC = DAIBTC(*DAIBTC._fields)
"""
    name: DAIBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAIBUSD(Symbol):
    """
        name: DAIBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAIBUSD"

    def __str__(self):
        return "DAIBUSD"

    def __call__(self):
        return "DAIBUSD"


DAIBUSD = DAIBUSD(*DAIBUSD._fields)
"""
    name: DAIBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAIUSDT(Symbol):
    """
        name: DAIUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAIUSDT"

    def __str__(self):
        return "DAIUSDT"

    def __call__(self):
        return "DAIUSDT"


DAIUSDT = DAIUSDT(*DAIUSDT._fields)
"""
    name: DAIUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DARBNB(Symbol):
    """
        name: DARBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DARBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARBNB"

    def __str__(self):
        return "DARBNB"

    def __call__(self):
        return "DARBNB"


DARBNB = DARBNB(*DARBNB._fields)
"""
    name: DARBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DARBTC(Symbol):
    """
        name: DARBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DARBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARBTC"

    def __str__(self):
        return "DARBTC"

    def __call__(self):
        return "DARBTC"


DARBTC = DARBTC(*DARBTC._fields)
"""
    name: DARBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DARBUSD(Symbol):
    """
        name: DARBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DARBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARBUSD"

    def __str__(self):
        return "DARBUSD"

    def __call__(self):
        return "DARBUSD"


DARBUSD = DARBUSD(*DARBUSD._fields)
"""
    name: DARBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DARETH(Symbol):
    """
        name: DARETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DARETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARETH"

    def __str__(self):
        return "DARETH"

    def __call__(self):
        return "DARETH"


DARETH = DARETH(*DARETH._fields)
"""
    name: DARETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAREUR(Symbol):
    """
        name: DAREUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAREUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAREUR"

    def __str__(self):
        return "DAREUR"

    def __call__(self):
        return "DAREUR"


DAREUR = DAREUR(*DAREUR._fields)
"""
    name: DAREUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DARTRY(Symbol):
    """
        name: DARTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DARTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARTRY"

    def __str__(self):
        return "DARTRY"

    def __call__(self):
        return "DARTRY"


DARTRY = DARTRY(*DARTRY._fields)
"""
    name: DARTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class DARUSDT(Symbol):
    """
        name: DARUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DARUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARUSDT"

    def __str__(self):
        return "DARUSDT"

    def __call__(self):
        return "DARUSDT"


DARUSDT = DARUSDT(*DARUSDT._fields)
"""
    name: DARUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DASHBNB(Symbol):
    """
        name: DASHBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DASHBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHBNB"

    def __str__(self):
        return "DASHBNB"

    def __call__(self):
        return "DASHBNB"


DASHBNB = DASHBNB(*DASHBNB._fields)
"""
    name: DASHBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DASHBTC(Symbol):
    """
        name: DASHBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DASHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHBTC"

    def __str__(self):
        return "DASHBTC"

    def __call__(self):
        return "DASHBTC"


DASHBTC = DASHBTC(*DASHBTC._fields)
"""
    name: DASHBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DASHBUSD(Symbol):
    """
        name: DASHBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DASHBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHBUSD"

    def __str__(self):
        return "DASHBUSD"

    def __call__(self):
        return "DASHBUSD"


DASHBUSD = DASHBUSD(*DASHBUSD._fields)
"""
    name: DASHBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DASHETH(Symbol):
    """
        name: DASHETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DASHETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHETH"

    def __str__(self):
        return "DASHETH"

    def __call__(self):
        return "DASHETH"


DASHETH = DASHETH(*DASHETH._fields)
"""
    name: DASHETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DASHUSDT(Symbol):
    """
        name: DASHUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DASHUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHUSDT"

    def __str__(self):
        return "DASHUSDT"

    def __call__(self):
        return "DASHUSDT"


DASHUSDT = DASHUSDT(*DASHUSDT._fields)
"""
    name: DASHUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DATABTC(Symbol):
    """
        name: DATABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DATABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATABTC"

    def __str__(self):
        return "DATABTC"

    def __call__(self):
        return "DATABTC"


DATABTC = DATABTC(*DATABTC._fields)
"""
    name: DATABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DATABUSD(Symbol):
    """
        name: DATABUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DATABUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATABUSD"

    def __str__(self):
        return "DATABUSD"

    def __call__(self):
        return "DATABUSD"


DATABUSD = DATABUSD(*DATABUSD._fields)
"""
    name: DATABUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DATAETH(Symbol):
    """
        name: DATAETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DATAETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATAETH"

    def __str__(self):
        return "DATAETH"

    def __call__(self):
        return "DATAETH"


DATAETH = DATAETH(*DATAETH._fields)
"""
    name: DATAETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DATAUSDT(Symbol):
    """
        name: DATAUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DATAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATAUSDT"

    def __str__(self):
        return "DATAUSDT"

    def __call__(self):
        return "DATAUSDT"


DATAUSDT = DATAUSDT(*DATAUSDT._fields)
"""
    name: DATAUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DCRBNB(Symbol):
    """
        name: DCRBNB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DCRBNB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCRBNB"

    def __str__(self):
        return "DCRBNB"

    def __call__(self):
        return "DCRBNB"


DCRBNB = DCRBNB(*DCRBNB._fields)
"""
    name: DCRBNB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DCRBTC(Symbol):
    """
        name: DCRBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DCRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCRBTC"

    def __str__(self):
        return "DCRBTC"

    def __call__(self):
        return "DCRBTC"


DCRBTC = DCRBTC(*DCRBTC._fields)
"""
    name: DCRBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DCRBUSD(Symbol):
    """
        name: DCRBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DCRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCRBUSD"

    def __str__(self):
        return "DCRBUSD"

    def __call__(self):
        return "DCRBUSD"


DCRBUSD = DCRBUSD(*DCRBUSD._fields)
"""
    name: DCRBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DCRUSDT(Symbol):
    """
        name: DCRUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DCRUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCRUSDT"

    def __str__(self):
        return "DCRUSDT"

    def __call__(self):
        return "DCRUSDT"


DCRUSDT = DCRUSDT(*DCRUSDT._fields)
"""
    name: DCRUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DEGOBTC(Symbol):
    """
        name: DEGOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DEGOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGOBTC"

    def __str__(self):
        return "DEGOBTC"

    def __call__(self):
        return "DEGOBTC"


DEGOBTC = DEGOBTC(*DEGOBTC._fields)
"""
    name: DEGOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DEGOBUSD(Symbol):
    """
        name: DEGOBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DEGOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGOBUSD"

    def __str__(self):
        return "DEGOBUSD"

    def __call__(self):
        return "DEGOBUSD"


DEGOBUSD = DEGOBUSD(*DEGOBUSD._fields)
"""
    name: DEGOBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DEGOUSDT(Symbol):
    """
        name: DEGOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DEGOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGOUSDT"

    def __str__(self):
        return "DEGOUSDT"

    def __call__(self):
        return "DEGOUSDT"


DEGOUSDT = DEGOUSDT(*DEGOUSDT._fields)
"""
    name: DEGOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DENTBTC(Symbol):
    """
        name: DENTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DENTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTBTC"

    def __str__(self):
        return "DENTBTC"

    def __call__(self):
        return "DENTBTC"


DENTBTC = DENTBTC(*DENTBTC._fields)
"""
    name: DENTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DENTBUSD(Symbol):
    """
        name: DENTBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DENTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTBUSD"

    def __str__(self):
        return "DENTBUSD"

    def __call__(self):
        return "DENTBUSD"


DENTBUSD = DENTBUSD(*DENTBUSD._fields)
"""
    name: DENTBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DENTETH(Symbol):
    """
        name: DENTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DENTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTETH"

    def __str__(self):
        return "DENTETH"

    def __call__(self):
        return "DENTETH"


DENTETH = DENTETH(*DENTETH._fields)
"""
    name: DENTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DENTTRY(Symbol):
    """
        name: DENTTRY
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DENTTRY"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTTRY"

    def __str__(self):
        return "DENTTRY"

    def __call__(self):
        return "DENTTRY"


DENTTRY = DENTTRY(*DENTTRY._fields)
"""
    name: DENTTRY
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class DENTUSDT(Symbol):
    """
        name: DENTUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DENTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTUSDT"

    def __str__(self):
        return "DENTUSDT"

    def __call__(self):
        return "DENTUSDT"


DENTUSDT = DENTUSDT(*DENTUSDT._fields)
"""
    name: DENTUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DEXEBUSD(Symbol):
    """
        name: DEXEBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DEXEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXEBUSD"

    def __str__(self):
        return "DEXEBUSD"

    def __call__(self):
        return "DEXEBUSD"


DEXEBUSD = DEXEBUSD(*DEXEBUSD._fields)
"""
    name: DEXEBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DEXEETH(Symbol):
    """
        name: DEXEETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DEXEETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXEETH"

    def __str__(self):
        return "DEXEETH"

    def __call__(self):
        return "DEXEETH"


DEXEETH = DEXEETH(*DEXEETH._fields)
"""
    name: DEXEETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DEXEUSDT(Symbol):
    """
        name: DEXEUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DEXEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXEUSDT"

    def __str__(self):
        return "DEXEUSDT"

    def __call__(self):
        return "DEXEUSDT"


DEXEUSDT = DEXEUSDT(*DEXEUSDT._fields)
"""
    name: DEXEUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DFBUSD(Symbol):
    """
        name: DFBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DFBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFBUSD"

    def __str__(self):
        return "DFBUSD"

    def __call__(self):
        return "DFBUSD"


DFBUSD = DFBUSD(*DFBUSD._fields)
"""
    name: DFBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DFETH(Symbol):
    """
        name: DFETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DFETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFETH"

    def __str__(self):
        return "DFETH"

    def __call__(self):
        return "DFETH"


DFETH = DFETH(*DFETH._fields)
"""
    name: DFETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DFUSDT(Symbol):
    """
        name: DFUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DFUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFUSDT"

    def __str__(self):
        return "DFUSDT"

    def __call__(self):
        return "DFUSDT"


DFUSDT = DFUSDT(*DFUSDT._fields)
"""
    name: DFUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DGBBTC(Symbol):
    """
        name: DGBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DGBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGBBTC"

    def __str__(self):
        return "DGBBTC"

    def __call__(self):
        return "DGBBTC"


DGBBTC = DGBBTC(*DGBBTC._fields)
"""
    name: DGBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DGBBUSD(Symbol):
    """
        name: DGBBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DGBBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGBBUSD"

    def __str__(self):
        return "DGBBUSD"

    def __call__(self):
        return "DGBBUSD"


DGBBUSD = DGBBUSD(*DGBBUSD._fields)
"""
    name: DGBBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DGBUSDT(Symbol):
    """
        name: DGBUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DGBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGBUSDT"

    def __str__(self):
        return "DGBUSDT"

    def __call__(self):
        return "DGBUSDT"


DGBUSDT = DGBUSDT(*DGBUSDT._fields)
"""
    name: DGBUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DGDBTC(Symbol):
    """
        name: DGDBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DGDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGDBTC"

    def __str__(self):
        return "DGDBTC"

    def __call__(self):
        return "DGDBTC"


DGDBTC = DGDBTC(*DGDBTC._fields)
"""
    name: DGDBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DGDETH(Symbol):
    """
        name: DGDETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DGDETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGDETH"

    def __str__(self):
        return "DGDETH"

    def __call__(self):
        return "DGDETH"


DGDETH = DGDETH(*DGDETH._fields)
"""
    name: DGDETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DIABNB(Symbol):
    """
        name: DIABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DIABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIABNB"

    def __str__(self):
        return "DIABNB"

    def __call__(self):
        return "DIABNB"


DIABNB = DIABNB(*DIABNB._fields)
"""
    name: DIABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DIABTC(Symbol):
    """
        name: DIABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DIABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIABTC"

    def __str__(self):
        return "DIABTC"

    def __call__(self):
        return "DIABTC"


DIABTC = DIABTC(*DIABTC._fields)
"""
    name: DIABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DIABUSD(Symbol):
    """
        name: DIABUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DIABUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIABUSD"

    def __str__(self):
        return "DIABUSD"

    def __call__(self):
        return "DIABUSD"


DIABUSD = DIABUSD(*DIABUSD._fields)
"""
    name: DIABUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DIAUSDT(Symbol):
    """
        name: DIAUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DIAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIAUSDT"

    def __str__(self):
        return "DIAUSDT"

    def __call__(self):
        return "DIAUSDT"


DIAUSDT = DIAUSDT(*DIAUSDT._fields)
"""
    name: DIAUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DLTBNB(Symbol):
    """
        name: DLTBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DLTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DLTBNB"

    def __str__(self):
        return "DLTBNB"

    def __call__(self):
        return "DLTBNB"


DLTBNB = DLTBNB(*DLTBNB._fields)
"""
    name: DLTBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DLTBTC(Symbol):
    """
        name: DLTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DLTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DLTBTC"

    def __str__(self):
        return "DLTBTC"

    def __call__(self):
        return "DLTBTC"


DLTBTC = DLTBTC(*DLTBTC._fields)
"""
    name: DLTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DLTETH(Symbol):
    """
        name: DLTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DLTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DLTETH"

    def __str__(self):
        return "DLTETH"

    def __call__(self):
        return "DLTETH"


DLTETH = DLTETH(*DLTETH._fields)
"""
    name: DLTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DNTBTC(Symbol):
    """
        name: DNTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DNTBTC"

    def __str__(self):
        return "DNTBTC"

    def __call__(self):
        return "DNTBTC"


DNTBTC = DNTBTC(*DNTBTC._fields)
"""
    name: DNTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DNTBUSD(Symbol):
    """
        name: DNTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DNTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DNTBUSD"

    def __str__(self):
        return "DNTBUSD"

    def __call__(self):
        return "DNTBUSD"


DNTBUSD = DNTBUSD(*DNTBUSD._fields)
"""
    name: DNTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DNTETH(Symbol):
    """
        name: DNTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DNTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DNTETH"

    def __str__(self):
        return "DNTETH"

    def __call__(self):
        return "DNTETH"


DNTETH = DNTETH(*DNTETH._fields)
"""
    name: DNTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DNTUSDT(Symbol):
    """
        name: DNTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DNTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DNTUSDT"

    def __str__(self):
        return "DNTUSDT"

    def __call__(self):
        return "DNTUSDT"


DNTUSDT = DNTUSDT(*DNTUSDT._fields)
"""
    name: DNTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOCKBTC(Symbol):
    """
        name: DOCKBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOCKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCKBTC"

    def __str__(self):
        return "DOCKBTC"

    def __call__(self):
        return "DOCKBTC"


DOCKBTC = DOCKBTC(*DOCKBTC._fields)
"""
    name: DOCKBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOCKBUSD(Symbol):
    """
        name: DOCKBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOCKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCKBUSD"

    def __str__(self):
        return "DOCKBUSD"

    def __call__(self):
        return "DOCKBUSD"


DOCKBUSD = DOCKBUSD(*DOCKBUSD._fields)
"""
    name: DOCKBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOCKETH(Symbol):
    """
        name: DOCKETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOCKETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCKETH"

    def __str__(self):
        return "DOCKETH"

    def __call__(self):
        return "DOCKETH"


DOCKETH = DOCKETH(*DOCKETH._fields)
"""
    name: DOCKETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOCKUSDT(Symbol):
    """
        name: DOCKUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOCKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCKUSDT"

    def __str__(self):
        return "DOCKUSDT"

    def __call__(self):
        return "DOCKUSDT"


DOCKUSDT = DOCKUSDT(*DOCKUSDT._fields)
"""
    name: DOCKUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DODOBTC(Symbol):
    """
        name: DODOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DODOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DODOBTC"

    def __str__(self):
        return "DODOBTC"

    def __call__(self):
        return "DODOBTC"


DODOBTC = DODOBTC(*DODOBTC._fields)
"""
    name: DODOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DODOBUSD(Symbol):
    """
        name: DODOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DODOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DODOBUSD"

    def __str__(self):
        return "DODOBUSD"

    def __call__(self):
        return "DODOBUSD"


DODOBUSD = DODOBUSD(*DODOBUSD._fields)
"""
    name: DODOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DODOUSDT(Symbol):
    """
        name: DODOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DODOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DODOUSDT"

    def __str__(self):
        return "DODOUSDT"

    def __call__(self):
        return "DODOUSDT"


DODOUSDT = DODOUSDT(*DODOUSDT._fields)
"""
    name: DODOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOGEAUD(Symbol):
    """
        name: DOGEAUD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEAUD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEAUD"

    def __str__(self):
        return "DOGEAUD"

    def __call__(self):
        return "DOGEAUD"


DOGEAUD = DOGEAUD(*DOGEAUD._fields)
"""
    name: DOGEAUD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEBIDR(Symbol):
    """
        name: DOGEBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBIDR"

    def __str__(self):
        return "DOGEBIDR"

    def __call__(self):
        return "DOGEBIDR"


DOGEBIDR = DOGEBIDR(*DOGEBIDR._fields)
"""
    name: DOGEBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class DOGEBNB(Symbol):
    """
        name: DOGEBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBNB"

    def __str__(self):
        return "DOGEBNB"

    def __call__(self):
        return "DOGEBNB"


DOGEBNB = DOGEBNB(*DOGEBNB._fields)
"""
    name: DOGEBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEBRL(Symbol):
    """
        name: DOGEBRL
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEBRL"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBRL"

    def __str__(self):
        return "DOGEBRL"

    def __call__(self):
        return "DOGEBRL"


DOGEBRL = DOGEBRL(*DOGEBRL._fields)
"""
    name: DOGEBRL
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEBTC(Symbol):
    """
        name: DOGEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOGEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBTC"

    def __str__(self):
        return "DOGEBTC"

    def __call__(self):
        return "DOGEBTC"


DOGEBTC = DOGEBTC(*DOGEBTC._fields)
"""
    name: DOGEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOGEBUSD(Symbol):
    """
        name: DOGEBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOGEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBUSD"

    def __str__(self):
        return "DOGEBUSD"

    def __call__(self):
        return "DOGEBUSD"


DOGEBUSD = DOGEBUSD(*DOGEBUSD._fields)
"""
    name: DOGEBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOGEEUR(Symbol):
    """
        name: DOGEEUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEEUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEEUR"

    def __str__(self):
        return "DOGEEUR"

    def __call__(self):
        return "DOGEEUR"


DOGEEUR = DOGEEUR(*DOGEEUR._fields)
"""
    name: DOGEEUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEGBP(Symbol):
    """
        name: DOGEGBP
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEGBP"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEGBP"

    def __str__(self):
        return "DOGEGBP"

    def __call__(self):
        return "DOGEGBP"


DOGEGBP = DOGEGBP(*DOGEGBP._fields)
"""
    name: DOGEGBP
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEPAX(Symbol):
    """
        name: DOGEPAX
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEPAX"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEPAX"

    def __str__(self):
        return "DOGEPAX"

    def __call__(self):
        return "DOGEPAX"


DOGEPAX = DOGEPAX(*DOGEPAX._fields)
"""
    name: DOGEPAX
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGERUB(Symbol):
    """
        name: DOGERUB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGERUB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGERUB"

    def __str__(self):
        return "DOGERUB"

    def __call__(self):
        return "DOGERUB"


DOGERUB = DOGERUB(*DOGERUB._fields)
"""
    name: DOGERUB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGETRY(Symbol):
    """
        name: DOGETRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGETRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGETRY"

    def __str__(self):
        return "DOGETRY"

    def __call__(self):
        return "DOGETRY"


DOGETRY = DOGETRY(*DOGETRY._fields)
"""
    name: DOGETRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGETUSD(Symbol):
    """
        name: DOGETUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGETUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGETUSD"

    def __str__(self):
        return "DOGETUSD"

    def __call__(self):
        return "DOGETUSD"


DOGETUSD = DOGETUSD(*DOGETUSD._fields)
"""
    name: DOGETUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEUSDC(Symbol):
    """
        name: DOGEUSDC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEUSDC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEUSDC"

    def __str__(self):
        return "DOGEUSDC"

    def __call__(self):
        return "DOGEUSDC"


DOGEUSDC = DOGEUSDC(*DOGEUSDC._fields)
"""
    name: DOGEUSDC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEUSDT(Symbol):
    """
        name: DOGEUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOGEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEUSDT"

    def __str__(self):
        return "DOGEUSDT"

    def __call__(self):
        return "DOGEUSDT"


DOGEUSDT = DOGEUSDT(*DOGEUSDT._fields)
"""
    name: DOGEUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOTAUD(Symbol):
    """
        name: DOTAUD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTAUD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTAUD"

    def __str__(self):
        return "DOTAUD"

    def __call__(self):
        return "DOTAUD"


DOTAUD = DOTAUD(*DOTAUD._fields)
"""
    name: DOTAUD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTBIDR(Symbol):
    """
        name: DOTBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "DOTBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBIDR"

    def __str__(self):
        return "DOTBIDR"

    def __call__(self):
        return "DOTBIDR"


DOTBIDR = DOTBIDR(*DOTBIDR._fields)
"""
    name: DOTBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class DOTBKRW(Symbol):
    """
        name: DOTBKRW
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTBKRW"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBKRW"

    def __str__(self):
        return "DOTBKRW"

    def __call__(self):
        return "DOTBKRW"


DOTBKRW = DOTBKRW(*DOTBKRW._fields)
"""
    name: DOTBKRW
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTBNB(Symbol):
    """
        name: DOTBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBNB"

    def __str__(self):
        return "DOTBNB"

    def __call__(self):
        return "DOTBNB"


DOTBNB = DOTBNB(*DOTBNB._fields)
"""
    name: DOTBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTBRL(Symbol):
    """
        name: DOTBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBRL"

    def __str__(self):
        return "DOTBRL"

    def __call__(self):
        return "DOTBRL"


DOTBRL = DOTBRL(*DOTBRL._fields)
"""
    name: DOTBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTBTC(Symbol):
    """
        name: DOTBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBTC"

    def __str__(self):
        return "DOTBTC"

    def __call__(self):
        return "DOTBTC"


DOTBTC = DOTBTC(*DOTBTC._fields)
"""
    name: DOTBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOTBUSD(Symbol):
    """
        name: DOTBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBUSD"

    def __str__(self):
        return "DOTBUSD"

    def __call__(self):
        return "DOTBUSD"


DOTBUSD = DOTBUSD(*DOTBUSD._fields)
"""
    name: DOTBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOTDOWNUSDT(Symbol):
    """
        name: DOTDOWNUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTDOWNUSDT"

    def __str__(self):
        return "DOTDOWNUSDT"

    def __call__(self):
        return "DOTDOWNUSDT"


DOTDOWNUSDT = DOTDOWNUSDT(*DOTDOWNUSDT._fields)
"""
    name: DOTDOWNUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTETH(Symbol):
    """
        name: DOTETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTETH"

    def __str__(self):
        return "DOTETH"

    def __call__(self):
        return "DOTETH"


DOTETH = DOTETH(*DOTETH._fields)
"""
    name: DOTETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTEUR(Symbol):
    """
        name: DOTEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTEUR"

    def __str__(self):
        return "DOTEUR"

    def __call__(self):
        return "DOTEUR"


DOTEUR = DOTEUR(*DOTEUR._fields)
"""
    name: DOTEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTGBP(Symbol):
    """
        name: DOTGBP
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTGBP"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTGBP"

    def __str__(self):
        return "DOTGBP"

    def __call__(self):
        return "DOTGBP"


DOTGBP = DOTGBP(*DOTGBP._fields)
"""
    name: DOTGBP
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTNGN(Symbol):
    """
        name: DOTNGN
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTNGN"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTNGN"

    def __str__(self):
        return "DOTNGN"

    def __call__(self):
        return "DOTNGN"


DOTNGN = DOTNGN(*DOTNGN._fields)
"""
    name: DOTNGN
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTRUB(Symbol):
    """
        name: DOTRUB
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTRUB"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTRUB"

    def __str__(self):
        return "DOTRUB"

    def __call__(self):
        return "DOTRUB"


DOTRUB = DOTRUB(*DOTRUB._fields)
"""
    name: DOTRUB
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTTRY(Symbol):
    """
        name: DOTTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTTRY"

    def __str__(self):
        return "DOTTRY"

    def __call__(self):
        return "DOTTRY"


DOTTRY = DOTTRY(*DOTTRY._fields)
"""
    name: DOTTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTUPUSDT(Symbol):
    """
        name: DOTUPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTUPUSDT"

    def __str__(self):
        return "DOTUPUSDT"

    def __call__(self):
        return "DOTUPUSDT"


DOTUPUSDT = DOTUPUSDT(*DOTUPUSDT._fields)
"""
    name: DOTUPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTUSDT(Symbol):
    """
        name: DOTUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTUSDT"

    def __str__(self):
        return "DOTUSDT"

    def __call__(self):
        return "DOTUSDT"


DOTUSDT = DOTUSDT(*DOTUSDT._fields)
"""
    name: DOTUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DREPBNB(Symbol):
    """
        name: DREPBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DREPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREPBNB"

    def __str__(self):
        return "DREPBNB"

    def __call__(self):
        return "DREPBNB"


DREPBNB = DREPBNB(*DREPBNB._fields)
"""
    name: DREPBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DREPBTC(Symbol):
    """
        name: DREPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DREPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREPBTC"

    def __str__(self):
        return "DREPBTC"

    def __call__(self):
        return "DREPBTC"


DREPBTC = DREPBTC(*DREPBTC._fields)
"""
    name: DREPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DREPBUSD(Symbol):
    """
        name: DREPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DREPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREPBUSD"

    def __str__(self):
        return "DREPBUSD"

    def __call__(self):
        return "DREPBUSD"


DREPBUSD = DREPBUSD(*DREPBUSD._fields)
"""
    name: DREPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DREPUSDT(Symbol):
    """
        name: DREPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DREPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREPUSDT"

    def __str__(self):
        return "DREPUSDT"

    def __call__(self):
        return "DREPUSDT"


DREPUSDT = DREPUSDT(*DREPUSDT._fields)
"""
    name: DREPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKBNB(Symbol):
    """
        name: DUSKBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DUSKBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKBNB"

    def __str__(self):
        return "DUSKBNB"

    def __call__(self):
        return "DUSKBNB"


DUSKBNB = DUSKBNB(*DUSKBNB._fields)
"""
    name: DUSKBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKBTC(Symbol):
    """
        name: DUSKBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DUSKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKBTC"

    def __str__(self):
        return "DUSKBTC"

    def __call__(self):
        return "DUSKBTC"


DUSKBTC = DUSKBTC(*DUSKBTC._fields)
"""
    name: DUSKBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DUSKBUSD(Symbol):
    """
        name: DUSKBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DUSKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKBUSD"

    def __str__(self):
        return "DUSKBUSD"

    def __call__(self):
        return "DUSKBUSD"


DUSKBUSD = DUSKBUSD(*DUSKBUSD._fields)
"""
    name: DUSKBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKPAX(Symbol):
    """
        name: DUSKPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DUSKPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKPAX"

    def __str__(self):
        return "DUSKPAX"

    def __call__(self):
        return "DUSKPAX"


DUSKPAX = DUSKPAX(*DUSKPAX._fields)
"""
    name: DUSKPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKUSDC(Symbol):
    """
        name: DUSKUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DUSKUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKUSDC"

    def __str__(self):
        return "DUSKUSDC"

    def __call__(self):
        return "DUSKUSDC"


DUSKUSDC = DUSKUSDC(*DUSKUSDC._fields)
"""
    name: DUSKUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKUSDT(Symbol):
    """
        name: DUSKUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DUSKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKUSDT"

    def __str__(self):
        return "DUSKUSDT"

    def __call__(self):
        return "DUSKUSDT"


DUSKUSDT = DUSKUSDT(*DUSKUSDT._fields)
"""
    name: DUSKUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DYDXBNB(Symbol):
    """
        name: DYDXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DYDXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXBNB"

    def __str__(self):
        return "DYDXBNB"

    def __call__(self):
        return "DYDXBNB"


DYDXBNB = DYDXBNB(*DYDXBNB._fields)
"""
    name: DYDXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DYDXBTC(Symbol):
    """
        name: DYDXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DYDXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXBTC"

    def __str__(self):
        return "DYDXBTC"

    def __call__(self):
        return "DYDXBTC"


DYDXBTC = DYDXBTC(*DYDXBTC._fields)
"""
    name: DYDXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DYDXBUSD(Symbol):
    """
        name: DYDXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DYDXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXBUSD"

    def __str__(self):
        return "DYDXBUSD"

    def __call__(self):
        return "DYDXBUSD"


DYDXBUSD = DYDXBUSD(*DYDXBUSD._fields)
"""
    name: DYDXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DYDXETH(Symbol):
    """
        name: DYDXETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DYDXETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXETH"

    def __str__(self):
        return "DYDXETH"

    def __call__(self):
        return "DYDXETH"


DYDXETH = DYDXETH(*DYDXETH._fields)
"""
    name: DYDXETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DYDXUSDT(Symbol):
    """
        name: DYDXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DYDXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXUSDT"

    def __str__(self):
        return "DYDXUSDT"

    def __call__(self):
        return "DYDXUSDT"


DYDXUSDT = DYDXUSDT(*DYDXUSDT._fields)
"""
    name: DYDXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EASYBTC(Symbol):
    """
        name: EASYBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EASYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EASYBTC"

    def __str__(self):
        return "EASYBTC"

    def __call__(self):
        return "EASYBTC"


EASYBTC = EASYBTC(*EASYBTC._fields)
"""
    name: EASYBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EASYETH(Symbol):
    """
        name: EASYETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EASYETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EASYETH"

    def __str__(self):
        return "EASYETH"

    def __call__(self):
        return "EASYETH"


EASYETH = EASYETH(*EASYETH._fields)
"""
    name: EASYETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDOBTC(Symbol):
    """
        name: EDOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDOBTC"

    def __str__(self):
        return "EDOBTC"

    def __call__(self):
        return "EDOBTC"


EDOBTC = EDOBTC(*EDOBTC._fields)
"""
    name: EDOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDOETH(Symbol):
    """
        name: EDOETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDOETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDOETH"

    def __str__(self):
        return "EDOETH"

    def __call__(self):
        return "EDOETH"


EDOETH = EDOETH(*EDOETH._fields)
"""
    name: EDOETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDUBNB(Symbol):
    """
        name: EDUBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDUBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDUBNB"

    def __str__(self):
        return "EDUBNB"

    def __call__(self):
        return "EDUBNB"


EDUBNB = EDUBNB(*EDUBNB._fields)
"""
    name: EDUBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDUBTC(Symbol):
    """
        name: EDUBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDUBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDUBTC"

    def __str__(self):
        return "EDUBTC"

    def __call__(self):
        return "EDUBTC"


EDUBTC = EDUBTC(*EDUBTC._fields)
"""
    name: EDUBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDUEUR(Symbol):
    """
        name: EDUEUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDUEUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDUEUR"

    def __str__(self):
        return "EDUEUR"

    def __call__(self):
        return "EDUEUR"


EDUEUR = EDUEUR(*EDUEUR._fields)
"""
    name: EDUEUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDUTRY(Symbol):
    """
        name: EDUTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDUTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDUTRY"

    def __str__(self):
        return "EDUTRY"

    def __call__(self):
        return "EDUTRY"


EDUTRY = EDUTRY(*EDUTRY._fields)
"""
    name: EDUTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class EDUTUSD(Symbol):
    """
        name: EDUTUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDUTUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDUTUSD"

    def __str__(self):
        return "EDUTUSD"

    def __call__(self):
        return "EDUTUSD"


EDUTUSD = EDUTUSD(*EDUTUSD._fields)
"""
    name: EDUTUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDUUSDT(Symbol):
    """
        name: EDUUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EDUUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDUUSDT"

    def __str__(self):
        return "EDUUSDT"

    def __call__(self):
        return "EDUUSDT"


EDUUSDT = EDUUSDT(*EDUUSDT._fields)
"""
    name: EDUUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EGLDBNB(Symbol):
    """
        name: EGLDBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EGLDBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDBNB"

    def __str__(self):
        return "EGLDBNB"

    def __call__(self):
        return "EGLDBNB"


EGLDBNB = EGLDBNB(*EGLDBNB._fields)
"""
    name: EGLDBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDBTC(Symbol):
    """
        name: EGLDBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EGLDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDBTC"

    def __str__(self):
        return "EGLDBTC"

    def __call__(self):
        return "EGLDBTC"


EGLDBTC = EGLDBTC(*EGLDBTC._fields)
"""
    name: EGLDBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EGLDBUSD(Symbol):
    """
        name: EGLDBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EGLDBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDBUSD"

    def __str__(self):
        return "EGLDBUSD"

    def __call__(self):
        return "EGLDBUSD"


EGLDBUSD = EGLDBUSD(*EGLDBUSD._fields)
"""
    name: EGLDBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EGLDETH(Symbol):
    """
        name: EGLDETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EGLDETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDETH"

    def __str__(self):
        return "EGLDETH"

    def __call__(self):
        return "EGLDETH"


EGLDETH = EGLDETH(*EGLDETH._fields)
"""
    name: EGLDETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDEUR(Symbol):
    """
        name: EGLDEUR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EGLDEUR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDEUR"

    def __str__(self):
        return "EGLDEUR"

    def __call__(self):
        return "EGLDEUR"


EGLDEUR = EGLDEUR(*EGLDEUR._fields)
"""
    name: EGLDEUR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDRON(Symbol):
    """
        name: EGLDRON
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 40.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EGLDRON"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 40.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDRON"

    def __str__(self):
        return "EGLDRON"

    def __call__(self):
        return "EGLDRON"


EGLDRON = EGLDRON(*EGLDRON._fields)
"""
    name: EGLDRON
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 40.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDUSDT(Symbol):
    """
        name: EGLDUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EGLDUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDUSDT"

    def __str__(self):
        return "EGLDUSDT"

    def __call__(self):
        return "EGLDUSDT"


EGLDUSDT = EGLDUSDT(*EGLDUSDT._fields)
"""
    name: EGLDUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ELFBTC(Symbol):
    """
        name: ELFBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ELFBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELFBTC"

    def __str__(self):
        return "ELFBTC"

    def __call__(self):
        return "ELFBTC"


ELFBTC = ELFBTC(*ELFBTC._fields)
"""
    name: ELFBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ELFBUSD(Symbol):
    """
        name: ELFBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ELFBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELFBUSD"

    def __str__(self):
        return "ELFBUSD"

    def __call__(self):
        return "ELFBUSD"


ELFBUSD = ELFBUSD(*ELFBUSD._fields)
"""
    name: ELFBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ELFETH(Symbol):
    """
        name: ELFETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ELFETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELFETH"

    def __str__(self):
        return "ELFETH"

    def __call__(self):
        return "ELFETH"


ELFETH = ELFETH(*ELFETH._fields)
"""
    name: ELFETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ELFUSDT(Symbol):
    """
        name: ELFUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ELFUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELFUSDT"

    def __str__(self):
        return "ELFUSDT"

    def __call__(self):
        return "ELFUSDT"


ELFUSDT = ELFUSDT(*ELFUSDT._fields)
"""
    name: ELFUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENGBTC(Symbol):
    """
        name: ENGBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENGBTC"

    def __str__(self):
        return "ENGBTC"

    def __call__(self):
        return "ENGBTC"


ENGBTC = ENGBTC(*ENGBTC._fields)
"""
    name: ENGBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENGETH(Symbol):
    """
        name: ENGETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENGETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENGETH"

    def __str__(self):
        return "ENGETH"

    def __call__(self):
        return "ENGETH"


ENGETH = ENGETH(*ENGETH._fields)
"""
    name: ENGETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJBNB(Symbol):
    """
        name: ENJBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJBNB"

    def __str__(self):
        return "ENJBNB"

    def __call__(self):
        return "ENJBNB"


ENJBNB = ENJBNB(*ENJBNB._fields)
"""
    name: ENJBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJBRL(Symbol):
    """
        name: ENJBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJBRL"

    def __str__(self):
        return "ENJBRL"

    def __call__(self):
        return "ENJBRL"


ENJBRL = ENJBRL(*ENJBRL._fields)
"""
    name: ENJBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJBTC(Symbol):
    """
        name: ENJBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENJBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJBTC"

    def __str__(self):
        return "ENJBTC"

    def __call__(self):
        return "ENJBTC"


ENJBTC = ENJBTC(*ENJBTC._fields)
"""
    name: ENJBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENJBUSD(Symbol):
    """
        name: ENJBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENJBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJBUSD"

    def __str__(self):
        return "ENJBUSD"

    def __call__(self):
        return "ENJBUSD"


ENJBUSD = ENJBUSD(*ENJBUSD._fields)
"""
    name: ENJBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENJETH(Symbol):
    """
        name: ENJETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJETH"

    def __str__(self):
        return "ENJETH"

    def __call__(self):
        return "ENJETH"


ENJETH = ENJETH(*ENJETH._fields)
"""
    name: ENJETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJEUR(Symbol):
    """
        name: ENJEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJEUR"

    def __str__(self):
        return "ENJEUR"

    def __call__(self):
        return "ENJEUR"


ENJEUR = ENJEUR(*ENJEUR._fields)
"""
    name: ENJEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJGBP(Symbol):
    """
        name: ENJGBP
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJGBP"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJGBP"

    def __str__(self):
        return "ENJGBP"

    def __call__(self):
        return "ENJGBP"


ENJGBP = ENJGBP(*ENJGBP._fields)
"""
    name: ENJGBP
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJTRY(Symbol):
    """
        name: ENJTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJTRY"

    def __str__(self):
        return "ENJTRY"

    def __call__(self):
        return "ENJTRY"


ENJTRY = ENJTRY(*ENJTRY._fields)
"""
    name: ENJTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJUSDT(Symbol):
    """
        name: ENJUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENJUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJUSDT"

    def __str__(self):
        return "ENJUSDT"

    def __call__(self):
        return "ENJUSDT"


ENJUSDT = ENJUSDT(*ENJUSDT._fields)
"""
    name: ENJUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENSBNB(Symbol):
    """
        name: ENSBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENSBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSBNB"

    def __str__(self):
        return "ENSBNB"

    def __call__(self):
        return "ENSBNB"


ENSBNB = ENSBNB(*ENSBNB._fields)
"""
    name: ENSBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENSBTC(Symbol):
    """
        name: ENSBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSBTC"

    def __str__(self):
        return "ENSBTC"

    def __call__(self):
        return "ENSBTC"


ENSBTC = ENSBTC(*ENSBTC._fields)
"""
    name: ENSBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENSBUSD(Symbol):
    """
        name: ENSBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENSBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSBUSD"

    def __str__(self):
        return "ENSBUSD"

    def __call__(self):
        return "ENSBUSD"


ENSBUSD = ENSBUSD(*ENSBUSD._fields)
"""
    name: ENSBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENSTRY(Symbol):
    """
        name: ENSTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENSTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSTRY"

    def __str__(self):
        return "ENSTRY"

    def __call__(self):
        return "ENSTRY"


ENSTRY = ENSTRY(*ENSTRY._fields)
"""
    name: ENSTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ENSUSDT(Symbol):
    """
        name: ENSUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENSUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSUSDT"

    def __str__(self):
        return "ENSUSDT"

    def __call__(self):
        return "ENSUSDT"


ENSUSDT = ENSUSDT(*ENSUSDT._fields)
"""
    name: ENSUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EOSAUD(Symbol):
    """
        name: EOSAUD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSAUD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSAUD"

    def __str__(self):
        return "EOSAUD"

    def __call__(self):
        return "EOSAUD"


EOSAUD = EOSAUD(*EOSAUD._fields)
"""
    name: EOSAUD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBEARBUSD(Symbol):
    """
        name: EOSBEARBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBEARBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBEARBUSD"

    def __str__(self):
        return "EOSBEARBUSD"

    def __call__(self):
        return "EOSBEARBUSD"


EOSBEARBUSD = EOSBEARBUSD(*EOSBEARBUSD._fields)
"""
    name: EOSBEARBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBEARUSDT(Symbol):
    """
        name: EOSBEARUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBEARUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBEARUSDT"

    def __str__(self):
        return "EOSBEARUSDT"

    def __call__(self):
        return "EOSBEARUSDT"


EOSBEARUSDT = EOSBEARUSDT(*EOSBEARUSDT._fields)
"""
    name: EOSBEARUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBNB(Symbol):
    """
        name: EOSBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBNB"

    def __str__(self):
        return "EOSBNB"

    def __call__(self):
        return "EOSBNB"


EOSBNB = EOSBNB(*EOSBNB._fields)
"""
    name: EOSBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBTC(Symbol):
    """
        name: EOSBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EOSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBTC"

    def __str__(self):
        return "EOSBTC"

    def __call__(self):
        return "EOSBTC"


EOSBTC = EOSBTC(*EOSBTC._fields)
"""
    name: EOSBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EOSBULLBUSD(Symbol):
    """
        name: EOSBULLBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBULLBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBULLBUSD"

    def __str__(self):
        return "EOSBULLBUSD"

    def __call__(self):
        return "EOSBULLBUSD"


EOSBULLBUSD = EOSBULLBUSD(*EOSBULLBUSD._fields)
"""
    name: EOSBULLBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBULLUSDT(Symbol):
    """
        name: EOSBULLUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBULLUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBULLUSDT"

    def __str__(self):
        return "EOSBULLUSDT"

    def __call__(self):
        return "EOSBULLUSDT"


EOSBULLUSDT = EOSBULLUSDT(*EOSBULLUSDT._fields)
"""
    name: EOSBULLUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBUSD(Symbol):
    """
        name: EOSBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EOSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBUSD"

    def __str__(self):
        return "EOSBUSD"

    def __call__(self):
        return "EOSBUSD"


EOSBUSD = EOSBUSD(*EOSBUSD._fields)
"""
    name: EOSBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EOSDOWNUSDT(Symbol):
    """
        name: EOSDOWNUSDT
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSDOWNUSDT"

    def __str__(self):
        return "EOSDOWNUSDT"

    def __call__(self):
        return "EOSDOWNUSDT"


EOSDOWNUSDT = EOSDOWNUSDT(*EOSDOWNUSDT._fields)
"""
    name: EOSDOWNUSDT
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSETH(Symbol):
    """
        name: EOSETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EOSETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSETH"

    def __str__(self):
        return "EOSETH"

    def __call__(self):
        return "EOSETH"


EOSETH = EOSETH(*EOSETH._fields)
"""
    name: EOSETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EOSEUR(Symbol):
    """
        name: EOSEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSEUR"

    def __str__(self):
        return "EOSEUR"

    def __call__(self):
        return "EOSEUR"


EOSEUR = EOSEUR(*EOSEUR._fields)
"""
    name: EOSEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSPAX(Symbol):
    """
        name: EOSPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSPAX"

    def __str__(self):
        return "EOSPAX"

    def __call__(self):
        return "EOSPAX"


EOSPAX = EOSPAX(*EOSPAX._fields)
"""
    name: EOSPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSTRY(Symbol):
    """
        name: EOSTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSTRY"

    def __str__(self):
        return "EOSTRY"

    def __call__(self):
        return "EOSTRY"


EOSTRY = EOSTRY(*EOSTRY._fields)
"""
    name: EOSTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSTUSD(Symbol):
    """
        name: EOSTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSTUSD"

    def __str__(self):
        return "EOSTUSD"

    def __call__(self):
        return "EOSTUSD"


EOSTUSD = EOSTUSD(*EOSTUSD._fields)
"""
    name: EOSTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSUPUSDT(Symbol):
    """
        name: EOSUPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSUPUSDT"

    def __str__(self):
        return "EOSUPUSDT"

    def __call__(self):
        return "EOSUPUSDT"


EOSUPUSDT = EOSUPUSDT(*EOSUPUSDT._fields)
"""
    name: EOSUPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSUSDC(Symbol):
    """
        name: EOSUSDC
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSUSDC"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSUSDC"

    def __str__(self):
        return "EOSUSDC"

    def __call__(self):
        return "EOSUSDC"


EOSUSDC = EOSUSDC(*EOSUSDC._fields)
"""
    name: EOSUSDC
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSUSDT(Symbol):
    """
        name: EOSUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EOSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSUSDT"

    def __str__(self):
        return "EOSUSDT"

    def __call__(self):
        return "EOSUSDT"


EOSUSDT = EOSUSDT(*EOSUSDT._fields)
"""
    name: EOSUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EPSBTC(Symbol):
    """
        name: EPSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EPSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPSBTC"

    def __str__(self):
        return "EPSBTC"

    def __call__(self):
        return "EPSBTC"


EPSBTC = EPSBTC(*EPSBTC._fields)
"""
    name: EPSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EPSBUSD(Symbol):
    """
        name: EPSBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EPSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPSBUSD"

    def __str__(self):
        return "EPSBUSD"

    def __call__(self):
        return "EPSBUSD"


EPSBUSD = EPSBUSD(*EPSBUSD._fields)
"""
    name: EPSBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EPSUSDT(Symbol):
    """
        name: EPSUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EPSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPSUSDT"

    def __str__(self):
        return "EPSUSDT"

    def __call__(self):
        return "EPSUSDT"


EPSUSDT = EPSUSDT(*EPSUSDT._fields)
"""
    name: EPSUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EPXBUSD(Symbol):
    """
        name: EPXBUSD
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EPXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPXBUSD"

    def __str__(self):
        return "EPXBUSD"

    def __call__(self):
        return "EPXBUSD"


EPXBUSD = EPXBUSD(*EPXBUSD._fields)
"""
    name: EPXBUSD
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EPXUSDT(Symbol):
    """
        name: EPXUSDT
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EPXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPXUSDT"

    def __str__(self):
        return "EPXUSDT"

    def __call__(self):
        return "EPXUSDT"


EPXUSDT = EPXUSDT(*EPXUSDT._fields)
"""
    name: EPXUSDT
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ERDBNB(Symbol):
    """
        name: ERDBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDBNB"

    def __str__(self):
        return "ERDBNB"

    def __call__(self):
        return "ERDBNB"


ERDBNB = ERDBNB(*ERDBNB._fields)
"""
    name: ERDBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDBTC(Symbol):
    """
        name: ERDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDBTC"

    def __str__(self):
        return "ERDBTC"

    def __call__(self):
        return "ERDBTC"


ERDBTC = ERDBTC(*ERDBTC._fields)
"""
    name: ERDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDBUSD(Symbol):
    """
        name: ERDBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDBUSD"

    def __str__(self):
        return "ERDBUSD"

    def __call__(self):
        return "ERDBUSD"


ERDBUSD = ERDBUSD(*ERDBUSD._fields)
"""
    name: ERDBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDPAX(Symbol):
    """
        name: ERDPAX
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDPAX"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDPAX"

    def __str__(self):
        return "ERDPAX"

    def __call__(self):
        return "ERDPAX"


ERDPAX = ERDPAX(*ERDPAX._fields)
"""
    name: ERDPAX
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDUSDC(Symbol):
    """
        name: ERDUSDC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDUSDC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDUSDC"

    def __str__(self):
        return "ERDUSDC"

    def __call__(self):
        return "ERDUSDC"


ERDUSDC = ERDUSDC(*ERDUSDC._fields)
"""
    name: ERDUSDC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDUSDT(Symbol):
    """
        name: ERDUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDUSDT"

    def __str__(self):
        return "ERDUSDT"

    def __call__(self):
        return "ERDUSDT"


ERDUSDT = ERDUSDT(*ERDUSDT._fields)
"""
    name: ERDUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERNBNB(Symbol):
    """
        name: ERNBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERNBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERNBNB"

    def __str__(self):
        return "ERNBNB"

    def __call__(self):
        return "ERNBNB"


ERNBNB = ERNBNB(*ERNBNB._fields)
"""
    name: ERNBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERNBUSD(Symbol):
    """
        name: ERNBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERNBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERNBUSD"

    def __str__(self):
        return "ERNBUSD"

    def __call__(self):
        return "ERNBUSD"


ERNBUSD = ERNBUSD(*ERNBUSD._fields)
"""
    name: ERNBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERNUSDT(Symbol):
    """
        name: ERNUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ERNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERNUSDT"

    def __str__(self):
        return "ERNUSDT"

    def __call__(self):
        return "ERNUSDT"


ERNUSDT = ERNUSDT(*ERNUSDT._fields)
"""
    name: ERNUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETCBNB(Symbol):
    """
        name: ETCBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCBNB"

    def __str__(self):
        return "ETCBNB"

    def __call__(self):
        return "ETCBNB"


ETCBNB = ETCBNB(*ETCBNB._fields)
"""
    name: ETCBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCBRL(Symbol):
    """
        name: ETCBRL
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCBRL"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCBRL"

    def __str__(self):
        return "ETCBRL"

    def __call__(self):
        return "ETCBRL"


ETCBRL = ETCBRL(*ETCBRL._fields)
"""
    name: ETCBRL
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCBTC(Symbol):
    """
        name: ETCBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCBTC"

    def __str__(self):
        return "ETCBTC"

    def __call__(self):
        return "ETCBTC"


ETCBTC = ETCBTC(*ETCBTC._fields)
"""
    name: ETCBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETCBUSD(Symbol):
    """
        name: ETCBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETCBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCBUSD"

    def __str__(self):
        return "ETCBUSD"

    def __call__(self):
        return "ETCBUSD"


ETCBUSD = ETCBUSD(*ETCBUSD._fields)
"""
    name: ETCBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETCETH(Symbol):
    """
        name: ETCETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCETH"

    def __str__(self):
        return "ETCETH"

    def __call__(self):
        return "ETCETH"


ETCETH = ETCETH(*ETCETH._fields)
"""
    name: ETCETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCEUR(Symbol):
    """
        name: ETCEUR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCEUR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCEUR"

    def __str__(self):
        return "ETCEUR"

    def __call__(self):
        return "ETCEUR"


ETCEUR = ETCEUR(*ETCEUR._fields)
"""
    name: ETCEUR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCGBP(Symbol):
    """
        name: ETCGBP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCGBP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCGBP"

    def __str__(self):
        return "ETCGBP"

    def __call__(self):
        return "ETCGBP"


ETCGBP = ETCGBP(*ETCGBP._fields)
"""
    name: ETCGBP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCPAX(Symbol):
    """
        name: ETCPAX
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCPAX"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCPAX"

    def __str__(self):
        return "ETCPAX"

    def __call__(self):
        return "ETCPAX"


ETCPAX = ETCPAX(*ETCPAX._fields)
"""
    name: ETCPAX
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCTRY(Symbol):
    """
        name: ETCTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCTRY"

    def __str__(self):
        return "ETCTRY"

    def __call__(self):
        return "ETCTRY"


ETCTRY = ETCTRY(*ETCTRY._fields)
"""
    name: ETCTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCTUSD(Symbol):
    """
        name: ETCTUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCTUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCTUSD"

    def __str__(self):
        return "ETCTUSD"

    def __call__(self):
        return "ETCTUSD"


ETCTUSD = ETCTUSD(*ETCTUSD._fields)
"""
    name: ETCTUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCUSDC(Symbol):
    """
        name: ETCUSDC
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCUSDC"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCUSDC"

    def __str__(self):
        return "ETCUSDC"

    def __call__(self):
        return "ETCUSDC"


ETCUSDC = ETCUSDC(*ETCUSDC._fields)
"""
    name: ETCUSDC
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCUSDT(Symbol):
    """
        name: ETCUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETCUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCUSDT"

    def __str__(self):
        return "ETCUSDT"

    def __call__(self):
        return "ETCUSDT"


ETCUSDT = ETCUSDT(*ETCUSDT._fields)
"""
    name: ETCUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHAUD(Symbol):
    """
        name: ETHAUD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHAUD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHAUD"

    def __str__(self):
        return "ETHAUD"

    def __call__(self):
        return "ETHAUD"


ETHAUD = ETHAUD(*ETHAUD._fields)
"""
    name: ETHAUD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBEARBUSD(Symbol):
    """
        name: ETHBEARBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBEARBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBEARBUSD"

    def __str__(self):
        return "ETHBEARBUSD"

    def __call__(self):
        return "ETHBEARBUSD"


ETHBEARBUSD = ETHBEARBUSD(*ETHBEARBUSD._fields)
"""
    name: ETHBEARBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBEARUSDT(Symbol):
    """
        name: ETHBEARUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBEARUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBEARUSDT"

    def __str__(self):
        return "ETHBEARUSDT"

    def __call__(self):
        return "ETHBEARUSDT"


ETHBEARUSDT = ETHBEARUSDT(*ETHBEARUSDT._fields)
"""
    name: ETHBEARUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBIDR(Symbol):
    """
        name: ETHBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBIDR"

    def __str__(self):
        return "ETHBIDR"

    def __call__(self):
        return "ETHBIDR"


ETHBIDR = ETHBIDR(*ETHBIDR._fields)
"""
    name: ETHBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ETHBKRW(Symbol):
    """
        name: ETHBKRW
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBKRW"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBKRW"

    def __str__(self):
        return "ETHBKRW"

    def __call__(self):
        return "ETHBKRW"


ETHBKRW = ETHBKRW(*ETHBKRW._fields)
"""
    name: ETHBKRW
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBRL(Symbol):
    """
        name: ETHBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBRL"

    def __str__(self):
        return "ETHBRL"

    def __call__(self):
        return "ETHBRL"


ETHBRL = ETHBRL(*ETHBRL._fields)
"""
    name: ETHBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBTC(Symbol):
    """
        name: ETHBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBTC"

    def __str__(self):
        return "ETHBTC"

    def __call__(self):
        return "ETHBTC"


ETHBTC = ETHBTC(*ETHBTC._fields)
"""
    name: ETHBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHBULLBUSD(Symbol):
    """
        name: ETHBULLBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBULLBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBULLBUSD"

    def __str__(self):
        return "ETHBULLBUSD"

    def __call__(self):
        return "ETHBULLBUSD"


ETHBULLBUSD = ETHBULLBUSD(*ETHBULLBUSD._fields)
"""
    name: ETHBULLBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBULLUSDT(Symbol):
    """
        name: ETHBULLUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBULLUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBULLUSDT"

    def __str__(self):
        return "ETHBULLUSDT"

    def __call__(self):
        return "ETHBULLUSDT"


ETHBULLUSDT = ETHBULLUSDT(*ETHBULLUSDT._fields)
"""
    name: ETHBULLUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBUSD(Symbol):
    """
        name: ETHBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBUSD"

    def __str__(self):
        return "ETHBUSD"

    def __call__(self):
        return "ETHBUSD"


ETHBUSD = ETHBUSD(*ETHBUSD._fields)
"""
    name: ETHBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHDAI(Symbol):
    """
        name: ETHDAI
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHDAI"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHDAI"

    def __str__(self):
        return "ETHDAI"

    def __call__(self):
        return "ETHDAI"


ETHDAI = ETHDAI(*ETHDAI._fields)
"""
    name: ETHDAI
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHDOWNUSDT(Symbol):
    """
        name: ETHDOWNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHDOWNUSDT"

    def __str__(self):
        return "ETHDOWNUSDT"

    def __call__(self):
        return "ETHDOWNUSDT"


ETHDOWNUSDT = ETHDOWNUSDT(*ETHDOWNUSDT._fields)
"""
    name: ETHDOWNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHEUR(Symbol):
    """
        name: ETHEUR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHEUR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHEUR"

    def __str__(self):
        return "ETHEUR"

    def __call__(self):
        return "ETHEUR"


ETHEUR = ETHEUR(*ETHEUR._fields)
"""
    name: ETHEUR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHGBP(Symbol):
    """
        name: ETHGBP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHGBP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHGBP"

    def __str__(self):
        return "ETHGBP"

    def __call__(self):
        return "ETHGBP"


ETHGBP = ETHGBP(*ETHGBP._fields)
"""
    name: ETHGBP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHNGN(Symbol):
    """
        name: ETHNGN
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHNGN"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHNGN"

    def __str__(self):
        return "ETHNGN"

    def __call__(self):
        return "ETHNGN"


ETHNGN = ETHNGN(*ETHNGN._fields)
"""
    name: ETHNGN
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHPAX(Symbol):
    """
        name: ETHPAX
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHPAX"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHPAX"

    def __str__(self):
        return "ETHPAX"

    def __call__(self):
        return "ETHPAX"


ETHPAX = ETHPAX(*ETHPAX._fields)
"""
    name: ETHPAX
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHPLN(Symbol):
    """
        name: ETHPLN
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 50.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHPLN"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 50.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHPLN"

    def __str__(self):
        return "ETHPLN"

    def __call__(self):
        return "ETHPLN"


ETHPLN = ETHPLN(*ETHPLN._fields)
"""
    name: ETHPLN
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 50.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHRUB(Symbol):
    """
        name: ETHRUB
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHRUB"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHRUB"

    def __str__(self):
        return "ETHRUB"

    def __call__(self):
        return "ETHRUB"


ETHRUB = ETHRUB(*ETHRUB._fields)
"""
    name: ETHRUB
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHTRY(Symbol):
    """
        name: ETHTRY
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHTRY"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHTRY"

    def __str__(self):
        return "ETHTRY"

    def __call__(self):
        return "ETHTRY"


ETHTRY = ETHTRY(*ETHTRY._fields)
"""
    name: ETHTRY
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHTUSD(Symbol):
    """
        name: ETHTUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHTUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHTUSD"

    def __str__(self):
        return "ETHTUSD"

    def __call__(self):
        return "ETHTUSD"


ETHTUSD = ETHTUSD(*ETHTUSD._fields)
"""
    name: ETHTUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHUAH(Symbol):
    """
        name: ETHUAH
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHUAH"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUAH"

    def __str__(self):
        return "ETHUAH"

    def __call__(self):
        return "ETHUAH"


ETHUAH = ETHUAH(*ETHUAH._fields)
"""
    name: ETHUAH
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHUPUSDT(Symbol):
    """
        name: ETHUPUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUPUSDT"

    def __str__(self):
        return "ETHUPUSDT"

    def __call__(self):
        return "ETHUPUSDT"


ETHUPUSDT = ETHUPUSDT(*ETHUPUSDT._fields)
"""
    name: ETHUPUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHUSDC(Symbol):
    """
        name: ETHUSDC
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHUSDC"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUSDC"

    def __str__(self):
        return "ETHUSDC"

    def __call__(self):
        return "ETHUSDC"


ETHUSDC = ETHUSDC(*ETHUSDC._fields)
"""
    name: ETHUSDC
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHUSDP(Symbol):
    """
        name: ETHUSDP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHUSDP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUSDP"

    def __str__(self):
        return "ETHUSDP"

    def __call__(self):
        return "ETHUSDP"


ETHUSDP = ETHUSDP(*ETHUSDP._fields)
"""
    name: ETHUSDP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHUSDT(Symbol):
    """
        name: ETHUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUSDT"

    def __str__(self):
        return "ETHUSDT"

    def __call__(self):
        return "ETHUSDT"


ETHUSDT = ETHUSDT(*ETHUSDT._fields)
"""
    name: ETHUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHUST(Symbol):
    """
        name: ETHUST
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHUST"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUST"

    def __str__(self):
        return "ETHUST"

    def __call__(self):
        return "ETHUST"


ETHUST = ETHUST(*ETHUST._fields)
"""
    name: ETHUST
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHZAR(Symbol):
    """
        name: ETHZAR
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 200.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHZAR"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 200.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHZAR"

    def __str__(self):
        return "ETHZAR"

    def __call__(self):
        return "ETHZAR"


ETHZAR = ETHZAR(*ETHZAR._fields)
"""
    name: ETHZAR
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 200.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EURBUSD(Symbol):
    """
        name: EURBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EURBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EURBUSD"

    def __str__(self):
        return "EURBUSD"

    def __call__(self):
        return "EURBUSD"


EURBUSD = EURBUSD(*EURBUSD._fields)
"""
    name: EURBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EURUSDT(Symbol):
    """
        name: EURUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EURUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EURUSDT"

    def __str__(self):
        return "EURUSDT"

    def __call__(self):
        return "EURUSDT"


EURUSDT = EURUSDT(*EURUSDT._fields)
"""
    name: EURUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EVXBTC(Symbol):
    """
        name: EVXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EVXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EVXBTC"

    def __str__(self):
        return "EVXBTC"

    def __call__(self):
        return "EVXBTC"


EVXBTC = EVXBTC(*EVXBTC._fields)
"""
    name: EVXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EVXETH(Symbol):
    """
        name: EVXETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EVXETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EVXETH"

    def __str__(self):
        return "EVXETH"

    def __call__(self):
        return "EVXETH"


EVXETH = EVXETH(*EVXETH._fields)
"""
    name: EVXETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMBNB(Symbol):
    """
        name: FARMBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMBNB"

    def __str__(self):
        return "FARMBNB"

    def __call__(self):
        return "FARMBNB"


FARMBNB = FARMBNB(*FARMBNB._fields)
"""
    name: FARMBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMBTC(Symbol):
    """
        name: FARMBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMBTC"

    def __str__(self):
        return "FARMBTC"

    def __call__(self):
        return "FARMBTC"


FARMBTC = FARMBTC(*FARMBTC._fields)
"""
    name: FARMBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMBUSD(Symbol):
    """
        name: FARMBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMBUSD"

    def __str__(self):
        return "FARMBUSD"

    def __call__(self):
        return "FARMBUSD"


FARMBUSD = FARMBUSD(*FARMBUSD._fields)
"""
    name: FARMBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMETH(Symbol):
    """
        name: FARMETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMETH"

    def __str__(self):
        return "FARMETH"

    def __call__(self):
        return "FARMETH"


FARMETH = FARMETH(*FARMETH._fields)
"""
    name: FARMETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMUSDT(Symbol):
    """
        name: FARMUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMUSDT"

    def __str__(self):
        return "FARMUSDT"

    def __call__(self):
        return "FARMUSDT"


FARMUSDT = FARMUSDT(*FARMUSDT._fields)
"""
    name: FARMUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETBNB(Symbol):
    """
        name: FETBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FETBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETBNB"

    def __str__(self):
        return "FETBNB"

    def __call__(self):
        return "FETBNB"


FETBNB = FETBNB(*FETBNB._fields)
"""
    name: FETBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETBTC(Symbol):
    """
        name: FETBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FETBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETBTC"

    def __str__(self):
        return "FETBTC"

    def __call__(self):
        return "FETBTC"


FETBTC = FETBTC(*FETBTC._fields)
"""
    name: FETBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETBUSD(Symbol):
    """
        name: FETBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FETBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETBUSD"

    def __str__(self):
        return "FETBUSD"

    def __call__(self):
        return "FETBUSD"


FETBUSD = FETBUSD(*FETBUSD._fields)
"""
    name: FETBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETTRY(Symbol):
    """
        name: FETTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FETTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETTRY"

    def __str__(self):
        return "FETTRY"

    def __call__(self):
        return "FETTRY"


FETTRY = FETTRY(*FETTRY._fields)
"""
    name: FETTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class FETUSDT(Symbol):
    """
        name: FETUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FETUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETUSDT"

    def __str__(self):
        return "FETUSDT"

    def __call__(self):
        return "FETUSDT"


FETUSDT = FETUSDT(*FETUSDT._fields)
"""
    name: FETUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FIDABNB(Symbol):
    """
        name: FIDABNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIDABNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDABNB"

    def __str__(self):
        return "FIDABNB"

    def __call__(self):
        return "FIDABNB"


FIDABNB = FIDABNB(*FIDABNB._fields)
"""
    name: FIDABNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIDABTC(Symbol):
    """
        name: FIDABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIDABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDABTC"

    def __str__(self):
        return "FIDABTC"

    def __call__(self):
        return "FIDABTC"


FIDABTC = FIDABTC(*FIDABTC._fields)
"""
    name: FIDABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIDABUSD(Symbol):
    """
        name: FIDABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FIDABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDABUSD"

    def __str__(self):
        return "FIDABUSD"

    def __call__(self):
        return "FIDABUSD"


FIDABUSD = FIDABUSD(*FIDABUSD._fields)
"""
    name: FIDABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FIDAUSDT(Symbol):
    """
        name: FIDAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FIDAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDAUSDT"

    def __str__(self):
        return "FIDAUSDT"

    def __call__(self):
        return "FIDAUSDT"


FIDAUSDT = FIDAUSDT(*FIDAUSDT._fields)
"""
    name: FIDAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FILBNB(Symbol):
    """
        name: FILBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILBNB"

    def __str__(self):
        return "FILBNB"

    def __call__(self):
        return "FILBNB"


FILBNB = FILBNB(*FILBNB._fields)
"""
    name: FILBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILBTC(Symbol):
    """
        name: FILBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FILBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILBTC"

    def __str__(self):
        return "FILBTC"

    def __call__(self):
        return "FILBTC"


FILBTC = FILBTC(*FILBTC._fields)
"""
    name: FILBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FILBUSD(Symbol):
    """
        name: FILBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FILBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILBUSD"

    def __str__(self):
        return "FILBUSD"

    def __call__(self):
        return "FILBUSD"


FILBUSD = FILBUSD(*FILBUSD._fields)
"""
    name: FILBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FILDOWNUSDT(Symbol):
    """
        name: FILDOWNUSDT
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILDOWNUSDT"

    def __str__(self):
        return "FILDOWNUSDT"

    def __call__(self):
        return "FILDOWNUSDT"


FILDOWNUSDT = FILDOWNUSDT(*FILDOWNUSDT._fields)
"""
    name: FILDOWNUSDT
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILETH(Symbol):
    """
        name: FILETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILETH"

    def __str__(self):
        return "FILETH"

    def __call__(self):
        return "FILETH"


FILETH = FILETH(*FILETH._fields)
"""
    name: FILETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILTRY(Symbol):
    """
        name: FILTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILTRY"

    def __str__(self):
        return "FILTRY"

    def __call__(self):
        return "FILTRY"


FILTRY = FILTRY(*FILTRY._fields)
"""
    name: FILTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class FILUPUSDT(Symbol):
    """
        name: FILUPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILUPUSDT"

    def __str__(self):
        return "FILUPUSDT"

    def __call__(self):
        return "FILUPUSDT"


FILUPUSDT = FILUPUSDT(*FILUPUSDT._fields)
"""
    name: FILUPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILUSDT(Symbol):
    """
        name: FILUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FILUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILUSDT"

    def __str__(self):
        return "FILUSDT"

    def __call__(self):
        return "FILUSDT"


FILUSDT = FILUSDT(*FILUSDT._fields)
"""
    name: FILUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FIOBNB(Symbol):
    """
        name: FIOBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIOBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIOBNB"

    def __str__(self):
        return "FIOBNB"

    def __call__(self):
        return "FIOBNB"


FIOBNB = FIOBNB(*FIOBNB._fields)
"""
    name: FIOBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIOBTC(Symbol):
    """
        name: FIOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIOBTC"

    def __str__(self):
        return "FIOBTC"

    def __call__(self):
        return "FIOBTC"


FIOBTC = FIOBTC(*FIOBTC._fields)
"""
    name: FIOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIOBUSD(Symbol):
    """
        name: FIOBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIOBUSD"

    def __str__(self):
        return "FIOBUSD"

    def __call__(self):
        return "FIOBUSD"


FIOBUSD = FIOBUSD(*FIOBUSD._fields)
"""
    name: FIOBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIOUSDT(Symbol):
    """
        name: FIOUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIOUSDT"

    def __str__(self):
        return "FIOUSDT"

    def __call__(self):
        return "FIOUSDT"


FIOUSDT = FIOUSDT(*FIOUSDT._fields)
"""
    name: FIOUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIROBTC(Symbol):
    """
        name: FIROBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIROBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIROBTC"

    def __str__(self):
        return "FIROBTC"

    def __call__(self):
        return "FIROBTC"


FIROBTC = FIROBTC(*FIROBTC._fields)
"""
    name: FIROBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIROBUSD(Symbol):
    """
        name: FIROBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIROBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIROBUSD"

    def __str__(self):
        return "FIROBUSD"

    def __call__(self):
        return "FIROBUSD"


FIROBUSD = FIROBUSD(*FIROBUSD._fields)
"""
    name: FIROBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIROETH(Symbol):
    """
        name: FIROETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIROETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIROETH"

    def __str__(self):
        return "FIROETH"

    def __call__(self):
        return "FIROETH"


FIROETH = FIROETH(*FIROETH._fields)
"""
    name: FIROETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIROUSDT(Symbol):
    """
        name: FIROUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIROUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIROUSDT"

    def __str__(self):
        return "FIROUSDT"

    def __call__(self):
        return "FIROUSDT"


FIROUSDT = FIROUSDT(*FIROUSDT._fields)
"""
    name: FIROUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISBIDR(Symbol):
    """
        name: FISBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "FISBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISBIDR"

    def __str__(self):
        return "FISBIDR"

    def __call__(self):
        return "FISBIDR"


FISBIDR = FISBIDR(*FISBIDR._fields)
"""
    name: FISBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class FISBRL(Symbol):
    """
        name: FISBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISBRL"

    def __str__(self):
        return "FISBRL"

    def __call__(self):
        return "FISBRL"


FISBRL = FISBRL(*FISBRL._fields)
"""
    name: FISBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISBTC(Symbol):
    """
        name: FISBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISBTC"

    def __str__(self):
        return "FISBTC"

    def __call__(self):
        return "FISBTC"


FISBTC = FISBTC(*FISBTC._fields)
"""
    name: FISBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISBUSD(Symbol):
    """
        name: FISBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISBUSD"

    def __str__(self):
        return "FISBUSD"

    def __call__(self):
        return "FISBUSD"


FISBUSD = FISBUSD(*FISBUSD._fields)
"""
    name: FISBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISTRY(Symbol):
    """
        name: FISTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISTRY"

    def __str__(self):
        return "FISTRY"

    def __call__(self):
        return "FISTRY"


FISTRY = FISTRY(*FISTRY._fields)
"""
    name: FISTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISUSDT(Symbol):
    """
        name: FISUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISUSDT"

    def __str__(self):
        return "FISUSDT"

    def __call__(self):
        return "FISUSDT"


FISUSDT = FISUSDT(*FISUSDT._fields)
"""
    name: FISUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLMBNB(Symbol):
    """
        name: FLMBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLMBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLMBNB"

    def __str__(self):
        return "FLMBNB"

    def __call__(self):
        return "FLMBNB"


FLMBNB = FLMBNB(*FLMBNB._fields)
"""
    name: FLMBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLMBTC(Symbol):
    """
        name: FLMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLMBTC"

    def __str__(self):
        return "FLMBTC"

    def __call__(self):
        return "FLMBTC"


FLMBTC = FLMBTC(*FLMBTC._fields)
"""
    name: FLMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLMBUSD(Symbol):
    """
        name: FLMBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLMBUSD"

    def __str__(self):
        return "FLMBUSD"

    def __call__(self):
        return "FLMBUSD"


FLMBUSD = FLMBUSD(*FLMBUSD._fields)
"""
    name: FLMBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLMUSDT(Symbol):
    """
        name: FLMUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLMUSDT"

    def __str__(self):
        return "FLMUSDT"

    def __call__(self):
        return "FLMUSDT"


FLMUSDT = FLMUSDT(*FLMUSDT._fields)
"""
    name: FLMUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLOWBNB(Symbol):
    """
        name: FLOWBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLOWBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOWBNB"

    def __str__(self):
        return "FLOWBNB"

    def __call__(self):
        return "FLOWBNB"


FLOWBNB = FLOWBNB(*FLOWBNB._fields)
"""
    name: FLOWBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLOWBTC(Symbol):
    """
        name: FLOWBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLOWBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOWBTC"

    def __str__(self):
        return "FLOWBTC"

    def __call__(self):
        return "FLOWBTC"


FLOWBTC = FLOWBTC(*FLOWBTC._fields)
"""
    name: FLOWBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FLOWBUSD(Symbol):
    """
        name: FLOWBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLOWBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOWBUSD"

    def __str__(self):
        return "FLOWBUSD"

    def __call__(self):
        return "FLOWBUSD"


FLOWBUSD = FLOWBUSD(*FLOWBUSD._fields)
"""
    name: FLOWBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FLOWUSDT(Symbol):
    """
        name: FLOWUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLOWUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOWUSDT"

    def __str__(self):
        return "FLOWUSDT"

    def __call__(self):
        return "FLOWUSDT"


FLOWUSDT = FLOWUSDT(*FLOWUSDT._fields)
"""
    name: FLOWUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FLUXBTC(Symbol):
    """
        name: FLUXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLUXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUXBTC"

    def __str__(self):
        return "FLUXBTC"

    def __call__(self):
        return "FLUXBTC"


FLUXBTC = FLUXBTC(*FLUXBTC._fields)
"""
    name: FLUXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLUXBUSD(Symbol):
    """
        name: FLUXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLUXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUXBUSD"

    def __str__(self):
        return "FLUXBUSD"

    def __call__(self):
        return "FLUXBUSD"


FLUXBUSD = FLUXBUSD(*FLUXBUSD._fields)
"""
    name: FLUXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FLUXUSDT(Symbol):
    """
        name: FLUXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLUXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUXUSDT"

    def __str__(self):
        return "FLUXUSDT"

    def __call__(self):
        return "FLUXUSDT"


FLUXUSDT = FLUXUSDT(*FLUXUSDT._fields)
"""
    name: FLUXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FORBNB(Symbol):
    """
        name: FORBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORBNB"

    def __str__(self):
        return "FORBNB"

    def __call__(self):
        return "FORBNB"


FORBNB = FORBNB(*FORBNB._fields)
"""
    name: FORBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORBTC(Symbol):
    """
        name: FORBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORBTC"

    def __str__(self):
        return "FORBTC"

    def __call__(self):
        return "FORBTC"


FORBTC = FORBTC(*FORBTC._fields)
"""
    name: FORBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORBUSD(Symbol):
    """
        name: FORBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORBUSD"

    def __str__(self):
        return "FORBUSD"

    def __call__(self):
        return "FORBUSD"


FORBUSD = FORBUSD(*FORBUSD._fields)
"""
    name: FORBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORTHBTC(Symbol):
    """
        name: FORTHBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORTHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORTHBTC"

    def __str__(self):
        return "FORTHBTC"

    def __call__(self):
        return "FORTHBTC"


FORTHBTC = FORTHBTC(*FORTHBTC._fields)
"""
    name: FORTHBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORTHBUSD(Symbol):
    """
        name: FORTHBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORTHBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORTHBUSD"

    def __str__(self):
        return "FORTHBUSD"

    def __call__(self):
        return "FORTHBUSD"


FORTHBUSD = FORTHBUSD(*FORTHBUSD._fields)
"""
    name: FORTHBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORTHUSDT(Symbol):
    """
        name: FORTHUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORTHUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORTHUSDT"

    def __str__(self):
        return "FORTHUSDT"

    def __call__(self):
        return "FORTHUSDT"


FORTHUSDT = FORTHUSDT(*FORTHUSDT._fields)
"""
    name: FORTHUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORUSDT(Symbol):
    """
        name: FORUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORUSDT"

    def __str__(self):
        return "FORUSDT"

    def __call__(self):
        return "FORUSDT"


FORUSDT = FORUSDT(*FORUSDT._fields)
"""
    name: FORUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FRONTBTC(Symbol):
    """
        name: FRONTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FRONTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONTBTC"

    def __str__(self):
        return "FRONTBTC"

    def __call__(self):
        return "FRONTBTC"


FRONTBTC = FRONTBTC(*FRONTBTC._fields)
"""
    name: FRONTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FRONTBUSD(Symbol):
    """
        name: FRONTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FRONTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONTBUSD"

    def __str__(self):
        return "FRONTBUSD"

    def __call__(self):
        return "FRONTBUSD"


FRONTBUSD = FRONTBUSD(*FRONTBUSD._fields)
"""
    name: FRONTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FRONTETH(Symbol):
    """
        name: FRONTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FRONTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONTETH"

    def __str__(self):
        return "FRONTETH"

    def __call__(self):
        return "FRONTETH"


FRONTETH = FRONTETH(*FRONTETH._fields)
"""
    name: FRONTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FRONTUSDT(Symbol):
    """
        name: FRONTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FRONTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONTUSDT"

    def __str__(self):
        return "FRONTUSDT"

    def __call__(self):
        return "FRONTUSDT"


FRONTUSDT = FRONTUSDT(*FRONTUSDT._fields)
"""
    name: FRONTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMAUD(Symbol):
    """
        name: FTMAUD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMAUD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMAUD"

    def __str__(self):
        return "FTMAUD"

    def __call__(self):
        return "FTMAUD"


FTMAUD = FTMAUD(*FTMAUD._fields)
"""
    name: FTMAUD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMBIDR(Symbol):
    """
        name: FTMBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "FTMBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBIDR"

    def __str__(self):
        return "FTMBIDR"

    def __call__(self):
        return "FTMBIDR"


FTMBIDR = FTMBIDR(*FTMBIDR._fields)
"""
    name: FTMBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class FTMBNB(Symbol):
    """
        name: FTMBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBNB"

    def __str__(self):
        return "FTMBNB"

    def __call__(self):
        return "FTMBNB"


FTMBNB = FTMBNB(*FTMBNB._fields)
"""
    name: FTMBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMBRL(Symbol):
    """
        name: FTMBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBRL"

    def __str__(self):
        return "FTMBRL"

    def __call__(self):
        return "FTMBRL"


FTMBRL = FTMBRL(*FTMBRL._fields)
"""
    name: FTMBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMBTC(Symbol):
    """
        name: FTMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FTMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBTC"

    def __str__(self):
        return "FTMBTC"

    def __call__(self):
        return "FTMBTC"


FTMBTC = FTMBTC(*FTMBTC._fields)
"""
    name: FTMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FTMBUSD(Symbol):
    """
        name: FTMBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FTMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBUSD"

    def __str__(self):
        return "FTMBUSD"

    def __call__(self):
        return "FTMBUSD"


FTMBUSD = FTMBUSD(*FTMBUSD._fields)
"""
    name: FTMBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FTMETH(Symbol):
    """
        name: FTMETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMETH"

    def __str__(self):
        return "FTMETH"

    def __call__(self):
        return "FTMETH"


FTMETH = FTMETH(*FTMETH._fields)
"""
    name: FTMETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMEUR(Symbol):
    """
        name: FTMEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMEUR"

    def __str__(self):
        return "FTMEUR"

    def __call__(self):
        return "FTMEUR"


FTMEUR = FTMEUR(*FTMEUR._fields)
"""
    name: FTMEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMPAX(Symbol):
    """
        name: FTMPAX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMPAX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMPAX"

    def __str__(self):
        return "FTMPAX"

    def __call__(self):
        return "FTMPAX"


FTMPAX = FTMPAX(*FTMPAX._fields)
"""
    name: FTMPAX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMRUB(Symbol):
    """
        name: FTMRUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMRUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMRUB"

    def __str__(self):
        return "FTMRUB"

    def __call__(self):
        return "FTMRUB"


FTMRUB = FTMRUB(*FTMRUB._fields)
"""
    name: FTMRUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMTRY(Symbol):
    """
        name: FTMTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMTRY"

    def __str__(self):
        return "FTMTRY"

    def __call__(self):
        return "FTMTRY"


FTMTRY = FTMTRY(*FTMTRY._fields)
"""
    name: FTMTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMTUSD(Symbol):
    """
        name: FTMTUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMTUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMTUSD"

    def __str__(self):
        return "FTMTUSD"

    def __call__(self):
        return "FTMTUSD"


FTMTUSD = FTMTUSD(*FTMTUSD._fields)
"""
    name: FTMTUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMUSDC(Symbol):
    """
        name: FTMUSDC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMUSDC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMUSDC"

    def __str__(self):
        return "FTMUSDC"

    def __call__(self):
        return "FTMUSDC"


FTMUSDC = FTMUSDC(*FTMUSDC._fields)
"""
    name: FTMUSDC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMUSDT(Symbol):
    """
        name: FTMUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FTMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMUSDT"

    def __str__(self):
        return "FTMUSDT"

    def __call__(self):
        return "FTMUSDT"


FTMUSDT = FTMUSDT(*FTMUSDT._fields)
"""
    name: FTMUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FTTBNB(Symbol):
    """
        name: FTTBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTBNB"

    def __str__(self):
        return "FTTBNB"

    def __call__(self):
        return "FTTBNB"


FTTBNB = FTTBNB(*FTTBNB._fields)
"""
    name: FTTBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTTBTC(Symbol):
    """
        name: FTTBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTBTC"

    def __str__(self):
        return "FTTBTC"

    def __call__(self):
        return "FTTBTC"


FTTBTC = FTTBTC(*FTTBTC._fields)
"""
    name: FTTBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTTBUSD(Symbol):
    """
        name: FTTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTBUSD"

    def __str__(self):
        return "FTTBUSD"

    def __call__(self):
        return "FTTBUSD"


FTTBUSD = FTTBUSD(*FTTBUSD._fields)
"""
    name: FTTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTTETH(Symbol):
    """
        name: FTTETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTETH"

    def __str__(self):
        return "FTTETH"

    def __call__(self):
        return "FTTETH"


FTTETH = FTTETH(*FTTETH._fields)
"""
    name: FTTETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTTUSDT(Symbol):
    """
        name: FTTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTUSDT"

    def __str__(self):
        return "FTTUSDT"

    def __call__(self):
        return "FTTUSDT"


FTTUSDT = FTTUSDT(*FTTUSDT._fields)
"""
    name: FTTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUELBTC(Symbol):
    """
        name: FUELBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUELBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUELBTC"

    def __str__(self):
        return "FUELBTC"

    def __call__(self):
        return "FUELBTC"


FUELBTC = FUELBTC(*FUELBTC._fields)
"""
    name: FUELBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUELETH(Symbol):
    """
        name: FUELETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUELETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUELETH"

    def __str__(self):
        return "FUELETH"

    def __call__(self):
        return "FUELETH"


FUELETH = FUELETH(*FUELETH._fields)
"""
    name: FUELETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUNBNB(Symbol):
    """
        name: FUNBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUNBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUNBNB"

    def __str__(self):
        return "FUNBNB"

    def __call__(self):
        return "FUNBNB"


FUNBNB = FUNBNB(*FUNBNB._fields)
"""
    name: FUNBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUNBTC(Symbol):
    """
        name: FUNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUNBTC"

    def __str__(self):
        return "FUNBTC"

    def __call__(self):
        return "FUNBTC"


FUNBTC = FUNBTC(*FUNBTC._fields)
"""
    name: FUNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUNETH(Symbol):
    """
        name: FUNETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUNETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUNETH"

    def __str__(self):
        return "FUNETH"

    def __call__(self):
        return "FUNETH"


FUNETH = FUNETH(*FUNETH._fields)
"""
    name: FUNETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUNUSDT(Symbol):
    """
        name: FUNUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUNUSDT"

    def __str__(self):
        return "FUNUSDT"

    def __call__(self):
        return "FUNUSDT"


FUNUSDT = FUNUSDT(*FUNUSDT._fields)
"""
    name: FUNUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FXSBTC(Symbol):
    """
        name: FXSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FXSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXSBTC"

    def __str__(self):
        return "FXSBTC"

    def __call__(self):
        return "FXSBTC"


FXSBTC = FXSBTC(*FXSBTC._fields)
"""
    name: FXSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FXSBUSD(Symbol):
    """
        name: FXSBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FXSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXSBUSD"

    def __str__(self):
        return "FXSBUSD"

    def __call__(self):
        return "FXSBUSD"


FXSBUSD = FXSBUSD(*FXSBUSD._fields)
"""
    name: FXSBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FXSUSDT(Symbol):
    """
        name: FXSUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FXSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXSUSDT"

    def __str__(self):
        return "FXSUSDT"

    def __call__(self):
        return "FXSUSDT"


FXSUSDT = FXSUSDT(*FXSUSDT._fields)
"""
    name: FXSUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALAAUD(Symbol):
    """
        name: GALAAUD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALAAUD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAAUD"

    def __str__(self):
        return "GALAAUD"

    def __call__(self):
        return "GALAAUD"


GALAAUD = GALAAUD(*GALAAUD._fields)
"""
    name: GALAAUD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALABNB(Symbol):
    """
        name: GALABNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALABNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALABNB"

    def __str__(self):
        return "GALABNB"

    def __call__(self):
        return "GALABNB"


GALABNB = GALABNB(*GALABNB._fields)
"""
    name: GALABNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALABRL(Symbol):
    """
        name: GALABRL
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALABRL"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALABRL"

    def __str__(self):
        return "GALABRL"

    def __call__(self):
        return "GALABRL"


GALABRL = GALABRL(*GALABRL._fields)
"""
    name: GALABRL
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALABTC(Symbol):
    """
        name: GALABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALABTC"

    def __str__(self):
        return "GALABTC"

    def __call__(self):
        return "GALABTC"


GALABTC = GALABTC(*GALABTC._fields)
"""
    name: GALABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALABUSD(Symbol):
    """
        name: GALABUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALABUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALABUSD"

    def __str__(self):
        return "GALABUSD"

    def __call__(self):
        return "GALABUSD"


GALABUSD = GALABUSD(*GALABUSD._fields)
"""
    name: GALABUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALAETH(Symbol):
    """
        name: GALAETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALAETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAETH"

    def __str__(self):
        return "GALAETH"

    def __call__(self):
        return "GALAETH"


GALAETH = GALAETH(*GALAETH._fields)
"""
    name: GALAETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALAEUR(Symbol):
    """
        name: GALAEUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALAEUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAEUR"

    def __str__(self):
        return "GALAEUR"

    def __call__(self):
        return "GALAEUR"


GALAEUR = GALAEUR(*GALAEUR._fields)
"""
    name: GALAEUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALATRY(Symbol):
    """
        name: GALATRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALATRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALATRY"

    def __str__(self):
        return "GALATRY"

    def __call__(self):
        return "GALATRY"


GALATRY = GALATRY(*GALATRY._fields)
"""
    name: GALATRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class GALAUSDT(Symbol):
    """
        name: GALAUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAUSDT"

    def __str__(self):
        return "GALAUSDT"

    def __call__(self):
        return "GALAUSDT"


GALAUSDT = GALAUSDT(*GALAUSDT._fields)
"""
    name: GALAUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALBNB(Symbol):
    """
        name: GALBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALBNB"

    def __str__(self):
        return "GALBNB"

    def __call__(self):
        return "GALBNB"


GALBNB = GALBNB(*GALBNB._fields)
"""
    name: GALBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALBRL(Symbol):
    """
        name: GALBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALBRL"

    def __str__(self):
        return "GALBRL"

    def __call__(self):
        return "GALBRL"


GALBRL = GALBRL(*GALBRL._fields)
"""
    name: GALBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALBTC(Symbol):
    """
        name: GALBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALBTC"

    def __str__(self):
        return "GALBTC"

    def __call__(self):
        return "GALBTC"


GALBTC = GALBTC(*GALBTC._fields)
"""
    name: GALBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALBUSD(Symbol):
    """
        name: GALBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALBUSD"

    def __str__(self):
        return "GALBUSD"

    def __call__(self):
        return "GALBUSD"


GALBUSD = GALBUSD(*GALBUSD._fields)
"""
    name: GALBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALETH(Symbol):
    """
        name: GALETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALETH"

    def __str__(self):
        return "GALETH"

    def __call__(self):
        return "GALETH"


GALETH = GALETH(*GALETH._fields)
"""
    name: GALETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALEUR(Symbol):
    """
        name: GALEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALEUR"

    def __str__(self):
        return "GALEUR"

    def __call__(self):
        return "GALEUR"


GALEUR = GALEUR(*GALEUR._fields)
"""
    name: GALEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALTRY(Symbol):
    """
        name: GALTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALTRY"

    def __str__(self):
        return "GALTRY"

    def __call__(self):
        return "GALTRY"


GALTRY = GALTRY(*GALTRY._fields)
"""
    name: GALTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class GALUSDT(Symbol):
    """
        name: GALUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALUSDT"

    def __str__(self):
        return "GALUSDT"

    def __call__(self):
        return "GALUSDT"


GALUSDT = GALUSDT(*GALUSDT._fields)
"""
    name: GALUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GASBTC(Symbol):
    """
        name: GASBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GASBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GASBTC"

    def __str__(self):
        return "GASBTC"

    def __call__(self):
        return "GASBTC"


GASBTC = GASBTC(*GASBTC._fields)
"""
    name: GASBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GASBUSD(Symbol):
    """
        name: GASBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GASBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GASBUSD"

    def __str__(self):
        return "GASBUSD"

    def __call__(self):
        return "GASBUSD"


GASBUSD = GASBUSD(*GASBUSD._fields)
"""
    name: GASBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GASUSDT(Symbol):
    """
        name: GASUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GASUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GASUSDT"

    def __str__(self):
        return "GASUSDT"

    def __call__(self):
        return "GASUSDT"


GASUSDT = GASUSDT(*GASUSDT._fields)
"""
    name: GASUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GBPBUSD(Symbol):
    """
        name: GBPBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GBPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GBPBUSD"

    def __str__(self):
        return "GBPBUSD"

    def __call__(self):
        return "GBPBUSD"


GBPBUSD = GBPBUSD(*GBPBUSD._fields)
"""
    name: GBPBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GBPUSDT(Symbol):
    """
        name: GBPUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GBPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GBPUSDT"

    def __str__(self):
        return "GBPUSDT"

    def __call__(self):
        return "GBPUSDT"


GBPUSDT = GBPUSDT(*GBPUSDT._fields)
"""
    name: GBPUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GFTBUSD(Symbol):
    """
        name: GFTBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GFTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GFTBUSD"

    def __str__(self):
        return "GFTBUSD"

    def __call__(self):
        return "GFTBUSD"


GFTBUSD = GFTBUSD(*GFTBUSD._fields)
"""
    name: GFTBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GHSTBUSD(Symbol):
    """
        name: GHSTBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GHSTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GHSTBUSD"

    def __str__(self):
        return "GHSTBUSD"

    def __call__(self):
        return "GHSTBUSD"


GHSTBUSD = GHSTBUSD(*GHSTBUSD._fields)
"""
    name: GHSTBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GHSTETH(Symbol):
    """
        name: GHSTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GHSTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GHSTETH"

    def __str__(self):
        return "GHSTETH"

    def __call__(self):
        return "GHSTETH"


GHSTETH = GHSTETH(*GHSTETH._fields)
"""
    name: GHSTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GHSTUSDT(Symbol):
    """
        name: GHSTUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GHSTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GHSTUSDT"

    def __str__(self):
        return "GHSTUSDT"

    def __call__(self):
        return "GHSTUSDT"


GHSTUSDT = GHSTUSDT(*GHSTUSDT._fields)
"""
    name: GHSTUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GLMBTC(Symbol):
    """
        name: GLMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GLMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMBTC"

    def __str__(self):
        return "GLMBTC"

    def __call__(self):
        return "GLMBTC"


GLMBTC = GLMBTC(*GLMBTC._fields)
"""
    name: GLMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GLMBUSD(Symbol):
    """
        name: GLMBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GLMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMBUSD"

    def __str__(self):
        return "GLMBUSD"

    def __call__(self):
        return "GLMBUSD"


GLMBUSD = GLMBUSD(*GLMBUSD._fields)
"""
    name: GLMBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GLMETH(Symbol):
    """
        name: GLMETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GLMETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMETH"

    def __str__(self):
        return "GLMETH"

    def __call__(self):
        return "GLMETH"


GLMETH = GLMETH(*GLMETH._fields)
"""
    name: GLMETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GLMRBNB(Symbol):
    """
        name: GLMRBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GLMRBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMRBNB"

    def __str__(self):
        return "GLMRBNB"

    def __call__(self):
        return "GLMRBNB"


GLMRBNB = GLMRBNB(*GLMRBNB._fields)
"""
    name: GLMRBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GLMRBTC(Symbol):
    """
        name: GLMRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GLMRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMRBTC"

    def __str__(self):
        return "GLMRBTC"

    def __call__(self):
        return "GLMRBTC"


GLMRBTC = GLMRBTC(*GLMRBTC._fields)
"""
    name: GLMRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GLMRBUSD(Symbol):
    """
        name: GLMRBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GLMRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMRBUSD"

    def __str__(self):
        return "GLMRBUSD"

    def __call__(self):
        return "GLMRBUSD"


GLMRBUSD = GLMRBUSD(*GLMRBUSD._fields)
"""
    name: GLMRBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GLMRUSDT(Symbol):
    """
        name: GLMRUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GLMRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMRUSDT"

    def __str__(self):
        return "GLMRUSDT"

    def __call__(self):
        return "GLMRUSDT"


GLMRUSDT = GLMRUSDT(*GLMRUSDT._fields)
"""
    name: GLMRUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GLMUSDT(Symbol):
    """
        name: GLMUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GLMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMUSDT"

    def __str__(self):
        return "GLMUSDT"

    def __call__(self):
        return "GLMUSDT"


GLMUSDT = GLMUSDT(*GLMUSDT._fields)
"""
    name: GLMUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTAUD(Symbol):
    """
        name: GMTAUD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTAUD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTAUD"

    def __str__(self):
        return "GMTAUD"

    def __call__(self):
        return "GMTAUD"


GMTAUD = GMTAUD(*GMTAUD._fields)
"""
    name: GMTAUD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTBNB(Symbol):
    """
        name: GMTBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTBNB"

    def __str__(self):
        return "GMTBNB"

    def __call__(self):
        return "GMTBNB"


GMTBNB = GMTBNB(*GMTBNB._fields)
"""
    name: GMTBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTBRL(Symbol):
    """
        name: GMTBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTBRL"

    def __str__(self):
        return "GMTBRL"

    def __call__(self):
        return "GMTBRL"


GMTBRL = GMTBRL(*GMTBRL._fields)
"""
    name: GMTBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTBTC(Symbol):
    """
        name: GMTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTBTC"

    def __str__(self):
        return "GMTBTC"

    def __call__(self):
        return "GMTBTC"


GMTBTC = GMTBTC(*GMTBTC._fields)
"""
    name: GMTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTBUSD(Symbol):
    """
        name: GMTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GMTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTBUSD"

    def __str__(self):
        return "GMTBUSD"

    def __call__(self):
        return "GMTBUSD"


GMTBUSD = GMTBUSD(*GMTBUSD._fields)
"""
    name: GMTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GMTETH(Symbol):
    """
        name: GMTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTETH"

    def __str__(self):
        return "GMTETH"

    def __call__(self):
        return "GMTETH"


GMTETH = GMTETH(*GMTETH._fields)
"""
    name: GMTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTEUR(Symbol):
    """
        name: GMTEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTEUR"

    def __str__(self):
        return "GMTEUR"

    def __call__(self):
        return "GMTEUR"


GMTEUR = GMTEUR(*GMTEUR._fields)
"""
    name: GMTEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTGBP(Symbol):
    """
        name: GMTGBP
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTGBP"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTGBP"

    def __str__(self):
        return "GMTGBP"

    def __call__(self):
        return "GMTGBP"


GMTGBP = GMTGBP(*GMTGBP._fields)
"""
    name: GMTGBP
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTTRY(Symbol):
    """
        name: GMTTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTTRY"

    def __str__(self):
        return "GMTTRY"

    def __call__(self):
        return "GMTTRY"


GMTTRY = GMTTRY(*GMTTRY._fields)
"""
    name: GMTTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTUSDT(Symbol):
    """
        name: GMTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GMTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTUSDT"

    def __str__(self):
        return "GMTUSDT"

    def __call__(self):
        return "GMTUSDT"


GMTUSDT = GMTUSDT(*GMTUSDT._fields)
"""
    name: GMTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GMXBTC(Symbol):
    """
        name: GMXBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMXBTC"

    def __str__(self):
        return "GMXBTC"

    def __call__(self):
        return "GMXBTC"


GMXBTC = GMXBTC(*GMXBTC._fields)
"""
    name: GMXBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMXBUSD(Symbol):
    """
        name: GMXBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GMXBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMXBUSD"

    def __str__(self):
        return "GMXBUSD"

    def __call__(self):
        return "GMXBUSD"


GMXBUSD = GMXBUSD(*GMXBUSD._fields)
"""
    name: GMXBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GMXUSDT(Symbol):
    """
        name: GMXUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GMXUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMXUSDT"

    def __str__(self):
        return "GMXUSDT"

    def __call__(self):
        return "GMXUSDT"


GMXUSDT = GMXUSDT(*GMXUSDT._fields)
"""
    name: GMXUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GNOBNB(Symbol):
    """
        name: GNOBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNOBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNOBNB"

    def __str__(self):
        return "GNOBNB"

    def __call__(self):
        return "GNOBNB"


GNOBNB = GNOBNB(*GNOBNB._fields)
"""
    name: GNOBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNOBTC(Symbol):
    """
        name: GNOBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNOBTC"

    def __str__(self):
        return "GNOBTC"

    def __call__(self):
        return "GNOBTC"


GNOBTC = GNOBTC(*GNOBTC._fields)
"""
    name: GNOBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNOBUSD(Symbol):
    """
        name: GNOBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNOBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNOBUSD"

    def __str__(self):
        return "GNOBUSD"

    def __call__(self):
        return "GNOBUSD"


GNOBUSD = GNOBUSD(*GNOBUSD._fields)
"""
    name: GNOBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNOUSDT(Symbol):
    """
        name: GNOUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNOUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNOUSDT"

    def __str__(self):
        return "GNOUSDT"

    def __call__(self):
        return "GNOUSDT"


GNOUSDT = GNOUSDT(*GNOUSDT._fields)
"""
    name: GNOUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNSBTC(Symbol):
    """
        name: GNSBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GNSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNSBTC"

    def __str__(self):
        return "GNSBTC"

    def __call__(self):
        return "GNSBTC"


GNSBTC = GNSBTC(*GNSBTC._fields)
"""
    name: GNSBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GNSUSDT(Symbol):
    """
        name: GNSUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GNSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNSUSDT"

    def __str__(self):
        return "GNSUSDT"

    def __call__(self):
        return "GNSUSDT"


GNSUSDT = GNSUSDT(*GNSUSDT._fields)
"""
    name: GNSUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GNTBNB(Symbol):
    """
        name: GNTBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNTBNB"

    def __str__(self):
        return "GNTBNB"

    def __call__(self):
        return "GNTBNB"


GNTBNB = GNTBNB(*GNTBNB._fields)
"""
    name: GNTBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNTBTC(Symbol):
    """
        name: GNTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNTBTC"

    def __str__(self):
        return "GNTBTC"

    def __call__(self):
        return "GNTBTC"


GNTBTC = GNTBTC(*GNTBTC._fields)
"""
    name: GNTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNTETH(Symbol):
    """
        name: GNTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNTETH"

    def __str__(self):
        return "GNTETH"

    def __call__(self):
        return "GNTETH"


GNTETH = GNTETH(*GNTETH._fields)
"""
    name: GNTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GOBNB(Symbol):
    """
        name: GOBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GOBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOBNB"

    def __str__(self):
        return "GOBNB"

    def __call__(self):
        return "GOBNB"


GOBNB = GOBNB(*GOBNB._fields)
"""
    name: GOBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GOBTC(Symbol):
    """
        name: GOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOBTC"

    def __str__(self):
        return "GOBTC"

    def __call__(self):
        return "GOBTC"


GOBTC = GOBTC(*GOBTC._fields)
"""
    name: GOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRSBTC(Symbol):
    """
        name: GRSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GRSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRSBTC"

    def __str__(self):
        return "GRSBTC"

    def __call__(self):
        return "GRSBTC"


GRSBTC = GRSBTC(*GRSBTC._fields)
"""
    name: GRSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRSETH(Symbol):
    """
        name: GRSETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GRSETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRSETH"

    def __str__(self):
        return "GRSETH"

    def __call__(self):
        return "GRSETH"


GRSETH = GRSETH(*GRSETH._fields)
"""
    name: GRSETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRTBTC(Symbol):
    """
        name: GRTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GRTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTBTC"

    def __str__(self):
        return "GRTBTC"

    def __call__(self):
        return "GRTBTC"


GRTBTC = GRTBTC(*GRTBTC._fields)
"""
    name: GRTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GRTBUSD(Symbol):
    """
        name: GRTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GRTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTBUSD"

    def __str__(self):
        return "GRTBUSD"

    def __call__(self):
        return "GRTBUSD"


GRTBUSD = GRTBUSD(*GRTBUSD._fields)
"""
    name: GRTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GRTETH(Symbol):
    """
        name: GRTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GRTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTETH"

    def __str__(self):
        return "GRTETH"

    def __call__(self):
        return "GRTETH"


GRTETH = GRTETH(*GRTETH._fields)
"""
    name: GRTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GRTEUR(Symbol):
    """
        name: GRTEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GRTEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTEUR"

    def __str__(self):
        return "GRTEUR"

    def __call__(self):
        return "GRTEUR"


GRTEUR = GRTEUR(*GRTEUR._fields)
"""
    name: GRTEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRTTRY(Symbol):
    """
        name: GRTTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GRTTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTTRY"

    def __str__(self):
        return "GRTTRY"

    def __call__(self):
        return "GRTTRY"


GRTTRY = GRTTRY(*GRTTRY._fields)
"""
    name: GRTTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class GRTUSDT(Symbol):
    """
        name: GRTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GRTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTUSDT"

    def __str__(self):
        return "GRTUSDT"

    def __call__(self):
        return "GRTUSDT"


GRTUSDT = GRTUSDT(*GRTUSDT._fields)
"""
    name: GRTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GTCBNB(Symbol):
    """
        name: GTCBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTCBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTCBNB"

    def __str__(self):
        return "GTCBNB"

    def __call__(self):
        return "GTCBNB"


GTCBNB = GTCBNB(*GTCBNB._fields)
"""
    name: GTCBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTCBTC(Symbol):
    """
        name: GTCBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GTCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTCBTC"

    def __str__(self):
        return "GTCBTC"

    def __call__(self):
        return "GTCBTC"


GTCBTC = GTCBTC(*GTCBTC._fields)
"""
    name: GTCBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GTCBUSD(Symbol):
    """
        name: GTCBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GTCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTCBUSD"

    def __str__(self):
        return "GTCBUSD"

    def __call__(self):
        return "GTCBUSD"


GTCBUSD = GTCBUSD(*GTCBUSD._fields)
"""
    name: GTCBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GTCUSDT(Symbol):
    """
        name: GTCUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GTCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTCUSDT"

    def __str__(self):
        return "GTCUSDT"

    def __call__(self):
        return "GTCUSDT"


GTCUSDT = GTCUSDT(*GTCUSDT._fields)
"""
    name: GTCUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GTOBNB(Symbol):
    """
        name: GTOBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOBNB"

    def __str__(self):
        return "GTOBNB"

    def __call__(self):
        return "GTOBNB"


GTOBNB = GTOBNB(*GTOBNB._fields)
"""
    name: GTOBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOBTC(Symbol):
    """
        name: GTOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOBTC"

    def __str__(self):
        return "GTOBTC"

    def __call__(self):
        return "GTOBTC"


GTOBTC = GTOBTC(*GTOBTC._fields)
"""
    name: GTOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOBUSD(Symbol):
    """
        name: GTOBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOBUSD"

    def __str__(self):
        return "GTOBUSD"

    def __call__(self):
        return "GTOBUSD"


GTOBUSD = GTOBUSD(*GTOBUSD._fields)
"""
    name: GTOBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOETH(Symbol):
    """
        name: GTOETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOETH"

    def __str__(self):
        return "GTOETH"

    def __call__(self):
        return "GTOETH"


GTOETH = GTOETH(*GTOETH._fields)
"""
    name: GTOETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOPAX(Symbol):
    """
        name: GTOPAX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOPAX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOPAX"

    def __str__(self):
        return "GTOPAX"

    def __call__(self):
        return "GTOPAX"


GTOPAX = GTOPAX(*GTOPAX._fields)
"""
    name: GTOPAX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOTUSD(Symbol):
    """
        name: GTOTUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOTUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOTUSD"

    def __str__(self):
        return "GTOTUSD"

    def __call__(self):
        return "GTOTUSD"


GTOTUSD = GTOTUSD(*GTOTUSD._fields)
"""
    name: GTOTUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOUSDC(Symbol):
    """
        name: GTOUSDC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOUSDC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOUSDC"

    def __str__(self):
        return "GTOUSDC"

    def __call__(self):
        return "GTOUSDC"


GTOUSDC = GTOUSDC(*GTOUSDC._fields)
"""
    name: GTOUSDC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOUSDT(Symbol):
    """
        name: GTOUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOUSDT"

    def __str__(self):
        return "GTOUSDT"

    def __call__(self):
        return "GTOUSDT"


GTOUSDT = GTOUSDT(*GTOUSDT._fields)
"""
    name: GTOUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GVTBTC(Symbol):
    """
        name: GVTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GVTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GVTBTC"

    def __str__(self):
        return "GVTBTC"

    def __call__(self):
        return "GVTBTC"


GVTBTC = GVTBTC(*GVTBTC._fields)
"""
    name: GVTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GVTETH(Symbol):
    """
        name: GVTETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GVTETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GVTETH"

    def __str__(self):
        return "GVTETH"

    def __call__(self):
        return "GVTETH"


GVTETH = GVTETH(*GVTETH._fields)
"""
    name: GVTETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GXSBNB(Symbol):
    """
        name: GXSBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GXSBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GXSBNB"

    def __str__(self):
        return "GXSBNB"

    def __call__(self):
        return "GXSBNB"


GXSBNB = GXSBNB(*GXSBNB._fields)
"""
    name: GXSBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GXSBTC(Symbol):
    """
        name: GXSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GXSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GXSBTC"

    def __str__(self):
        return "GXSBTC"

    def __call__(self):
        return "GXSBTC"


GXSBTC = GXSBTC(*GXSBTC._fields)
"""
    name: GXSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GXSETH(Symbol):
    """
        name: GXSETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GXSETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GXSETH"

    def __str__(self):
        return "GXSETH"

    def __call__(self):
        return "GXSETH"


GXSETH = GXSETH(*GXSETH._fields)
"""
    name: GXSETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GXSUSDT(Symbol):
    """
        name: GXSUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GXSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GXSUSDT"

    def __str__(self):
        return "GXSUSDT"

    def __call__(self):
        return "GXSUSDT"


GXSUSDT = GXSUSDT(*GXSUSDT._fields)
"""
    name: GXSUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HARDBNB(Symbol):
    """
        name: HARDBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HARDBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARDBNB"

    def __str__(self):
        return "HARDBNB"

    def __call__(self):
        return "HARDBNB"


HARDBNB = HARDBNB(*HARDBNB._fields)
"""
    name: HARDBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HARDBTC(Symbol):
    """
        name: HARDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HARDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARDBTC"

    def __str__(self):
        return "HARDBTC"

    def __call__(self):
        return "HARDBTC"


HARDBTC = HARDBTC(*HARDBTC._fields)
"""
    name: HARDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HARDBUSD(Symbol):
    """
        name: HARDBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HARDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARDBUSD"

    def __str__(self):
        return "HARDBUSD"

    def __call__(self):
        return "HARDBUSD"


HARDBUSD = HARDBUSD(*HARDBUSD._fields)
"""
    name: HARDBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HARDUSDT(Symbol):
    """
        name: HARDUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HARDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARDUSDT"

    def __str__(self):
        return "HARDUSDT"

    def __call__(self):
        return "HARDUSDT"


HARDUSDT = HARDUSDT(*HARDUSDT._fields)
"""
    name: HARDUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HBARBNB(Symbol):
    """
        name: HBARBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HBARBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBARBNB"

    def __str__(self):
        return "HBARBNB"

    def __call__(self):
        return "HBARBNB"


HBARBNB = HBARBNB(*HBARBNB._fields)
"""
    name: HBARBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HBARBTC(Symbol):
    """
        name: HBARBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HBARBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBARBTC"

    def __str__(self):
        return "HBARBTC"

    def __call__(self):
        return "HBARBTC"


HBARBTC = HBARBTC(*HBARBTC._fields)
"""
    name: HBARBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HBARBUSD(Symbol):
    """
        name: HBARBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HBARBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBARBUSD"

    def __str__(self):
        return "HBARBUSD"

    def __call__(self):
        return "HBARBUSD"


HBARBUSD = HBARBUSD(*HBARBUSD._fields)
"""
    name: HBARBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HBARUSDT(Symbol):
    """
        name: HBARUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HBARUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBARUSDT"

    def __str__(self):
        return "HBARUSDT"

    def __call__(self):
        return "HBARUSDT"


HBARUSDT = HBARUSDT(*HBARUSDT._fields)
"""
    name: HBARUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HCBTC(Symbol):
    """
        name: HCBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HCBTC"

    def __str__(self):
        return "HCBTC"

    def __call__(self):
        return "HCBTC"


HCBTC = HCBTC(*HCBTC._fields)
"""
    name: HCBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HCETH(Symbol):
    """
        name: HCETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HCETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HCETH"

    def __str__(self):
        return "HCETH"

    def __call__(self):
        return "HCETH"


HCETH = HCETH(*HCETH._fields)
"""
    name: HCETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HCUSDT(Symbol):
    """
        name: HCUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HCUSDT"

    def __str__(self):
        return "HCUSDT"

    def __call__(self):
        return "HCUSDT"


HCUSDT = HCUSDT(*HCUSDT._fields)
"""
    name: HCUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HEGICBUSD(Symbol):
    """
        name: HEGICBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HEGICBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEGICBUSD"

    def __str__(self):
        return "HEGICBUSD"

    def __call__(self):
        return "HEGICBUSD"


HEGICBUSD = HEGICBUSD(*HEGICBUSD._fields)
"""
    name: HEGICBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HEGICETH(Symbol):
    """
        name: HEGICETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HEGICETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEGICETH"

    def __str__(self):
        return "HEGICETH"

    def __call__(self):
        return "HEGICETH"


HEGICETH = HEGICETH(*HEGICETH._fields)
"""
    name: HEGICETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HFTBTC(Symbol):
    """
        name: HFTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HFTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFTBTC"

    def __str__(self):
        return "HFTBTC"

    def __call__(self):
        return "HFTBTC"


HFTBTC = HFTBTC(*HFTBTC._fields)
"""
    name: HFTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HFTBUSD(Symbol):
    """
        name: HFTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HFTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFTBUSD"

    def __str__(self):
        return "HFTBUSD"

    def __call__(self):
        return "HFTBUSD"


HFTBUSD = HFTBUSD(*HFTBUSD._fields)
"""
    name: HFTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HFTUSDT(Symbol):
    """
        name: HFTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HFTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFTUSDT"

    def __str__(self):
        return "HFTUSDT"

    def __call__(self):
        return "HFTUSDT"


HFTUSDT = HFTUSDT(*HFTUSDT._fields)
"""
    name: HFTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HIFIETH(Symbol):
    """
        name: HIFIETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIFIETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFIETH"

    def __str__(self):
        return "HIFIETH"

    def __call__(self):
        return "HIFIETH"


HIFIETH = HIFIETH(*HIFIETH._fields)
"""
    name: HIFIETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIFIUSDT(Symbol):
    """
        name: HIFIUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIFIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFIUSDT"

    def __str__(self):
        return "HIFIUSDT"

    def __call__(self):
        return "HIFIUSDT"


HIFIUSDT = HIFIUSDT(*HIFIUSDT._fields)
"""
    name: HIFIUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIGHBNB(Symbol):
    """
        name: HIGHBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIGHBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGHBNB"

    def __str__(self):
        return "HIGHBNB"

    def __call__(self):
        return "HIGHBNB"


HIGHBNB = HIGHBNB(*HIGHBNB._fields)
"""
    name: HIGHBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIGHBTC(Symbol):
    """
        name: HIGHBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIGHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGHBTC"

    def __str__(self):
        return "HIGHBTC"

    def __call__(self):
        return "HIGHBTC"


HIGHBTC = HIGHBTC(*HIGHBTC._fields)
"""
    name: HIGHBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIGHBUSD(Symbol):
    """
        name: HIGHBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIGHBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGHBUSD"

    def __str__(self):
        return "HIGHBUSD"

    def __call__(self):
        return "HIGHBUSD"


HIGHBUSD = HIGHBUSD(*HIGHBUSD._fields)
"""
    name: HIGHBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIGHUSDT(Symbol):
    """
        name: HIGHUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HIGHUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGHUSDT"

    def __str__(self):
        return "HIGHUSDT"

    def __call__(self):
        return "HIGHUSDT"


HIGHUSDT = HIGHUSDT(*HIGHUSDT._fields)
"""
    name: HIGHUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HIVEBNB(Symbol):
    """
        name: HIVEBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIVEBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVEBNB"

    def __str__(self):
        return "HIVEBNB"

    def __call__(self):
        return "HIVEBNB"


HIVEBNB = HIVEBNB(*HIVEBNB._fields)
"""
    name: HIVEBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIVEBTC(Symbol):
    """
        name: HIVEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HIVEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVEBTC"

    def __str__(self):
        return "HIVEBTC"

    def __call__(self):
        return "HIVEBTC"


HIVEBTC = HIVEBTC(*HIVEBTC._fields)
"""
    name: HIVEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HIVEBUSD(Symbol):
    """
        name: HIVEBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HIVEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVEBUSD"

    def __str__(self):
        return "HIVEBUSD"

    def __call__(self):
        return "HIVEBUSD"


HIVEBUSD = HIVEBUSD(*HIVEBUSD._fields)
"""
    name: HIVEBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HIVEUSDT(Symbol):
    """
        name: HIVEUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HIVEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVEUSDT"

    def __str__(self):
        return "HIVEUSDT"

    def __call__(self):
        return "HIVEUSDT"


HIVEUSDT = HIVEUSDT(*HIVEUSDT._fields)
"""
    name: HIVEUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HNTBTC(Symbol):
    """
        name: HNTBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNTBTC"

    def __str__(self):
        return "HNTBTC"

    def __call__(self):
        return "HNTBTC"


HNTBTC = HNTBTC(*HNTBTC._fields)
"""
    name: HNTBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HNTBUSD(Symbol):
    """
        name: HNTBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HNTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNTBUSD"

    def __str__(self):
        return "HNTBUSD"

    def __call__(self):
        return "HNTBUSD"


HNTBUSD = HNTBUSD(*HNTBUSD._fields)
"""
    name: HNTBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HNTUSDT(Symbol):
    """
        name: HNTUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HNTUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNTUSDT"

    def __str__(self):
        return "HNTUSDT"

    def __call__(self):
        return "HNTUSDT"


HNTUSDT = HNTUSDT(*HNTUSDT._fields)
"""
    name: HNTUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOOKBNB(Symbol):
    """
        name: HOOKBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOOKBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOOKBNB"

    def __str__(self):
        return "HOOKBNB"

    def __call__(self):
        return "HOOKBNB"


HOOKBNB = HOOKBNB(*HOOKBNB._fields)
"""
    name: HOOKBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOOKBTC(Symbol):
    """
        name: HOOKBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOOKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOOKBTC"

    def __str__(self):
        return "HOOKBTC"

    def __call__(self):
        return "HOOKBTC"


HOOKBTC = HOOKBTC(*HOOKBTC._fields)
"""
    name: HOOKBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOOKBUSD(Symbol):
    """
        name: HOOKBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HOOKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOOKBUSD"

    def __str__(self):
        return "HOOKBUSD"

    def __call__(self):
        return "HOOKBUSD"


HOOKBUSD = HOOKBUSD(*HOOKBUSD._fields)
"""
    name: HOOKBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HOOKUSDT(Symbol):
    """
        name: HOOKUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HOOKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOOKUSDT"

    def __str__(self):
        return "HOOKUSDT"

    def __call__(self):
        return "HOOKUSDT"


HOOKUSDT = HOOKUSDT(*HOOKUSDT._fields)
"""
    name: HOOKUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HOTBNB(Symbol):
    """
        name: HOTBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTBNB"

    def __str__(self):
        return "HOTBNB"

    def __call__(self):
        return "HOTBNB"


HOTBNB = HOTBNB(*HOTBNB._fields)
"""
    name: HOTBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTBRL(Symbol):
    """
        name: HOTBRL
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTBRL"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTBRL"

    def __str__(self):
        return "HOTBRL"

    def __call__(self):
        return "HOTBRL"


HOTBRL = HOTBRL(*HOTBRL._fields)
"""
    name: HOTBRL
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTBTC(Symbol):
    """
        name: HOTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTBTC"

    def __str__(self):
        return "HOTBTC"

    def __call__(self):
        return "HOTBTC"


HOTBTC = HOTBTC(*HOTBTC._fields)
"""
    name: HOTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTBUSD(Symbol):
    """
        name: HOTBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HOTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTBUSD"

    def __str__(self):
        return "HOTBUSD"

    def __call__(self):
        return "HOTBUSD"


HOTBUSD = HOTBUSD(*HOTBUSD._fields)
"""
    name: HOTBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HOTETH(Symbol):
    """
        name: HOTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTETH"

    def __str__(self):
        return "HOTETH"

    def __call__(self):
        return "HOTETH"


HOTETH = HOTETH(*HOTETH._fields)
"""
    name: HOTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTEUR(Symbol):
    """
        name: HOTEUR
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTEUR"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTEUR"

    def __str__(self):
        return "HOTEUR"

    def __call__(self):
        return "HOTEUR"


HOTEUR = HOTEUR(*HOTEUR._fields)
"""
    name: HOTEUR
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTTRY(Symbol):
    """
        name: HOTTRY
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTTRY"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTTRY"

    def __str__(self):
        return "HOTTRY"

    def __call__(self):
        return "HOTTRY"


HOTTRY = HOTTRY(*HOTTRY._fields)
"""
    name: HOTTRY
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTUSDT(Symbol):
    """
        name: HOTUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HOTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTUSDT"

    def __str__(self):
        return "HOTUSDT"

    def __call__(self):
        return "HOTUSDT"


HOTUSDT = HOTUSDT(*HOTUSDT._fields)
"""
    name: HOTUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HSRBTC(Symbol):
    """
        name: HSRBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HSRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HSRBTC"

    def __str__(self):
        return "HSRBTC"

    def __call__(self):
        return "HSRBTC"


HSRBTC = HSRBTC(*HSRBTC._fields)
"""
    name: HSRBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HSRETH(Symbol):
    """
        name: HSRETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HSRETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HSRETH"

    def __str__(self):
        return "HSRETH"

    def __call__(self):
        return "HSRETH"


HSRETH = HSRETH(*HSRETH._fields)
"""
    name: HSRETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICNBTC(Symbol):
    """
        name: ICNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICNBTC"

    def __str__(self):
        return "ICNBTC"

    def __call__(self):
        return "ICNBTC"


ICNBTC = ICNBTC(*ICNBTC._fields)
"""
    name: ICNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICNETH(Symbol):
    """
        name: ICNETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICNETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICNETH"

    def __str__(self):
        return "ICNETH"

    def __call__(self):
        return "ICNETH"


ICNETH = ICNETH(*ICNETH._fields)
"""
    name: ICNETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPBNB(Symbol):
    """
        name: ICPBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPBNB"

    def __str__(self):
        return "ICPBNB"

    def __call__(self):
        return "ICPBNB"


ICPBNB = ICPBNB(*ICPBNB._fields)
"""
    name: ICPBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPBTC(Symbol):
    """
        name: ICPBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPBTC"

    def __str__(self):
        return "ICPBTC"

    def __call__(self):
        return "ICPBTC"


ICPBTC = ICPBTC(*ICPBTC._fields)
"""
    name: ICPBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICPBUSD(Symbol):
    """
        name: ICPBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPBUSD"

    def __str__(self):
        return "ICPBUSD"

    def __call__(self):
        return "ICPBUSD"


ICPBUSD = ICPBUSD(*ICPBUSD._fields)
"""
    name: ICPBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICPETH(Symbol):
    """
        name: ICPETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPETH"

    def __str__(self):
        return "ICPETH"

    def __call__(self):
        return "ICPETH"


ICPETH = ICPETH(*ICPETH._fields)
"""
    name: ICPETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPEUR(Symbol):
    """
        name: ICPEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPEUR"

    def __str__(self):
        return "ICPEUR"

    def __call__(self):
        return "ICPEUR"


ICPEUR = ICPEUR(*ICPEUR._fields)
"""
    name: ICPEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPRUB(Symbol):
    """
        name: ICPRUB
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPRUB"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPRUB"

    def __str__(self):
        return "ICPRUB"

    def __call__(self):
        return "ICPRUB"


ICPRUB = ICPRUB(*ICPRUB._fields)
"""
    name: ICPRUB
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPTRY(Symbol):
    """
        name: ICPTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPTRY"

    def __str__(self):
        return "ICPTRY"

    def __call__(self):
        return "ICPTRY"


ICPTRY = ICPTRY(*ICPTRY._fields)
"""
    name: ICPTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPUSDT(Symbol):
    """
        name: ICPUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPUSDT"

    def __str__(self):
        return "ICPUSDT"

    def __call__(self):
        return "ICPUSDT"


ICPUSDT = ICPUSDT(*ICPUSDT._fields)
"""
    name: ICPUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICXBNB(Symbol):
    """
        name: ICXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXBNB"

    def __str__(self):
        return "ICXBNB"

    def __call__(self):
        return "ICXBNB"


ICXBNB = ICXBNB(*ICXBNB._fields)
"""
    name: ICXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICXBTC(Symbol):
    """
        name: ICXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXBTC"

    def __str__(self):
        return "ICXBTC"

    def __call__(self):
        return "ICXBTC"


ICXBTC = ICXBTC(*ICXBTC._fields)
"""
    name: ICXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICXBUSD(Symbol):
    """
        name: ICXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXBUSD"

    def __str__(self):
        return "ICXBUSD"

    def __call__(self):
        return "ICXBUSD"


ICXBUSD = ICXBUSD(*ICXBUSD._fields)
"""
    name: ICXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICXETH(Symbol):
    """
        name: ICXETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICXETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXETH"

    def __str__(self):
        return "ICXETH"

    def __call__(self):
        return "ICXETH"


ICXETH = ICXETH(*ICXETH._fields)
"""
    name: ICXETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICXUSDT(Symbol):
    """
        name: ICXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXUSDT"

    def __str__(self):
        return "ICXUSDT"

    def __call__(self):
        return "ICXUSDT"


ICXUSDT = ICXUSDT(*ICXUSDT._fields)
"""
    name: ICXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDBNB(Symbol):
    """
        name: IDBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDBNB"

    def __str__(self):
        return "IDBNB"

    def __call__(self):
        return "IDBNB"


IDBNB = IDBNB(*IDBNB._fields)
"""
    name: IDBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDBTC(Symbol):
    """
        name: IDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDBTC"

    def __str__(self):
        return "IDBTC"

    def __call__(self):
        return "IDBTC"


IDBTC = IDBTC(*IDBTC._fields)
"""
    name: IDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDEUR(Symbol):
    """
        name: IDEUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDEUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEUR"

    def __str__(self):
        return "IDEUR"

    def __call__(self):
        return "IDEUR"


IDEUR = IDEUR(*IDEUR._fields)
"""
    name: IDEUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDEXBNB(Symbol):
    """
        name: IDEXBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDEXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEXBNB"

    def __str__(self):
        return "IDEXBNB"

    def __call__(self):
        return "IDEXBNB"


IDEXBNB = IDEXBNB(*IDEXBNB._fields)
"""
    name: IDEXBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDEXBTC(Symbol):
    """
        name: IDEXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDEXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEXBTC"

    def __str__(self):
        return "IDEXBTC"

    def __call__(self):
        return "IDEXBTC"


IDEXBTC = IDEXBTC(*IDEXBTC._fields)
"""
    name: IDEXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDEXBUSD(Symbol):
    """
        name: IDEXBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDEXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEXBUSD"

    def __str__(self):
        return "IDEXBUSD"

    def __call__(self):
        return "IDEXBUSD"


IDEXBUSD = IDEXBUSD(*IDEXBUSD._fields)
"""
    name: IDEXBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDEXUSDT(Symbol):
    """
        name: IDEXUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDEXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEXUSDT"

    def __str__(self):
        return "IDEXUSDT"

    def __call__(self):
        return "IDEXUSDT"


IDEXUSDT = IDEXUSDT(*IDEXUSDT._fields)
"""
    name: IDEXUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDTRY(Symbol):
    """
        name: IDTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDTRY"

    def __str__(self):
        return "IDTRY"

    def __call__(self):
        return "IDTRY"


IDTRY = IDTRY(*IDTRY._fields)
"""
    name: IDTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class IDTUSD(Symbol):
    """
        name: IDTUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDTUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDTUSD"

    def __str__(self):
        return "IDTUSD"

    def __call__(self):
        return "IDTUSD"


IDTUSD = IDTUSD(*IDTUSD._fields)
"""
    name: IDTUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDUSDT(Symbol):
    """
        name: IDUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDUSDT"

    def __str__(self):
        return "IDUSDT"

    def __call__(self):
        return "IDUSDT"


IDUSDT = IDUSDT(*IDUSDT._fields)
"""
    name: IDUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ILVBNB(Symbol):
    """
        name: ILVBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ILVBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILVBNB"

    def __str__(self):
        return "ILVBNB"

    def __call__(self):
        return "ILVBNB"


ILVBNB = ILVBNB(*ILVBNB._fields)
"""
    name: ILVBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ILVBTC(Symbol):
    """
        name: ILVBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ILVBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILVBTC"

    def __str__(self):
        return "ILVBTC"

    def __call__(self):
        return "ILVBTC"


ILVBTC = ILVBTC(*ILVBTC._fields)
"""
    name: ILVBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ILVBUSD(Symbol):
    """
        name: ILVBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ILVBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILVBUSD"

    def __str__(self):
        return "ILVBUSD"

    def __call__(self):
        return "ILVBUSD"


ILVBUSD = ILVBUSD(*ILVBUSD._fields)
"""
    name: ILVBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ILVUSDT(Symbol):
    """
        name: ILVUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ILVUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILVUSDT"

    def __str__(self):
        return "ILVUSDT"

    def __call__(self):
        return "ILVUSDT"


ILVUSDT = ILVUSDT(*ILVUSDT._fields)
"""
    name: ILVUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IMXBNB(Symbol):
    """
        name: IMXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IMXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMXBNB"

    def __str__(self):
        return "IMXBNB"

    def __call__(self):
        return "IMXBNB"


IMXBNB = IMXBNB(*IMXBNB._fields)
"""
    name: IMXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IMXBTC(Symbol):
    """
        name: IMXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IMXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMXBTC"

    def __str__(self):
        return "IMXBTC"

    def __call__(self):
        return "IMXBTC"


IMXBTC = IMXBTC(*IMXBTC._fields)
"""
    name: IMXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IMXBUSD(Symbol):
    """
        name: IMXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IMXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMXBUSD"

    def __str__(self):
        return "IMXBUSD"

    def __call__(self):
        return "IMXBUSD"


IMXBUSD = IMXBUSD(*IMXBUSD._fields)
"""
    name: IMXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IMXUSDT(Symbol):
    """
        name: IMXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IMXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMXUSDT"

    def __str__(self):
        return "IMXUSDT"

    def __call__(self):
        return "IMXUSDT"


IMXUSDT = IMXUSDT(*IMXUSDT._fields)
"""
    name: IMXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class INJBNB(Symbol):
    """
        name: INJBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "INJBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJBNB"

    def __str__(self):
        return "INJBNB"

    def __call__(self):
        return "INJBNB"


INJBNB = INJBNB(*INJBNB._fields)
"""
    name: INJBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class INJBTC(Symbol):
    """
        name: INJBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "INJBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJBTC"

    def __str__(self):
        return "INJBTC"

    def __call__(self):
        return "INJBTC"


INJBTC = INJBTC(*INJBTC._fields)
"""
    name: INJBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class INJBUSD(Symbol):
    """
        name: INJBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "INJBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJBUSD"

    def __str__(self):
        return "INJBUSD"

    def __call__(self):
        return "INJBUSD"


INJBUSD = INJBUSD(*INJBUSD._fields)
"""
    name: INJBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class INJTRY(Symbol):
    """
        name: INJTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "INJTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJTRY"

    def __str__(self):
        return "INJTRY"

    def __call__(self):
        return "INJTRY"


INJTRY = INJTRY(*INJTRY._fields)
"""
    name: INJTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class INJUSDT(Symbol):
    """
        name: INJUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "INJUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJUSDT"

    def __str__(self):
        return "INJUSDT"

    def __call__(self):
        return "INJUSDT"


INJUSDT = INJUSDT(*INJUSDT._fields)
"""
    name: INJUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class INSBTC(Symbol):
    """
        name: INSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "INSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INSBTC"

    def __str__(self):
        return "INSBTC"

    def __call__(self):
        return "INSBTC"


INSBTC = INSBTC(*INSBTC._fields)
"""
    name: INSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class INSETH(Symbol):
    """
        name: INSETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "INSETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INSETH"

    def __str__(self):
        return "INSETH"

    def __call__(self):
        return "INSETH"


INSETH = INSETH(*INSETH._fields)
"""
    name: INSETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOSTBTC(Symbol):
    """
        name: IOSTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOSTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOSTBTC"

    def __str__(self):
        return "IOSTBTC"

    def __call__(self):
        return "IOSTBTC"


IOSTBTC = IOSTBTC(*IOSTBTC._fields)
"""
    name: IOSTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOSTBUSD(Symbol):
    """
        name: IOSTBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOSTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOSTBUSD"

    def __str__(self):
        return "IOSTBUSD"

    def __call__(self):
        return "IOSTBUSD"


IOSTBUSD = IOSTBUSD(*IOSTBUSD._fields)
"""
    name: IOSTBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOSTETH(Symbol):
    """
        name: IOSTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOSTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOSTETH"

    def __str__(self):
        return "IOSTETH"

    def __call__(self):
        return "IOSTETH"


IOSTETH = IOSTETH(*IOSTETH._fields)
"""
    name: IOSTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOSTUSDT(Symbol):
    """
        name: IOSTUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOSTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOSTUSDT"

    def __str__(self):
        return "IOSTUSDT"

    def __call__(self):
        return "IOSTUSDT"


IOSTUSDT = IOSTUSDT(*IOSTUSDT._fields)
"""
    name: IOSTUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTABNB(Symbol):
    """
        name: IOTABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOTABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTABNB"

    def __str__(self):
        return "IOTABNB"

    def __call__(self):
        return "IOTABNB"


IOTABNB = IOTABNB(*IOTABNB._fields)
"""
    name: IOTABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOTABTC(Symbol):
    """
        name: IOTABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTABTC"

    def __str__(self):
        return "IOTABTC"

    def __call__(self):
        return "IOTABTC"


IOTABTC = IOTABTC(*IOTABTC._fields)
"""
    name: IOTABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTABUSD(Symbol):
    """
        name: IOTABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOTABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTABUSD"

    def __str__(self):
        return "IOTABUSD"

    def __call__(self):
        return "IOTABUSD"


IOTABUSD = IOTABUSD(*IOTABUSD._fields)
"""
    name: IOTABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOTAETH(Symbol):
    """
        name: IOTAETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOTAETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTAETH"

    def __str__(self):
        return "IOTAETH"

    def __call__(self):
        return "IOTAETH"


IOTAETH = IOTAETH(*IOTAETH._fields)
"""
    name: IOTAETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOTAUSDT(Symbol):
    """
        name: IOTAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTAUSDT"

    def __str__(self):
        return "IOTAUSDT"

    def __call__(self):
        return "IOTAUSDT"


IOTAUSDT = IOTAUSDT(*IOTAUSDT._fields)
"""
    name: IOTAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTXBTC(Symbol):
    """
        name: IOTXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTXBTC"

    def __str__(self):
        return "IOTXBTC"

    def __call__(self):
        return "IOTXBTC"


IOTXBTC = IOTXBTC(*IOTXBTC._fields)
"""
    name: IOTXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTXBUSD(Symbol):
    """
        name: IOTXBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTXBUSD"

    def __str__(self):
        return "IOTXBUSD"

    def __call__(self):
        return "IOTXBUSD"


IOTXBUSD = IOTXBUSD(*IOTXBUSD._fields)
"""
    name: IOTXBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTXETH(Symbol):
    """
        name: IOTXETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOTXETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTXETH"

    def __str__(self):
        return "IOTXETH"

    def __call__(self):
        return "IOTXETH"


IOTXETH = IOTXETH(*IOTXETH._fields)
"""
    name: IOTXETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOTXUSDT(Symbol):
    """
        name: IOTXUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTXUSDT"

    def __str__(self):
        return "IOTXUSDT"

    def __call__(self):
        return "IOTXUSDT"


IOTXUSDT = IOTXUSDT(*IOTXUSDT._fields)
"""
    name: IOTXUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IQBNB(Symbol):
    """
        name: IQBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IQBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IQBNB"

    def __str__(self):
        return "IQBNB"

    def __call__(self):
        return "IQBNB"


IQBNB = IQBNB(*IQBNB._fields)
"""
    name: IQBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IQBUSD(Symbol):
    """
        name: IQBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IQBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IQBUSD"

    def __str__(self):
        return "IQBUSD"

    def __call__(self):
        return "IQBUSD"


IQBUSD = IQBUSD(*IQBUSD._fields)
"""
    name: IQBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IRISBNB(Symbol):
    """
        name: IRISBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IRISBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRISBNB"

    def __str__(self):
        return "IRISBNB"

    def __call__(self):
        return "IRISBNB"


IRISBNB = IRISBNB(*IRISBNB._fields)
"""
    name: IRISBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IRISBTC(Symbol):
    """
        name: IRISBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IRISBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRISBTC"

    def __str__(self):
        return "IRISBTC"

    def __call__(self):
        return "IRISBTC"


IRISBTC = IRISBTC(*IRISBTC._fields)
"""
    name: IRISBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IRISBUSD(Symbol):
    """
        name: IRISBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IRISBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRISBUSD"

    def __str__(self):
        return "IRISBUSD"

    def __call__(self):
        return "IRISBUSD"


IRISBUSD = IRISBUSD(*IRISBUSD._fields)
"""
    name: IRISBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IRISUSDT(Symbol):
    """
        name: IRISUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IRISUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRISUSDT"

    def __str__(self):
        return "IRISUSDT"

    def __call__(self):
        return "IRISUSDT"


IRISUSDT = IRISUSDT(*IRISUSDT._fields)
"""
    name: IRISUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYBNB(Symbol):
    """
        name: JASMYBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JASMYBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYBNB"

    def __str__(self):
        return "JASMYBNB"

    def __call__(self):
        return "JASMYBNB"


JASMYBNB = JASMYBNB(*JASMYBNB._fields)
"""
    name: JASMYBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYBTC(Symbol):
    """
        name: JASMYBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JASMYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYBTC"

    def __str__(self):
        return "JASMYBTC"

    def __call__(self):
        return "JASMYBTC"


JASMYBTC = JASMYBTC(*JASMYBTC._fields)
"""
    name: JASMYBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JASMYBUSD(Symbol):
    """
        name: JASMYBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JASMYBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYBUSD"

    def __str__(self):
        return "JASMYBUSD"

    def __call__(self):
        return "JASMYBUSD"


JASMYBUSD = JASMYBUSD(*JASMYBUSD._fields)
"""
    name: JASMYBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JASMYETH(Symbol):
    """
        name: JASMYETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JASMYETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYETH"

    def __str__(self):
        return "JASMYETH"

    def __call__(self):
        return "JASMYETH"


JASMYETH = JASMYETH(*JASMYETH._fields)
"""
    name: JASMYETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYEUR(Symbol):
    """
        name: JASMYEUR
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JASMYEUR"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYEUR"

    def __str__(self):
        return "JASMYEUR"

    def __call__(self):
        return "JASMYEUR"


JASMYEUR = JASMYEUR(*JASMYEUR._fields)
"""
    name: JASMYEUR
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYTRY(Symbol):
    """
        name: JASMYTRY
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JASMYTRY"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYTRY"

    def __str__(self):
        return "JASMYTRY"

    def __call__(self):
        return "JASMYTRY"


JASMYTRY = JASMYTRY(*JASMYTRY._fields)
"""
    name: JASMYTRY
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYUSDT(Symbol):
    """
        name: JASMYUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JASMYUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYUSDT"

    def __str__(self):
        return "JASMYUSDT"

    def __call__(self):
        return "JASMYUSDT"


JASMYUSDT = JASMYUSDT(*JASMYUSDT._fields)
"""
    name: JASMYUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JOEBTC(Symbol):
    """
        name: JOEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JOEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JOEBTC"

    def __str__(self):
        return "JOEBTC"

    def __call__(self):
        return "JOEBTC"


JOEBTC = JOEBTC(*JOEBTC._fields)
"""
    name: JOEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JOEBUSD(Symbol):
    """
        name: JOEBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JOEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JOEBUSD"

    def __str__(self):
        return "JOEBUSD"

    def __call__(self):
        return "JOEBUSD"


JOEBUSD = JOEBUSD(*JOEBUSD._fields)
"""
    name: JOEBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JOETRY(Symbol):
    """
        name: JOETRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JOETRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JOETRY"

    def __str__(self):
        return "JOETRY"

    def __call__(self):
        return "JOETRY"


JOETRY = JOETRY(*JOETRY._fields)
"""
    name: JOETRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class JOEUSDT(Symbol):
    """
        name: JOEUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JOEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JOEUSDT"

    def __str__(self):
        return "JOEUSDT"

    def __call__(self):
        return "JOEUSDT"


JOEUSDT = JOEUSDT(*JOEUSDT._fields)
"""
    name: JOEUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JSTBNB(Symbol):
    """
        name: JSTBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JSTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JSTBNB"

    def __str__(self):
        return "JSTBNB"

    def __call__(self):
        return "JSTBNB"


JSTBNB = JSTBNB(*JSTBNB._fields)
"""
    name: JSTBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JSTBTC(Symbol):
    """
        name: JSTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JSTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JSTBTC"

    def __str__(self):
        return "JSTBTC"

    def __call__(self):
        return "JSTBTC"


JSTBTC = JSTBTC(*JSTBTC._fields)
"""
    name: JSTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JSTBUSD(Symbol):
    """
        name: JSTBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JSTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JSTBUSD"

    def __str__(self):
        return "JSTBUSD"

    def __call__(self):
        return "JSTBUSD"


JSTBUSD = JSTBUSD(*JSTBUSD._fields)
"""
    name: JSTBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JSTUSDT(Symbol):
    """
        name: JSTUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JSTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JSTUSDT"

    def __str__(self):
        return "JSTUSDT"

    def __call__(self):
        return "JSTUSDT"


JSTUSDT = JSTUSDT(*JSTUSDT._fields)
"""
    name: JSTUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JUVBTC(Symbol):
    """
        name: JUVBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JUVBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JUVBTC"

    def __str__(self):
        return "JUVBTC"

    def __call__(self):
        return "JUVBTC"


JUVBTC = JUVBTC(*JUVBTC._fields)
"""
    name: JUVBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JUVBUSD(Symbol):
    """
        name: JUVBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JUVBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JUVBUSD"

    def __str__(self):
        return "JUVBUSD"

    def __call__(self):
        return "JUVBUSD"


JUVBUSD = JUVBUSD(*JUVBUSD._fields)
"""
    name: JUVBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JUVUSDT(Symbol):
    """
        name: JUVUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JUVUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JUVUSDT"

    def __str__(self):
        return "JUVUSDT"

    def __call__(self):
        return "JUVUSDT"


JUVUSDT = JUVUSDT(*JUVUSDT._fields)
"""
    name: JUVUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KAVABNB(Symbol):
    """
        name: KAVABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KAVABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVABNB"

    def __str__(self):
        return "KAVABNB"

    def __call__(self):
        return "KAVABNB"


KAVABNB = KAVABNB(*KAVABNB._fields)
"""
    name: KAVABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KAVABTC(Symbol):
    """
        name: KAVABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KAVABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVABTC"

    def __str__(self):
        return "KAVABTC"

    def __call__(self):
        return "KAVABTC"


KAVABTC = KAVABTC(*KAVABTC._fields)
"""
    name: KAVABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KAVABUSD(Symbol):
    """
        name: KAVABUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KAVABUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVABUSD"

    def __str__(self):
        return "KAVABUSD"

    def __call__(self):
        return "KAVABUSD"


KAVABUSD = KAVABUSD(*KAVABUSD._fields)
"""
    name: KAVABUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KAVAETH(Symbol):
    """
        name: KAVAETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KAVAETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVAETH"

    def __str__(self):
        return "KAVAETH"

    def __call__(self):
        return "KAVAETH"


KAVAETH = KAVAETH(*KAVAETH._fields)
"""
    name: KAVAETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KAVAUSDT(Symbol):
    """
        name: KAVAUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KAVAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVAUSDT"

    def __str__(self):
        return "KAVAUSDT"

    def __call__(self):
        return "KAVAUSDT"


KAVAUSDT = KAVAUSDT(*KAVAUSDT._fields)
"""
    name: KAVAUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KDABTC(Symbol):
    """
        name: KDABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KDABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDABTC"

    def __str__(self):
        return "KDABTC"

    def __call__(self):
        return "KDABTC"


KDABTC = KDABTC(*KDABTC._fields)
"""
    name: KDABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KDABUSD(Symbol):
    """
        name: KDABUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KDABUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDABUSD"

    def __str__(self):
        return "KDABUSD"

    def __call__(self):
        return "KDABUSD"


KDABUSD = KDABUSD(*KDABUSD._fields)
"""
    name: KDABUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KDAUSDT(Symbol):
    """
        name: KDAUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KDAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDAUSDT"

    def __str__(self):
        return "KDAUSDT"

    def __call__(self):
        return "KDAUSDT"


KDAUSDT = KDAUSDT(*KDAUSDT._fields)
"""
    name: KDAUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KEEPBNB(Symbol):
    """
        name: KEEPBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEEPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEEPBNB"

    def __str__(self):
        return "KEEPBNB"

    def __call__(self):
        return "KEEPBNB"


KEEPBNB = KEEPBNB(*KEEPBNB._fields)
"""
    name: KEEPBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEEPBTC(Symbol):
    """
        name: KEEPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEEPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEEPBTC"

    def __str__(self):
        return "KEEPBTC"

    def __call__(self):
        return "KEEPBTC"


KEEPBTC = KEEPBTC(*KEEPBTC._fields)
"""
    name: KEEPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEEPBUSD(Symbol):
    """
        name: KEEPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEEPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEEPBUSD"

    def __str__(self):
        return "KEEPBUSD"

    def __call__(self):
        return "KEEPBUSD"


KEEPBUSD = KEEPBUSD(*KEEPBUSD._fields)
"""
    name: KEEPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEEPUSDT(Symbol):
    """
        name: KEEPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEEPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEEPUSDT"

    def __str__(self):
        return "KEEPUSDT"

    def __call__(self):
        return "KEEPUSDT"


KEEPUSDT = KEEPUSDT(*KEEPUSDT._fields)
"""
    name: KEEPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEYBTC(Symbol):
    """
        name: KEYBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEYBTC"

    def __str__(self):
        return "KEYBTC"

    def __call__(self):
        return "KEYBTC"


KEYBTC = KEYBTC(*KEYBTC._fields)
"""
    name: KEYBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEYBUSD(Symbol):
    """
        name: KEYBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KEYBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEYBUSD"

    def __str__(self):
        return "KEYBUSD"

    def __call__(self):
        return "KEYBUSD"


KEYBUSD = KEYBUSD(*KEYBUSD._fields)
"""
    name: KEYBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KEYETH(Symbol):
    """
        name: KEYETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEYETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEYETH"

    def __str__(self):
        return "KEYETH"

    def __call__(self):
        return "KEYETH"


KEYETH = KEYETH(*KEYETH._fields)
"""
    name: KEYETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEYUSDT(Symbol):
    """
        name: KEYUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KEYUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEYUSDT"

    def __str__(self):
        return "KEYUSDT"

    def __call__(self):
        return "KEYUSDT"


KEYUSDT = KEYUSDT(*KEYUSDT._fields)
"""
    name: KEYUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KLAYBNB(Symbol):
    """
        name: KLAYBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KLAYBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAYBNB"

    def __str__(self):
        return "KLAYBNB"

    def __call__(self):
        return "KLAYBNB"


KLAYBNB = KLAYBNB(*KLAYBNB._fields)
"""
    name: KLAYBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KLAYBTC(Symbol):
    """
        name: KLAYBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KLAYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAYBTC"

    def __str__(self):
        return "KLAYBTC"

    def __call__(self):
        return "KLAYBTC"


KLAYBTC = KLAYBTC(*KLAYBTC._fields)
"""
    name: KLAYBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KLAYBUSD(Symbol):
    """
        name: KLAYBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KLAYBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAYBUSD"

    def __str__(self):
        return "KLAYBUSD"

    def __call__(self):
        return "KLAYBUSD"


KLAYBUSD = KLAYBUSD(*KLAYBUSD._fields)
"""
    name: KLAYBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KLAYUSDT(Symbol):
    """
        name: KLAYUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KLAYUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAYUSDT"

    def __str__(self):
        return "KLAYUSDT"

    def __call__(self):
        return "KLAYUSDT"


KLAYUSDT = KLAYUSDT(*KLAYUSDT._fields)
"""
    name: KLAYUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KMDBTC(Symbol):
    """
        name: KMDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KMDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMDBTC"

    def __str__(self):
        return "KMDBTC"

    def __call__(self):
        return "KMDBTC"


KMDBTC = KMDBTC(*KMDBTC._fields)
"""
    name: KMDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KMDBUSD(Symbol):
    """
        name: KMDBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KMDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMDBUSD"

    def __str__(self):
        return "KMDBUSD"

    def __call__(self):
        return "KMDBUSD"


KMDBUSD = KMDBUSD(*KMDBUSD._fields)
"""
    name: KMDBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KMDETH(Symbol):
    """
        name: KMDETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KMDETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMDETH"

    def __str__(self):
        return "KMDETH"

    def __call__(self):
        return "KMDETH"


KMDETH = KMDETH(*KMDETH._fields)
"""
    name: KMDETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KMDUSDT(Symbol):
    """
        name: KMDUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KMDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMDUSDT"

    def __str__(self):
        return "KMDUSDT"

    def __call__(self):
        return "KMDUSDT"


KMDUSDT = KMDUSDT(*KMDUSDT._fields)
"""
    name: KMDUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KNCBNB(Symbol):
    """
        name: KNCBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KNCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCBNB"

    def __str__(self):
        return "KNCBNB"

    def __call__(self):
        return "KNCBNB"


KNCBNB = KNCBNB(*KNCBNB._fields)
"""
    name: KNCBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KNCBTC(Symbol):
    """
        name: KNCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KNCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCBTC"

    def __str__(self):
        return "KNCBTC"

    def __call__(self):
        return "KNCBTC"


KNCBTC = KNCBTC(*KNCBTC._fields)
"""
    name: KNCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KNCBUSD(Symbol):
    """
        name: KNCBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KNCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCBUSD"

    def __str__(self):
        return "KNCBUSD"

    def __call__(self):
        return "KNCBUSD"


KNCBUSD = KNCBUSD(*KNCBUSD._fields)
"""
    name: KNCBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KNCETH(Symbol):
    """
        name: KNCETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KNCETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCETH"

    def __str__(self):
        return "KNCETH"

    def __call__(self):
        return "KNCETH"


KNCETH = KNCETH(*KNCETH._fields)
"""
    name: KNCETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KNCUSDT(Symbol):
    """
        name: KNCUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KNCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCUSDT"

    def __str__(self):
        return "KNCUSDT"

    def __call__(self):
        return "KNCUSDT"


KNCUSDT = KNCUSDT(*KNCUSDT._fields)
"""
    name: KNCUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KP3RBNB(Symbol):
    """
        name: KP3RBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KP3RBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KP3RBNB"

    def __str__(self):
        return "KP3RBNB"

    def __call__(self):
        return "KP3RBNB"


KP3RBNB = KP3RBNB(*KP3RBNB._fields)
"""
    name: KP3RBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KP3RBUSD(Symbol):
    """
        name: KP3RBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KP3RBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KP3RBUSD"

    def __str__(self):
        return "KP3RBUSD"

    def __call__(self):
        return "KP3RBUSD"


KP3RBUSD = KP3RBUSD(*KP3RBUSD._fields)
"""
    name: KP3RBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KP3RUSDT(Symbol):
    """
        name: KP3RUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KP3RUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KP3RUSDT"

    def __str__(self):
        return "KP3RUSDT"

    def __call__(self):
        return "KP3RUSDT"


KP3RUSDT = KP3RUSDT(*KP3RUSDT._fields)
"""
    name: KP3RUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KSMAUD(Symbol):
    """
        name: KSMAUD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KSMAUD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMAUD"

    def __str__(self):
        return "KSMAUD"

    def __call__(self):
        return "KSMAUD"


KSMAUD = KSMAUD(*KSMAUD._fields)
"""
    name: KSMAUD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KSMBNB(Symbol):
    """
        name: KSMBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KSMBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMBNB"

    def __str__(self):
        return "KSMBNB"

    def __call__(self):
        return "KSMBNB"


KSMBNB = KSMBNB(*KSMBNB._fields)
"""
    name: KSMBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KSMBTC(Symbol):
    """
        name: KSMBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KSMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMBTC"

    def __str__(self):
        return "KSMBTC"

    def __call__(self):
        return "KSMBTC"


KSMBTC = KSMBTC(*KSMBTC._fields)
"""
    name: KSMBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KSMBUSD(Symbol):
    """
        name: KSMBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KSMBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMBUSD"

    def __str__(self):
        return "KSMBUSD"

    def __call__(self):
        return "KSMBUSD"


KSMBUSD = KSMBUSD(*KSMBUSD._fields)
"""
    name: KSMBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KSMETH(Symbol):
    """
        name: KSMETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KSMETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMETH"

    def __str__(self):
        return "KSMETH"

    def __call__(self):
        return "KSMETH"


KSMETH = KSMETH(*KSMETH._fields)
"""
    name: KSMETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KSMUSDT(Symbol):
    """
        name: KSMUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KSMUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMUSDT"

    def __str__(self):
        return "KSMUSDT"

    def __call__(self):
        return "KSMUSDT"


KSMUSDT = KSMUSDT(*KSMUSDT._fields)
"""
    name: KSMUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LAZIOBTC(Symbol):
    """
        name: LAZIOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LAZIOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOBTC"

    def __str__(self):
        return "LAZIOBTC"

    def __call__(self):
        return "LAZIOBTC"


LAZIOBTC = LAZIOBTC(*LAZIOBTC._fields)
"""
    name: LAZIOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LAZIOBUSD(Symbol):
    """
        name: LAZIOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LAZIOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOBUSD"

    def __str__(self):
        return "LAZIOBUSD"

    def __call__(self):
        return "LAZIOBUSD"


LAZIOBUSD = LAZIOBUSD(*LAZIOBUSD._fields)
"""
    name: LAZIOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LAZIOEUR(Symbol):
    """
        name: LAZIOEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LAZIOEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOEUR"

    def __str__(self):
        return "LAZIOEUR"

    def __call__(self):
        return "LAZIOEUR"


LAZIOEUR = LAZIOEUR(*LAZIOEUR._fields)
"""
    name: LAZIOEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LAZIOTRY(Symbol):
    """
        name: LAZIOTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LAZIOTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOTRY"

    def __str__(self):
        return "LAZIOTRY"

    def __call__(self):
        return "LAZIOTRY"


LAZIOTRY = LAZIOTRY(*LAZIOTRY._fields)
"""
    name: LAZIOTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class LAZIOUSDT(Symbol):
    """
        name: LAZIOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LAZIOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOUSDT"

    def __str__(self):
        return "LAZIOUSDT"

    def __call__(self):
        return "LAZIOUSDT"


LAZIOUSDT = LAZIOUSDT(*LAZIOUSDT._fields)
"""
    name: LAZIOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LDOBTC(Symbol):
    """
        name: LDOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LDOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDOBTC"

    def __str__(self):
        return "LDOBTC"

    def __call__(self):
        return "LDOBTC"


LDOBTC = LDOBTC(*LDOBTC._fields)
"""
    name: LDOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LDOBUSD(Symbol):
    """
        name: LDOBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LDOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDOBUSD"

    def __str__(self):
        return "LDOBUSD"

    def __call__(self):
        return "LDOBUSD"


LDOBUSD = LDOBUSD(*LDOBUSD._fields)
"""
    name: LDOBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LDOTUSD(Symbol):
    """
        name: LDOTUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LDOTUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDOTUSD"

    def __str__(self):
        return "LDOTUSD"

    def __call__(self):
        return "LDOTUSD"


LDOTUSD = LDOTUSD(*LDOTUSD._fields)
"""
    name: LDOTUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LDOUSDT(Symbol):
    """
        name: LDOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LDOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDOUSDT"

    def __str__(self):
        return "LDOUSDT"

    def __call__(self):
        return "LDOUSDT"


LDOUSDT = LDOUSDT(*LDOUSDT._fields)
"""
    name: LDOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LENDBKRW(Symbol):
    """
        name: LENDBKRW
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDBKRW"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDBKRW"

    def __str__(self):
        return "LENDBKRW"

    def __call__(self):
        return "LENDBKRW"


LENDBKRW = LENDBKRW(*LENDBKRW._fields)
"""
    name: LENDBKRW
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LENDBTC(Symbol):
    """
        name: LENDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDBTC"

    def __str__(self):
        return "LENDBTC"

    def __call__(self):
        return "LENDBTC"


LENDBTC = LENDBTC(*LENDBTC._fields)
"""
    name: LENDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LENDBUSD(Symbol):
    """
        name: LENDBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDBUSD"

    def __str__(self):
        return "LENDBUSD"

    def __call__(self):
        return "LENDBUSD"


LENDBUSD = LENDBUSD(*LENDBUSD._fields)
"""
    name: LENDBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LENDETH(Symbol):
    """
        name: LENDETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDETH"

    def __str__(self):
        return "LENDETH"

    def __call__(self):
        return "LENDETH"


LENDETH = LENDETH(*LENDETH._fields)
"""
    name: LENDETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LENDUSDT(Symbol):
    """
        name: LENDUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDUSDT"

    def __str__(self):
        return "LENDUSDT"

    def __call__(self):
        return "LENDUSDT"


LENDUSDT = LENDUSDT(*LENDUSDT._fields)
"""
    name: LENDUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LEVERBUSD(Symbol):
    """
        name: LEVERBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LEVERBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LEVERBUSD"

    def __str__(self):
        return "LEVERBUSD"

    def __call__(self):
        return "LEVERBUSD"


LEVERBUSD = LEVERBUSD(*LEVERBUSD._fields)
"""
    name: LEVERBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LEVERUSDT(Symbol):
    """
        name: LEVERUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LEVERUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LEVERUSDT"

    def __str__(self):
        return "LEVERUSDT"

    def __call__(self):
        return "LEVERUSDT"


LEVERUSDT = LEVERUSDT(*LEVERUSDT._fields)
"""
    name: LEVERUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINABNB(Symbol):
    """
        name: LINABNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINABNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINABNB"

    def __str__(self):
        return "LINABNB"

    def __call__(self):
        return "LINABNB"


LINABNB = LINABNB(*LINABNB._fields)
"""
    name: LINABNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINABTC(Symbol):
    """
        name: LINABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINABTC"

    def __str__(self):
        return "LINABTC"

    def __call__(self):
        return "LINABTC"


LINABTC = LINABTC(*LINABTC._fields)
"""
    name: LINABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINABUSD(Symbol):
    """
        name: LINABUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINABUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINABUSD"

    def __str__(self):
        return "LINABUSD"

    def __call__(self):
        return "LINABUSD"


LINABUSD = LINABUSD(*LINABUSD._fields)
"""
    name: LINABUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINAUSDT(Symbol):
    """
        name: LINAUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINAUSDT"

    def __str__(self):
        return "LINAUSDT"

    def __call__(self):
        return "LINAUSDT"


LINAUSDT = LINAUSDT(*LINAUSDT._fields)
"""
    name: LINAUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINKAUD(Symbol):
    """
        name: LINKAUD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKAUD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKAUD"

    def __str__(self):
        return "LINKAUD"

    def __call__(self):
        return "LINKAUD"


LINKAUD = LINKAUD(*LINKAUD._fields)
"""
    name: LINKAUD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKBKRW(Symbol):
    """
        name: LINKBKRW
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKBKRW"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBKRW"

    def __str__(self):
        return "LINKBKRW"

    def __call__(self):
        return "LINKBKRW"


LINKBKRW = LINKBKRW(*LINKBKRW._fields)
"""
    name: LINKBKRW
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKBNB(Symbol):
    """
        name: LINKBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBNB"

    def __str__(self):
        return "LINKBNB"

    def __call__(self):
        return "LINKBNB"


LINKBNB = LINKBNB(*LINKBNB._fields)
"""
    name: LINKBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKBRL(Symbol):
    """
        name: LINKBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBRL"

    def __str__(self):
        return "LINKBRL"

    def __call__(self):
        return "LINKBRL"


LINKBRL = LINKBRL(*LINKBRL._fields)
"""
    name: LINKBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKBTC(Symbol):
    """
        name: LINKBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBTC"

    def __str__(self):
        return "LINKBTC"

    def __call__(self):
        return "LINKBTC"


LINKBTC = LINKBTC(*LINKBTC._fields)
"""
    name: LINKBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINKBUSD(Symbol):
    """
        name: LINKBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBUSD"

    def __str__(self):
        return "LINKBUSD"

    def __call__(self):
        return "LINKBUSD"


LINKBUSD = LINKBUSD(*LINKBUSD._fields)
"""
    name: LINKBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINKDOWNUSDT(Symbol):
    """
        name: LINKDOWNUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKDOWNUSDT"

    def __str__(self):
        return "LINKDOWNUSDT"

    def __call__(self):
        return "LINKDOWNUSDT"


LINKDOWNUSDT = LINKDOWNUSDT(*LINKDOWNUSDT._fields)
"""
    name: LINKDOWNUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKETH(Symbol):
    """
        name: LINKETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINKETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKETH"

    def __str__(self):
        return "LINKETH"

    def __call__(self):
        return "LINKETH"


LINKETH = LINKETH(*LINKETH._fields)
"""
    name: LINKETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINKEUR(Symbol):
    """
        name: LINKEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKEUR"

    def __str__(self):
        return "LINKEUR"

    def __call__(self):
        return "LINKEUR"


LINKEUR = LINKEUR(*LINKEUR._fields)
"""
    name: LINKEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKGBP(Symbol):
    """
        name: LINKGBP
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKGBP"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKGBP"

    def __str__(self):
        return "LINKGBP"

    def __call__(self):
        return "LINKGBP"


LINKGBP = LINKGBP(*LINKGBP._fields)
"""
    name: LINKGBP
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKNGN(Symbol):
    """
        name: LINKNGN
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKNGN"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKNGN"

    def __str__(self):
        return "LINKNGN"

    def __call__(self):
        return "LINKNGN"


LINKNGN = LINKNGN(*LINKNGN._fields)
"""
    name: LINKNGN
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKPAX(Symbol):
    """
        name: LINKPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKPAX"

    def __str__(self):
        return "LINKPAX"

    def __call__(self):
        return "LINKPAX"


LINKPAX = LINKPAX(*LINKPAX._fields)
"""
    name: LINKPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKTRY(Symbol):
    """
        name: LINKTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKTRY"

    def __str__(self):
        return "LINKTRY"

    def __call__(self):
        return "LINKTRY"


LINKTRY = LINKTRY(*LINKTRY._fields)
"""
    name: LINKTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKTUSD(Symbol):
    """
        name: LINKTUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKTUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKTUSD"

    def __str__(self):
        return "LINKTUSD"

    def __call__(self):
        return "LINKTUSD"


LINKTUSD = LINKTUSD(*LINKTUSD._fields)
"""
    name: LINKTUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKUPUSDT(Symbol):
    """
        name: LINKUPUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKUPUSDT"

    def __str__(self):
        return "LINKUPUSDT"

    def __call__(self):
        return "LINKUPUSDT"


LINKUPUSDT = LINKUPUSDT(*LINKUPUSDT._fields)
"""
    name: LINKUPUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKUSDC(Symbol):
    """
        name: LINKUSDC
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKUSDC"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKUSDC"

    def __str__(self):
        return "LINKUSDC"

    def __call__(self):
        return "LINKUSDC"


LINKUSDC = LINKUSDC(*LINKUSDC._fields)
"""
    name: LINKUSDC
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKUSDT(Symbol):
    """
        name: LINKUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKUSDT"

    def __str__(self):
        return "LINKUSDT"

    def __call__(self):
        return "LINKUSDT"


LINKUSDT = LINKUSDT(*LINKUSDT._fields)
"""
    name: LINKUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LITBTC(Symbol):
    """
        name: LITBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LITBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITBTC"

    def __str__(self):
        return "LITBTC"

    def __call__(self):
        return "LITBTC"


LITBTC = LITBTC(*LITBTC._fields)
"""
    name: LITBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LITBUSD(Symbol):
    """
        name: LITBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LITBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITBUSD"

    def __str__(self):
        return "LITBUSD"

    def __call__(self):
        return "LITBUSD"


LITBUSD = LITBUSD(*LITBUSD._fields)
"""
    name: LITBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LITETH(Symbol):
    """
        name: LITETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LITETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITETH"

    def __str__(self):
        return "LITETH"

    def __call__(self):
        return "LITETH"


LITETH = LITETH(*LITETH._fields)
"""
    name: LITETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LITUSDT(Symbol):
    """
        name: LITUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LITUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITUSDT"

    def __str__(self):
        return "LITUSDT"

    def __call__(self):
        return "LITUSDT"


LITUSDT = LITUSDT(*LITUSDT._fields)
"""
    name: LITUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LOKABNB(Symbol):
    """
        name: LOKABNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOKABNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKABNB"

    def __str__(self):
        return "LOKABNB"

    def __call__(self):
        return "LOKABNB"


LOKABNB = LOKABNB(*LOKABNB._fields)
"""
    name: LOKABNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOKABTC(Symbol):
    """
        name: LOKABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOKABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKABTC"

    def __str__(self):
        return "LOKABTC"

    def __call__(self):
        return "LOKABTC"


LOKABTC = LOKABTC(*LOKABTC._fields)
"""
    name: LOKABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOKABUSD(Symbol):
    """
        name: LOKABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOKABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKABUSD"

    def __str__(self):
        return "LOKABUSD"

    def __call__(self):
        return "LOKABUSD"


LOKABUSD = LOKABUSD(*LOKABUSD._fields)
"""
    name: LOKABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOKAUSDT(Symbol):
    """
        name: LOKAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOKAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKAUSDT"

    def __str__(self):
        return "LOKAUSDT"

    def __call__(self):
        return "LOKAUSDT"


LOKAUSDT = LOKAUSDT(*LOKAUSDT._fields)
"""
    name: LOKAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMBNB(Symbol):
    """
        name: LOOMBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMBNB"

    def __str__(self):
        return "LOOMBNB"

    def __call__(self):
        return "LOOMBNB"


LOOMBNB = LOOMBNB(*LOOMBNB._fields)
"""
    name: LOOMBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMBTC(Symbol):
    """
        name: LOOMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMBTC"

    def __str__(self):
        return "LOOMBTC"

    def __call__(self):
        return "LOOMBTC"


LOOMBTC = LOOMBTC(*LOOMBTC._fields)
"""
    name: LOOMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMBUSD(Symbol):
    """
        name: LOOMBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMBUSD"

    def __str__(self):
        return "LOOMBUSD"

    def __call__(self):
        return "LOOMBUSD"


LOOMBUSD = LOOMBUSD(*LOOMBUSD._fields)
"""
    name: LOOMBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMETH(Symbol):
    """
        name: LOOMETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMETH"

    def __str__(self):
        return "LOOMETH"

    def __call__(self):
        return "LOOMETH"


LOOMETH = LOOMETH(*LOOMETH._fields)
"""
    name: LOOMETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMUSDT(Symbol):
    """
        name: LOOMUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMUSDT"

    def __str__(self):
        return "LOOMUSDT"

    def __call__(self):
        return "LOOMUSDT"


LOOMUSDT = LOOMUSDT(*LOOMUSDT._fields)
"""
    name: LOOMUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LPTBNB(Symbol):
    """
        name: LPTBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LPTBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPTBNB"

    def __str__(self):
        return "LPTBNB"

    def __call__(self):
        return "LPTBNB"


LPTBNB = LPTBNB(*LPTBNB._fields)
"""
    name: LPTBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LPTBTC(Symbol):
    """
        name: LPTBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LPTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPTBTC"

    def __str__(self):
        return "LPTBTC"

    def __call__(self):
        return "LPTBTC"


LPTBTC = LPTBTC(*LPTBTC._fields)
"""
    name: LPTBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LPTBUSD(Symbol):
    """
        name: LPTBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LPTBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPTBUSD"

    def __str__(self):
        return "LPTBUSD"

    def __call__(self):
        return "LPTBUSD"


LPTBUSD = LPTBUSD(*LPTBUSD._fields)
"""
    name: LPTBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LPTUSDT(Symbol):
    """
        name: LPTUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LPTUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPTUSDT"

    def __str__(self):
        return "LPTUSDT"

    def __call__(self):
        return "LPTUSDT"


LPTUSDT = LPTUSDT(*LPTUSDT._fields)
"""
    name: LPTUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LQTYBTC(Symbol):
    """
        name: LQTYBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LQTYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LQTYBTC"

    def __str__(self):
        return "LQTYBTC"

    def __call__(self):
        return "LQTYBTC"


LQTYBTC = LQTYBTC(*LQTYBTC._fields)
"""
    name: LQTYBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LQTYUSDT(Symbol):
    """
        name: LQTYUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LQTYUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LQTYUSDT"

    def __str__(self):
        return "LQTYUSDT"

    def __call__(self):
        return "LQTYUSDT"


LQTYUSDT = LQTYUSDT(*LQTYUSDT._fields)
"""
    name: LQTYUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LRCBNB(Symbol):
    """
        name: LRCBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LRCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCBNB"

    def __str__(self):
        return "LRCBNB"

    def __call__(self):
        return "LRCBNB"


LRCBNB = LRCBNB(*LRCBNB._fields)
"""
    name: LRCBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LRCBTC(Symbol):
    """
        name: LRCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LRCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCBTC"

    def __str__(self):
        return "LRCBTC"

    def __call__(self):
        return "LRCBTC"


LRCBTC = LRCBTC(*LRCBTC._fields)
"""
    name: LRCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LRCBUSD(Symbol):
    """
        name: LRCBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LRCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCBUSD"

    def __str__(self):
        return "LRCBUSD"

    def __call__(self):
        return "LRCBUSD"


LRCBUSD = LRCBUSD(*LRCBUSD._fields)
"""
    name: LRCBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LRCETH(Symbol):
    """
        name: LRCETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LRCETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCETH"

    def __str__(self):
        return "LRCETH"

    def __call__(self):
        return "LRCETH"


LRCETH = LRCETH(*LRCETH._fields)
"""
    name: LRCETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LRCTRY(Symbol):
    """
        name: LRCTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LRCTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCTRY"

    def __str__(self):
        return "LRCTRY"

    def __call__(self):
        return "LRCTRY"


LRCTRY = LRCTRY(*LRCTRY._fields)
"""
    name: LRCTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class LRCUSDT(Symbol):
    """
        name: LRCUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LRCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCUSDT"

    def __str__(self):
        return "LRCUSDT"

    def __call__(self):
        return "LRCUSDT"


LRCUSDT = LRCUSDT(*LRCUSDT._fields)
"""
    name: LRCUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LSKBNB(Symbol):
    """
        name: LSKBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKBNB"

    def __str__(self):
        return "LSKBNB"

    def __call__(self):
        return "LSKBNB"


LSKBNB = LSKBNB(*LSKBNB._fields)
"""
    name: LSKBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LSKBTC(Symbol):
    """
        name: LSKBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKBTC"

    def __str__(self):
        return "LSKBTC"

    def __call__(self):
        return "LSKBTC"


LSKBTC = LSKBTC(*LSKBTC._fields)
"""
    name: LSKBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LSKBUSD(Symbol):
    """
        name: LSKBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKBUSD"

    def __str__(self):
        return "LSKBUSD"

    def __call__(self):
        return "LSKBUSD"


LSKBUSD = LSKBUSD(*LSKBUSD._fields)
"""
    name: LSKBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LSKETH(Symbol):
    """
        name: LSKETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKETH"

    def __str__(self):
        return "LSKETH"

    def __call__(self):
        return "LSKETH"


LSKETH = LSKETH(*LSKETH._fields)
"""
    name: LSKETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LSKUSDT(Symbol):
    """
        name: LSKUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKUSDT"

    def __str__(self):
        return "LSKUSDT"

    def __call__(self):
        return "LSKUSDT"


LSKUSDT = LSKUSDT(*LSKUSDT._fields)
"""
    name: LSKUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCBNB(Symbol):
    """
        name: LTCBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCBNB"

    def __str__(self):
        return "LTCBNB"

    def __call__(self):
        return "LTCBNB"


LTCBNB = LTCBNB(*LTCBNB._fields)
"""
    name: LTCBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCBRL(Symbol):
    """
        name: LTCBRL
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCBRL"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCBRL"

    def __str__(self):
        return "LTCBRL"

    def __call__(self):
        return "LTCBRL"


LTCBRL = LTCBRL(*LTCBRL._fields)
"""
    name: LTCBRL
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCBTC(Symbol):
    """
        name: LTCBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCBTC"

    def __str__(self):
        return "LTCBTC"

    def __call__(self):
        return "LTCBTC"


LTCBTC = LTCBTC(*LTCBTC._fields)
"""
    name: LTCBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTCBUSD(Symbol):
    """
        name: LTCBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTCBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCBUSD"

    def __str__(self):
        return "LTCBUSD"

    def __call__(self):
        return "LTCBUSD"


LTCBUSD = LTCBUSD(*LTCBUSD._fields)
"""
    name: LTCBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTCDOWNUSDT(Symbol):
    """
        name: LTCDOWNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCDOWNUSDT"

    def __str__(self):
        return "LTCDOWNUSDT"

    def __call__(self):
        return "LTCDOWNUSDT"


LTCDOWNUSDT = LTCDOWNUSDT(*LTCDOWNUSDT._fields)
"""
    name: LTCDOWNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCETH(Symbol):
    """
        name: LTCETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTCETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCETH"

    def __str__(self):
        return "LTCETH"

    def __call__(self):
        return "LTCETH"


LTCETH = LTCETH(*LTCETH._fields)
"""
    name: LTCETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTCEUR(Symbol):
    """
        name: LTCEUR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCEUR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCEUR"

    def __str__(self):
        return "LTCEUR"

    def __call__(self):
        return "LTCEUR"


LTCEUR = LTCEUR(*LTCEUR._fields)
"""
    name: LTCEUR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCGBP(Symbol):
    """
        name: LTCGBP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCGBP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCGBP"

    def __str__(self):
        return "LTCGBP"

    def __call__(self):
        return "LTCGBP"


LTCGBP = LTCGBP(*LTCGBP._fields)
"""
    name: LTCGBP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCNGN(Symbol):
    """
        name: LTCNGN
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCNGN"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCNGN"

    def __str__(self):
        return "LTCNGN"

    def __call__(self):
        return "LTCNGN"


LTCNGN = LTCNGN(*LTCNGN._fields)
"""
    name: LTCNGN
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCPAX(Symbol):
    """
        name: LTCPAX
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCPAX"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCPAX"

    def __str__(self):
        return "LTCPAX"

    def __call__(self):
        return "LTCPAX"


LTCPAX = LTCPAX(*LTCPAX._fields)
"""
    name: LTCPAX
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCRUB(Symbol):
    """
        name: LTCRUB
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCRUB"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCRUB"

    def __str__(self):
        return "LTCRUB"

    def __call__(self):
        return "LTCRUB"


LTCRUB = LTCRUB(*LTCRUB._fields)
"""
    name: LTCRUB
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCTUSD(Symbol):
    """
        name: LTCTUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCTUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCTUSD"

    def __str__(self):
        return "LTCTUSD"

    def __call__(self):
        return "LTCTUSD"


LTCTUSD = LTCTUSD(*LTCTUSD._fields)
"""
    name: LTCTUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCUAH(Symbol):
    """
        name: LTCUAH
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCUAH"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCUAH"

    def __str__(self):
        return "LTCUAH"

    def __call__(self):
        return "LTCUAH"


LTCUAH = LTCUAH(*LTCUAH._fields)
"""
    name: LTCUAH
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCUPUSDT(Symbol):
    """
        name: LTCUPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCUPUSDT"

    def __str__(self):
        return "LTCUPUSDT"

    def __call__(self):
        return "LTCUPUSDT"


LTCUPUSDT = LTCUPUSDT(*LTCUPUSDT._fields)
"""
    name: LTCUPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCUSDC(Symbol):
    """
        name: LTCUSDC
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCUSDC"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCUSDC"

    def __str__(self):
        return "LTCUSDC"

    def __call__(self):
        return "LTCUSDC"


LTCUSDC = LTCUSDC(*LTCUSDC._fields)
"""
    name: LTCUSDC
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCUSDT(Symbol):
    """
        name: LTCUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTCUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCUSDT"

    def __str__(self):
        return "LTCUSDT"

    def __call__(self):
        return "LTCUSDT"


LTCUSDT = LTCUSDT(*LTCUSDT._fields)
"""
    name: LTCUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTOBNB(Symbol):
    """
        name: LTOBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTOBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTOBNB"

    def __str__(self):
        return "LTOBNB"

    def __call__(self):
        return "LTOBNB"


LTOBNB = LTOBNB(*LTOBNB._fields)
"""
    name: LTOBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTOBTC(Symbol):
    """
        name: LTOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTOBTC"

    def __str__(self):
        return "LTOBTC"

    def __call__(self):
        return "LTOBTC"


LTOBTC = LTOBTC(*LTOBTC._fields)
"""
    name: LTOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTOBUSD(Symbol):
    """
        name: LTOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTOBUSD"

    def __str__(self):
        return "LTOBUSD"

    def __call__(self):
        return "LTOBUSD"


LTOBUSD = LTOBUSD(*LTOBUSD._fields)
"""
    name: LTOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTOUSDT(Symbol):
    """
        name: LTOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTOUSDT"

    def __str__(self):
        return "LTOUSDT"

    def __call__(self):
        return "LTOUSDT"


LTOUSDT = LTOUSDT(*LTOUSDT._fields)
"""
    name: LTOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNAAUD(Symbol):
    """
        name: LUNAAUD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAAUD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAAUD"

    def __str__(self):
        return "LUNAAUD"

    def __call__(self):
        return "LUNAAUD"


LUNAAUD = LUNAAUD(*LUNAAUD._fields)
"""
    name: LUNAAUD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNABIDR(Symbol):
    """
        name: LUNABIDR
        significant_digits: None
        tick_size: 0.01
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "LUNABIDR"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABIDR"

    def __str__(self):
        return "LUNABIDR"

    def __call__(self):
        return "LUNABIDR"


LUNABIDR = LUNABIDR(*LUNABIDR._fields)
"""
    name: LUNABIDR
    significant_digits: None
    tick_size: 0.01
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class LUNABNB(Symbol):
    """
        name: LUNABNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNABNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABNB"

    def __str__(self):
        return "LUNABNB"

    def __call__(self):
        return "LUNABNB"


LUNABNB = LUNABNB(*LUNABNB._fields)
"""
    name: LUNABNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNABRL(Symbol):
    """
        name: LUNABRL
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNABRL"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABRL"

    def __str__(self):
        return "LUNABRL"

    def __call__(self):
        return "LUNABRL"


LUNABRL = LUNABRL(*LUNABRL._fields)
"""
    name: LUNABRL
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNABTC(Symbol):
    """
        name: LUNABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABTC"

    def __str__(self):
        return "LUNABTC"

    def __call__(self):
        return "LUNABTC"


LUNABTC = LUNABTC(*LUNABTC._fields)
"""
    name: LUNABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNABUSD(Symbol):
    """
        name: LUNABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABUSD"

    def __str__(self):
        return "LUNABUSD"

    def __call__(self):
        return "LUNABUSD"


LUNABUSD = LUNABUSD(*LUNABUSD._fields)
"""
    name: LUNABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNAETH(Symbol):
    """
        name: LUNAETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAETH"

    def __str__(self):
        return "LUNAETH"

    def __call__(self):
        return "LUNAETH"


LUNAETH = LUNAETH(*LUNAETH._fields)
"""
    name: LUNAETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNAEUR(Symbol):
    """
        name: LUNAEUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAEUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAEUR"

    def __str__(self):
        return "LUNAEUR"

    def __call__(self):
        return "LUNAEUR"


LUNAEUR = LUNAEUR(*LUNAEUR._fields)
"""
    name: LUNAEUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNAGBP(Symbol):
    """
        name: LUNAGBP
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAGBP"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAGBP"

    def __str__(self):
        return "LUNAGBP"

    def __call__(self):
        return "LUNAGBP"


LUNAGBP = LUNAGBP(*LUNAGBP._fields)
"""
    name: LUNAGBP
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNATRY(Symbol):
    """
        name: LUNATRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNATRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNATRY"

    def __str__(self):
        return "LUNATRY"

    def __call__(self):
        return "LUNATRY"


LUNATRY = LUNATRY(*LUNATRY._fields)
"""
    name: LUNATRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNAUSDT(Symbol):
    """
        name: LUNAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAUSDT"

    def __str__(self):
        return "LUNAUSDT"

    def __call__(self):
        return "LUNAUSDT"


LUNAUSDT = LUNAUSDT(*LUNAUSDT._fields)
"""
    name: LUNAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNAUST(Symbol):
    """
        name: LUNAUST
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAUST"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAUST"

    def __str__(self):
        return "LUNAUST"

    def __call__(self):
        return "LUNAUST"


LUNAUST = LUNAUST(*LUNAUST._fields)
"""
    name: LUNAUST
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNBTC(Symbol):
    """
        name: LUNBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNBTC"

    def __str__(self):
        return "LUNBTC"

    def __call__(self):
        return "LUNBTC"


LUNBTC = LUNBTC(*LUNBTC._fields)
"""
    name: LUNBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNCBUSD(Symbol):
    """
        name: LUNCBUSD
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNCBUSD"

    def __str__(self):
        return "LUNCBUSD"

    def __call__(self):
        return "LUNCBUSD"


LUNCBUSD = LUNCBUSD(*LUNCBUSD._fields)
"""
    name: LUNCBUSD
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNCUSDT(Symbol):
    """
        name: LUNCUSDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNCUSDT"

    def __str__(self):
        return "LUNCUSDT"

    def __call__(self):
        return "LUNCUSDT"


LUNCUSDT = LUNCUSDT(*LUNCUSDT._fields)
"""
    name: LUNCUSDT
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNETH(Symbol):
    """
        name: LUNETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNETH"

    def __str__(self):
        return "LUNETH"

    def __call__(self):
        return "LUNETH"


LUNETH = LUNETH(*LUNETH._fields)
"""
    name: LUNETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MAGICBTC(Symbol):
    """
        name: MAGICBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MAGICBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGICBTC"

    def __str__(self):
        return "MAGICBTC"

    def __call__(self):
        return "MAGICBTC"


MAGICBTC = MAGICBTC(*MAGICBTC._fields)
"""
    name: MAGICBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MAGICBUSD(Symbol):
    """
        name: MAGICBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MAGICBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGICBUSD"

    def __str__(self):
        return "MAGICBUSD"

    def __call__(self):
        return "MAGICBUSD"


MAGICBUSD = MAGICBUSD(*MAGICBUSD._fields)
"""
    name: MAGICBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MAGICTRY(Symbol):
    """
        name: MAGICTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MAGICTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGICTRY"

    def __str__(self):
        return "MAGICTRY"

    def __call__(self):
        return "MAGICTRY"


MAGICTRY = MAGICTRY(*MAGICTRY._fields)
"""
    name: MAGICTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class MAGICUSDT(Symbol):
    """
        name: MAGICUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MAGICUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGICUSDT"

    def __str__(self):
        return "MAGICUSDT"

    def __call__(self):
        return "MAGICUSDT"


MAGICUSDT = MAGICUSDT(*MAGICUSDT._fields)
"""
    name: MAGICUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MANABIDR(Symbol):
    """
        name: MANABIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "MANABIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABIDR"

    def __str__(self):
        return "MANABIDR"

    def __call__(self):
        return "MANABIDR"


MANABIDR = MANABIDR(*MANABIDR._fields)
"""
    name: MANABIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class MANABNB(Symbol):
    """
        name: MANABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MANABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABNB"

    def __str__(self):
        return "MANABNB"

    def __call__(self):
        return "MANABNB"


MANABNB = MANABNB(*MANABNB._fields)
"""
    name: MANABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MANABRL(Symbol):
    """
        name: MANABRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MANABRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABRL"

    def __str__(self):
        return "MANABRL"

    def __call__(self):
        return "MANABRL"


MANABRL = MANABRL(*MANABRL._fields)
"""
    name: MANABRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MANABTC(Symbol):
    """
        name: MANABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MANABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABTC"

    def __str__(self):
        return "MANABTC"

    def __call__(self):
        return "MANABTC"


MANABTC = MANABTC(*MANABTC._fields)
"""
    name: MANABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MANABUSD(Symbol):
    """
        name: MANABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MANABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABUSD"

    def __str__(self):
        return "MANABUSD"

    def __call__(self):
        return "MANABUSD"


MANABUSD = MANABUSD(*MANABUSD._fields)
"""
    name: MANABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MANAETH(Symbol):
    """
        name: MANAETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MANAETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANAETH"

    def __str__(self):
        return "MANAETH"

    def __call__(self):
        return "MANAETH"


MANAETH = MANAETH(*MANAETH._fields)
"""
    name: MANAETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MANATRY(Symbol):
    """
        name: MANATRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MANATRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANATRY"

    def __str__(self):
        return "MANATRY"

    def __call__(self):
        return "MANATRY"


MANATRY = MANATRY(*MANATRY._fields)
"""
    name: MANATRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class MANAUSDT(Symbol):
    """
        name: MANAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MANAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANAUSDT"

    def __str__(self):
        return "MANAUSDT"

    def __call__(self):
        return "MANAUSDT"


MANAUSDT = MANAUSDT(*MANAUSDT._fields)
"""
    name: MANAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MASKBNB(Symbol):
    """
        name: MASKBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MASKBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASKBNB"

    def __str__(self):
        return "MASKBNB"

    def __call__(self):
        return "MASKBNB"


MASKBNB = MASKBNB(*MASKBNB._fields)
"""
    name: MASKBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MASKBUSD(Symbol):
    """
        name: MASKBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MASKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASKBUSD"

    def __str__(self):
        return "MASKBUSD"

    def __call__(self):
        return "MASKBUSD"


MASKBUSD = MASKBUSD(*MASKBUSD._fields)
"""
    name: MASKBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MASKUSDT(Symbol):
    """
        name: MASKUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MASKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASKUSDT"

    def __str__(self):
        return "MASKUSDT"

    def __call__(self):
        return "MASKUSDT"


MASKUSDT = MASKUSDT(*MASKUSDT._fields)
"""
    name: MASKUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MATICAUD(Symbol):
    """
        name: MATICAUD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICAUD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICAUD"

    def __str__(self):
        return "MATICAUD"

    def __call__(self):
        return "MATICAUD"


MATICAUD = MATICAUD(*MATICAUD._fields)
"""
    name: MATICAUD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICBIDR(Symbol):
    """
        name: MATICBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "MATICBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBIDR"

    def __str__(self):
        return "MATICBIDR"

    def __call__(self):
        return "MATICBIDR"


MATICBIDR = MATICBIDR(*MATICBIDR._fields)
"""
    name: MATICBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class MATICBNB(Symbol):
    """
        name: MATICBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBNB"

    def __str__(self):
        return "MATICBNB"

    def __call__(self):
        return "MATICBNB"


MATICBNB = MATICBNB(*MATICBNB._fields)
"""
    name: MATICBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICBRL(Symbol):
    """
        name: MATICBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBRL"

    def __str__(self):
        return "MATICBRL"

    def __call__(self):
        return "MATICBRL"


MATICBRL = MATICBRL(*MATICBRL._fields)
"""
    name: MATICBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICBTC(Symbol):
    """
        name: MATICBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MATICBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBTC"

    def __str__(self):
        return "MATICBTC"

    def __call__(self):
        return "MATICBTC"


MATICBTC = MATICBTC(*MATICBTC._fields)
"""
    name: MATICBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MATICBUSD(Symbol):
    """
        name: MATICBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MATICBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBUSD"

    def __str__(self):
        return "MATICBUSD"

    def __call__(self):
        return "MATICBUSD"


MATICBUSD = MATICBUSD(*MATICBUSD._fields)
"""
    name: MATICBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MATICETH(Symbol):
    """
        name: MATICETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICETH"

    def __str__(self):
        return "MATICETH"

    def __call__(self):
        return "MATICETH"


MATICETH = MATICETH(*MATICETH._fields)
"""
    name: MATICETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICEUR(Symbol):
    """
        name: MATICEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICEUR"

    def __str__(self):
        return "MATICEUR"

    def __call__(self):
        return "MATICEUR"


MATICEUR = MATICEUR(*MATICEUR._fields)
"""
    name: MATICEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICGBP(Symbol):
    """
        name: MATICGBP
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICGBP"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICGBP"

    def __str__(self):
        return "MATICGBP"

    def __call__(self):
        return "MATICGBP"


MATICGBP = MATICGBP(*MATICGBP._fields)
"""
    name: MATICGBP
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICRUB(Symbol):
    """
        name: MATICRUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICRUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICRUB"

    def __str__(self):
        return "MATICRUB"

    def __call__(self):
        return "MATICRUB"


MATICRUB = MATICRUB(*MATICRUB._fields)
"""
    name: MATICRUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICTRY(Symbol):
    """
        name: MATICTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICTRY"

    def __str__(self):
        return "MATICTRY"

    def __call__(self):
        return "MATICTRY"


MATICTRY = MATICTRY(*MATICTRY._fields)
"""
    name: MATICTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICTUSD(Symbol):
    """
        name: MATICTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICTUSD"

    def __str__(self):
        return "MATICTUSD"

    def __call__(self):
        return "MATICTUSD"


MATICTUSD = MATICTUSD(*MATICTUSD._fields)
"""
    name: MATICTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICUSDT(Symbol):
    """
        name: MATICUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MATICUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICUSDT"

    def __str__(self):
        return "MATICUSDT"

    def __call__(self):
        return "MATICUSDT"


MATICUSDT = MATICUSDT(*MATICUSDT._fields)
"""
    name: MATICUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MBLBNB(Symbol):
    """
        name: MBLBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBLBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBLBNB"

    def __str__(self):
        return "MBLBNB"

    def __call__(self):
        return "MBLBNB"


MBLBNB = MBLBNB(*MBLBNB._fields)
"""
    name: MBLBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBLBTC(Symbol):
    """
        name: MBLBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBLBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBLBTC"

    def __str__(self):
        return "MBLBTC"

    def __call__(self):
        return "MBLBTC"


MBLBTC = MBLBTC(*MBLBTC._fields)
"""
    name: MBLBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBLBUSD(Symbol):
    """
        name: MBLBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MBLBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBLBUSD"

    def __str__(self):
        return "MBLBUSD"

    def __call__(self):
        return "MBLBUSD"


MBLBUSD = MBLBUSD(*MBLBUSD._fields)
"""
    name: MBLBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MBLUSDT(Symbol):
    """
        name: MBLUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MBLUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBLUSDT"

    def __str__(self):
        return "MBLUSDT"

    def __call__(self):
        return "MBLUSDT"


MBLUSDT = MBLUSDT(*MBLUSDT._fields)
"""
    name: MBLUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MBOXBNB(Symbol):
    """
        name: MBOXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXBNB"

    def __str__(self):
        return "MBOXBNB"

    def __call__(self):
        return "MBOXBNB"


MBOXBNB = MBOXBNB(*MBOXBNB._fields)
"""
    name: MBOXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBOXBTC(Symbol):
    """
        name: MBOXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXBTC"

    def __str__(self):
        return "MBOXBTC"

    def __call__(self):
        return "MBOXBTC"


MBOXBTC = MBOXBTC(*MBOXBTC._fields)
"""
    name: MBOXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBOXBUSD(Symbol):
    """
        name: MBOXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXBUSD"

    def __str__(self):
        return "MBOXBUSD"

    def __call__(self):
        return "MBOXBUSD"


MBOXBUSD = MBOXBUSD(*MBOXBUSD._fields)
"""
    name: MBOXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBOXTRY(Symbol):
    """
        name: MBOXTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXTRY"

    def __str__(self):
        return "MBOXTRY"

    def __call__(self):
        return "MBOXTRY"


MBOXTRY = MBOXTRY(*MBOXTRY._fields)
"""
    name: MBOXTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class MBOXUSDT(Symbol):
    """
        name: MBOXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXUSDT"

    def __str__(self):
        return "MBOXUSDT"

    def __call__(self):
        return "MBOXUSDT"


MBOXUSDT = MBOXUSDT(*MBOXUSDT._fields)
"""
    name: MBOXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCBNB(Symbol):
    """
        name: MCBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCBNB"

    def __str__(self):
        return "MCBNB"

    def __call__(self):
        return "MCBNB"


MCBNB = MCBNB(*MCBNB._fields)
"""
    name: MCBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCBTC(Symbol):
    """
        name: MCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCBTC"

    def __str__(self):
        return "MCBTC"

    def __call__(self):
        return "MCBTC"


MCBTC = MCBTC(*MCBTC._fields)
"""
    name: MCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCBUSD(Symbol):
    """
        name: MCBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCBUSD"

    def __str__(self):
        return "MCBUSD"

    def __call__(self):
        return "MCBUSD"


MCBUSD = MCBUSD(*MCBUSD._fields)
"""
    name: MCBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCOBNB(Symbol):
    """
        name: MCOBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCOBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCOBNB"

    def __str__(self):
        return "MCOBNB"

    def __call__(self):
        return "MCOBNB"


MCOBNB = MCOBNB(*MCOBNB._fields)
"""
    name: MCOBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCOBTC(Symbol):
    """
        name: MCOBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCOBTC"

    def __str__(self):
        return "MCOBTC"

    def __call__(self):
        return "MCOBTC"


MCOBTC = MCOBTC(*MCOBTC._fields)
"""
    name: MCOBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCOETH(Symbol):
    """
        name: MCOETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCOETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCOETH"

    def __str__(self):
        return "MCOETH"

    def __call__(self):
        return "MCOETH"


MCOETH = MCOETH(*MCOETH._fields)
"""
    name: MCOETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCOUSDT(Symbol):
    """
        name: MCOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCOUSDT"

    def __str__(self):
        return "MCOUSDT"

    def __call__(self):
        return "MCOUSDT"


MCOUSDT = MCOUSDT(*MCOUSDT._fields)
"""
    name: MCOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCUSDT(Symbol):
    """
        name: MCUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCUSDT"

    def __str__(self):
        return "MCUSDT"

    def __call__(self):
        return "MCUSDT"


MCUSDT = MCUSDT(*MCUSDT._fields)
"""
    name: MCUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MDABTC(Symbol):
    """
        name: MDABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDABTC"

    def __str__(self):
        return "MDABTC"

    def __call__(self):
        return "MDABTC"


MDABTC = MDABTC(*MDABTC._fields)
"""
    name: MDABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDAETH(Symbol):
    """
        name: MDAETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDAETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDAETH"

    def __str__(self):
        return "MDAETH"

    def __call__(self):
        return "MDAETH"


MDAETH = MDAETH(*MDAETH._fields)
"""
    name: MDAETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDTBNB(Symbol):
    """
        name: MDTBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDTBNB"

    def __str__(self):
        return "MDTBNB"

    def __call__(self):
        return "MDTBNB"


MDTBNB = MDTBNB(*MDTBNB._fields)
"""
    name: MDTBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDTBTC(Symbol):
    """
        name: MDTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDTBTC"

    def __str__(self):
        return "MDTBTC"

    def __call__(self):
        return "MDTBTC"


MDTBTC = MDTBTC(*MDTBTC._fields)
"""
    name: MDTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDTBUSD(Symbol):
    """
        name: MDTBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDTBUSD"

    def __str__(self):
        return "MDTBUSD"

    def __call__(self):
        return "MDTBUSD"


MDTBUSD = MDTBUSD(*MDTBUSD._fields)
"""
    name: MDTBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDTUSDT(Symbol):
    """
        name: MDTUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MDTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDTUSDT"

    def __str__(self):
        return "MDTUSDT"

    def __call__(self):
        return "MDTUSDT"


MDTUSDT = MDTUSDT(*MDTUSDT._fields)
"""
    name: MDTUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MDXBNB(Symbol):
    """
        name: MDXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDXBNB"

    def __str__(self):
        return "MDXBNB"

    def __call__(self):
        return "MDXBNB"


MDXBNB = MDXBNB(*MDXBNB._fields)
"""
    name: MDXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDXBTC(Symbol):
    """
        name: MDXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MDXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDXBTC"

    def __str__(self):
        return "MDXBTC"

    def __call__(self):
        return "MDXBTC"


MDXBTC = MDXBTC(*MDXBTC._fields)
"""
    name: MDXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MDXBUSD(Symbol):
    """
        name: MDXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MDXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDXBUSD"

    def __str__(self):
        return "MDXBUSD"

    def __call__(self):
        return "MDXBUSD"


MDXBUSD = MDXBUSD(*MDXBUSD._fields)
"""
    name: MDXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MDXUSDT(Symbol):
    """
        name: MDXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MDXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDXUSDT"

    def __str__(self):
        return "MDXUSDT"

    def __call__(self):
        return "MDXUSDT"


MDXUSDT = MDXUSDT(*MDXUSDT._fields)
"""
    name: MDXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MFTBNB(Symbol):
    """
        name: MFTBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MFTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFTBNB"

    def __str__(self):
        return "MFTBNB"

    def __call__(self):
        return "MFTBNB"


MFTBNB = MFTBNB(*MFTBNB._fields)
"""
    name: MFTBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MFTBTC(Symbol):
    """
        name: MFTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MFTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFTBTC"

    def __str__(self):
        return "MFTBTC"

    def __call__(self):
        return "MFTBTC"


MFTBTC = MFTBTC(*MFTBTC._fields)
"""
    name: MFTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MFTETH(Symbol):
    """
        name: MFTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MFTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFTETH"

    def __str__(self):
        return "MFTETH"

    def __call__(self):
        return "MFTETH"


MFTETH = MFTETH(*MFTETH._fields)
"""
    name: MFTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MFTUSDT(Symbol):
    """
        name: MFTUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MFTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFTUSDT"

    def __str__(self):
        return "MFTUSDT"

    def __call__(self):
        return "MFTUSDT"


MFTUSDT = MFTUSDT(*MFTUSDT._fields)
"""
    name: MFTUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MINABNB(Symbol):
    """
        name: MINABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MINABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINABNB"

    def __str__(self):
        return "MINABNB"

    def __call__(self):
        return "MINABNB"


MINABNB = MINABNB(*MINABNB._fields)
"""
    name: MINABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MINABTC(Symbol):
    """
        name: MINABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MINABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINABTC"

    def __str__(self):
        return "MINABTC"

    def __call__(self):
        return "MINABTC"


MINABTC = MINABTC(*MINABTC._fields)
"""
    name: MINABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MINABUSD(Symbol):
    """
        name: MINABUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MINABUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINABUSD"

    def __str__(self):
        return "MINABUSD"

    def __call__(self):
        return "MINABUSD"


MINABUSD = MINABUSD(*MINABUSD._fields)
"""
    name: MINABUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MINATRY(Symbol):
    """
        name: MINATRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MINATRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINATRY"

    def __str__(self):
        return "MINATRY"

    def __call__(self):
        return "MINATRY"


MINATRY = MINATRY(*MINATRY._fields)
"""
    name: MINATRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class MINAUSDT(Symbol):
    """
        name: MINAUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MINAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINAUSDT"

    def __str__(self):
        return "MINAUSDT"

    def __call__(self):
        return "MINAUSDT"


MINAUSDT = MINAUSDT(*MINAUSDT._fields)
"""
    name: MINAUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MIRBTC(Symbol):
    """
        name: MIRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MIRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIRBTC"

    def __str__(self):
        return "MIRBTC"

    def __call__(self):
        return "MIRBTC"


MIRBTC = MIRBTC(*MIRBTC._fields)
"""
    name: MIRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MIRBUSD(Symbol):
    """
        name: MIRBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MIRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIRBUSD"

    def __str__(self):
        return "MIRBUSD"

    def __call__(self):
        return "MIRBUSD"


MIRBUSD = MIRBUSD(*MIRBUSD._fields)
"""
    name: MIRBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MIRUSDT(Symbol):
    """
        name: MIRUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MIRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIRUSDT"

    def __str__(self):
        return "MIRUSDT"

    def __call__(self):
        return "MIRUSDT"


MIRUSDT = MIRUSDT(*MIRUSDT._fields)
"""
    name: MIRUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MITHBNB(Symbol):
    """
        name: MITHBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MITHBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITHBNB"

    def __str__(self):
        return "MITHBNB"

    def __call__(self):
        return "MITHBNB"


MITHBNB = MITHBNB(*MITHBNB._fields)
"""
    name: MITHBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MITHBTC(Symbol):
    """
        name: MITHBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MITHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITHBTC"

    def __str__(self):
        return "MITHBTC"

    def __call__(self):
        return "MITHBTC"


MITHBTC = MITHBTC(*MITHBTC._fields)
"""
    name: MITHBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MITHUSDT(Symbol):
    """
        name: MITHUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MITHUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITHUSDT"

    def __str__(self):
        return "MITHUSDT"

    def __call__(self):
        return "MITHUSDT"


MITHUSDT = MITHUSDT(*MITHUSDT._fields)
"""
    name: MITHUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MKRBNB(Symbol):
    """
        name: MKRBNB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MKRBNB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKRBNB"

    def __str__(self):
        return "MKRBNB"

    def __call__(self):
        return "MKRBNB"


MKRBNB = MKRBNB(*MKRBNB._fields)
"""
    name: MKRBNB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MKRBTC(Symbol):
    """
        name: MKRBTC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MKRBTC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKRBTC"

    def __str__(self):
        return "MKRBTC"

    def __call__(self):
        return "MKRBTC"


MKRBTC = MKRBTC(*MKRBTC._fields)
"""
    name: MKRBTC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MKRBUSD(Symbol):
    """
        name: MKRBUSD
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MKRBUSD"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKRBUSD"

    def __str__(self):
        return "MKRBUSD"

    def __call__(self):
        return "MKRBUSD"


MKRBUSD = MKRBUSD(*MKRBUSD._fields)
"""
    name: MKRBUSD
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MKRUSDT(Symbol):
    """
        name: MKRUSDT
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MKRUSDT"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKRUSDT"

    def __str__(self):
        return "MKRUSDT"

    def __call__(self):
        return "MKRUSDT"


MKRUSDT = MKRUSDT(*MKRUSDT._fields)
"""
    name: MKRUSDT
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MLNBNB(Symbol):
    """
        name: MLNBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MLNBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLNBNB"

    def __str__(self):
        return "MLNBNB"

    def __call__(self):
        return "MLNBNB"


MLNBNB = MLNBNB(*MLNBNB._fields)
"""
    name: MLNBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MLNBTC(Symbol):
    """
        name: MLNBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MLNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLNBTC"

    def __str__(self):
        return "MLNBTC"

    def __call__(self):
        return "MLNBTC"


MLNBTC = MLNBTC(*MLNBTC._fields)
"""
    name: MLNBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MLNBUSD(Symbol):
    """
        name: MLNBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MLNBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLNBUSD"

    def __str__(self):
        return "MLNBUSD"

    def __call__(self):
        return "MLNBUSD"


MLNBUSD = MLNBUSD(*MLNBUSD._fields)
"""
    name: MLNBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MLNUSDT(Symbol):
    """
        name: MLNUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MLNUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLNUSDT"

    def __str__(self):
        return "MLNUSDT"

    def __call__(self):
        return "MLNUSDT"


MLNUSDT = MLNUSDT(*MLNUSDT._fields)
"""
    name: MLNUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOBBTC(Symbol):
    """
        name: MOBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOBBTC"

    def __str__(self):
        return "MOBBTC"

    def __call__(self):
        return "MOBBTC"


MOBBTC = MOBBTC(*MOBBTC._fields)
"""
    name: MOBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOBBUSD(Symbol):
    """
        name: MOBBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOBBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOBBUSD"

    def __str__(self):
        return "MOBBUSD"

    def __call__(self):
        return "MOBBUSD"


MOBBUSD = MOBBUSD(*MOBBUSD._fields)
"""
    name: MOBBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOBUSDT(Symbol):
    """
        name: MOBUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOBUSDT"

    def __str__(self):
        return "MOBUSDT"

    def __call__(self):
        return "MOBUSDT"


MOBUSDT = MOBUSDT(*MOBUSDT._fields)
"""
    name: MOBUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MODBTC(Symbol):
    """
        name: MODBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MODBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MODBTC"

    def __str__(self):
        return "MODBTC"

    def __call__(self):
        return "MODBTC"


MODBTC = MODBTC(*MODBTC._fields)
"""
    name: MODBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MODETH(Symbol):
    """
        name: MODETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MODETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MODETH"

    def __str__(self):
        return "MODETH"

    def __call__(self):
        return "MODETH"


MODETH = MODETH(*MODETH._fields)
"""
    name: MODETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOVRBNB(Symbol):
    """
        name: MOVRBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOVRBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVRBNB"

    def __str__(self):
        return "MOVRBNB"

    def __call__(self):
        return "MOVRBNB"


MOVRBNB = MOVRBNB(*MOVRBNB._fields)
"""
    name: MOVRBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOVRBTC(Symbol):
    """
        name: MOVRBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOVRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVRBTC"

    def __str__(self):
        return "MOVRBTC"

    def __call__(self):
        return "MOVRBTC"


MOVRBTC = MOVRBTC(*MOVRBTC._fields)
"""
    name: MOVRBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOVRBUSD(Symbol):
    """
        name: MOVRBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOVRBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVRBUSD"

    def __str__(self):
        return "MOVRBUSD"

    def __call__(self):
        return "MOVRBUSD"


MOVRBUSD = MOVRBUSD(*MOVRBUSD._fields)
"""
    name: MOVRBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOVRUSDT(Symbol):
    """
        name: MOVRUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOVRUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVRUSDT"

    def __str__(self):
        return "MOVRUSDT"

    def __call__(self):
        return "MOVRUSDT"


MOVRUSDT = MOVRUSDT(*MOVRUSDT._fields)
"""
    name: MOVRUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MTHBTC(Symbol):
    """
        name: MTHBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MTHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTHBTC"

    def __str__(self):
        return "MTHBTC"

    def __call__(self):
        return "MTHBTC"


MTHBTC = MTHBTC(*MTHBTC._fields)
"""
    name: MTHBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MTHETH(Symbol):
    """
        name: MTHETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MTHETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTHETH"

    def __str__(self):
        return "MTHETH"

    def __call__(self):
        return "MTHETH"


MTHETH = MTHETH(*MTHETH._fields)
"""
    name: MTHETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MTLBTC(Symbol):
    """
        name: MTLBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MTLBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTLBTC"

    def __str__(self):
        return "MTLBTC"

    def __call__(self):
        return "MTLBTC"


MTLBTC = MTLBTC(*MTLBTC._fields)
"""
    name: MTLBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MTLBUSD(Symbol):
    """
        name: MTLBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MTLBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTLBUSD"

    def __str__(self):
        return "MTLBUSD"

    def __call__(self):
        return "MTLBUSD"


MTLBUSD = MTLBUSD(*MTLBUSD._fields)
"""
    name: MTLBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MTLETH(Symbol):
    """
        name: MTLETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MTLETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTLETH"

    def __str__(self):
        return "MTLETH"

    def __call__(self):
        return "MTLETH"


MTLETH = MTLETH(*MTLETH._fields)
"""
    name: MTLETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MTLUSDT(Symbol):
    """
        name: MTLUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MTLUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTLUSDT"

    def __str__(self):
        return "MTLUSDT"

    def __call__(self):
        return "MTLUSDT"


MTLUSDT = MTLUSDT(*MTLUSDT._fields)
"""
    name: MTLUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MULTIBTC(Symbol):
    """
        name: MULTIBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MULTIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MULTIBTC"

    def __str__(self):
        return "MULTIBTC"

    def __call__(self):
        return "MULTIBTC"


MULTIBTC = MULTIBTC(*MULTIBTC._fields)
"""
    name: MULTIBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MULTIBUSD(Symbol):
    """
        name: MULTIBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MULTIBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MULTIBUSD"

    def __str__(self):
        return "MULTIBUSD"

    def __call__(self):
        return "MULTIBUSD"


MULTIBUSD = MULTIBUSD(*MULTIBUSD._fields)
"""
    name: MULTIBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MULTIUSDT(Symbol):
    """
        name: MULTIUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MULTIUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MULTIUSDT"

    def __str__(self):
        return "MULTIUSDT"

    def __call__(self):
        return "MULTIUSDT"


MULTIUSDT = MULTIUSDT(*MULTIUSDT._fields)
"""
    name: MULTIUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOBNB(Symbol):
    """
        name: NANOBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOBNB"

    def __str__(self):
        return "NANOBNB"

    def __call__(self):
        return "NANOBNB"


NANOBNB = NANOBNB(*NANOBNB._fields)
"""
    name: NANOBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOBTC(Symbol):
    """
        name: NANOBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOBTC"

    def __str__(self):
        return "NANOBTC"

    def __call__(self):
        return "NANOBTC"


NANOBTC = NANOBTC(*NANOBTC._fields)
"""
    name: NANOBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOBUSD(Symbol):
    """
        name: NANOBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOBUSD"

    def __str__(self):
        return "NANOBUSD"

    def __call__(self):
        return "NANOBUSD"


NANOBUSD = NANOBUSD(*NANOBUSD._fields)
"""
    name: NANOBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOETH(Symbol):
    """
        name: NANOETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOETH"

    def __str__(self):
        return "NANOETH"

    def __call__(self):
        return "NANOETH"


NANOETH = NANOETH(*NANOETH._fields)
"""
    name: NANOETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOUSDT(Symbol):
    """
        name: NANOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOUSDT"

    def __str__(self):
        return "NANOUSDT"

    def __call__(self):
        return "NANOUSDT"


NANOUSDT = NANOUSDT(*NANOUSDT._fields)
"""
    name: NANOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NASBNB(Symbol):
    """
        name: NASBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NASBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NASBNB"

    def __str__(self):
        return "NASBNB"

    def __call__(self):
        return "NASBNB"


NASBNB = NASBNB(*NASBNB._fields)
"""
    name: NASBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NASBTC(Symbol):
    """
        name: NASBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NASBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NASBTC"

    def __str__(self):
        return "NASBTC"

    def __call__(self):
        return "NASBTC"


NASBTC = NASBTC(*NASBTC._fields)
"""
    name: NASBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NASETH(Symbol):
    """
        name: NASETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NASETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NASETH"

    def __str__(self):
        return "NASETH"

    def __call__(self):
        return "NASETH"


NASETH = NASETH(*NASETH._fields)
"""
    name: NASETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NAVBNB(Symbol):
    """
        name: NAVBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NAVBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAVBNB"

    def __str__(self):
        return "NAVBNB"

    def __call__(self):
        return "NAVBNB"


NAVBNB = NAVBNB(*NAVBNB._fields)
"""
    name: NAVBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NAVBTC(Symbol):
    """
        name: NAVBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NAVBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAVBTC"

    def __str__(self):
        return "NAVBTC"

    def __call__(self):
        return "NAVBTC"


NAVBTC = NAVBTC(*NAVBTC._fields)
"""
    name: NAVBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NAVETH(Symbol):
    """
        name: NAVETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NAVETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAVETH"

    def __str__(self):
        return "NAVETH"

    def __call__(self):
        return "NAVETH"


NAVETH = NAVETH(*NAVETH._fields)
"""
    name: NAVETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NBSBTC(Symbol):
    """
        name: NBSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NBSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NBSBTC"

    def __str__(self):
        return "NBSBTC"

    def __call__(self):
        return "NBSBTC"


NBSBTC = NBSBTC(*NBSBTC._fields)
"""
    name: NBSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NBSUSDT(Symbol):
    """
        name: NBSUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NBSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NBSUSDT"

    def __str__(self):
        return "NBSUSDT"

    def __call__(self):
        return "NBSUSDT"


NBSUSDT = NBSUSDT(*NBSUSDT._fields)
"""
    name: NBSUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NCASHBNB(Symbol):
    """
        name: NCASHBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NCASHBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NCASHBNB"

    def __str__(self):
        return "NCASHBNB"

    def __call__(self):
        return "NCASHBNB"


NCASHBNB = NCASHBNB(*NCASHBNB._fields)
"""
    name: NCASHBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NCASHBTC(Symbol):
    """
        name: NCASHBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NCASHBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NCASHBTC"

    def __str__(self):
        return "NCASHBTC"

    def __call__(self):
        return "NCASHBTC"


NCASHBTC = NCASHBTC(*NCASHBTC._fields)
"""
    name: NCASHBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NCASHETH(Symbol):
    """
        name: NCASHETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NCASHETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NCASHETH"

    def __str__(self):
        return "NCASHETH"

    def __call__(self):
        return "NCASHETH"


NCASHETH = NCASHETH(*NCASHETH._fields)
"""
    name: NCASHETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARBNB(Symbol):
    """
        name: NEARBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEARBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARBNB"

    def __str__(self):
        return "NEARBNB"

    def __call__(self):
        return "NEARBNB"


NEARBNB = NEARBNB(*NEARBNB._fields)
"""
    name: NEARBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARBTC(Symbol):
    """
        name: NEARBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEARBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARBTC"

    def __str__(self):
        return "NEARBTC"

    def __call__(self):
        return "NEARBTC"


NEARBTC = NEARBTC(*NEARBTC._fields)
"""
    name: NEARBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEARBUSD(Symbol):
    """
        name: NEARBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEARBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARBUSD"

    def __str__(self):
        return "NEARBUSD"

    def __call__(self):
        return "NEARBUSD"


NEARBUSD = NEARBUSD(*NEARBUSD._fields)
"""
    name: NEARBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEARETH(Symbol):
    """
        name: NEARETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEARETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARETH"

    def __str__(self):
        return "NEARETH"

    def __call__(self):
        return "NEARETH"


NEARETH = NEARETH(*NEARETH._fields)
"""
    name: NEARETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEAREUR(Symbol):
    """
        name: NEAREUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEAREUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAREUR"

    def __str__(self):
        return "NEAREUR"

    def __call__(self):
        return "NEAREUR"


NEAREUR = NEAREUR(*NEAREUR._fields)
"""
    name: NEAREUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARRUB(Symbol):
    """
        name: NEARRUB
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEARRUB"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARRUB"

    def __str__(self):
        return "NEARRUB"

    def __call__(self):
        return "NEARRUB"


NEARRUB = NEARRUB(*NEARRUB._fields)
"""
    name: NEARRUB
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARTRY(Symbol):
    """
        name: NEARTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEARTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARTRY"

    def __str__(self):
        return "NEARTRY"

    def __call__(self):
        return "NEARTRY"


NEARTRY = NEARTRY(*NEARTRY._fields)
"""
    name: NEARTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARUSDT(Symbol):
    """
        name: NEARUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEARUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARUSDT"

    def __str__(self):
        return "NEARUSDT"

    def __call__(self):
        return "NEARUSDT"


NEARUSDT = NEARUSDT(*NEARUSDT._fields)
"""
    name: NEARUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEBLBNB(Symbol):
    """
        name: NEBLBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEBLBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEBLBNB"

    def __str__(self):
        return "NEBLBNB"

    def __call__(self):
        return "NEBLBNB"


NEBLBNB = NEBLBNB(*NEBLBNB._fields)
"""
    name: NEBLBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEBLBTC(Symbol):
    """
        name: NEBLBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEBLBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEBLBTC"

    def __str__(self):
        return "NEBLBTC"

    def __call__(self):
        return "NEBLBTC"


NEBLBTC = NEBLBTC(*NEBLBTC._fields)
"""
    name: NEBLBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEBLBUSD(Symbol):
    """
        name: NEBLBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEBLBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEBLBUSD"

    def __str__(self):
        return "NEBLBUSD"

    def __call__(self):
        return "NEBLBUSD"


NEBLBUSD = NEBLBUSD(*NEBLBUSD._fields)
"""
    name: NEBLBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEBLUSDT(Symbol):
    """
        name: NEBLUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEBLUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEBLUSDT"

    def __str__(self):
        return "NEBLUSDT"

    def __call__(self):
        return "NEBLUSDT"


NEBLUSDT = NEBLUSDT(*NEBLUSDT._fields)
"""
    name: NEBLUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOBNB(Symbol):
    """
        name: NEOBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOBNB"

    def __str__(self):
        return "NEOBNB"

    def __call__(self):
        return "NEOBNB"


NEOBNB = NEOBNB(*NEOBNB._fields)
"""
    name: NEOBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOBTC(Symbol):
    """
        name: NEOBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOBTC"

    def __str__(self):
        return "NEOBTC"

    def __call__(self):
        return "NEOBTC"


NEOBTC = NEOBTC(*NEOBTC._fields)
"""
    name: NEOBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEOBUSD(Symbol):
    """
        name: NEOBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEOBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOBUSD"

    def __str__(self):
        return "NEOBUSD"

    def __call__(self):
        return "NEOBUSD"


NEOBUSD = NEOBUSD(*NEOBUSD._fields)
"""
    name: NEOBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEOETH(Symbol):
    """
        name: NEOETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOETH"

    def __str__(self):
        return "NEOETH"

    def __call__(self):
        return "NEOETH"


NEOETH = NEOETH(*NEOETH._fields)
"""
    name: NEOETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOPAX(Symbol):
    """
        name: NEOPAX
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOPAX"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOPAX"

    def __str__(self):
        return "NEOPAX"

    def __call__(self):
        return "NEOPAX"


NEOPAX = NEOPAX(*NEOPAX._fields)
"""
    name: NEOPAX
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEORUB(Symbol):
    """
        name: NEORUB
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEORUB"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEORUB"

    def __str__(self):
        return "NEORUB"

    def __call__(self):
        return "NEORUB"


NEORUB = NEORUB(*NEORUB._fields)
"""
    name: NEORUB
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOTRY(Symbol):
    """
        name: NEOTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOTRY"

    def __str__(self):
        return "NEOTRY"

    def __call__(self):
        return "NEOTRY"


NEOTRY = NEOTRY(*NEOTRY._fields)
"""
    name: NEOTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOTUSD(Symbol):
    """
        name: NEOTUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOTUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOTUSD"

    def __str__(self):
        return "NEOTUSD"

    def __call__(self):
        return "NEOTUSD"


NEOTUSD = NEOTUSD(*NEOTUSD._fields)
"""
    name: NEOTUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOUSDC(Symbol):
    """
        name: NEOUSDC
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOUSDC"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOUSDC"

    def __str__(self):
        return "NEOUSDC"

    def __call__(self):
        return "NEOUSDC"


NEOUSDC = NEOUSDC(*NEOUSDC._fields)
"""
    name: NEOUSDC
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOUSDT(Symbol):
    """
        name: NEOUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEOUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOUSDT"

    def __str__(self):
        return "NEOUSDT"

    def __call__(self):
        return "NEOUSDT"


NEOUSDT = NEOUSDT(*NEOUSDT._fields)
"""
    name: NEOUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEXOBTC(Symbol):
    """
        name: NEXOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEXOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEXOBTC"

    def __str__(self):
        return "NEXOBTC"

    def __call__(self):
        return "NEXOBTC"


NEXOBTC = NEXOBTC(*NEXOBTC._fields)
"""
    name: NEXOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEXOBUSD(Symbol):
    """
        name: NEXOBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEXOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEXOBUSD"

    def __str__(self):
        return "NEXOBUSD"

    def __call__(self):
        return "NEXOBUSD"


NEXOBUSD = NEXOBUSD(*NEXOBUSD._fields)
"""
    name: NEXOBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEXOUSDT(Symbol):
    """
        name: NEXOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEXOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEXOUSDT"

    def __str__(self):
        return "NEXOUSDT"

    def __call__(self):
        return "NEXOUSDT"


NEXOUSDT = NEXOUSDT(*NEXOUSDT._fields)
"""
    name: NEXOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NKNBNB(Symbol):
    """
        name: NKNBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NKNBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKNBNB"

    def __str__(self):
        return "NKNBNB"

    def __call__(self):
        return "NKNBNB"


NKNBNB = NKNBNB(*NKNBNB._fields)
"""
    name: NKNBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NKNBTC(Symbol):
    """
        name: NKNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NKNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKNBTC"

    def __str__(self):
        return "NKNBTC"

    def __call__(self):
        return "NKNBTC"


NKNBTC = NKNBTC(*NKNBTC._fields)
"""
    name: NKNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NKNBUSD(Symbol):
    """
        name: NKNBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NKNBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKNBUSD"

    def __str__(self):
        return "NKNBUSD"

    def __call__(self):
        return "NKNBUSD"


NKNBUSD = NKNBUSD(*NKNBUSD._fields)
"""
    name: NKNBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NKNUSDT(Symbol):
    """
        name: NKNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NKNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKNUSDT"

    def __str__(self):
        return "NKNUSDT"

    def __call__(self):
        return "NKNUSDT"


NKNUSDT = NKNUSDT(*NKNUSDT._fields)
"""
    name: NKNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NMRBTC(Symbol):
    """
        name: NMRBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NMRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMRBTC"

    def __str__(self):
        return "NMRBTC"

    def __call__(self):
        return "NMRBTC"


NMRBTC = NMRBTC(*NMRBTC._fields)
"""
    name: NMRBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NMRBUSD(Symbol):
    """
        name: NMRBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NMRBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMRBUSD"

    def __str__(self):
        return "NMRBUSD"

    def __call__(self):
        return "NMRBUSD"


NMRBUSD = NMRBUSD(*NMRBUSD._fields)
"""
    name: NMRBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NMRUSDT(Symbol):
    """
        name: NMRUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NMRUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMRUSDT"

    def __str__(self):
        return "NMRUSDT"

    def __call__(self):
        return "NMRUSDT"


NMRUSDT = NMRUSDT(*NMRUSDT._fields)
"""
    name: NMRUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NPXSBTC(Symbol):
    """
        name: NPXSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NPXSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NPXSBTC"

    def __str__(self):
        return "NPXSBTC"

    def __call__(self):
        return "NPXSBTC"


NPXSBTC = NPXSBTC(*NPXSBTC._fields)
"""
    name: NPXSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NPXSETH(Symbol):
    """
        name: NPXSETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NPXSETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NPXSETH"

    def __str__(self):
        return "NPXSETH"

    def __call__(self):
        return "NPXSETH"


NPXSETH = NPXSETH(*NPXSETH._fields)
"""
    name: NPXSETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NPXSUSDC(Symbol):
    """
        name: NPXSUSDC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NPXSUSDC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NPXSUSDC"

    def __str__(self):
        return "NPXSUSDC"

    def __call__(self):
        return "NPXSUSDC"


NPXSUSDC = NPXSUSDC(*NPXSUSDC._fields)
"""
    name: NPXSUSDC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NPXSUSDT(Symbol):
    """
        name: NPXSUSDT
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NPXSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NPXSUSDT"

    def __str__(self):
        return "NPXSUSDT"

    def __call__(self):
        return "NPXSUSDT"


NPXSUSDT = NPXSUSDT(*NPXSUSDT._fields)
"""
    name: NPXSUSDT
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NUAUD(Symbol):
    """
        name: NUAUD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUAUD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUAUD"

    def __str__(self):
        return "NUAUD"

    def __call__(self):
        return "NUAUD"


NUAUD = NUAUD(*NUAUD._fields)
"""
    name: NUAUD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NUBNB(Symbol):
    """
        name: NUBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUBNB"

    def __str__(self):
        return "NUBNB"

    def __call__(self):
        return "NUBNB"


NUBNB = NUBNB(*NUBNB._fields)
"""
    name: NUBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NUBTC(Symbol):
    """
        name: NUBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUBTC"

    def __str__(self):
        return "NUBTC"

    def __call__(self):
        return "NUBTC"


NUBTC = NUBTC(*NUBTC._fields)
"""
    name: NUBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NUBUSD(Symbol):
    """
        name: NUBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUBUSD"

    def __str__(self):
        return "NUBUSD"

    def __call__(self):
        return "NUBUSD"


NUBUSD = NUBUSD(*NUBUSD._fields)
"""
    name: NUBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NULSBNB(Symbol):
    """
        name: NULSBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NULSBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSBNB"

    def __str__(self):
        return "NULSBNB"

    def __call__(self):
        return "NULSBNB"


NULSBNB = NULSBNB(*NULSBNB._fields)
"""
    name: NULSBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NULSBTC(Symbol):
    """
        name: NULSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NULSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSBTC"

    def __str__(self):
        return "NULSBTC"

    def __call__(self):
        return "NULSBTC"


NULSBTC = NULSBTC(*NULSBTC._fields)
"""
    name: NULSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NULSBUSD(Symbol):
    """
        name: NULSBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NULSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSBUSD"

    def __str__(self):
        return "NULSBUSD"

    def __call__(self):
        return "NULSBUSD"


NULSBUSD = NULSBUSD(*NULSBUSD._fields)
"""
    name: NULSBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NULSETH(Symbol):
    """
        name: NULSETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NULSETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSETH"

    def __str__(self):
        return "NULSETH"

    def __call__(self):
        return "NULSETH"


NULSETH = NULSETH(*NULSETH._fields)
"""
    name: NULSETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NULSUSDT(Symbol):
    """
        name: NULSUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NULSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSUSDT"

    def __str__(self):
        return "NULSUSDT"

    def __call__(self):
        return "NULSUSDT"


NULSUSDT = NULSUSDT(*NULSUSDT._fields)
"""
    name: NULSUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NURUB(Symbol):
    """
        name: NURUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NURUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NURUB"

    def __str__(self):
        return "NURUB"

    def __call__(self):
        return "NURUB"


NURUB = NURUB(*NURUB._fields)
"""
    name: NURUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class NUUSDT(Symbol):
    """
        name: NUUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUUSDT"

    def __str__(self):
        return "NUUSDT"

    def __call__(self):
        return "NUUSDT"


NUUSDT = NUUSDT(*NUUSDT._fields)
"""
    name: NUUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NXSBNB(Symbol):
    """
        name: NXSBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NXSBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NXSBNB"

    def __str__(self):
        return "NXSBNB"

    def __call__(self):
        return "NXSBNB"


NXSBNB = NXSBNB(*NXSBNB._fields)
"""
    name: NXSBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NXSBTC(Symbol):
    """
        name: NXSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NXSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NXSBTC"

    def __str__(self):
        return "NXSBTC"

    def __call__(self):
        return "NXSBTC"


NXSBTC = NXSBTC(*NXSBTC._fields)
"""
    name: NXSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NXSETH(Symbol):
    """
        name: NXSETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NXSETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NXSETH"

    def __str__(self):
        return "NXSETH"

    def __call__(self):
        return "NXSETH"


NXSETH = NXSETH(*NXSETH._fields)
"""
    name: NXSETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OAXBTC(Symbol):
    """
        name: OAXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OAXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OAXBTC"

    def __str__(self):
        return "OAXBTC"

    def __call__(self):
        return "OAXBTC"


OAXBTC = OAXBTC(*OAXBTC._fields)
"""
    name: OAXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OAXETH(Symbol):
    """
        name: OAXETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OAXETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OAXETH"

    def __str__(self):
        return "OAXETH"

    def __call__(self):
        return "OAXETH"


OAXETH = OAXETH(*OAXETH._fields)
"""
    name: OAXETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OAXUSDT(Symbol):
    """
        name: OAXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OAXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OAXUSDT"

    def __str__(self):
        return "OAXUSDT"

    def __call__(self):
        return "OAXUSDT"


OAXUSDT = OAXUSDT(*OAXUSDT._fields)
"""
    name: OAXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OCEANBNB(Symbol):
    """
        name: OCEANBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OCEANBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEANBNB"

    def __str__(self):
        return "OCEANBNB"

    def __call__(self):
        return "OCEANBNB"


OCEANBNB = OCEANBNB(*OCEANBNB._fields)
"""
    name: OCEANBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OCEANBTC(Symbol):
    """
        name: OCEANBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OCEANBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEANBTC"

    def __str__(self):
        return "OCEANBTC"

    def __call__(self):
        return "OCEANBTC"


OCEANBTC = OCEANBTC(*OCEANBTC._fields)
"""
    name: OCEANBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OCEANBUSD(Symbol):
    """
        name: OCEANBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OCEANBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEANBUSD"

    def __str__(self):
        return "OCEANBUSD"

    def __call__(self):
        return "OCEANBUSD"


OCEANBUSD = OCEANBUSD(*OCEANBUSD._fields)
"""
    name: OCEANBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OCEANUSDT(Symbol):
    """
        name: OCEANUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OCEANUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEANUSDT"

    def __str__(self):
        return "OCEANUSDT"

    def __call__(self):
        return "OCEANUSDT"


OCEANUSDT = OCEANUSDT(*OCEANUSDT._fields)
"""
    name: OCEANUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OGBTC(Symbol):
    """
        name: OGBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGBTC"

    def __str__(self):
        return "OGBTC"

    def __call__(self):
        return "OGBTC"


OGBTC = OGBTC(*OGBTC._fields)
"""
    name: OGBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OGBUSD(Symbol):
    """
        name: OGBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OGBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGBUSD"

    def __str__(self):
        return "OGBUSD"

    def __call__(self):
        return "OGBUSD"


OGBUSD = OGBUSD(*OGBUSD._fields)
"""
    name: OGBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OGNBNB(Symbol):
    """
        name: OGNBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OGNBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGNBNB"

    def __str__(self):
        return "OGNBNB"

    def __call__(self):
        return "OGNBNB"


OGNBNB = OGNBNB(*OGNBNB._fields)
"""
    name: OGNBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OGNBTC(Symbol):
    """
        name: OGNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OGNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGNBTC"

    def __str__(self):
        return "OGNBTC"

    def __call__(self):
        return "OGNBTC"


OGNBTC = OGNBTC(*OGNBTC._fields)
"""
    name: OGNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OGNBUSD(Symbol):
    """
        name: OGNBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OGNBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGNBUSD"

    def __str__(self):
        return "OGNBUSD"

    def __call__(self):
        return "OGNBUSD"


OGNBUSD = OGNBUSD(*OGNBUSD._fields)
"""
    name: OGNBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OGNUSDT(Symbol):
    """
        name: OGNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OGNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGNUSDT"

    def __str__(self):
        return "OGNUSDT"

    def __call__(self):
        return "OGNUSDT"


OGNUSDT = OGNUSDT(*OGNUSDT._fields)
"""
    name: OGNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OGUSDT(Symbol):
    """
        name: OGUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OGUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGUSDT"

    def __str__(self):
        return "OGUSDT"

    def __call__(self):
        return "OGUSDT"


OGUSDT = OGUSDT(*OGUSDT._fields)
"""
    name: OGUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMBTC(Symbol):
    """
        name: OMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMBTC"

    def __str__(self):
        return "OMBTC"

    def __call__(self):
        return "OMBTC"


OMBTC = OMBTC(*OMBTC._fields)
"""
    name: OMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OMBUSD(Symbol):
    """
        name: OMBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMBUSD"

    def __str__(self):
        return "OMBUSD"

    def __call__(self):
        return "OMBUSD"


OMBUSD = OMBUSD(*OMBUSD._fields)
"""
    name: OMBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OMGBNB(Symbol):
    """
        name: OMGBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGBNB"

    def __str__(self):
        return "OMGBNB"

    def __call__(self):
        return "OMGBNB"


OMGBNB = OMGBNB(*OMGBNB._fields)
"""
    name: OMGBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMGBTC(Symbol):
    """
        name: OMGBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGBTC"

    def __str__(self):
        return "OMGBTC"

    def __call__(self):
        return "OMGBTC"


OMGBTC = OMGBTC(*OMGBTC._fields)
"""
    name: OMGBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMGBUSD(Symbol):
    """
        name: OMGBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGBUSD"

    def __str__(self):
        return "OMGBUSD"

    def __call__(self):
        return "OMGBUSD"


OMGBUSD = OMGBUSD(*OMGBUSD._fields)
"""
    name: OMGBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMGETH(Symbol):
    """
        name: OMGETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGETH"

    def __str__(self):
        return "OMGETH"

    def __call__(self):
        return "OMGETH"


OMGETH = OMGETH(*OMGETH._fields)
"""
    name: OMGETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMGUSDT(Symbol):
    """
        name: OMGUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGUSDT"

    def __str__(self):
        return "OMGUSDT"

    def __call__(self):
        return "OMGUSDT"


OMGUSDT = OMGUSDT(*OMGUSDT._fields)
"""
    name: OMGUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMUSDT(Symbol):
    """
        name: OMUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMUSDT"

    def __str__(self):
        return "OMUSDT"

    def __call__(self):
        return "OMUSDT"


OMUSDT = OMUSDT(*OMUSDT._fields)
"""
    name: OMUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONEBIDR(Symbol):
    """
        name: ONEBIDR
        significant_digits: None
        tick_size: 0.01
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ONEBIDR"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEBIDR"

    def __str__(self):
        return "ONEBIDR"

    def __call__(self):
        return "ONEBIDR"


ONEBIDR = ONEBIDR(*ONEBIDR._fields)
"""
    name: ONEBIDR
    significant_digits: None
    tick_size: 0.01
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ONEBNB(Symbol):
    """
        name: ONEBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONEBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEBNB"

    def __str__(self):
        return "ONEBNB"

    def __call__(self):
        return "ONEBNB"


ONEBNB = ONEBNB(*ONEBNB._fields)
"""
    name: ONEBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEBTC(Symbol):
    """
        name: ONEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEBTC"

    def __str__(self):
        return "ONEBTC"

    def __call__(self):
        return "ONEBTC"


ONEBTC = ONEBTC(*ONEBTC._fields)
"""
    name: ONEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONEBUSD(Symbol):
    """
        name: ONEBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEBUSD"

    def __str__(self):
        return "ONEBUSD"

    def __call__(self):
        return "ONEBUSD"


ONEBUSD = ONEBUSD(*ONEBUSD._fields)
"""
    name: ONEBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONEETH(Symbol):
    """
        name: ONEETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONEETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEETH"

    def __str__(self):
        return "ONEETH"

    def __call__(self):
        return "ONEETH"


ONEETH = ONEETH(*ONEETH._fields)
"""
    name: ONEETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEPAX(Symbol):
    """
        name: ONEPAX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONEPAX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEPAX"

    def __str__(self):
        return "ONEPAX"

    def __call__(self):
        return "ONEPAX"


ONEPAX = ONEPAX(*ONEPAX._fields)
"""
    name: ONEPAX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONETRY(Symbol):
    """
        name: ONETRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONETRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONETRY"

    def __str__(self):
        return "ONETRY"

    def __call__(self):
        return "ONETRY"


ONETRY = ONETRY(*ONETRY._fields)
"""
    name: ONETRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ONETUSD(Symbol):
    """
        name: ONETUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONETUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONETUSD"

    def __str__(self):
        return "ONETUSD"

    def __call__(self):
        return "ONETUSD"


ONETUSD = ONETUSD(*ONETUSD._fields)
"""
    name: ONETUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEUSDC(Symbol):
    """
        name: ONEUSDC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONEUSDC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEUSDC"

    def __str__(self):
        return "ONEUSDC"

    def __call__(self):
        return "ONEUSDC"


ONEUSDC = ONEUSDC(*ONEUSDC._fields)
"""
    name: ONEUSDC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEUSDT(Symbol):
    """
        name: ONEUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEUSDT"

    def __str__(self):
        return "ONEUSDT"

    def __call__(self):
        return "ONEUSDT"


ONEUSDT = ONEUSDT(*ONEUSDT._fields)
"""
    name: ONEUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONGBNB(Symbol):
    """
        name: ONGBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONGBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONGBNB"

    def __str__(self):
        return "ONGBNB"

    def __call__(self):
        return "ONGBNB"


ONGBNB = ONGBNB(*ONGBNB._fields)
"""
    name: ONGBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONGBTC(Symbol):
    """
        name: ONGBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONGBTC"

    def __str__(self):
        return "ONGBTC"

    def __call__(self):
        return "ONGBTC"


ONGBTC = ONGBTC(*ONGBTC._fields)
"""
    name: ONGBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONGUSDT(Symbol):
    """
        name: ONGUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONGUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONGUSDT"

    def __str__(self):
        return "ONGUSDT"

    def __call__(self):
        return "ONGUSDT"


ONGUSDT = ONGUSDT(*ONGUSDT._fields)
"""
    name: ONGUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTBNB(Symbol):
    """
        name: ONTBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTBNB"

    def __str__(self):
        return "ONTBNB"

    def __call__(self):
        return "ONTBNB"


ONTBNB = ONTBNB(*ONTBNB._fields)
"""
    name: ONTBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTBTC(Symbol):
    """
        name: ONTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTBTC"

    def __str__(self):
        return "ONTBTC"

    def __call__(self):
        return "ONTBTC"


ONTBTC = ONTBTC(*ONTBTC._fields)
"""
    name: ONTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONTBUSD(Symbol):
    """
        name: ONTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTBUSD"

    def __str__(self):
        return "ONTBUSD"

    def __call__(self):
        return "ONTBUSD"


ONTBUSD = ONTBUSD(*ONTBUSD._fields)
"""
    name: ONTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONTETH(Symbol):
    """
        name: ONTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTETH"

    def __str__(self):
        return "ONTETH"

    def __call__(self):
        return "ONTETH"


ONTETH = ONTETH(*ONTETH._fields)
"""
    name: ONTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTPAX(Symbol):
    """
        name: ONTPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTPAX"

    def __str__(self):
        return "ONTPAX"

    def __call__(self):
        return "ONTPAX"


ONTPAX = ONTPAX(*ONTPAX._fields)
"""
    name: ONTPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTTRY(Symbol):
    """
        name: ONTTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTTRY"

    def __str__(self):
        return "ONTTRY"

    def __call__(self):
        return "ONTTRY"


ONTTRY = ONTTRY(*ONTTRY._fields)
"""
    name: ONTTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTUSDC(Symbol):
    """
        name: ONTUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTUSDC"

    def __str__(self):
        return "ONTUSDC"

    def __call__(self):
        return "ONTUSDC"


ONTUSDC = ONTUSDC(*ONTUSDC._fields)
"""
    name: ONTUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTUSDT(Symbol):
    """
        name: ONTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTUSDT"

    def __str__(self):
        return "ONTUSDT"

    def __call__(self):
        return "ONTUSDT"


ONTUSDT = ONTUSDT(*ONTUSDT._fields)
"""
    name: ONTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OOKIBNB(Symbol):
    """
        name: OOKIBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OOKIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOKIBNB"

    def __str__(self):
        return "OOKIBNB"

    def __call__(self):
        return "OOKIBNB"


OOKIBNB = OOKIBNB(*OOKIBNB._fields)
"""
    name: OOKIBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OOKIBUSD(Symbol):
    """
        name: OOKIBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OOKIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOKIBUSD"

    def __str__(self):
        return "OOKIBUSD"

    def __call__(self):
        return "OOKIBUSD"


OOKIBUSD = OOKIBUSD(*OOKIBUSD._fields)
"""
    name: OOKIBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OOKIETH(Symbol):
    """
        name: OOKIETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OOKIETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOKIETH"

    def __str__(self):
        return "OOKIETH"

    def __call__(self):
        return "OOKIETH"


OOKIETH = OOKIETH(*OOKIETH._fields)
"""
    name: OOKIETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OOKIUSDT(Symbol):
    """
        name: OOKIUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OOKIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOKIUSDT"

    def __str__(self):
        return "OOKIUSDT"

    def __call__(self):
        return "OOKIUSDT"


OOKIUSDT = OOKIUSDT(*OOKIUSDT._fields)
"""
    name: OOKIUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPBNB(Symbol):
    """
        name: OPBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPBNB"

    def __str__(self):
        return "OPBNB"

    def __call__(self):
        return "OPBNB"


OPBNB = OPBNB(*OPBNB._fields)
"""
    name: OPBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPBTC(Symbol):
    """
        name: OPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPBTC"

    def __str__(self):
        return "OPBTC"

    def __call__(self):
        return "OPBTC"


OPBTC = OPBTC(*OPBTC._fields)
"""
    name: OPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPBUSD(Symbol):
    """
        name: OPBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPBUSD"

    def __str__(self):
        return "OPBUSD"

    def __call__(self):
        return "OPBUSD"


OPBUSD = OPBUSD(*OPBUSD._fields)
"""
    name: OPBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OPETH(Symbol):
    """
        name: OPETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPETH"

    def __str__(self):
        return "OPETH"

    def __call__(self):
        return "OPETH"


OPETH = OPETH(*OPETH._fields)
"""
    name: OPETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPEUR(Symbol):
    """
        name: OPEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPEUR"

    def __str__(self):
        return "OPEUR"

    def __call__(self):
        return "OPEUR"


OPEUR = OPEUR(*OPEUR._fields)
"""
    name: OPEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPTUSD(Symbol):
    """
        name: OPTUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPTUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPTUSD"

    def __str__(self):
        return "OPTUSD"

    def __call__(self):
        return "OPTUSD"


OPTUSD = OPTUSD(*OPTUSD._fields)
"""
    name: OPTUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPUSDT(Symbol):
    """
        name: OPUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPUSDT"

    def __str__(self):
        return "OPUSDT"

    def __call__(self):
        return "OPUSDT"


OPUSDT = OPUSDT(*OPUSDT._fields)
"""
    name: OPUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ORNBTC(Symbol):
    """
        name: ORNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ORNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORNBTC"

    def __str__(self):
        return "ORNBTC"

    def __call__(self):
        return "ORNBTC"


ORNBTC = ORNBTC(*ORNBTC._fields)
"""
    name: ORNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ORNBUSD(Symbol):
    """
        name: ORNBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ORNBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORNBUSD"

    def __str__(self):
        return "ORNBUSD"

    def __call__(self):
        return "ORNBUSD"


ORNBUSD = ORNBUSD(*ORNBUSD._fields)
"""
    name: ORNBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ORNUSDT(Symbol):
    """
        name: ORNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ORNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORNUSDT"

    def __str__(self):
        return "ORNUSDT"

    def __call__(self):
        return "ORNUSDT"


ORNUSDT = ORNUSDT(*ORNUSDT._fields)
"""
    name: ORNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OSMOBTC(Symbol):
    """
        name: OSMOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OSMOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSMOBTC"

    def __str__(self):
        return "OSMOBTC"

    def __call__(self):
        return "OSMOBTC"


OSMOBTC = OSMOBTC(*OSMOBTC._fields)
"""
    name: OSMOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OSMOBUSD(Symbol):
    """
        name: OSMOBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OSMOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSMOBUSD"

    def __str__(self):
        return "OSMOBUSD"

    def __call__(self):
        return "OSMOBUSD"


OSMOBUSD = OSMOBUSD(*OSMOBUSD._fields)
"""
    name: OSMOBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OSMOUSDT(Symbol):
    """
        name: OSMOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OSMOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSMOUSDT"

    def __str__(self):
        return "OSMOUSDT"

    def __call__(self):
        return "OSMOUSDT"


OSMOUSDT = OSMOUSDT(*OSMOUSDT._fields)
"""
    name: OSMOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OSTBNB(Symbol):
    """
        name: OSTBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OSTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSTBNB"

    def __str__(self):
        return "OSTBNB"

    def __call__(self):
        return "OSTBNB"


OSTBNB = OSTBNB(*OSTBNB._fields)
"""
    name: OSTBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OSTBTC(Symbol):
    """
        name: OSTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OSTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSTBTC"

    def __str__(self):
        return "OSTBTC"

    def __call__(self):
        return "OSTBTC"


OSTBTC = OSTBTC(*OSTBTC._fields)
"""
    name: OSTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OSTETH(Symbol):
    """
        name: OSTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OSTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSTETH"

    def __str__(self):
        return "OSTETH"

    def __call__(self):
        return "OSTETH"


OSTETH = OSTETH(*OSTETH._fields)
"""
    name: OSTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OXTBTC(Symbol):
    """
        name: OXTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OXTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXTBTC"

    def __str__(self):
        return "OXTBTC"

    def __call__(self):
        return "OXTBTC"


OXTBTC = OXTBTC(*OXTBTC._fields)
"""
    name: OXTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OXTBUSD(Symbol):
    """
        name: OXTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OXTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXTBUSD"

    def __str__(self):
        return "OXTBUSD"

    def __call__(self):
        return "OXTBUSD"


OXTBUSD = OXTBUSD(*OXTBUSD._fields)
"""
    name: OXTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OXTUSDT(Symbol):
    """
        name: OXTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OXTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXTUSDT"

    def __str__(self):
        return "OXTUSDT"

    def __call__(self):
        return "OXTUSDT"


OXTUSDT = OXTUSDT(*OXTUSDT._fields)
"""
    name: OXTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PAXBNB(Symbol):
    """
        name: PAXBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXBNB"

    def __str__(self):
        return "PAXBNB"

    def __call__(self):
        return "PAXBNB"


PAXBNB = PAXBNB(*PAXBNB._fields)
"""
    name: PAXBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXBTC(Symbol):
    """
        name: PAXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXBTC"

    def __str__(self):
        return "PAXBTC"

    def __call__(self):
        return "PAXBTC"


PAXBTC = PAXBTC(*PAXBTC._fields)
"""
    name: PAXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXBUSD(Symbol):
    """
        name: PAXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXBUSD"

    def __str__(self):
        return "PAXBUSD"

    def __call__(self):
        return "PAXBUSD"


PAXBUSD = PAXBUSD(*PAXBUSD._fields)
"""
    name: PAXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXETH(Symbol):
    """
        name: PAXETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXETH"

    def __str__(self):
        return "PAXETH"

    def __call__(self):
        return "PAXETH"


PAXETH = PAXETH(*PAXETH._fields)
"""
    name: PAXETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXGBNB(Symbol):
    """
        name: PAXGBNB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXGBNB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXGBNB"

    def __str__(self):
        return "PAXGBNB"

    def __call__(self):
        return "PAXGBNB"


PAXGBNB = PAXGBNB(*PAXGBNB._fields)
"""
    name: PAXGBNB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXGBTC(Symbol):
    """
        name: PAXGBTC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXGBTC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXGBTC"

    def __str__(self):
        return "PAXGBTC"

    def __call__(self):
        return "PAXGBTC"


PAXGBTC = PAXGBTC(*PAXGBTC._fields)
"""
    name: PAXGBTC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXGBUSD(Symbol):
    """
        name: PAXGBUSD
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PAXGBUSD"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXGBUSD"

    def __str__(self):
        return "PAXGBUSD"

    def __call__(self):
        return "PAXGBUSD"


PAXGBUSD = PAXGBUSD(*PAXGBUSD._fields)
"""
    name: PAXGBUSD
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PAXGUSDT(Symbol):
    """
        name: PAXGUSDT
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PAXGUSDT"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXGUSDT"

    def __str__(self):
        return "PAXGUSDT"

    def __call__(self):
        return "PAXGUSDT"


PAXGUSDT = PAXGUSDT(*PAXGUSDT._fields)
"""
    name: PAXGUSDT
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PAXTUSD(Symbol):
    """
        name: PAXTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXTUSD"

    def __str__(self):
        return "PAXTUSD"

    def __call__(self):
        return "PAXTUSD"


PAXTUSD = PAXTUSD(*PAXTUSD._fields)
"""
    name: PAXTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXUSDT(Symbol):
    """
        name: PAXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXUSDT"

    def __str__(self):
        return "PAXUSDT"

    def __call__(self):
        return "PAXUSDT"


PAXUSDT = PAXUSDT(*PAXUSDT._fields)
"""
    name: PAXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PEOPLEBNB(Symbol):
    """
        name: PEOPLEBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PEOPLEBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEBNB"

    def __str__(self):
        return "PEOPLEBNB"

    def __call__(self):
        return "PEOPLEBNB"


PEOPLEBNB = PEOPLEBNB(*PEOPLEBNB._fields)
"""
    name: PEOPLEBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PEOPLEBTC(Symbol):
    """
        name: PEOPLEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PEOPLEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEBTC"

    def __str__(self):
        return "PEOPLEBTC"

    def __call__(self):
        return "PEOPLEBTC"


PEOPLEBTC = PEOPLEBTC(*PEOPLEBTC._fields)
"""
    name: PEOPLEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PEOPLEBUSD(Symbol):
    """
        name: PEOPLEBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PEOPLEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEBUSD"

    def __str__(self):
        return "PEOPLEBUSD"

    def __call__(self):
        return "PEOPLEBUSD"


PEOPLEBUSD = PEOPLEBUSD(*PEOPLEBUSD._fields)
"""
    name: PEOPLEBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PEOPLEETH(Symbol):
    """
        name: PEOPLEETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PEOPLEETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEETH"

    def __str__(self):
        return "PEOPLEETH"

    def __call__(self):
        return "PEOPLEETH"


PEOPLEETH = PEOPLEETH(*PEOPLEETH._fields)
"""
    name: PEOPLEETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PEOPLEUSDT(Symbol):
    """
        name: PEOPLEUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PEOPLEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEUSDT"

    def __str__(self):
        return "PEOPLEUSDT"

    def __call__(self):
        return "PEOPLEUSDT"


PEOPLEUSDT = PEOPLEUSDT(*PEOPLEUSDT._fields)
"""
    name: PEOPLEUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PERLBNB(Symbol):
    """
        name: PERLBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERLBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERLBNB"

    def __str__(self):
        return "PERLBNB"

    def __call__(self):
        return "PERLBNB"


PERLBNB = PERLBNB(*PERLBNB._fields)
"""
    name: PERLBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERLBTC(Symbol):
    """
        name: PERLBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERLBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERLBTC"

    def __str__(self):
        return "PERLBTC"

    def __call__(self):
        return "PERLBTC"


PERLBTC = PERLBTC(*PERLBTC._fields)
"""
    name: PERLBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERLUSDC(Symbol):
    """
        name: PERLUSDC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERLUSDC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERLUSDC"

    def __str__(self):
        return "PERLUSDC"

    def __call__(self):
        return "PERLUSDC"


PERLUSDC = PERLUSDC(*PERLUSDC._fields)
"""
    name: PERLUSDC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERLUSDT(Symbol):
    """
        name: PERLUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERLUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERLUSDT"

    def __str__(self):
        return "PERLUSDT"

    def __call__(self):
        return "PERLUSDT"


PERLUSDT = PERLUSDT(*PERLUSDT._fields)
"""
    name: PERLUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERPBTC(Symbol):
    """
        name: PERPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERPBTC"

    def __str__(self):
        return "PERPBTC"

    def __call__(self):
        return "PERPBTC"


PERPBTC = PERPBTC(*PERPBTC._fields)
"""
    name: PERPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERPBUSD(Symbol):
    """
        name: PERPBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERPBUSD"

    def __str__(self):
        return "PERPBUSD"

    def __call__(self):
        return "PERPBUSD"


PERPBUSD = PERPBUSD(*PERPBUSD._fields)
"""
    name: PERPBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERPUSDT(Symbol):
    """
        name: PERPUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PERPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERPUSDT"

    def __str__(self):
        return "PERPUSDT"

    def __call__(self):
        return "PERPUSDT"


PERPUSDT = PERPUSDT(*PERPUSDT._fields)
"""
    name: PERPUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHABTC(Symbol):
    """
        name: PHABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHABTC"

    def __str__(self):
        return "PHABTC"

    def __call__(self):
        return "PHABTC"


PHABTC = PHABTC(*PHABTC._fields)
"""
    name: PHABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHABUSD(Symbol):
    """
        name: PHABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PHABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHABUSD"

    def __str__(self):
        return "PHABUSD"

    def __call__(self):
        return "PHABUSD"


PHABUSD = PHABUSD(*PHABUSD._fields)
"""
    name: PHABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHAUSDT(Symbol):
    """
        name: PHAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PHAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHAUSDT"

    def __str__(self):
        return "PHAUSDT"

    def __call__(self):
        return "PHAUSDT"


PHAUSDT = PHAUSDT(*PHAUSDT._fields)
"""
    name: PHAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHBBNB(Symbol):
    """
        name: PHBBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBBNB"

    def __str__(self):
        return "PHBBNB"

    def __call__(self):
        return "PHBBNB"


PHBBNB = PHBBNB(*PHBBNB._fields)
"""
    name: PHBBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBBTC(Symbol):
    """
        name: PHBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBBTC"

    def __str__(self):
        return "PHBBTC"

    def __call__(self):
        return "PHBBTC"


PHBBTC = PHBBTC(*PHBBTC._fields)
"""
    name: PHBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBBUSD(Symbol):
    """
        name: PHBBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PHBBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBBUSD"

    def __str__(self):
        return "PHBBUSD"

    def __call__(self):
        return "PHBBUSD"


PHBBUSD = PHBBUSD(*PHBBUSD._fields)
"""
    name: PHBBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHBPAX(Symbol):
    """
        name: PHBPAX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBPAX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBPAX"

    def __str__(self):
        return "PHBPAX"

    def __call__(self):
        return "PHBPAX"


PHBPAX = PHBPAX(*PHBPAX._fields)
"""
    name: PHBPAX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBTUSD(Symbol):
    """
        name: PHBTUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBTUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBTUSD"

    def __str__(self):
        return "PHBTUSD"

    def __call__(self):
        return "PHBTUSD"


PHBTUSD = PHBTUSD(*PHBTUSD._fields)
"""
    name: PHBTUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBUSDC(Symbol):
    """
        name: PHBUSDC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBUSDC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBUSDC"

    def __str__(self):
        return "PHBUSDC"

    def __call__(self):
        return "PHBUSDC"


PHBUSDC = PHBUSDC(*PHBUSDC._fields)
"""
    name: PHBUSDC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBUSDT(Symbol):
    """
        name: PHBUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PHBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBUSDT"

    def __str__(self):
        return "PHBUSDT"

    def __call__(self):
        return "PHBUSDT"


PHBUSDT = PHBUSDT(*PHBUSDT._fields)
"""
    name: PHBUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHXBNB(Symbol):
    """
        name: PHXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHXBNB"

    def __str__(self):
        return "PHXBNB"

    def __call__(self):
        return "PHXBNB"


PHXBNB = PHXBNB(*PHXBNB._fields)
"""
    name: PHXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHXBTC(Symbol):
    """
        name: PHXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHXBTC"

    def __str__(self):
        return "PHXBTC"

    def __call__(self):
        return "PHXBTC"


PHXBTC = PHXBTC(*PHXBTC._fields)
"""
    name: PHXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHXETH(Symbol):
    """
        name: PHXETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHXETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHXETH"

    def __str__(self):
        return "PHXETH"

    def __call__(self):
        return "PHXETH"


PHXETH = PHXETH(*PHXETH._fields)
"""
    name: PHXETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PIVXBNB(Symbol):
    """
        name: PIVXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PIVXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PIVXBNB"

    def __str__(self):
        return "PIVXBNB"

    def __call__(self):
        return "PIVXBNB"


PIVXBNB = PIVXBNB(*PIVXBNB._fields)
"""
    name: PIVXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PIVXBTC(Symbol):
    """
        name: PIVXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PIVXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PIVXBTC"

    def __str__(self):
        return "PIVXBTC"

    def __call__(self):
        return "PIVXBTC"


PIVXBTC = PIVXBTC(*PIVXBTC._fields)
"""
    name: PIVXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PLABNB(Symbol):
    """
        name: PLABNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PLABNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLABNB"

    def __str__(self):
        return "PLABNB"

    def __call__(self):
        return "PLABNB"


PLABNB = PLABNB(*PLABNB._fields)
"""
    name: PLABNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PLABTC(Symbol):
    """
        name: PLABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PLABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLABTC"

    def __str__(self):
        return "PLABTC"

    def __call__(self):
        return "PLABTC"


PLABTC = PLABTC(*PLABTC._fields)
"""
    name: PLABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PLABUSD(Symbol):
    """
        name: PLABUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PLABUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLABUSD"

    def __str__(self):
        return "PLABUSD"

    def __call__(self):
        return "PLABUSD"


PLABUSD = PLABUSD(*PLABUSD._fields)
"""
    name: PLABUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PLAUSDT(Symbol):
    """
        name: PLAUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PLAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLAUSDT"

    def __str__(self):
        return "PLAUSDT"

    def __call__(self):
        return "PLAUSDT"


PLAUSDT = PLAUSDT(*PLAUSDT._fields)
"""
    name: PLAUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PNTBTC(Symbol):
    """
        name: PNTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PNTBTC"

    def __str__(self):
        return "PNTBTC"

    def __call__(self):
        return "PNTBTC"


PNTBTC = PNTBTC(*PNTBTC._fields)
"""
    name: PNTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PNTUSDT(Symbol):
    """
        name: PNTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PNTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PNTUSDT"

    def __str__(self):
        return "PNTUSDT"

    def __call__(self):
        return "PNTUSDT"


PNTUSDT = PNTUSDT(*PNTUSDT._fields)
"""
    name: PNTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POABNB(Symbol):
    """
        name: POABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POABNB"

    def __str__(self):
        return "POABNB"

    def __call__(self):
        return "POABNB"


POABNB = POABNB(*POABNB._fields)
"""
    name: POABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POABTC(Symbol):
    """
        name: POABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POABTC"

    def __str__(self):
        return "POABTC"

    def __call__(self):
        return "POABTC"


POABTC = POABTC(*POABTC._fields)
"""
    name: POABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POAETH(Symbol):
    """
        name: POAETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POAETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POAETH"

    def __str__(self):
        return "POAETH"

    def __call__(self):
        return "POAETH"


POAETH = POAETH(*POAETH._fields)
"""
    name: POAETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POEBTC(Symbol):
    """
        name: POEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POEBTC"

    def __str__(self):
        return "POEBTC"

    def __call__(self):
        return "POEBTC"


POEBTC = POEBTC(*POEBTC._fields)
"""
    name: POEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POEETH(Symbol):
    """
        name: POEETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POEETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POEETH"

    def __str__(self):
        return "POEETH"

    def __call__(self):
        return "POEETH"


POEETH = POEETH(*POEETH._fields)
"""
    name: POEETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLSBNB(Symbol):
    """
        name: POLSBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLSBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLSBNB"

    def __str__(self):
        return "POLSBNB"

    def __call__(self):
        return "POLSBNB"


POLSBNB = POLSBNB(*POLSBNB._fields)
"""
    name: POLSBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLSBTC(Symbol):
    """
        name: POLSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLSBTC"

    def __str__(self):
        return "POLSBTC"

    def __call__(self):
        return "POLSBTC"


POLSBTC = POLSBTC(*POLSBTC._fields)
"""
    name: POLSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLSBUSD(Symbol):
    """
        name: POLSBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLSBUSD"

    def __str__(self):
        return "POLSBUSD"

    def __call__(self):
        return "POLSBUSD"


POLSBUSD = POLSBUSD(*POLSBUSD._fields)
"""
    name: POLSBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLSUSDT(Symbol):
    """
        name: POLSUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLSUSDT"

    def __str__(self):
        return "POLSUSDT"

    def __call__(self):
        return "POLSUSDT"


POLSUSDT = POLSUSDT(*POLSUSDT._fields)
"""
    name: POLSUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYBNB(Symbol):
    """
        name: POLYBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYBNB"

    def __str__(self):
        return "POLYBNB"

    def __call__(self):
        return "POLYBNB"


POLYBNB = POLYBNB(*POLYBNB._fields)
"""
    name: POLYBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYBTC(Symbol):
    """
        name: POLYBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYBTC"

    def __str__(self):
        return "POLYBTC"

    def __call__(self):
        return "POLYBTC"


POLYBTC = POLYBTC(*POLYBTC._fields)
"""
    name: POLYBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYBUSD(Symbol):
    """
        name: POLYBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYBUSD"

    def __str__(self):
        return "POLYBUSD"

    def __call__(self):
        return "POLYBUSD"


POLYBUSD = POLYBUSD(*POLYBUSD._fields)
"""
    name: POLYBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYUSDT(Symbol):
    """
        name: POLYUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYUSDT"

    def __str__(self):
        return "POLYUSDT"

    def __call__(self):
        return "POLYUSDT"


POLYUSDT = POLYUSDT(*POLYUSDT._fields)
"""
    name: POLYUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYXBTC(Symbol):
    """
        name: POLYXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYXBTC"

    def __str__(self):
        return "POLYXBTC"

    def __call__(self):
        return "POLYXBTC"


POLYXBTC = POLYXBTC(*POLYXBTC._fields)
"""
    name: POLYXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYXBUSD(Symbol):
    """
        name: POLYXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "POLYXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYXBUSD"

    def __str__(self):
        return "POLYXBUSD"

    def __call__(self):
        return "POLYXBUSD"


POLYXBUSD = POLYXBUSD(*POLYXBUSD._fields)
"""
    name: POLYXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class POLYXUSDT(Symbol):
    """
        name: POLYXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "POLYXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYXUSDT"

    def __str__(self):
        return "POLYXUSDT"

    def __call__(self):
        return "POLYXUSDT"


POLYXUSDT = POLYXUSDT(*POLYXUSDT._fields)
"""
    name: POLYXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PONDBTC(Symbol):
    """
        name: PONDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PONDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PONDBTC"

    def __str__(self):
        return "PONDBTC"

    def __call__(self):
        return "PONDBTC"


PONDBTC = PONDBTC(*PONDBTC._fields)
"""
    name: PONDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PONDBUSD(Symbol):
    """
        name: PONDBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PONDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PONDBUSD"

    def __str__(self):
        return "PONDBUSD"

    def __call__(self):
        return "PONDBUSD"


PONDBUSD = PONDBUSD(*PONDBUSD._fields)
"""
    name: PONDBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PONDUSDT(Symbol):
    """
        name: PONDUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PONDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PONDUSDT"

    def __str__(self):
        return "PONDUSDT"

    def __call__(self):
        return "PONDUSDT"


PONDUSDT = PONDUSDT(*PONDUSDT._fields)
"""
    name: PONDUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PORTOBTC(Symbol):
    """
        name: PORTOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PORTOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOBTC"

    def __str__(self):
        return "PORTOBTC"

    def __call__(self):
        return "PORTOBTC"


PORTOBTC = PORTOBTC(*PORTOBTC._fields)
"""
    name: PORTOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PORTOBUSD(Symbol):
    """
        name: PORTOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PORTOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOBUSD"

    def __str__(self):
        return "PORTOBUSD"

    def __call__(self):
        return "PORTOBUSD"


PORTOBUSD = PORTOBUSD(*PORTOBUSD._fields)
"""
    name: PORTOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PORTOEUR(Symbol):
    """
        name: PORTOEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PORTOEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOEUR"

    def __str__(self):
        return "PORTOEUR"

    def __call__(self):
        return "PORTOEUR"


PORTOEUR = PORTOEUR(*PORTOEUR._fields)
"""
    name: PORTOEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PORTOTRY(Symbol):
    """
        name: PORTOTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PORTOTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOTRY"

    def __str__(self):
        return "PORTOTRY"

    def __call__(self):
        return "PORTOTRY"


PORTOTRY = PORTOTRY(*PORTOTRY._fields)
"""
    name: PORTOTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class PORTOUSDT(Symbol):
    """
        name: PORTOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PORTOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOUSDT"

    def __str__(self):
        return "PORTOUSDT"

    def __call__(self):
        return "PORTOUSDT"


PORTOUSDT = PORTOUSDT(*PORTOUSDT._fields)
"""
    name: PORTOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class POWRBNB(Symbol):
    """
        name: POWRBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRBNB"

    def __str__(self):
        return "POWRBNB"

    def __call__(self):
        return "POWRBNB"


POWRBNB = POWRBNB(*POWRBNB._fields)
"""
    name: POWRBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POWRBTC(Symbol):
    """
        name: POWRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRBTC"

    def __str__(self):
        return "POWRBTC"

    def __call__(self):
        return "POWRBTC"


POWRBTC = POWRBTC(*POWRBTC._fields)
"""
    name: POWRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POWRBUSD(Symbol):
    """
        name: POWRBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRBUSD"

    def __str__(self):
        return "POWRBUSD"

    def __call__(self):
        return "POWRBUSD"


POWRBUSD = POWRBUSD(*POWRBUSD._fields)
"""
    name: POWRBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POWRETH(Symbol):
    """
        name: POWRETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRETH"

    def __str__(self):
        return "POWRETH"

    def __call__(self):
        return "POWRETH"


POWRETH = POWRETH(*POWRETH._fields)
"""
    name: POWRETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POWRUSDT(Symbol):
    """
        name: POWRUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRUSDT"

    def __str__(self):
        return "POWRUSDT"

    def __call__(self):
        return "POWRUSDT"


POWRUSDT = POWRUSDT(*POWRUSDT._fields)
"""
    name: POWRUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PPTBTC(Symbol):
    """
        name: PPTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PPTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PPTBTC"

    def __str__(self):
        return "PPTBTC"

    def __call__(self):
        return "PPTBTC"


PPTBTC = PPTBTC(*PPTBTC._fields)
"""
    name: PPTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PPTETH(Symbol):
    """
        name: PPTETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PPTETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PPTETH"

    def __str__(self):
        return "PPTETH"

    def __call__(self):
        return "PPTETH"


PPTETH = PPTETH(*PPTETH._fields)
"""
    name: PPTETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROMBNB(Symbol):
    """
        name: PROMBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROMBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROMBNB"

    def __str__(self):
        return "PROMBNB"

    def __call__(self):
        return "PROMBNB"


PROMBNB = PROMBNB(*PROMBNB._fields)
"""
    name: PROMBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROMBTC(Symbol):
    """
        name: PROMBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROMBTC"

    def __str__(self):
        return "PROMBTC"

    def __call__(self):
        return "PROMBTC"


PROMBTC = PROMBTC(*PROMBTC._fields)
"""
    name: PROMBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROMBUSD(Symbol):
    """
        name: PROMBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROMBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROMBUSD"

    def __str__(self):
        return "PROMBUSD"

    def __call__(self):
        return "PROMBUSD"


PROMBUSD = PROMBUSD(*PROMBUSD._fields)
"""
    name: PROMBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROMUSDT(Symbol):
    """
        name: PROMUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROMUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROMUSDT"

    def __str__(self):
        return "PROMUSDT"

    def __call__(self):
        return "PROMUSDT"


PROMUSDT = PROMUSDT(*PROMUSDT._fields)
"""
    name: PROMUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROSBUSD(Symbol):
    """
        name: PROSBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROSBUSD"

    def __str__(self):
        return "PROSBUSD"

    def __call__(self):
        return "PROSBUSD"


PROSBUSD = PROSBUSD(*PROSBUSD._fields)
"""
    name: PROSBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROSETH(Symbol):
    """
        name: PROSETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROSETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROSETH"

    def __str__(self):
        return "PROSETH"

    def __call__(self):
        return "PROSETH"


PROSETH = PROSETH(*PROSETH._fields)
"""
    name: PROSETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROSUSDT(Symbol):
    """
        name: PROSUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROSUSDT"

    def __str__(self):
        return "PROSUSDT"

    def __call__(self):
        return "PROSUSDT"


PROSUSDT = PROSUSDT(*PROSUSDT._fields)
"""
    name: PROSUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PSGBTC(Symbol):
    """
        name: PSGBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PSGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSGBTC"

    def __str__(self):
        return "PSGBTC"

    def __call__(self):
        return "PSGBTC"


PSGBTC = PSGBTC(*PSGBTC._fields)
"""
    name: PSGBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PSGBUSD(Symbol):
    """
        name: PSGBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PSGBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSGBUSD"

    def __str__(self):
        return "PSGBUSD"

    def __call__(self):
        return "PSGBUSD"


PSGBUSD = PSGBUSD(*PSGBUSD._fields)
"""
    name: PSGBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PSGUSDT(Symbol):
    """
        name: PSGUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PSGUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSGUSDT"

    def __str__(self):
        return "PSGUSDT"

    def __call__(self):
        return "PSGUSDT"


PSGUSDT = PSGUSDT(*PSGUSDT._fields)
"""
    name: PSGUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PUNDIXBUSD(Symbol):
    """
        name: PUNDIXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PUNDIXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIXBUSD"

    def __str__(self):
        return "PUNDIXBUSD"

    def __call__(self):
        return "PUNDIXBUSD"


PUNDIXBUSD = PUNDIXBUSD(*PUNDIXBUSD._fields)
"""
    name: PUNDIXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PUNDIXETH(Symbol):
    """
        name: PUNDIXETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PUNDIXETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIXETH"

    def __str__(self):
        return "PUNDIXETH"

    def __call__(self):
        return "PUNDIXETH"


PUNDIXETH = PUNDIXETH(*PUNDIXETH._fields)
"""
    name: PUNDIXETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PUNDIXUSDT(Symbol):
    """
        name: PUNDIXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PUNDIXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIXUSDT"

    def __str__(self):
        return "PUNDIXUSDT"

    def __call__(self):
        return "PUNDIXUSDT"


PUNDIXUSDT = PUNDIXUSDT(*PUNDIXUSDT._fields)
"""
    name: PUNDIXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PYRBTC(Symbol):
    """
        name: PYRBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PYRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYRBTC"

    def __str__(self):
        return "PYRBTC"

    def __call__(self):
        return "PYRBTC"


PYRBTC = PYRBTC(*PYRBTC._fields)
"""
    name: PYRBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PYRBUSD(Symbol):
    """
        name: PYRBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PYRBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYRBUSD"

    def __str__(self):
        return "PYRBUSD"

    def __call__(self):
        return "PYRBUSD"


PYRBUSD = PYRBUSD(*PYRBUSD._fields)
"""
    name: PYRBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PYRUSDT(Symbol):
    """
        name: PYRUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PYRUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYRUSDT"

    def __str__(self):
        return "PYRUSDT"

    def __call__(self):
        return "PYRUSDT"


PYRUSDT = PYRUSDT(*PYRUSDT._fields)
"""
    name: PYRUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QIBNB(Symbol):
    """
        name: QIBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QIBNB"

    def __str__(self):
        return "QIBNB"

    def __call__(self):
        return "QIBNB"


QIBNB = QIBNB(*QIBNB._fields)
"""
    name: QIBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QIBTC(Symbol):
    """
        name: QIBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QIBTC"

    def __str__(self):
        return "QIBTC"

    def __call__(self):
        return "QIBTC"


QIBTC = QIBTC(*QIBTC._fields)
"""
    name: QIBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QIBUSD(Symbol):
    """
        name: QIBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QIBUSD"

    def __str__(self):
        return "QIBUSD"

    def __call__(self):
        return "QIBUSD"


QIBUSD = QIBUSD(*QIBUSD._fields)
"""
    name: QIBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QIUSDT(Symbol):
    """
        name: QIUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QIUSDT"

    def __str__(self):
        return "QIUSDT"

    def __call__(self):
        return "QIUSDT"


QIUSDT = QIUSDT(*QIUSDT._fields)
"""
    name: QIUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QKCBTC(Symbol):
    """
        name: QKCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QKCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKCBTC"

    def __str__(self):
        return "QKCBTC"

    def __call__(self):
        return "QKCBTC"


QKCBTC = QKCBTC(*QKCBTC._fields)
"""
    name: QKCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QKCBUSD(Symbol):
    """
        name: QKCBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QKCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKCBUSD"

    def __str__(self):
        return "QKCBUSD"

    def __call__(self):
        return "QKCBUSD"


QKCBUSD = QKCBUSD(*QKCBUSD._fields)
"""
    name: QKCBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QKCETH(Symbol):
    """
        name: QKCETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QKCETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKCETH"

    def __str__(self):
        return "QKCETH"

    def __call__(self):
        return "QKCETH"


QKCETH = QKCETH(*QKCETH._fields)
"""
    name: QKCETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QKCUSDT(Symbol):
    """
        name: QKCUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QKCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKCUSDT"

    def __str__(self):
        return "QKCUSDT"

    def __call__(self):
        return "QKCUSDT"


QKCUSDT = QKCUSDT(*QKCUSDT._fields)
"""
    name: QKCUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QLCBNB(Symbol):
    """
        name: QLCBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QLCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QLCBNB"

    def __str__(self):
        return "QLCBNB"

    def __call__(self):
        return "QLCBNB"


QLCBNB = QLCBNB(*QLCBNB._fields)
"""
    name: QLCBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QLCBTC(Symbol):
    """
        name: QLCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QLCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QLCBTC"

    def __str__(self):
        return "QLCBTC"

    def __call__(self):
        return "QLCBTC"


QLCBTC = QLCBTC(*QLCBTC._fields)
"""
    name: QLCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QLCETH(Symbol):
    """
        name: QLCETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QLCETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QLCETH"

    def __str__(self):
        return "QLCETH"

    def __call__(self):
        return "QLCETH"


QLCETH = QLCETH(*QLCETH._fields)
"""
    name: QLCETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QNTBNB(Symbol):
    """
        name: QNTBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QNTBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNTBNB"

    def __str__(self):
        return "QNTBNB"

    def __call__(self):
        return "QNTBNB"


QNTBNB = QNTBNB(*QNTBNB._fields)
"""
    name: QNTBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QNTBTC(Symbol):
    """
        name: QNTBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNTBTC"

    def __str__(self):
        return "QNTBTC"

    def __call__(self):
        return "QNTBTC"


QNTBTC = QNTBTC(*QNTBTC._fields)
"""
    name: QNTBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QNTBUSD(Symbol):
    """
        name: QNTBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QNTBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNTBUSD"

    def __str__(self):
        return "QNTBUSD"

    def __call__(self):
        return "QNTBUSD"


QNTBUSD = QNTBUSD(*QNTBUSD._fields)
"""
    name: QNTBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QNTUSDT(Symbol):
    """
        name: QNTUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QNTUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNTUSDT"

    def __str__(self):
        return "QNTUSDT"

    def __call__(self):
        return "QNTUSDT"


QNTUSDT = QNTUSDT(*QNTUSDT._fields)
"""
    name: QNTUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QSPBNB(Symbol):
    """
        name: QSPBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QSPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QSPBNB"

    def __str__(self):
        return "QSPBNB"

    def __call__(self):
        return "QSPBNB"


QSPBNB = QSPBNB(*QSPBNB._fields)
"""
    name: QSPBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QSPBTC(Symbol):
    """
        name: QSPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QSPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QSPBTC"

    def __str__(self):
        return "QSPBTC"

    def __call__(self):
        return "QSPBTC"


QSPBTC = QSPBTC(*QSPBTC._fields)
"""
    name: QSPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QSPETH(Symbol):
    """
        name: QSPETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QSPETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QSPETH"

    def __str__(self):
        return "QSPETH"

    def __call__(self):
        return "QSPETH"


QSPETH = QSPETH(*QSPETH._fields)
"""
    name: QSPETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QTUMBNB(Symbol):
    """
        name: QTUMBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QTUMBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMBNB"

    def __str__(self):
        return "QTUMBNB"

    def __call__(self):
        return "QTUMBNB"


QTUMBNB = QTUMBNB(*QTUMBNB._fields)
"""
    name: QTUMBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QTUMBTC(Symbol):
    """
        name: QTUMBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QTUMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMBTC"

    def __str__(self):
        return "QTUMBTC"

    def __call__(self):
        return "QTUMBTC"


QTUMBTC = QTUMBTC(*QTUMBTC._fields)
"""
    name: QTUMBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QTUMBUSD(Symbol):
    """
        name: QTUMBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QTUMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMBUSD"

    def __str__(self):
        return "QTUMBUSD"

    def __call__(self):
        return "QTUMBUSD"


QTUMBUSD = QTUMBUSD(*QTUMBUSD._fields)
"""
    name: QTUMBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QTUMETH(Symbol):
    """
        name: QTUMETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QTUMETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMETH"

    def __str__(self):
        return "QTUMETH"

    def __call__(self):
        return "QTUMETH"


QTUMETH = QTUMETH(*QTUMETH._fields)
"""
    name: QTUMETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QTUMUSDT(Symbol):
    """
        name: QTUMUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QTUMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMUSDT"

    def __str__(self):
        return "QTUMUSDT"

    def __call__(self):
        return "QTUMUSDT"


QTUMUSDT = QTUMUSDT(*QTUMUSDT._fields)
"""
    name: QTUMUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QUICKBNB(Symbol):
    """
        name: QUICKBNB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QUICKBNB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICKBNB"

    def __str__(self):
        return "QUICKBNB"

    def __call__(self):
        return "QUICKBNB"


QUICKBNB = QUICKBNB(*QUICKBNB._fields)
"""
    name: QUICKBNB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QUICKBTC(Symbol):
    """
        name: QUICKBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QUICKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICKBTC"

    def __str__(self):
        return "QUICKBTC"

    def __call__(self):
        return "QUICKBTC"


QUICKBTC = QUICKBTC(*QUICKBTC._fields)
"""
    name: QUICKBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QUICKBUSD(Symbol):
    """
        name: QUICKBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QUICKBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICKBUSD"

    def __str__(self):
        return "QUICKBUSD"

    def __call__(self):
        return "QUICKBUSD"


QUICKBUSD = QUICKBUSD(*QUICKBUSD._fields)
"""
    name: QUICKBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QUICKUSDT(Symbol):
    """
        name: QUICKUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QUICKUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICKUSDT"

    def __str__(self):
        return "QUICKUSDT"

    def __call__(self):
        return "QUICKUSDT"


QUICKUSDT = QUICKUSDT(*QUICKUSDT._fields)
"""
    name: QUICKUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RADBNB(Symbol):
    """
        name: RADBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RADBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RADBNB"

    def __str__(self):
        return "RADBNB"

    def __call__(self):
        return "RADBNB"


RADBNB = RADBNB(*RADBNB._fields)
"""
    name: RADBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RADBTC(Symbol):
    """
        name: RADBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RADBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RADBTC"

    def __str__(self):
        return "RADBTC"

    def __call__(self):
        return "RADBTC"


RADBTC = RADBTC(*RADBTC._fields)
"""
    name: RADBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RADBUSD(Symbol):
    """
        name: RADBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RADBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RADBUSD"

    def __str__(self):
        return "RADBUSD"

    def __call__(self):
        return "RADBUSD"


RADBUSD = RADBUSD(*RADBUSD._fields)
"""
    name: RADBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RADUSDT(Symbol):
    """
        name: RADUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RADUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RADUSDT"

    def __str__(self):
        return "RADUSDT"

    def __call__(self):
        return "RADUSDT"


RADUSDT = RADUSDT(*RADUSDT._fields)
"""
    name: RADUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RAMPBTC(Symbol):
    """
        name: RAMPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAMPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAMPBTC"

    def __str__(self):
        return "RAMPBTC"

    def __call__(self):
        return "RAMPBTC"


RAMPBTC = RAMPBTC(*RAMPBTC._fields)
"""
    name: RAMPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAMPBUSD(Symbol):
    """
        name: RAMPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAMPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAMPBUSD"

    def __str__(self):
        return "RAMPBUSD"

    def __call__(self):
        return "RAMPBUSD"


RAMPBUSD = RAMPBUSD(*RAMPBUSD._fields)
"""
    name: RAMPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAMPUSDT(Symbol):
    """
        name: RAMPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAMPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAMPUSDT"

    def __str__(self):
        return "RAMPUSDT"

    def __call__(self):
        return "RAMPUSDT"


RAMPUSDT = RAMPUSDT(*RAMPUSDT._fields)
"""
    name: RAMPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAREBNB(Symbol):
    """
        name: RAREBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAREBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAREBNB"

    def __str__(self):
        return "RAREBNB"

    def __call__(self):
        return "RAREBNB"


RAREBNB = RAREBNB(*RAREBNB._fields)
"""
    name: RAREBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAREBTC(Symbol):
    """
        name: RAREBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAREBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAREBTC"

    def __str__(self):
        return "RAREBTC"

    def __call__(self):
        return "RAREBTC"


RAREBTC = RAREBTC(*RAREBTC._fields)
"""
    name: RAREBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAREBUSD(Symbol):
    """
        name: RAREBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAREBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAREBUSD"

    def __str__(self):
        return "RAREBUSD"

    def __call__(self):
        return "RAREBUSD"


RAREBUSD = RAREBUSD(*RAREBUSD._fields)
"""
    name: RAREBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAREUSDT(Symbol):
    """
        name: RAREUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAREUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAREUSDT"

    def __str__(self):
        return "RAREUSDT"

    def __call__(self):
        return "RAREUSDT"


RAREUSDT = RAREUSDT(*RAREUSDT._fields)
"""
    name: RAREUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAYBNB(Symbol):
    """
        name: RAYBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAYBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAYBNB"

    def __str__(self):
        return "RAYBNB"

    def __call__(self):
        return "RAYBNB"


RAYBNB = RAYBNB(*RAYBNB._fields)
"""
    name: RAYBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAYBUSD(Symbol):
    """
        name: RAYBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAYBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAYBUSD"

    def __str__(self):
        return "RAYBUSD"

    def __call__(self):
        return "RAYBUSD"


RAYBUSD = RAYBUSD(*RAYBUSD._fields)
"""
    name: RAYBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAYUSDT(Symbol):
    """
        name: RAYUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAYUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAYUSDT"

    def __str__(self):
        return "RAYUSDT"

    def __call__(self):
        return "RAYUSDT"


RAYUSDT = RAYUSDT(*RAYUSDT._fields)
"""
    name: RAYUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RCNBNB(Symbol):
    """
        name: RCNBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RCNBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RCNBNB"

    def __str__(self):
        return "RCNBNB"

    def __call__(self):
        return "RCNBNB"


RCNBNB = RCNBNB(*RCNBNB._fields)
"""
    name: RCNBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RCNBTC(Symbol):
    """
        name: RCNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RCNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RCNBTC"

    def __str__(self):
        return "RCNBTC"

    def __call__(self):
        return "RCNBTC"


RCNBTC = RCNBTC(*RCNBTC._fields)
"""
    name: RCNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RCNETH(Symbol):
    """
        name: RCNETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RCNETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RCNETH"

    def __str__(self):
        return "RCNETH"

    def __call__(self):
        return "RCNETH"


RCNETH = RCNETH(*RCNETH._fields)
"""
    name: RCNETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNBNB(Symbol):
    """
        name: RDNBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNBNB"

    def __str__(self):
        return "RDNBNB"

    def __call__(self):
        return "RDNBNB"


RDNBNB = RDNBNB(*RDNBNB._fields)
"""
    name: RDNBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNBTC(Symbol):
    """
        name: RDNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNBTC"

    def __str__(self):
        return "RDNBTC"

    def __call__(self):
        return "RDNBTC"


RDNBTC = RDNBTC(*RDNBTC._fields)
"""
    name: RDNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNETH(Symbol):
    """
        name: RDNETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNETH"

    def __str__(self):
        return "RDNETH"

    def __call__(self):
        return "RDNETH"


RDNETH = RDNETH(*RDNETH._fields)
"""
    name: RDNETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNTBTC(Symbol):
    """
        name: RDNTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNTBTC"

    def __str__(self):
        return "RDNTBTC"

    def __call__(self):
        return "RDNTBTC"


RDNTBTC = RDNTBTC(*RDNTBTC._fields)
"""
    name: RDNTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNTTUSD(Symbol):
    """
        name: RDNTTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNTTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNTTUSD"

    def __str__(self):
        return "RDNTTUSD"

    def __call__(self):
        return "RDNTTUSD"


RDNTTUSD = RDNTTUSD(*RDNTTUSD._fields)
"""
    name: RDNTTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNTUSDT(Symbol):
    """
        name: RDNTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RDNTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNTUSDT"

    def __str__(self):
        return "RDNTUSDT"

    def __call__(self):
        return "RDNTUSDT"


RDNTUSDT = RDNTUSDT(*RDNTUSDT._fields)
"""
    name: RDNTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REEFBIDR(Symbol):
    """
        name: REEFBIDR
        significant_digits: None
        tick_size: 0.10
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "REEFBIDR"
    significant_digits: int = None
    tick_size: int = 0.10
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFBIDR"

    def __str__(self):
        return "REEFBIDR"

    def __call__(self):
        return "REEFBIDR"


REEFBIDR = REEFBIDR(*REEFBIDR._fields)
"""
    name: REEFBIDR
    significant_digits: None
    tick_size: 0.10
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class REEFBTC(Symbol):
    """
        name: REEFBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REEFBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFBTC"

    def __str__(self):
        return "REEFBTC"

    def __call__(self):
        return "REEFBTC"


REEFBTC = REEFBTC(*REEFBTC._fields)
"""
    name: REEFBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REEFBUSD(Symbol):
    """
        name: REEFBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REEFBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFBUSD"

    def __str__(self):
        return "REEFBUSD"

    def __call__(self):
        return "REEFBUSD"


REEFBUSD = REEFBUSD(*REEFBUSD._fields)
"""
    name: REEFBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REEFTRY(Symbol):
    """
        name: REEFTRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REEFTRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFTRY"

    def __str__(self):
        return "REEFTRY"

    def __call__(self):
        return "REEFTRY"


REEFTRY = REEFTRY(*REEFTRY._fields)
"""
    name: REEFTRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class REEFUSDT(Symbol):
    """
        name: REEFUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REEFUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFUSDT"

    def __str__(self):
        return "REEFUSDT"

    def __call__(self):
        return "REEFUSDT"


REEFUSDT = REEFUSDT(*REEFUSDT._fields)
"""
    name: REEFUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REIBNB(Symbol):
    """
        name: REIBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REIBNB"

    def __str__(self):
        return "REIBNB"

    def __call__(self):
        return "REIBNB"


REIBNB = REIBNB(*REIBNB._fields)
"""
    name: REIBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REIBUSD(Symbol):
    """
        name: REIBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REIBUSD"

    def __str__(self):
        return "REIBUSD"

    def __call__(self):
        return "REIBUSD"


REIBUSD = REIBUSD(*REIBUSD._fields)
"""
    name: REIBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REIETH(Symbol):
    """
        name: REIETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REIETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REIETH"

    def __str__(self):
        return "REIETH"

    def __call__(self):
        return "REIETH"


REIETH = REIETH(*REIETH._fields)
"""
    name: REIETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REIUSDT(Symbol):
    """
        name: REIUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REIUSDT"

    def __str__(self):
        return "REIUSDT"

    def __call__(self):
        return "REIUSDT"


REIUSDT = REIUSDT(*REIUSDT._fields)
"""
    name: REIUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RENBNB(Symbol):
    """
        name: RENBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBNB"

    def __str__(self):
        return "RENBNB"

    def __call__(self):
        return "RENBNB"


RENBNB = RENBNB(*RENBNB._fields)
"""
    name: RENBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENBTC(Symbol):
    """
        name: RENBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBTC"

    def __str__(self):
        return "RENBTC"

    def __call__(self):
        return "RENBTC"


RENBTC = RENBTC(*RENBTC._fields)
"""
    name: RENBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENBTCBTC(Symbol):
    """
        name: RENBTCBTC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBTCBTC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBTCBTC"

    def __str__(self):
        return "RENBTCBTC"

    def __call__(self):
        return "RENBTCBTC"


RENBTCBTC = RENBTCBTC(*RENBTCBTC._fields)
"""
    name: RENBTCBTC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENBTCETH(Symbol):
    """
        name: RENBTCETH
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBTCETH"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBTCETH"

    def __str__(self):
        return "RENBTCETH"

    def __call__(self):
        return "RENBTCETH"


RENBTCETH = RENBTCETH(*RENBTCETH._fields)
"""
    name: RENBTCETH
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENBUSD(Symbol):
    """
        name: RENBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBUSD"

    def __str__(self):
        return "RENBUSD"

    def __call__(self):
        return "RENBUSD"


RENBUSD = RENBUSD(*RENBUSD._fields)
"""
    name: RENBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENUSDT(Symbol):
    """
        name: RENUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENUSDT"

    def __str__(self):
        return "RENUSDT"

    def __call__(self):
        return "RENUSDT"


RENUSDT = RENUSDT(*RENUSDT._fields)
"""
    name: RENUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REPBNB(Symbol):
    """
        name: REPBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REPBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REPBNB"

    def __str__(self):
        return "REPBNB"

    def __call__(self):
        return "REPBNB"


REPBNB = REPBNB(*REPBNB._fields)
"""
    name: REPBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REPBTC(Symbol):
    """
        name: REPBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REPBTC"

    def __str__(self):
        return "REPBTC"

    def __call__(self):
        return "REPBTC"


REPBTC = REPBTC(*REPBTC._fields)
"""
    name: REPBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REPBUSD(Symbol):
    """
        name: REPBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REPBUSD"

    def __str__(self):
        return "REPBUSD"

    def __call__(self):
        return "REPBUSD"


REPBUSD = REPBUSD(*REPBUSD._fields)
"""
    name: REPBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REPUSDT(Symbol):
    """
        name: REPUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REPUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REPUSDT"

    def __str__(self):
        return "REPUSDT"

    def __call__(self):
        return "REPUSDT"


REPUSDT = REPUSDT(*REPUSDT._fields)
"""
    name: REPUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REQBTC(Symbol):
    """
        name: REQBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REQBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQBTC"

    def __str__(self):
        return "REQBTC"

    def __call__(self):
        return "REQBTC"


REQBTC = REQBTC(*REQBTC._fields)
"""
    name: REQBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REQBUSD(Symbol):
    """
        name: REQBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REQBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQBUSD"

    def __str__(self):
        return "REQBUSD"

    def __call__(self):
        return "REQBUSD"


REQBUSD = REQBUSD(*REQBUSD._fields)
"""
    name: REQBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REQETH(Symbol):
    """
        name: REQETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REQETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQETH"

    def __str__(self):
        return "REQETH"

    def __call__(self):
        return "REQETH"


REQETH = REQETH(*REQETH._fields)
"""
    name: REQETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REQUSDT(Symbol):
    """
        name: REQUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REQUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQUSDT"

    def __str__(self):
        return "REQUSDT"

    def __call__(self):
        return "REQUSDT"


REQUSDT = REQUSDT(*REQUSDT._fields)
"""
    name: REQUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RGTBNB(Symbol):
    """
        name: RGTBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RGTBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RGTBNB"

    def __str__(self):
        return "RGTBNB"

    def __call__(self):
        return "RGTBNB"


RGTBNB = RGTBNB(*RGTBNB._fields)
"""
    name: RGTBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RGTBTC(Symbol):
    """
        name: RGTBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RGTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RGTBTC"

    def __str__(self):
        return "RGTBTC"

    def __call__(self):
        return "RGTBTC"


RGTBTC = RGTBTC(*RGTBTC._fields)
"""
    name: RGTBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RGTBUSD(Symbol):
    """
        name: RGTBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RGTBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RGTBUSD"

    def __str__(self):
        return "RGTBUSD"

    def __call__(self):
        return "RGTBUSD"


RGTBUSD = RGTBUSD(*RGTBUSD._fields)
"""
    name: RGTBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RGTUSDT(Symbol):
    """
        name: RGTUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RGTUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RGTUSDT"

    def __str__(self):
        return "RGTUSDT"

    def __call__(self):
        return "RGTUSDT"


RGTUSDT = RGTUSDT(*RGTUSDT._fields)
"""
    name: RGTUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RIFBTC(Symbol):
    """
        name: RIFBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RIFBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RIFBTC"

    def __str__(self):
        return "RIFBTC"

    def __call__(self):
        return "RIFBTC"


RIFBTC = RIFBTC(*RIFBTC._fields)
"""
    name: RIFBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RIFUSDT(Symbol):
    """
        name: RIFUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RIFUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RIFUSDT"

    def __str__(self):
        return "RIFUSDT"

    def __call__(self):
        return "RIFUSDT"


RIFUSDT = RIFUSDT(*RIFUSDT._fields)
"""
    name: RIFUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RLCBNB(Symbol):
    """
        name: RLCBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RLCBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCBNB"

    def __str__(self):
        return "RLCBNB"

    def __call__(self):
        return "RLCBNB"


RLCBNB = RLCBNB(*RLCBNB._fields)
"""
    name: RLCBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RLCBTC(Symbol):
    """
        name: RLCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RLCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCBTC"

    def __str__(self):
        return "RLCBTC"

    def __call__(self):
        return "RLCBTC"


RLCBTC = RLCBTC(*RLCBTC._fields)
"""
    name: RLCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RLCBUSD(Symbol):
    """
        name: RLCBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RLCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCBUSD"

    def __str__(self):
        return "RLCBUSD"

    def __call__(self):
        return "RLCBUSD"


RLCBUSD = RLCBUSD(*RLCBUSD._fields)
"""
    name: RLCBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RLCETH(Symbol):
    """
        name: RLCETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RLCETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCETH"

    def __str__(self):
        return "RLCETH"

    def __call__(self):
        return "RLCETH"


RLCETH = RLCETH(*RLCETH._fields)
"""
    name: RLCETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RLCUSDT(Symbol):
    """
        name: RLCUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RLCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCUSDT"

    def __str__(self):
        return "RLCUSDT"

    def __call__(self):
        return "RLCUSDT"


RLCUSDT = RLCUSDT(*RLCUSDT._fields)
"""
    name: RLCUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RNDRBTC(Symbol):
    """
        name: RNDRBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RNDRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRBTC"

    def __str__(self):
        return "RNDRBTC"

    def __call__(self):
        return "RNDRBTC"


RNDRBTC = RNDRBTC(*RNDRBTC._fields)
"""
    name: RNDRBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RNDRBUSD(Symbol):
    """
        name: RNDRBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RNDRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRBUSD"

    def __str__(self):
        return "RNDRBUSD"

    def __call__(self):
        return "RNDRBUSD"


RNDRBUSD = RNDRBUSD(*RNDRBUSD._fields)
"""
    name: RNDRBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RNDRTRY(Symbol):
    """
        name: RNDRTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RNDRTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRTRY"

    def __str__(self):
        return "RNDRTRY"

    def __call__(self):
        return "RNDRTRY"


RNDRTRY = RNDRTRY(*RNDRTRY._fields)
"""
    name: RNDRTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class RNDRUSDT(Symbol):
    """
        name: RNDRUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RNDRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRUSDT"

    def __str__(self):
        return "RNDRUSDT"

    def __call__(self):
        return "RNDRUSDT"


RNDRUSDT = RNDRUSDT(*RNDRUSDT._fields)
"""
    name: RNDRUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ROSEBNB(Symbol):
    """
        name: ROSEBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ROSEBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEBNB"

    def __str__(self):
        return "ROSEBNB"

    def __call__(self):
        return "ROSEBNB"


ROSEBNB = ROSEBNB(*ROSEBNB._fields)
"""
    name: ROSEBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ROSEBTC(Symbol):
    """
        name: ROSEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ROSEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEBTC"

    def __str__(self):
        return "ROSEBTC"

    def __call__(self):
        return "ROSEBTC"


ROSEBTC = ROSEBTC(*ROSEBTC._fields)
"""
    name: ROSEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ROSEBUSD(Symbol):
    """
        name: ROSEBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ROSEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEBUSD"

    def __str__(self):
        return "ROSEBUSD"

    def __call__(self):
        return "ROSEBUSD"


ROSEBUSD = ROSEBUSD(*ROSEBUSD._fields)
"""
    name: ROSEBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ROSEETH(Symbol):
    """
        name: ROSEETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ROSEETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEETH"

    def __str__(self):
        return "ROSEETH"

    def __call__(self):
        return "ROSEETH"


ROSEETH = ROSEETH(*ROSEETH._fields)
"""
    name: ROSEETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ROSETRY(Symbol):
    """
        name: ROSETRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ROSETRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSETRY"

    def __str__(self):
        return "ROSETRY"

    def __call__(self):
        return "ROSETRY"


ROSETRY = ROSETRY(*ROSETRY._fields)
"""
    name: ROSETRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ROSEUSDT(Symbol):
    """
        name: ROSEUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ROSEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEUSDT"

    def __str__(self):
        return "ROSEUSDT"

    def __call__(self):
        return "ROSEUSDT"


ROSEUSDT = ROSEUSDT(*ROSEUSDT._fields)
"""
    name: ROSEUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RPLBTC(Symbol):
    """
        name: RPLBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPLBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPLBTC"

    def __str__(self):
        return "RPLBTC"

    def __call__(self):
        return "RPLBTC"


RPLBTC = RPLBTC(*RPLBTC._fields)
"""
    name: RPLBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPLBUSD(Symbol):
    """
        name: RPLBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPLBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPLBUSD"

    def __str__(self):
        return "RPLBUSD"

    def __call__(self):
        return "RPLBUSD"


RPLBUSD = RPLBUSD(*RPLBUSD._fields)
"""
    name: RPLBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPLUSDT(Symbol):
    """
        name: RPLUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPLUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPLUSDT"

    def __str__(self):
        return "RPLUSDT"

    def __call__(self):
        return "RPLUSDT"


RPLUSDT = RPLUSDT(*RPLUSDT._fields)
"""
    name: RPLUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPXBNB(Symbol):
    """
        name: RPXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPXBNB"

    def __str__(self):
        return "RPXBNB"

    def __call__(self):
        return "RPXBNB"


RPXBNB = RPXBNB(*RPXBNB._fields)
"""
    name: RPXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPXBTC(Symbol):
    """
        name: RPXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPXBTC"

    def __str__(self):
        return "RPXBTC"

    def __call__(self):
        return "RPXBTC"


RPXBTC = RPXBTC(*RPXBTC._fields)
"""
    name: RPXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPXETH(Symbol):
    """
        name: RPXETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPXETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPXETH"

    def __str__(self):
        return "RPXETH"

    def __call__(self):
        return "RPXETH"


RPXETH = RPXETH(*RPXETH._fields)
"""
    name: RPXETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RSRBNB(Symbol):
    """
        name: RSRBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RSRBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSRBNB"

    def __str__(self):
        return "RSRBNB"

    def __call__(self):
        return "RSRBNB"


RSRBNB = RSRBNB(*RSRBNB._fields)
"""
    name: RSRBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RSRBTC(Symbol):
    """
        name: RSRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RSRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSRBTC"

    def __str__(self):
        return "RSRBTC"

    def __call__(self):
        return "RSRBTC"


RSRBTC = RSRBTC(*RSRBTC._fields)
"""
    name: RSRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RSRBUSD(Symbol):
    """
        name: RSRBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RSRBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSRBUSD"

    def __str__(self):
        return "RSRBUSD"

    def __call__(self):
        return "RSRBUSD"


RSRBUSD = RSRBUSD(*RSRBUSD._fields)
"""
    name: RSRBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RSRUSDT(Symbol):
    """
        name: RSRUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RSRUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSRUSDT"

    def __str__(self):
        return "RSRUSDT"

    def __call__(self):
        return "RSRUSDT"


RSRUSDT = RSRUSDT(*RSRUSDT._fields)
"""
    name: RSRUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RUNEAUD(Symbol):
    """
        name: RUNEAUD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEAUD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEAUD"

    def __str__(self):
        return "RUNEAUD"

    def __call__(self):
        return "RUNEAUD"


RUNEAUD = RUNEAUD(*RUNEAUD._fields)
"""
    name: RUNEAUD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEBNB(Symbol):
    """
        name: RUNEBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEBNB"

    def __str__(self):
        return "RUNEBNB"

    def __call__(self):
        return "RUNEBNB"


RUNEBNB = RUNEBNB(*RUNEBNB._fields)
"""
    name: RUNEBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEBTC(Symbol):
    """
        name: RUNEBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RUNEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEBTC"

    def __str__(self):
        return "RUNEBTC"

    def __call__(self):
        return "RUNEBTC"


RUNEBTC = RUNEBTC(*RUNEBTC._fields)
"""
    name: RUNEBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RUNEBUSD(Symbol):
    """
        name: RUNEBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RUNEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEBUSD"

    def __str__(self):
        return "RUNEBUSD"

    def __call__(self):
        return "RUNEBUSD"


RUNEBUSD = RUNEBUSD(*RUNEBUSD._fields)
"""
    name: RUNEBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RUNEETH(Symbol):
    """
        name: RUNEETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEETH"

    def __str__(self):
        return "RUNEETH"

    def __call__(self):
        return "RUNEETH"


RUNEETH = RUNEETH(*RUNEETH._fields)
"""
    name: RUNEETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEEUR(Symbol):
    """
        name: RUNEEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEEUR"

    def __str__(self):
        return "RUNEEUR"

    def __call__(self):
        return "RUNEEUR"


RUNEEUR = RUNEEUR(*RUNEEUR._fields)
"""
    name: RUNEEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEGBP(Symbol):
    """
        name: RUNEGBP
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEGBP"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEGBP"

    def __str__(self):
        return "RUNEGBP"

    def __call__(self):
        return "RUNEGBP"


RUNEGBP = RUNEGBP(*RUNEGBP._fields)
"""
    name: RUNEGBP
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNETRY(Symbol):
    """
        name: RUNETRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNETRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNETRY"

    def __str__(self):
        return "RUNETRY"

    def __call__(self):
        return "RUNETRY"


RUNETRY = RUNETRY(*RUNETRY._fields)
"""
    name: RUNETRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEUSDT(Symbol):
    """
        name: RUNEUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RUNEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEUSDT"

    def __str__(self):
        return "RUNEUSDT"

    def __call__(self):
        return "RUNEUSDT"


RUNEUSDT = RUNEUSDT(*RUNEUSDT._fields)
"""
    name: RUNEUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RVNBTC(Symbol):
    """
        name: RVNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RVNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVNBTC"

    def __str__(self):
        return "RVNBTC"

    def __call__(self):
        return "RVNBTC"


RVNBTC = RVNBTC(*RVNBTC._fields)
"""
    name: RVNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RVNBUSD(Symbol):
    """
        name: RVNBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RVNBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVNBUSD"

    def __str__(self):
        return "RVNBUSD"

    def __call__(self):
        return "RVNBUSD"


RVNBUSD = RVNBUSD(*RVNBUSD._fields)
"""
    name: RVNBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RVNTRY(Symbol):
    """
        name: RVNTRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RVNTRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVNTRY"

    def __str__(self):
        return "RVNTRY"

    def __call__(self):
        return "RVNTRY"


RVNTRY = RVNTRY(*RVNTRY._fields)
"""
    name: RVNTRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class RVNUSDT(Symbol):
    """
        name: RVNUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RVNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVNUSDT"

    def __str__(self):
        return "RVNUSDT"

    def __call__(self):
        return "RVNUSDT"


RVNUSDT = RVNUSDT(*RVNUSDT._fields)
"""
    name: RVNUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SALTBTC(Symbol):
    """
        name: SALTBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SALTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SALTBTC"

    def __str__(self):
        return "SALTBTC"

    def __call__(self):
        return "SALTBTC"


SALTBTC = SALTBTC(*SALTBTC._fields)
"""
    name: SALTBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SALTETH(Symbol):
    """
        name: SALTETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SALTETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SALTETH"

    def __str__(self):
        return "SALTETH"

    def __call__(self):
        return "SALTETH"


SALTETH = SALTETH(*SALTETH._fields)
"""
    name: SALTETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDAUD(Symbol):
    """
        name: SANDAUD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDAUD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDAUD"

    def __str__(self):
        return "SANDAUD"

    def __call__(self):
        return "SANDAUD"


SANDAUD = SANDAUD(*SANDAUD._fields)
"""
    name: SANDAUD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDBIDR(Symbol):
    """
        name: SANDBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SANDBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBIDR"

    def __str__(self):
        return "SANDBIDR"

    def __call__(self):
        return "SANDBIDR"


SANDBIDR = SANDBIDR(*SANDBIDR._fields)
"""
    name: SANDBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SANDBNB(Symbol):
    """
        name: SANDBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBNB"

    def __str__(self):
        return "SANDBNB"

    def __call__(self):
        return "SANDBNB"


SANDBNB = SANDBNB(*SANDBNB._fields)
"""
    name: SANDBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDBRL(Symbol):
    """
        name: SANDBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBRL"

    def __str__(self):
        return "SANDBRL"

    def __call__(self):
        return "SANDBRL"


SANDBRL = SANDBRL(*SANDBRL._fields)
"""
    name: SANDBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDBTC(Symbol):
    """
        name: SANDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBTC"

    def __str__(self):
        return "SANDBTC"

    def __call__(self):
        return "SANDBTC"


SANDBTC = SANDBTC(*SANDBTC._fields)
"""
    name: SANDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SANDBUSD(Symbol):
    """
        name: SANDBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBUSD"

    def __str__(self):
        return "SANDBUSD"

    def __call__(self):
        return "SANDBUSD"


SANDBUSD = SANDBUSD(*SANDBUSD._fields)
"""
    name: SANDBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SANDETH(Symbol):
    """
        name: SANDETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDETH"

    def __str__(self):
        return "SANDETH"

    def __call__(self):
        return "SANDETH"


SANDETH = SANDETH(*SANDETH._fields)
"""
    name: SANDETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDTRY(Symbol):
    """
        name: SANDTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDTRY"

    def __str__(self):
        return "SANDTRY"

    def __call__(self):
        return "SANDTRY"


SANDTRY = SANDTRY(*SANDTRY._fields)
"""
    name: SANDTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDUSDT(Symbol):
    """
        name: SANDUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDUSDT"

    def __str__(self):
        return "SANDUSDT"

    def __call__(self):
        return "SANDUSDT"


SANDUSDT = SANDUSDT(*SANDUSDT._fields)
"""
    name: SANDUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SANTOSBRL(Symbol):
    """
        name: SANTOSBRL
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANTOSBRL"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSBRL"

    def __str__(self):
        return "SANTOSBRL"

    def __call__(self):
        return "SANTOSBRL"


SANTOSBRL = SANTOSBRL(*SANTOSBRL._fields)
"""
    name: SANTOSBRL
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANTOSBTC(Symbol):
    """
        name: SANTOSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANTOSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSBTC"

    def __str__(self):
        return "SANTOSBTC"

    def __call__(self):
        return "SANTOSBTC"


SANTOSBTC = SANTOSBTC(*SANTOSBTC._fields)
"""
    name: SANTOSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANTOSBUSD(Symbol):
    """
        name: SANTOSBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANTOSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSBUSD"

    def __str__(self):
        return "SANTOSBUSD"

    def __call__(self):
        return "SANTOSBUSD"


SANTOSBUSD = SANTOSBUSD(*SANTOSBUSD._fields)
"""
    name: SANTOSBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SANTOSTRY(Symbol):
    """
        name: SANTOSTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANTOSTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSTRY"

    def __str__(self):
        return "SANTOSTRY"

    def __call__(self):
        return "SANTOSTRY"


SANTOSTRY = SANTOSTRY(*SANTOSTRY._fields)
"""
    name: SANTOSTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SANTOSUSDT(Symbol):
    """
        name: SANTOSUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANTOSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSUSDT"

    def __str__(self):
        return "SANTOSUSDT"

    def __call__(self):
        return "SANTOSUSDT"


SANTOSUSDT = SANTOSUSDT(*SANTOSUSDT._fields)
"""
    name: SANTOSUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SCBTC(Symbol):
    """
        name: SCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCBTC"

    def __str__(self):
        return "SCBTC"

    def __call__(self):
        return "SCBTC"


SCBTC = SCBTC(*SCBTC._fields)
"""
    name: SCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCBUSD(Symbol):
    """
        name: SCBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCBUSD"

    def __str__(self):
        return "SCBUSD"

    def __call__(self):
        return "SCBUSD"


SCBUSD = SCBUSD(*SCBUSD._fields)
"""
    name: SCBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SCETH(Symbol):
    """
        name: SCETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCETH"

    def __str__(self):
        return "SCETH"

    def __call__(self):
        return "SCETH"


SCETH = SCETH(*SCETH._fields)
"""
    name: SCETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCRTBTC(Symbol):
    """
        name: SCRTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCRTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRTBTC"

    def __str__(self):
        return "SCRTBTC"

    def __call__(self):
        return "SCRTBTC"


SCRTBTC = SCRTBTC(*SCRTBTC._fields)
"""
    name: SCRTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCRTBUSD(Symbol):
    """
        name: SCRTBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCRTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRTBUSD"

    def __str__(self):
        return "SCRTBUSD"

    def __call__(self):
        return "SCRTBUSD"


SCRTBUSD = SCRTBUSD(*SCRTBUSD._fields)
"""
    name: SCRTBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCRTETH(Symbol):
    """
        name: SCRTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCRTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRTETH"

    def __str__(self):
        return "SCRTETH"

    def __call__(self):
        return "SCRTETH"


SCRTETH = SCRTETH(*SCRTETH._fields)
"""
    name: SCRTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCRTUSDT(Symbol):
    """
        name: SCRTUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCRTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRTUSDT"

    def __str__(self):
        return "SCRTUSDT"

    def __call__(self):
        return "SCRTUSDT"


SCRTUSDT = SCRTUSDT(*SCRTUSDT._fields)
"""
    name: SCRTUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCUSDT(Symbol):
    """
        name: SCUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCUSDT"

    def __str__(self):
        return "SCUSDT"

    def __call__(self):
        return "SCUSDT"


SCUSDT = SCUSDT(*SCUSDT._fields)
"""
    name: SCUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SFPBTC(Symbol):
    """
        name: SFPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SFPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFPBTC"

    def __str__(self):
        return "SFPBTC"

    def __call__(self):
        return "SFPBTC"


SFPBTC = SFPBTC(*SFPBTC._fields)
"""
    name: SFPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SFPBUSD(Symbol):
    """
        name: SFPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SFPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFPBUSD"

    def __str__(self):
        return "SFPBUSD"

    def __call__(self):
        return "SFPBUSD"


SFPBUSD = SFPBUSD(*SFPBUSD._fields)
"""
    name: SFPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SFPUSDT(Symbol):
    """
        name: SFPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SFPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFPUSDT"

    def __str__(self):
        return "SFPUSDT"

    def __call__(self):
        return "SFPUSDT"


SFPUSDT = SFPUSDT(*SFPUSDT._fields)
"""
    name: SFPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SHIBAUD(Symbol):
    """
        name: SHIBAUD
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBAUD"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBAUD"

    def __str__(self):
        return "SHIBAUD"

    def __call__(self):
        return "SHIBAUD"


SHIBAUD = SHIBAUD(*SHIBAUD._fields)
"""
    name: SHIBAUD
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBBRL(Symbol):
    """
        name: SHIBBRL
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBBRL"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBBRL"

    def __str__(self):
        return "SHIBBRL"

    def __call__(self):
        return "SHIBBRL"


SHIBBRL = SHIBBRL(*SHIBBRL._fields)
"""
    name: SHIBBRL
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBBUSD(Symbol):
    """
        name: SHIBBUSD
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SHIBBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBBUSD"

    def __str__(self):
        return "SHIBBUSD"

    def __call__(self):
        return "SHIBBUSD"


SHIBBUSD = SHIBBUSD(*SHIBBUSD._fields)
"""
    name: SHIBBUSD
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SHIBDOGE(Symbol):
    """
        name: SHIBDOGE
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 30.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SHIBDOGE"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 30.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBDOGE"

    def __str__(self):
        return "SHIBDOGE"

    def __call__(self):
        return "SHIBDOGE"


SHIBDOGE = SHIBDOGE(*SHIBDOGE._fields)
"""
    name: SHIBDOGE
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 30.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SHIBEUR(Symbol):
    """
        name: SHIBEUR
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBEUR"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBEUR"

    def __str__(self):
        return "SHIBEUR"

    def __call__(self):
        return "SHIBEUR"


SHIBEUR = SHIBEUR(*SHIBEUR._fields)
"""
    name: SHIBEUR
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBGBP(Symbol):
    """
        name: SHIBGBP
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBGBP"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBGBP"

    def __str__(self):
        return "SHIBGBP"

    def __call__(self):
        return "SHIBGBP"


SHIBGBP = SHIBGBP(*SHIBGBP._fields)
"""
    name: SHIBGBP
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBRUB(Symbol):
    """
        name: SHIBRUB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBRUB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBRUB"

    def __str__(self):
        return "SHIBRUB"

    def __call__(self):
        return "SHIBRUB"


SHIBRUB = SHIBRUB(*SHIBRUB._fields)
"""
    name: SHIBRUB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBTRY(Symbol):
    """
        name: SHIBTRY
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBTRY"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBTRY"

    def __str__(self):
        return "SHIBTRY"

    def __call__(self):
        return "SHIBTRY"


SHIBTRY = SHIBTRY(*SHIBTRY._fields)
"""
    name: SHIBTRY
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBUAH(Symbol):
    """
        name: SHIBUAH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBUAH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBUAH"

    def __str__(self):
        return "SHIBUAH"

    def __call__(self):
        return "SHIBUAH"


SHIBUAH = SHIBUAH(*SHIBUAH._fields)
"""
    name: SHIBUAH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBUSDT(Symbol):
    """
        name: SHIBUSDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SHIBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBUSDT"

    def __str__(self):
        return "SHIBUSDT"

    def __call__(self):
        return "SHIBUSDT"


SHIBUSDT = SHIBUSDT(*SHIBUSDT._fields)
"""
    name: SHIBUSDT
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SKLBTC(Symbol):
    """
        name: SKLBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SKLBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKLBTC"

    def __str__(self):
        return "SKLBTC"

    def __call__(self):
        return "SKLBTC"


SKLBTC = SKLBTC(*SKLBTC._fields)
"""
    name: SKLBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SKLBUSD(Symbol):
    """
        name: SKLBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SKLBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKLBUSD"

    def __str__(self):
        return "SKLBUSD"

    def __call__(self):
        return "SKLBUSD"


SKLBUSD = SKLBUSD(*SKLBUSD._fields)
"""
    name: SKLBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SKLUSDT(Symbol):
    """
        name: SKLUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SKLUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKLUSDT"

    def __str__(self):
        return "SKLUSDT"

    def __call__(self):
        return "SKLUSDT"


SKLUSDT = SKLUSDT(*SKLUSDT._fields)
"""
    name: SKLUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SKYBNB(Symbol):
    """
        name: SKYBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SKYBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKYBNB"

    def __str__(self):
        return "SKYBNB"

    def __call__(self):
        return "SKYBNB"


SKYBNB = SKYBNB(*SKYBNB._fields)
"""
    name: SKYBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SKYBTC(Symbol):
    """
        name: SKYBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SKYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKYBTC"

    def __str__(self):
        return "SKYBTC"

    def __call__(self):
        return "SKYBTC"


SKYBTC = SKYBTC(*SKYBTC._fields)
"""
    name: SKYBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SKYETH(Symbol):
    """
        name: SKYETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SKYETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKYETH"

    def __str__(self):
        return "SKYETH"

    def __call__(self):
        return "SKYETH"


SKYETH = SKYETH(*SKYETH._fields)
"""
    name: SKYETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SLPBIDR(Symbol):
    """
        name: SLPBIDR
        significant_digits: None
        tick_size: 0.10
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SLPBIDR"
    significant_digits: int = None
    tick_size: int = 0.10
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPBIDR"

    def __str__(self):
        return "SLPBIDR"

    def __call__(self):
        return "SLPBIDR"


SLPBIDR = SLPBIDR(*SLPBIDR._fields)
"""
    name: SLPBIDR
    significant_digits: None
    tick_size: 0.10
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SLPBNB(Symbol):
    """
        name: SLPBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SLPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPBNB"

    def __str__(self):
        return "SLPBNB"

    def __call__(self):
        return "SLPBNB"


SLPBNB = SLPBNB(*SLPBNB._fields)
"""
    name: SLPBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SLPBUSD(Symbol):
    """
        name: SLPBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SLPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPBUSD"

    def __str__(self):
        return "SLPBUSD"

    def __call__(self):
        return "SLPBUSD"


SLPBUSD = SLPBUSD(*SLPBUSD._fields)
"""
    name: SLPBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SLPETH(Symbol):
    """
        name: SLPETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SLPETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPETH"

    def __str__(self):
        return "SLPETH"

    def __call__(self):
        return "SLPETH"


SLPETH = SLPETH(*SLPETH._fields)
"""
    name: SLPETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SLPTRY(Symbol):
    """
        name: SLPTRY
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SLPTRY"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPTRY"

    def __str__(self):
        return "SLPTRY"

    def __call__(self):
        return "SLPTRY"


SLPTRY = SLPTRY(*SLPTRY._fields)
"""
    name: SLPTRY
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SLPUSDT(Symbol):
    """
        name: SLPUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SLPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPUSDT"

    def __str__(self):
        return "SLPUSDT"

    def __call__(self):
        return "SLPUSDT"


SLPUSDT = SLPUSDT(*SLPUSDT._fields)
"""
    name: SLPUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SNGLSBTC(Symbol):
    """
        name: SNGLSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNGLSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNGLSBTC"

    def __str__(self):
        return "SNGLSBTC"

    def __call__(self):
        return "SNGLSBTC"


SNGLSBTC = SNGLSBTC(*SNGLSBTC._fields)
"""
    name: SNGLSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNGLSETH(Symbol):
    """
        name: SNGLSETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNGLSETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNGLSETH"

    def __str__(self):
        return "SNGLSETH"

    def __call__(self):
        return "SNGLSETH"


SNGLSETH = SNGLSETH(*SNGLSETH._fields)
"""
    name: SNGLSETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNMBTC(Symbol):
    """
        name: SNMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNMBTC"

    def __str__(self):
        return "SNMBTC"

    def __call__(self):
        return "SNMBTC"


SNMBTC = SNMBTC(*SNMBTC._fields)
"""
    name: SNMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNMBUSD(Symbol):
    """
        name: SNMBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNMBUSD"

    def __str__(self):
        return "SNMBUSD"

    def __call__(self):
        return "SNMBUSD"


SNMBUSD = SNMBUSD(*SNMBUSD._fields)
"""
    name: SNMBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNMETH(Symbol):
    """
        name: SNMETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNMETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNMETH"

    def __str__(self):
        return "SNMETH"

    def __call__(self):
        return "SNMETH"


SNMETH = SNMETH(*SNMETH._fields)
"""
    name: SNMETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNTBTC(Symbol):
    """
        name: SNTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNTBTC"

    def __str__(self):
        return "SNTBTC"

    def __call__(self):
        return "SNTBTC"


SNTBTC = SNTBTC(*SNTBTC._fields)
"""
    name: SNTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNTBUSD(Symbol):
    """
        name: SNTBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNTBUSD"

    def __str__(self):
        return "SNTBUSD"

    def __call__(self):
        return "SNTBUSD"


SNTBUSD = SNTBUSD(*SNTBUSD._fields)
"""
    name: SNTBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNTETH(Symbol):
    """
        name: SNTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNTETH"

    def __str__(self):
        return "SNTETH"

    def __call__(self):
        return "SNTETH"


SNTETH = SNTETH(*SNTETH._fields)
"""
    name: SNTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNXBNB(Symbol):
    """
        name: SNXBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNXBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXBNB"

    def __str__(self):
        return "SNXBNB"

    def __call__(self):
        return "SNXBNB"


SNXBNB = SNXBNB(*SNXBNB._fields)
"""
    name: SNXBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNXBTC(Symbol):
    """
        name: SNXBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SNXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXBTC"

    def __str__(self):
        return "SNXBTC"

    def __call__(self):
        return "SNXBTC"


SNXBTC = SNXBTC(*SNXBTC._fields)
"""
    name: SNXBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SNXBUSD(Symbol):
    """
        name: SNXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXBUSD"

    def __str__(self):
        return "SNXBUSD"

    def __call__(self):
        return "SNXBUSD"


SNXBUSD = SNXBUSD(*SNXBUSD._fields)
"""
    name: SNXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNXETH(Symbol):
    """
        name: SNXETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNXETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXETH"

    def __str__(self):
        return "SNXETH"

    def __call__(self):
        return "SNXETH"


SNXETH = SNXETH(*SNXETH._fields)
"""
    name: SNXETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNXUSDT(Symbol):
    """
        name: SNXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SNXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXUSDT"

    def __str__(self):
        return "SNXUSDT"

    def __call__(self):
        return "SNXUSDT"


SNXUSDT = SNXUSDT(*SNXUSDT._fields)
"""
    name: SNXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SOLAUD(Symbol):
    """
        name: SOLAUD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLAUD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLAUD"

    def __str__(self):
        return "SOLAUD"

    def __call__(self):
        return "SOLAUD"


SOLAUD = SOLAUD(*SOLAUD._fields)
"""
    name: SOLAUD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLBIDR(Symbol):
    """
        name: SOLBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SOLBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBIDR"

    def __str__(self):
        return "SOLBIDR"

    def __call__(self):
        return "SOLBIDR"


SOLBIDR = SOLBIDR(*SOLBIDR._fields)
"""
    name: SOLBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SOLBNB(Symbol):
    """
        name: SOLBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBNB"

    def __str__(self):
        return "SOLBNB"

    def __call__(self):
        return "SOLBNB"


SOLBNB = SOLBNB(*SOLBNB._fields)
"""
    name: SOLBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLBRL(Symbol):
    """
        name: SOLBRL
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLBRL"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBRL"

    def __str__(self):
        return "SOLBRL"

    def __call__(self):
        return "SOLBRL"


SOLBRL = SOLBRL(*SOLBRL._fields)
"""
    name: SOLBRL
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLBTC(Symbol):
    """
        name: SOLBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SOLBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBTC"

    def __str__(self):
        return "SOLBTC"

    def __call__(self):
        return "SOLBTC"


SOLBTC = SOLBTC(*SOLBTC._fields)
"""
    name: SOLBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SOLBUSD(Symbol):
    """
        name: SOLBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SOLBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBUSD"

    def __str__(self):
        return "SOLBUSD"

    def __call__(self):
        return "SOLBUSD"


SOLBUSD = SOLBUSD(*SOLBUSD._fields)
"""
    name: SOLBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SOLETH(Symbol):
    """
        name: SOLETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLETH"

    def __str__(self):
        return "SOLETH"

    def __call__(self):
        return "SOLETH"


SOLETH = SOLETH(*SOLETH._fields)
"""
    name: SOLETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLEUR(Symbol):
    """
        name: SOLEUR
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLEUR"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLEUR"

    def __str__(self):
        return "SOLEUR"

    def __call__(self):
        return "SOLEUR"


SOLEUR = SOLEUR(*SOLEUR._fields)
"""
    name: SOLEUR
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLGBP(Symbol):
    """
        name: SOLGBP
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLGBP"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLGBP"

    def __str__(self):
        return "SOLGBP"

    def __call__(self):
        return "SOLGBP"


SOLGBP = SOLGBP(*SOLGBP._fields)
"""
    name: SOLGBP
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLRUB(Symbol):
    """
        name: SOLRUB
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLRUB"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLRUB"

    def __str__(self):
        return "SOLRUB"

    def __call__(self):
        return "SOLRUB"


SOLRUB = SOLRUB(*SOLRUB._fields)
"""
    name: SOLRUB
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLTRY(Symbol):
    """
        name: SOLTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLTRY"

    def __str__(self):
        return "SOLTRY"

    def __call__(self):
        return "SOLTRY"


SOLTRY = SOLTRY(*SOLTRY._fields)
"""
    name: SOLTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLTUSD(Symbol):
    """
        name: SOLTUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLTUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLTUSD"

    def __str__(self):
        return "SOLTUSD"

    def __call__(self):
        return "SOLTUSD"


SOLTUSD = SOLTUSD(*SOLTUSD._fields)
"""
    name: SOLTUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLUSDC(Symbol):
    """
        name: SOLUSDC
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLUSDC"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLUSDC"

    def __str__(self):
        return "SOLUSDC"

    def __call__(self):
        return "SOLUSDC"


SOLUSDC = SOLUSDC(*SOLUSDC._fields)
"""
    name: SOLUSDC
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLUSDT(Symbol):
    """
        name: SOLUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SOLUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLUSDT"

    def __str__(self):
        return "SOLUSDT"

    def __call__(self):
        return "SOLUSDT"


SOLUSDT = SOLUSDT(*SOLUSDT._fields)
"""
    name: SOLUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SPARTABNB(Symbol):
    """
        name: SPARTABNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SPARTABNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPARTABNB"

    def __str__(self):
        return "SPARTABNB"

    def __call__(self):
        return "SPARTABNB"


SPARTABNB = SPARTABNB(*SPARTABNB._fields)
"""
    name: SPARTABNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SPELLBNB(Symbol):
    """
        name: SPELLBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SPELLBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLBNB"

    def __str__(self):
        return "SPELLBNB"

    def __call__(self):
        return "SPELLBNB"


SPELLBNB = SPELLBNB(*SPELLBNB._fields)
"""
    name: SPELLBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SPELLBTC(Symbol):
    """
        name: SPELLBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SPELLBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLBTC"

    def __str__(self):
        return "SPELLBTC"

    def __call__(self):
        return "SPELLBTC"


SPELLBTC = SPELLBTC(*SPELLBTC._fields)
"""
    name: SPELLBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SPELLBUSD(Symbol):
    """
        name: SPELLBUSD
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SPELLBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLBUSD"

    def __str__(self):
        return "SPELLBUSD"

    def __call__(self):
        return "SPELLBUSD"


SPELLBUSD = SPELLBUSD(*SPELLBUSD._fields)
"""
    name: SPELLBUSD
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SPELLTRY(Symbol):
    """
        name: SPELLTRY
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SPELLTRY"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLTRY"

    def __str__(self):
        return "SPELLTRY"

    def __call__(self):
        return "SPELLTRY"


SPELLTRY = SPELLTRY(*SPELLTRY._fields)
"""
    name: SPELLTRY
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SPELLUSDT(Symbol):
    """
        name: SPELLUSDT
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SPELLUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLUSDT"

    def __str__(self):
        return "SPELLUSDT"

    def __call__(self):
        return "SPELLUSDT"


SPELLUSDT = SPELLUSDT(*SPELLUSDT._fields)
"""
    name: SPELLUSDT
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SRMBIDR(Symbol):
    """
        name: SRMBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SRMBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMBIDR"

    def __str__(self):
        return "SRMBIDR"

    def __call__(self):
        return "SRMBIDR"


SRMBIDR = SRMBIDR(*SRMBIDR._fields)
"""
    name: SRMBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SRMBNB(Symbol):
    """
        name: SRMBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SRMBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMBNB"

    def __str__(self):
        return "SRMBNB"

    def __call__(self):
        return "SRMBNB"


SRMBNB = SRMBNB(*SRMBNB._fields)
"""
    name: SRMBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SRMBTC(Symbol):
    """
        name: SRMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SRMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMBTC"

    def __str__(self):
        return "SRMBTC"

    def __call__(self):
        return "SRMBTC"


SRMBTC = SRMBTC(*SRMBTC._fields)
"""
    name: SRMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SRMBUSD(Symbol):
    """
        name: SRMBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SRMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMBUSD"

    def __str__(self):
        return "SRMBUSD"

    def __call__(self):
        return "SRMBUSD"


SRMBUSD = SRMBUSD(*SRMBUSD._fields)
"""
    name: SRMBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SRMUSDT(Symbol):
    """
        name: SRMUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SRMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMUSDT"

    def __str__(self):
        return "SRMUSDT"

    def __call__(self):
        return "SRMUSDT"


SRMUSDT = SRMUSDT(*SRMUSDT._fields)
"""
    name: SRMUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVBTC(Symbol):
    """
        name: SSVBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SSVBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVBTC"

    def __str__(self):
        return "SSVBTC"

    def __call__(self):
        return "SSVBTC"


SSVBTC = SSVBTC(*SSVBTC._fields)
"""
    name: SSVBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVBUSD(Symbol):
    """
        name: SSVBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SSVBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVBUSD"

    def __str__(self):
        return "SSVBUSD"

    def __call__(self):
        return "SSVBUSD"


SSVBUSD = SSVBUSD(*SSVBUSD._fields)
"""
    name: SSVBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVETH(Symbol):
    """
        name: SSVETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SSVETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVETH"

    def __str__(self):
        return "SSVETH"

    def __call__(self):
        return "SSVETH"


SSVETH = SSVETH(*SSVETH._fields)
"""
    name: SSVETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVTUSD(Symbol):
    """
        name: SSVTUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SSVTUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVTUSD"

    def __str__(self):
        return "SSVTUSD"

    def __call__(self):
        return "SSVTUSD"


SSVTUSD = SSVTUSD(*SSVTUSD._fields)
"""
    name: SSVTUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVUSDT(Symbol):
    """
        name: SSVUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SSVUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVUSDT"

    def __str__(self):
        return "SSVUSDT"

    def __call__(self):
        return "SSVUSDT"


SSVUSDT = SSVUSDT(*SSVUSDT._fields)
"""
    name: SSVUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STEEMBNB(Symbol):
    """
        name: STEEMBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMBNB"

    def __str__(self):
        return "STEEMBNB"

    def __call__(self):
        return "STEEMBNB"


STEEMBNB = STEEMBNB(*STEEMBNB._fields)
"""
    name: STEEMBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STEEMBTC(Symbol):
    """
        name: STEEMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMBTC"

    def __str__(self):
        return "STEEMBTC"

    def __call__(self):
        return "STEEMBTC"


STEEMBTC = STEEMBTC(*STEEMBTC._fields)
"""
    name: STEEMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STEEMBUSD(Symbol):
    """
        name: STEEMBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMBUSD"

    def __str__(self):
        return "STEEMBUSD"

    def __call__(self):
        return "STEEMBUSD"


STEEMBUSD = STEEMBUSD(*STEEMBUSD._fields)
"""
    name: STEEMBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STEEMETH(Symbol):
    """
        name: STEEMETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMETH"

    def __str__(self):
        return "STEEMETH"

    def __call__(self):
        return "STEEMETH"


STEEMETH = STEEMETH(*STEEMETH._fields)
"""
    name: STEEMETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STEEMUSDT(Symbol):
    """
        name: STEEMUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMUSDT"

    def __str__(self):
        return "STEEMUSDT"

    def __call__(self):
        return "STEEMUSDT"


STEEMUSDT = STEEMUSDT(*STEEMUSDT._fields)
"""
    name: STEEMUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STGBTC(Symbol):
    """
        name: STGBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STGBTC"

    def __str__(self):
        return "STGBTC"

    def __call__(self):
        return "STGBTC"


STGBTC = STGBTC(*STGBTC._fields)
"""
    name: STGBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STGBUSD(Symbol):
    """
        name: STGBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STGBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STGBUSD"

    def __str__(self):
        return "STGBUSD"

    def __call__(self):
        return "STGBUSD"


STGBUSD = STGBUSD(*STGBUSD._fields)
"""
    name: STGBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STGUSDT(Symbol):
    """
        name: STGUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STGUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STGUSDT"

    def __str__(self):
        return "STGUSDT"

    def __call__(self):
        return "STGUSDT"


STGUSDT = STGUSDT(*STGUSDT._fields)
"""
    name: STGUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STMXBTC(Symbol):
    """
        name: STMXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STMXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STMXBTC"

    def __str__(self):
        return "STMXBTC"

    def __call__(self):
        return "STMXBTC"


STMXBTC = STMXBTC(*STMXBTC._fields)
"""
    name: STMXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STMXBUSD(Symbol):
    """
        name: STMXBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STMXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STMXBUSD"

    def __str__(self):
        return "STMXBUSD"

    def __call__(self):
        return "STMXBUSD"


STMXBUSD = STMXBUSD(*STMXBUSD._fields)
"""
    name: STMXBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STMXETH(Symbol):
    """
        name: STMXETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STMXETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STMXETH"

    def __str__(self):
        return "STMXETH"

    def __call__(self):
        return "STMXETH"


STMXETH = STMXETH(*STMXETH._fields)
"""
    name: STMXETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STMXUSDT(Symbol):
    """
        name: STMXUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STMXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STMXUSDT"

    def __str__(self):
        return "STMXUSDT"

    def __call__(self):
        return "STMXUSDT"


STMXUSDT = STMXUSDT(*STMXUSDT._fields)
"""
    name: STMXUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STORJBTC(Symbol):
    """
        name: STORJBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STORJBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJBTC"

    def __str__(self):
        return "STORJBTC"

    def __call__(self):
        return "STORJBTC"


STORJBTC = STORJBTC(*STORJBTC._fields)
"""
    name: STORJBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STORJBUSD(Symbol):
    """
        name: STORJBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORJBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJBUSD"

    def __str__(self):
        return "STORJBUSD"

    def __call__(self):
        return "STORJBUSD"


STORJBUSD = STORJBUSD(*STORJBUSD._fields)
"""
    name: STORJBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORJETH(Symbol):
    """
        name: STORJETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORJETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJETH"

    def __str__(self):
        return "STORJETH"

    def __call__(self):
        return "STORJETH"


STORJETH = STORJETH(*STORJETH._fields)
"""
    name: STORJETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORJTRY(Symbol):
    """
        name: STORJTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORJTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJTRY"

    def __str__(self):
        return "STORJTRY"

    def __call__(self):
        return "STORJTRY"


STORJTRY = STORJTRY(*STORJTRY._fields)
"""
    name: STORJTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class STORJUSDT(Symbol):
    """
        name: STORJUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STORJUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJUSDT"

    def __str__(self):
        return "STORJUSDT"

    def __call__(self):
        return "STORJUSDT"


STORJUSDT = STORJUSDT(*STORJUSDT._fields)
"""
    name: STORJUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STORMBNB(Symbol):
    """
        name: STORMBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORMBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORMBNB"

    def __str__(self):
        return "STORMBNB"

    def __call__(self):
        return "STORMBNB"


STORMBNB = STORMBNB(*STORMBNB._fields)
"""
    name: STORMBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORMBTC(Symbol):
    """
        name: STORMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORMBTC"

    def __str__(self):
        return "STORMBTC"

    def __call__(self):
        return "STORMBTC"


STORMBTC = STORMBTC(*STORMBTC._fields)
"""
    name: STORMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORMETH(Symbol):
    """
        name: STORMETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORMETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORMETH"

    def __str__(self):
        return "STORMETH"

    def __call__(self):
        return "STORMETH"


STORMETH = STORMETH(*STORMETH._fields)
"""
    name: STORMETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORMUSDT(Symbol):
    """
        name: STORMUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORMUSDT"

    def __str__(self):
        return "STORMUSDT"

    def __call__(self):
        return "STORMUSDT"


STORMUSDT = STORMUSDT(*STORMUSDT._fields)
"""
    name: STORMUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STPTBNB(Symbol):
    """
        name: STPTBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STPTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STPTBNB"

    def __str__(self):
        return "STPTBNB"

    def __call__(self):
        return "STPTBNB"


STPTBNB = STPTBNB(*STPTBNB._fields)
"""
    name: STPTBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STPTBTC(Symbol):
    """
        name: STPTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STPTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STPTBTC"

    def __str__(self):
        return "STPTBTC"

    def __call__(self):
        return "STPTBTC"


STPTBTC = STPTBTC(*STPTBTC._fields)
"""
    name: STPTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STPTBUSD(Symbol):
    """
        name: STPTBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STPTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STPTBUSD"

    def __str__(self):
        return "STPTBUSD"

    def __call__(self):
        return "STPTBUSD"


STPTBUSD = STPTBUSD(*STPTBUSD._fields)
"""
    name: STPTBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STPTUSDT(Symbol):
    """
        name: STPTUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STPTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STPTUSDT"

    def __str__(self):
        return "STPTUSDT"

    def __call__(self):
        return "STPTUSDT"


STPTUSDT = STPTUSDT(*STPTUSDT._fields)
"""
    name: STPTUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STRATBNB(Symbol):
    """
        name: STRATBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATBNB"

    def __str__(self):
        return "STRATBNB"

    def __call__(self):
        return "STRATBNB"


STRATBNB = STRATBNB(*STRATBNB._fields)
"""
    name: STRATBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRATBTC(Symbol):
    """
        name: STRATBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATBTC"

    def __str__(self):
        return "STRATBTC"

    def __call__(self):
        return "STRATBTC"


STRATBTC = STRATBTC(*STRATBTC._fields)
"""
    name: STRATBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRATBUSD(Symbol):
    """
        name: STRATBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATBUSD"

    def __str__(self):
        return "STRATBUSD"

    def __call__(self):
        return "STRATBUSD"


STRATBUSD = STRATBUSD(*STRATBUSD._fields)
"""
    name: STRATBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRATETH(Symbol):
    """
        name: STRATETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATETH"

    def __str__(self):
        return "STRATETH"

    def __call__(self):
        return "STRATETH"


STRATETH = STRATETH(*STRATETH._fields)
"""
    name: STRATETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRATUSDT(Symbol):
    """
        name: STRATUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATUSDT"

    def __str__(self):
        return "STRATUSDT"

    def __call__(self):
        return "STRATUSDT"


STRATUSDT = STRATUSDT(*STRATUSDT._fields)
"""
    name: STRATUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRAXBTC(Symbol):
    """
        name: STRAXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRAXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAXBTC"

    def __str__(self):
        return "STRAXBTC"

    def __call__(self):
        return "STRAXBTC"


STRAXBTC = STRAXBTC(*STRAXBTC._fields)
"""
    name: STRAXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRAXBUSD(Symbol):
    """
        name: STRAXBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRAXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAXBUSD"

    def __str__(self):
        return "STRAXBUSD"

    def __call__(self):
        return "STRAXBUSD"


STRAXBUSD = STRAXBUSD(*STRAXBUSD._fields)
"""
    name: STRAXBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRAXETH(Symbol):
    """
        name: STRAXETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRAXETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAXETH"

    def __str__(self):
        return "STRAXETH"

    def __call__(self):
        return "STRAXETH"


STRAXETH = STRAXETH(*STRAXETH._fields)
"""
    name: STRAXETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRAXUSDT(Symbol):
    """
        name: STRAXUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRAXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAXUSDT"

    def __str__(self):
        return "STRAXUSDT"

    def __call__(self):
        return "STRAXUSDT"


STRAXUSDT = STRAXUSDT(*STRAXUSDT._fields)
"""
    name: STRAXUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STXBNB(Symbol):
    """
        name: STXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXBNB"

    def __str__(self):
        return "STXBNB"

    def __call__(self):
        return "STXBNB"


STXBNB = STXBNB(*STXBNB._fields)
"""
    name: STXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STXBTC(Symbol):
    """
        name: STXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXBTC"

    def __str__(self):
        return "STXBTC"

    def __call__(self):
        return "STXBTC"


STXBTC = STXBTC(*STXBTC._fields)
"""
    name: STXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STXBUSD(Symbol):
    """
        name: STXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXBUSD"

    def __str__(self):
        return "STXBUSD"

    def __call__(self):
        return "STXBUSD"


STXBUSD = STXBUSD(*STXBUSD._fields)
"""
    name: STXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STXTRY(Symbol):
    """
        name: STXTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STXTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXTRY"

    def __str__(self):
        return "STXTRY"

    def __call__(self):
        return "STXTRY"


STXTRY = STXTRY(*STXTRY._fields)
"""
    name: STXTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class STXUSDT(Symbol):
    """
        name: STXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXUSDT"

    def __str__(self):
        return "STXUSDT"

    def __call__(self):
        return "STXUSDT"


STXUSDT = STXUSDT(*STXUSDT._fields)
"""
    name: STXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUBBTC(Symbol):
    """
        name: SUBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUBBTC"

    def __str__(self):
        return "SUBBTC"

    def __call__(self):
        return "SUBBTC"


SUBBTC = SUBBTC(*SUBBTC._fields)
"""
    name: SUBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUBETH(Symbol):
    """
        name: SUBETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUBETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUBETH"

    def __str__(self):
        return "SUBETH"

    def __call__(self):
        return "SUBETH"


SUBETH = SUBETH(*SUBETH._fields)
"""
    name: SUBETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUIBNB(Symbol):
    """
        name: SUIBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUIBNB"

    def __str__(self):
        return "SUIBNB"

    def __call__(self):
        return "SUIBNB"


SUIBNB = SUIBNB(*SUIBNB._fields)
"""
    name: SUIBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUIBTC(Symbol):
    """
        name: SUIBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUIBTC"

    def __str__(self):
        return "SUIBTC"

    def __call__(self):
        return "SUIBTC"


SUIBTC = SUIBTC(*SUIBTC._fields)
"""
    name: SUIBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUIEUR(Symbol):
    """
        name: SUIEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUIEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUIEUR"

    def __str__(self):
        return "SUIEUR"

    def __call__(self):
        return "SUIEUR"


SUIEUR = SUIEUR(*SUIEUR._fields)
"""
    name: SUIEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUITRY(Symbol):
    """
        name: SUITRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUITRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUITRY"

    def __str__(self):
        return "SUITRY"

    def __call__(self):
        return "SUITRY"


SUITRY = SUITRY(*SUITRY._fields)
"""
    name: SUITRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SUITUSD(Symbol):
    """
        name: SUITUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUITUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUITUSD"

    def __str__(self):
        return "SUITUSD"

    def __call__(self):
        return "SUITUSD"


SUITUSD = SUITUSD(*SUITUSD._fields)
"""
    name: SUITUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUIUSDT(Symbol):
    """
        name: SUIUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUIUSDT"

    def __str__(self):
        return "SUIUSDT"

    def __call__(self):
        return "SUIUSDT"


SUIUSDT = SUIUSDT(*SUIUSDT._fields)
"""
    name: SUIUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUNBTC(Symbol):
    """
        name: SUNBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUNBTC"

    def __str__(self):
        return "SUNBTC"

    def __call__(self):
        return "SUNBTC"


SUNBTC = SUNBTC(*SUNBTC._fields)
"""
    name: SUNBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUNBUSD(Symbol):
    """
        name: SUNBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUNBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUNBUSD"

    def __str__(self):
        return "SUNBUSD"

    def __call__(self):
        return "SUNBUSD"


SUNBUSD = SUNBUSD(*SUNBUSD._fields)
"""
    name: SUNBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUNUSDT(Symbol):
    """
        name: SUNUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUNUSDT"

    def __str__(self):
        return "SUNUSDT"

    def __call__(self):
        return "SUNUSDT"


SUNUSDT = SUNUSDT(*SUNUSDT._fields)
"""
    name: SUNUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUPERBTC(Symbol):
    """
        name: SUPERBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUPERBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPERBTC"

    def __str__(self):
        return "SUPERBTC"

    def __call__(self):
        return "SUPERBTC"


SUPERBTC = SUPERBTC(*SUPERBTC._fields)
"""
    name: SUPERBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUPERBUSD(Symbol):
    """
        name: SUPERBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUPERBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPERBUSD"

    def __str__(self):
        return "SUPERBUSD"

    def __call__(self):
        return "SUPERBUSD"


SUPERBUSD = SUPERBUSD(*SUPERBUSD._fields)
"""
    name: SUPERBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUPERUSDT(Symbol):
    """
        name: SUPERUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUPERUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPERUSDT"

    def __str__(self):
        return "SUPERUSDT"

    def __call__(self):
        return "SUPERUSDT"


SUPERUSDT = SUPERUSDT(*SUPERUSDT._fields)
"""
    name: SUPERUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUSDBTC(Symbol):
    """
        name: SUSDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSDBTC"

    def __str__(self):
        return "SUSDBTC"

    def __call__(self):
        return "SUSDBTC"


SUSDBTC = SUSDBTC(*SUSDBTC._fields)
"""
    name: SUSDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSDETH(Symbol):
    """
        name: SUSDETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSDETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSDETH"

    def __str__(self):
        return "SUSDETH"

    def __call__(self):
        return "SUSDETH"


SUSDETH = SUSDETH(*SUSDETH._fields)
"""
    name: SUSDETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSDUSDT(Symbol):
    """
        name: SUSDUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSDUSDT"

    def __str__(self):
        return "SUSDUSDT"

    def __call__(self):
        return "SUSDUSDT"


SUSDUSDT = SUSDUSDT(*SUSDUSDT._fields)
"""
    name: SUSDUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIBNB(Symbol):
    """
        name: SUSHIBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSHIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIBNB"

    def __str__(self):
        return "SUSHIBNB"

    def __call__(self):
        return "SUSHIBNB"


SUSHIBNB = SUSHIBNB(*SUSHIBNB._fields)
"""
    name: SUSHIBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIBTC(Symbol):
    """
        name: SUSHIBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUSHIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIBTC"

    def __str__(self):
        return "SUSHIBTC"

    def __call__(self):
        return "SUSHIBTC"


SUSHIBTC = SUSHIBTC(*SUSHIBTC._fields)
"""
    name: SUSHIBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUSHIBUSD(Symbol):
    """
        name: SUSHIBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSHIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIBUSD"

    def __str__(self):
        return "SUSHIBUSD"

    def __call__(self):
        return "SUSHIBUSD"


SUSHIBUSD = SUSHIBUSD(*SUSHIBUSD._fields)
"""
    name: SUSHIBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIDOWNUSDT(Symbol):
    """
        name: SUSHIDOWNUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSHIDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIDOWNUSDT"

    def __str__(self):
        return "SUSHIDOWNUSDT"

    def __call__(self):
        return "SUSHIDOWNUSDT"


SUSHIDOWNUSDT = SUSHIDOWNUSDT(*SUSHIDOWNUSDT._fields)
"""
    name: SUSHIDOWNUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIUPUSDT(Symbol):
    """
        name: SUSHIUPUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSHIUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIUPUSDT"

    def __str__(self):
        return "SUSHIUPUSDT"

    def __call__(self):
        return "SUSHIUPUSDT"


SUSHIUPUSDT = SUSHIUPUSDT(*SUSHIUPUSDT._fields)
"""
    name: SUSHIUPUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIUSDT(Symbol):
    """
        name: SUSHIUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUSHIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIUSDT"

    def __str__(self):
        return "SUSHIUSDT"

    def __call__(self):
        return "SUSHIUSDT"


SUSHIUSDT = SUSHIUSDT(*SUSHIUSDT._fields)
"""
    name: SUSHIUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SWRVBNB(Symbol):
    """
        name: SWRVBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SWRVBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWRVBNB"

    def __str__(self):
        return "SWRVBNB"

    def __call__(self):
        return "SWRVBNB"


SWRVBNB = SWRVBNB(*SWRVBNB._fields)
"""
    name: SWRVBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SWRVBUSD(Symbol):
    """
        name: SWRVBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SWRVBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWRVBUSD"

    def __str__(self):
        return "SWRVBUSD"

    def __call__(self):
        return "SWRVBUSD"


SWRVBUSD = SWRVBUSD(*SWRVBUSD._fields)
"""
    name: SWRVBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPAUD(Symbol):
    """
        name: SXPAUD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPAUD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPAUD"

    def __str__(self):
        return "SXPAUD"

    def __call__(self):
        return "SXPAUD"


SXPAUD = SXPAUD(*SXPAUD._fields)
"""
    name: SXPAUD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPBIDR(Symbol):
    """
        name: SXPBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SXPBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPBIDR"

    def __str__(self):
        return "SXPBIDR"

    def __call__(self):
        return "SXPBIDR"


SXPBIDR = SXPBIDR(*SXPBIDR._fields)
"""
    name: SXPBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SXPBNB(Symbol):
    """
        name: SXPBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SXPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPBNB"

    def __str__(self):
        return "SXPBNB"

    def __call__(self):
        return "SXPBNB"


SXPBNB = SXPBNB(*SXPBNB._fields)
"""
    name: SXPBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SXPBTC(Symbol):
    """
        name: SXPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SXPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPBTC"

    def __str__(self):
        return "SXPBTC"

    def __call__(self):
        return "SXPBTC"


SXPBTC = SXPBTC(*SXPBTC._fields)
"""
    name: SXPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SXPBUSD(Symbol):
    """
        name: SXPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPBUSD"

    def __str__(self):
        return "SXPBUSD"

    def __call__(self):
        return "SXPBUSD"


SXPBUSD = SXPBUSD(*SXPBUSD._fields)
"""
    name: SXPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPDOWNUSDT(Symbol):
    """
        name: SXPDOWNUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPDOWNUSDT"

    def __str__(self):
        return "SXPDOWNUSDT"

    def __call__(self):
        return "SXPDOWNUSDT"


SXPDOWNUSDT = SXPDOWNUSDT(*SXPDOWNUSDT._fields)
"""
    name: SXPDOWNUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPEUR(Symbol):
    """
        name: SXPEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPEUR"

    def __str__(self):
        return "SXPEUR"

    def __call__(self):
        return "SXPEUR"


SXPEUR = SXPEUR(*SXPEUR._fields)
"""
    name: SXPEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPGBP(Symbol):
    """
        name: SXPGBP
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPGBP"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPGBP"

    def __str__(self):
        return "SXPGBP"

    def __call__(self):
        return "SXPGBP"


SXPGBP = SXPGBP(*SXPGBP._fields)
"""
    name: SXPGBP
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPTRY(Symbol):
    """
        name: SXPTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPTRY"

    def __str__(self):
        return "SXPTRY"

    def __call__(self):
        return "SXPTRY"


SXPTRY = SXPTRY(*SXPTRY._fields)
"""
    name: SXPTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPUPUSDT(Symbol):
    """
        name: SXPUPUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPUPUSDT"

    def __str__(self):
        return "SXPUPUSDT"

    def __call__(self):
        return "SXPUPUSDT"


SXPUPUSDT = SXPUPUSDT(*SXPUPUSDT._fields)
"""
    name: SXPUPUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPUSDT(Symbol):
    """
        name: SXPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SXPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPUSDT"

    def __str__(self):
        return "SXPUSDT"

    def __call__(self):
        return "SXPUSDT"


SXPUSDT = SXPUSDT(*SXPUSDT._fields)
"""
    name: SXPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SYNBTC(Symbol):
    """
        name: SYNBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYNBTC"

    def __str__(self):
        return "SYNBTC"

    def __call__(self):
        return "SYNBTC"


SYNBTC = SYNBTC(*SYNBTC._fields)
"""
    name: SYNBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYNUSDT(Symbol):
    """
        name: SYNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SYNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYNUSDT"

    def __str__(self):
        return "SYNUSDT"

    def __call__(self):
        return "SYNUSDT"


SYNUSDT = SYNUSDT(*SYNUSDT._fields)
"""
    name: SYNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SYSBNB(Symbol):
    """
        name: SYSBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSBNB"

    def __str__(self):
        return "SYSBNB"

    def __call__(self):
        return "SYSBNB"


SYSBNB = SYSBNB(*SYSBNB._fields)
"""
    name: SYSBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYSBTC(Symbol):
    """
        name: SYSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSBTC"

    def __str__(self):
        return "SYSBTC"

    def __call__(self):
        return "SYSBTC"


SYSBTC = SYSBTC(*SYSBTC._fields)
"""
    name: SYSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYSBUSD(Symbol):
    """
        name: SYSBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSBUSD"

    def __str__(self):
        return "SYSBUSD"

    def __call__(self):
        return "SYSBUSD"


SYSBUSD = SYSBUSD(*SYSBUSD._fields)
"""
    name: SYSBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYSETH(Symbol):
    """
        name: SYSETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSETH"

    def __str__(self):
        return "SYSETH"

    def __call__(self):
        return "SYSETH"


SYSETH = SYSETH(*SYSETH._fields)
"""
    name: SYSETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYSUSDT(Symbol):
    """
        name: SYSUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSUSDT"

    def __str__(self):
        return "SYSUSDT"

    def __call__(self):
        return "SYSUSDT"


SYSUSDT = SYSUSDT(*SYSUSDT._fields)
"""
    name: SYSUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TBUSD(Symbol):
    """
        name: TBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TBUSD"

    def __str__(self):
        return "TBUSD"

    def __call__(self):
        return "TBUSD"


TBUSD = TBUSD(*TBUSD._fields)
"""
    name: TBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TCTBNB(Symbol):
    """
        name: TCTBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TCTBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TCTBNB"

    def __str__(self):
        return "TCTBNB"

    def __call__(self):
        return "TCTBNB"


TCTBNB = TCTBNB(*TCTBNB._fields)
"""
    name: TCTBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TCTBTC(Symbol):
    """
        name: TCTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TCTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TCTBTC"

    def __str__(self):
        return "TCTBTC"

    def __call__(self):
        return "TCTBTC"


TCTBTC = TCTBTC(*TCTBTC._fields)
"""
    name: TCTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TCTUSDT(Symbol):
    """
        name: TCTUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TCTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TCTUSDT"

    def __str__(self):
        return "TCTUSDT"

    def __call__(self):
        return "TCTUSDT"


TCTUSDT = TCTUSDT(*TCTUSDT._fields)
"""
    name: TCTUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELBNB(Symbol):
    """
        name: TFUELBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELBNB"

    def __str__(self):
        return "TFUELBNB"

    def __call__(self):
        return "TFUELBNB"


TFUELBNB = TFUELBNB(*TFUELBNB._fields)
"""
    name: TFUELBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELBTC(Symbol):
    """
        name: TFUELBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TFUELBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELBTC"

    def __str__(self):
        return "TFUELBTC"

    def __call__(self):
        return "TFUELBTC"


TFUELBTC = TFUELBTC(*TFUELBTC._fields)
"""
    name: TFUELBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TFUELBUSD(Symbol):
    """
        name: TFUELBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELBUSD"

    def __str__(self):
        return "TFUELBUSD"

    def __call__(self):
        return "TFUELBUSD"


TFUELBUSD = TFUELBUSD(*TFUELBUSD._fields)
"""
    name: TFUELBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELPAX(Symbol):
    """
        name: TFUELPAX
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELPAX"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELPAX"

    def __str__(self):
        return "TFUELPAX"

    def __call__(self):
        return "TFUELPAX"


TFUELPAX = TFUELPAX(*TFUELPAX._fields)
"""
    name: TFUELPAX
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELTUSD(Symbol):
    """
        name: TFUELTUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELTUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELTUSD"

    def __str__(self):
        return "TFUELTUSD"

    def __call__(self):
        return "TFUELTUSD"


TFUELTUSD = TFUELTUSD(*TFUELTUSD._fields)
"""
    name: TFUELTUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELUSDC(Symbol):
    """
        name: TFUELUSDC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELUSDC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELUSDC"

    def __str__(self):
        return "TFUELUSDC"

    def __call__(self):
        return "TFUELUSDC"


TFUELUSDC = TFUELUSDC(*TFUELUSDC._fields)
"""
    name: TFUELUSDC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELUSDT(Symbol):
    """
        name: TFUELUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TFUELUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELUSDT"

    def __str__(self):
        return "TFUELUSDT"

    def __call__(self):
        return "TFUELUSDT"


TFUELUSDT = TFUELUSDT(*TFUELUSDT._fields)
"""
    name: TFUELUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class THETABNB(Symbol):
    """
        name: THETABNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "THETABNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETABNB"

    def __str__(self):
        return "THETABNB"

    def __call__(self):
        return "THETABNB"


THETABNB = THETABNB(*THETABNB._fields)
"""
    name: THETABNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class THETABTC(Symbol):
    """
        name: THETABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "THETABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETABTC"

    def __str__(self):
        return "THETABTC"

    def __call__(self):
        return "THETABTC"


THETABTC = THETABTC(*THETABTC._fields)
"""
    name: THETABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class THETABUSD(Symbol):
    """
        name: THETABUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "THETABUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETABUSD"

    def __str__(self):
        return "THETABUSD"

    def __call__(self):
        return "THETABUSD"


THETABUSD = THETABUSD(*THETABUSD._fields)
"""
    name: THETABUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class THETAETH(Symbol):
    """
        name: THETAETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "THETAETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETAETH"

    def __str__(self):
        return "THETAETH"

    def __call__(self):
        return "THETAETH"


THETAETH = THETAETH(*THETAETH._fields)
"""
    name: THETAETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class THETAEUR(Symbol):
    """
        name: THETAEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "THETAEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETAEUR"

    def __str__(self):
        return "THETAEUR"

    def __call__(self):
        return "THETAEUR"


THETAEUR = THETAEUR(*THETAEUR._fields)
"""
    name: THETAEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class THETAUSDT(Symbol):
    """
        name: THETAUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "THETAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETAUSDT"

    def __str__(self):
        return "THETAUSDT"

    def __call__(self):
        return "THETAUSDT"


THETAUSDT = THETAUSDT(*THETAUSDT._fields)
"""
    name: THETAUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TKOBIDR(Symbol):
    """
        name: TKOBIDR
        significant_digits: None
        tick_size: 0.01
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "TKOBIDR"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TKOBIDR"

    def __str__(self):
        return "TKOBIDR"

    def __call__(self):
        return "TKOBIDR"


TKOBIDR = TKOBIDR(*TKOBIDR._fields)
"""
    name: TKOBIDR
    significant_digits: None
    tick_size: 0.01
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class TKOBTC(Symbol):
    """
        name: TKOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TKOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TKOBTC"

    def __str__(self):
        return "TKOBTC"

    def __call__(self):
        return "TKOBTC"


TKOBTC = TKOBTC(*TKOBTC._fields)
"""
    name: TKOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TKOBUSD(Symbol):
    """
        name: TKOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TKOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TKOBUSD"

    def __str__(self):
        return "TKOBUSD"

    def __call__(self):
        return "TKOBUSD"


TKOBUSD = TKOBUSD(*TKOBUSD._fields)
"""
    name: TKOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TKOUSDT(Symbol):
    """
        name: TKOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TKOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TKOUSDT"

    def __str__(self):
        return "TKOUSDT"

    def __call__(self):
        return "TKOUSDT"


TKOUSDT = TKOUSDT(*TKOUSDT._fields)
"""
    name: TKOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TLMBNB(Symbol):
    """
        name: TLMBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TLMBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMBNB"

    def __str__(self):
        return "TLMBNB"

    def __call__(self):
        return "TLMBNB"


TLMBNB = TLMBNB(*TLMBNB._fields)
"""
    name: TLMBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TLMBTC(Symbol):
    """
        name: TLMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TLMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMBTC"

    def __str__(self):
        return "TLMBTC"

    def __call__(self):
        return "TLMBTC"


TLMBTC = TLMBTC(*TLMBTC._fields)
"""
    name: TLMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TLMBUSD(Symbol):
    """
        name: TLMBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TLMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMBUSD"

    def __str__(self):
        return "TLMBUSD"

    def __call__(self):
        return "TLMBUSD"


TLMBUSD = TLMBUSD(*TLMBUSD._fields)
"""
    name: TLMBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TLMTRY(Symbol):
    """
        name: TLMTRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TLMTRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMTRY"

    def __str__(self):
        return "TLMTRY"

    def __call__(self):
        return "TLMTRY"


TLMTRY = TLMTRY(*TLMTRY._fields)
"""
    name: TLMTRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class TLMUSDT(Symbol):
    """
        name: TLMUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TLMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMUSDT"

    def __str__(self):
        return "TLMUSDT"

    def __call__(self):
        return "TLMUSDT"


TLMUSDT = TLMUSDT(*TLMUSDT._fields)
"""
    name: TLMUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TNBBTC(Symbol):
    """
        name: TNBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TNBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TNBBTC"

    def __str__(self):
        return "TNBBTC"

    def __call__(self):
        return "TNBBTC"


TNBBTC = TNBBTC(*TNBBTC._fields)
"""
    name: TNBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TNBETH(Symbol):
    """
        name: TNBETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TNBETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TNBETH"

    def __str__(self):
        return "TNBETH"

    def __call__(self):
        return "TNBETH"


TNBETH = TNBETH(*TNBETH._fields)
"""
    name: TNBETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TNTBTC(Symbol):
    """
        name: TNTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TNTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TNTBTC"

    def __str__(self):
        return "TNTBTC"

    def __call__(self):
        return "TNTBTC"


TNTBTC = TNTBTC(*TNTBTC._fields)
"""
    name: TNTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TNTETH(Symbol):
    """
        name: TNTETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TNTETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TNTETH"

    def __str__(self):
        return "TNTETH"

    def __call__(self):
        return "TNTETH"


TNTETH = TNTETH(*TNTETH._fields)
"""
    name: TNTETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOBNB(Symbol):
    """
        name: TOMOBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TOMOBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOBNB"

    def __str__(self):
        return "TOMOBNB"

    def __call__(self):
        return "TOMOBNB"


TOMOBNB = TOMOBNB(*TOMOBNB._fields)
"""
    name: TOMOBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOBTC(Symbol):
    """
        name: TOMOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TOMOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOBTC"

    def __str__(self):
        return "TOMOBTC"

    def __call__(self):
        return "TOMOBTC"


TOMOBTC = TOMOBTC(*TOMOBTC._fields)
"""
    name: TOMOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOBUSD(Symbol):
    """
        name: TOMOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TOMOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOBUSD"

    def __str__(self):
        return "TOMOBUSD"

    def __call__(self):
        return "TOMOBUSD"


TOMOBUSD = TOMOBUSD(*TOMOBUSD._fields)
"""
    name: TOMOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOUSDC(Symbol):
    """
        name: TOMOUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TOMOUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOUSDC"

    def __str__(self):
        return "TOMOUSDC"

    def __call__(self):
        return "TOMOUSDC"


TOMOUSDC = TOMOUSDC(*TOMOUSDC._fields)
"""
    name: TOMOUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOUSDT(Symbol):
    """
        name: TOMOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TOMOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOUSDT"

    def __str__(self):
        return "TOMOUSDT"

    def __call__(self):
        return "TOMOUSDT"


TOMOUSDT = TOMOUSDT(*TOMOUSDT._fields)
"""
    name: TOMOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TORNBNB(Symbol):
    """
        name: TORNBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TORNBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TORNBNB"

    def __str__(self):
        return "TORNBNB"

    def __call__(self):
        return "TORNBNB"


TORNBNB = TORNBNB(*TORNBNB._fields)
"""
    name: TORNBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TORNBTC(Symbol):
    """
        name: TORNBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TORNBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TORNBTC"

    def __str__(self):
        return "TORNBTC"

    def __call__(self):
        return "TORNBTC"


TORNBTC = TORNBTC(*TORNBTC._fields)
"""
    name: TORNBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TORNBUSD(Symbol):
    """
        name: TORNBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TORNBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TORNBUSD"

    def __str__(self):
        return "TORNBUSD"

    def __call__(self):
        return "TORNBUSD"


TORNBUSD = TORNBUSD(*TORNBUSD._fields)
"""
    name: TORNBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TORNUSDT(Symbol):
    """
        name: TORNUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TORNUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TORNUSDT"

    def __str__(self):
        return "TORNUSDT"

    def __call__(self):
        return "TORNUSDT"


TORNUSDT = TORNUSDT(*TORNUSDT._fields)
"""
    name: TORNUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRBBNB(Symbol):
    """
        name: TRBBNB
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRBBNB"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRBBNB"

    def __str__(self):
        return "TRBBNB"

    def __call__(self):
        return "TRBBNB"


TRBBNB = TRBBNB(*TRBBNB._fields)
"""
    name: TRBBNB
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRBBTC(Symbol):
    """
        name: TRBBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRBBTC"

    def __str__(self):
        return "TRBBTC"

    def __call__(self):
        return "TRBBTC"


TRBBTC = TRBBTC(*TRBBTC._fields)
"""
    name: TRBBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRBBUSD(Symbol):
    """
        name: TRBBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRBBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRBBUSD"

    def __str__(self):
        return "TRBBUSD"

    def __call__(self):
        return "TRBBUSD"


TRBBUSD = TRBBUSD(*TRBBUSD._fields)
"""
    name: TRBBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRBUSDT(Symbol):
    """
        name: TRBUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRBUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRBUSDT"

    def __str__(self):
        return "TRBUSDT"

    def __call__(self):
        return "TRBUSDT"


TRBUSDT = TRBUSDT(*TRBUSDT._fields)
"""
    name: TRBUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRIBEBNB(Symbol):
    """
        name: TRIBEBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIBEBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBEBNB"

    def __str__(self):
        return "TRIBEBNB"

    def __call__(self):
        return "TRIBEBNB"


TRIBEBNB = TRIBEBNB(*TRIBEBNB._fields)
"""
    name: TRIBEBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIBEBTC(Symbol):
    """
        name: TRIBEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIBEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBEBTC"

    def __str__(self):
        return "TRIBEBTC"

    def __call__(self):
        return "TRIBEBTC"


TRIBEBTC = TRIBEBTC(*TRIBEBTC._fields)
"""
    name: TRIBEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIBEBUSD(Symbol):
    """
        name: TRIBEBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIBEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBEBUSD"

    def __str__(self):
        return "TRIBEBUSD"

    def __call__(self):
        return "TRIBEBUSD"


TRIBEBUSD = TRIBEBUSD(*TRIBEBUSD._fields)
"""
    name: TRIBEBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIBEUSDT(Symbol):
    """
        name: TRIBEUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIBEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBEUSDT"

    def __str__(self):
        return "TRIBEUSDT"

    def __call__(self):
        return "TRIBEUSDT"


TRIBEUSDT = TRIBEUSDT(*TRIBEUSDT._fields)
"""
    name: TRIBEUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIGBNB(Symbol):
    """
        name: TRIGBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIGBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIGBNB"

    def __str__(self):
        return "TRIGBNB"

    def __call__(self):
        return "TRIGBNB"


TRIGBNB = TRIGBNB(*TRIGBNB._fields)
"""
    name: TRIGBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIGBTC(Symbol):
    """
        name: TRIGBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIGBTC"

    def __str__(self):
        return "TRIGBTC"

    def __call__(self):
        return "TRIGBTC"


TRIGBTC = TRIGBTC(*TRIGBTC._fields)
"""
    name: TRIGBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIGETH(Symbol):
    """
        name: TRIGETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIGETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIGETH"

    def __str__(self):
        return "TRIGETH"

    def __call__(self):
        return "TRIGETH"


TRIGETH = TRIGETH(*TRIGETH._fields)
"""
    name: TRIGETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TROYBNB(Symbol):
    """
        name: TROYBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TROYBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TROYBNB"

    def __str__(self):
        return "TROYBNB"

    def __call__(self):
        return "TROYBNB"


TROYBNB = TROYBNB(*TROYBNB._fields)
"""
    name: TROYBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TROYBTC(Symbol):
    """
        name: TROYBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TROYBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TROYBTC"

    def __str__(self):
        return "TROYBTC"

    def __call__(self):
        return "TROYBTC"


TROYBTC = TROYBTC(*TROYBTC._fields)
"""
    name: TROYBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TROYBUSD(Symbol):
    """
        name: TROYBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TROYBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TROYBUSD"

    def __str__(self):
        return "TROYBUSD"

    def __call__(self):
        return "TROYBUSD"


TROYBUSD = TROYBUSD(*TROYBUSD._fields)
"""
    name: TROYBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TROYUSDT(Symbol):
    """
        name: TROYUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TROYUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TROYUSDT"

    def __str__(self):
        return "TROYUSDT"

    def __call__(self):
        return "TROYUSDT"


TROYUSDT = TROYUSDT(*TROYUSDT._fields)
"""
    name: TROYUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRUBTC(Symbol):
    """
        name: TRUBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRUBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRUBTC"

    def __str__(self):
        return "TRUBTC"

    def __call__(self):
        return "TRUBTC"


TRUBTC = TRUBTC(*TRUBTC._fields)
"""
    name: TRUBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRUBUSD(Symbol):
    """
        name: TRUBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRUBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRUBUSD"

    def __str__(self):
        return "TRUBUSD"

    def __call__(self):
        return "TRUBUSD"


TRUBUSD = TRUBUSD(*TRUBUSD._fields)
"""
    name: TRUBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRURUB(Symbol):
    """
        name: TRURUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRURUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRURUB"

    def __str__(self):
        return "TRURUB"

    def __call__(self):
        return "TRURUB"


TRURUB = TRURUB(*TRURUB._fields)
"""
    name: TRURUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class TRUUSDT(Symbol):
    """
        name: TRUUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRUUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRUUSDT"

    def __str__(self):
        return "TRUUSDT"

    def __call__(self):
        return "TRUUSDT"


TRUUSDT = TRUUSDT(*TRUUSDT._fields)
"""
    name: TRUUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXAUD(Symbol):
    """
        name: TRXAUD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXAUD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXAUD"

    def __str__(self):
        return "TRXAUD"

    def __call__(self):
        return "TRXAUD"


TRXAUD = TRXAUD(*TRXAUD._fields)
"""
    name: TRXAUD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXBNB(Symbol):
    """
        name: TRXBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXBNB"

    def __str__(self):
        return "TRXBNB"

    def __call__(self):
        return "TRXBNB"


TRXBNB = TRXBNB(*TRXBNB._fields)
"""
    name: TRXBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXBTC(Symbol):
    """
        name: TRXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXBTC"

    def __str__(self):
        return "TRXBTC"

    def __call__(self):
        return "TRXBTC"


TRXBTC = TRXBTC(*TRXBTC._fields)
"""
    name: TRXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXBUSD(Symbol):
    """
        name: TRXBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXBUSD"

    def __str__(self):
        return "TRXBUSD"

    def __call__(self):
        return "TRXBUSD"


TRXBUSD = TRXBUSD(*TRXBUSD._fields)
"""
    name: TRXBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXDOWNUSDT(Symbol):
    """
        name: TRXDOWNUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXDOWNUSDT"

    def __str__(self):
        return "TRXDOWNUSDT"

    def __call__(self):
        return "TRXDOWNUSDT"


TRXDOWNUSDT = TRXDOWNUSDT(*TRXDOWNUSDT._fields)
"""
    name: TRXDOWNUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXETH(Symbol):
    """
        name: TRXETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRXETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXETH"

    def __str__(self):
        return "TRXETH"

    def __call__(self):
        return "TRXETH"


TRXETH = TRXETH(*TRXETH._fields)
"""
    name: TRXETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXEUR(Symbol):
    """
        name: TRXEUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXEUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXEUR"

    def __str__(self):
        return "TRXEUR"

    def __call__(self):
        return "TRXEUR"


TRXEUR = TRXEUR(*TRXEUR._fields)
"""
    name: TRXEUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXNGN(Symbol):
    """
        name: TRXNGN
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXNGN"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXNGN"

    def __str__(self):
        return "TRXNGN"

    def __call__(self):
        return "TRXNGN"


TRXNGN = TRXNGN(*TRXNGN._fields)
"""
    name: TRXNGN
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXPAX(Symbol):
    """
        name: TRXPAX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXPAX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXPAX"

    def __str__(self):
        return "TRXPAX"

    def __call__(self):
        return "TRXPAX"


TRXPAX = TRXPAX(*TRXPAX._fields)
"""
    name: TRXPAX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXTRY(Symbol):
    """
        name: TRXTRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXTRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXTRY"

    def __str__(self):
        return "TRXTRY"

    def __call__(self):
        return "TRXTRY"


TRXTRY = TRXTRY(*TRXTRY._fields)
"""
    name: TRXTRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXTUSD(Symbol):
    """
        name: TRXTUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXTUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXTUSD"

    def __str__(self):
        return "TRXTUSD"

    def __call__(self):
        return "TRXTUSD"


TRXTUSD = TRXTUSD(*TRXTUSD._fields)
"""
    name: TRXTUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXUPUSDT(Symbol):
    """
        name: TRXUPUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXUPUSDT"

    def __str__(self):
        return "TRXUPUSDT"

    def __call__(self):
        return "TRXUPUSDT"


TRXUPUSDT = TRXUPUSDT(*TRXUPUSDT._fields)
"""
    name: TRXUPUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXUSDC(Symbol):
    """
        name: TRXUSDC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXUSDC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXUSDC"

    def __str__(self):
        return "TRXUSDC"

    def __call__(self):
        return "TRXUSDC"


TRXUSDC = TRXUSDC(*TRXUSDC._fields)
"""
    name: TRXUSDC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXUSDT(Symbol):
    """
        name: TRXUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXUSDT"

    def __str__(self):
        return "TRXUSDT"

    def __call__(self):
        return "TRXUSDT"


TRXUSDT = TRXUSDT(*TRXUSDT._fields)
"""
    name: TRXUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXXRP(Symbol):
    """
        name: TRXXRP
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXXRP"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXXRP"

    def __str__(self):
        return "TRXXRP"

    def __call__(self):
        return "TRXXRP"


TRXXRP = TRXXRP(*TRXXRP._fields)
"""
    name: TRXXRP
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDBNB(Symbol):
    """
        name: TUSDBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDBNB"

    def __str__(self):
        return "TUSDBNB"

    def __call__(self):
        return "TUSDBNB"


TUSDBNB = TUSDBNB(*TUSDBNB._fields)
"""
    name: TUSDBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDBTC(Symbol):
    """
        name: TUSDBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDBTC"

    def __str__(self):
        return "TUSDBTC"

    def __call__(self):
        return "TUSDBTC"


TUSDBTC = TUSDBTC(*TUSDBTC._fields)
"""
    name: TUSDBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDBTUSD(Symbol):
    """
        name: TUSDBTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDBTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDBTUSD"

    def __str__(self):
        return "TUSDBTUSD"

    def __call__(self):
        return "TUSDBTUSD"


TUSDBTUSD = TUSDBTUSD(*TUSDBTUSD._fields)
"""
    name: TUSDBTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDBUSD(Symbol):
    """
        name: TUSDBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDBUSD"

    def __str__(self):
        return "TUSDBUSD"

    def __call__(self):
        return "TUSDBUSD"


TUSDBUSD = TUSDBUSD(*TUSDBUSD._fields)
"""
    name: TUSDBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDETH(Symbol):
    """
        name: TUSDETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDETH"

    def __str__(self):
        return "TUSDETH"

    def __call__(self):
        return "TUSDETH"


TUSDETH = TUSDETH(*TUSDETH._fields)
"""
    name: TUSDETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDT(Symbol):
    """
        name: TUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDT"

    def __str__(self):
        return "TUSDT"

    def __call__(self):
        return "TUSDT"


TUSDT = TUSDT(*TUSDT._fields)
"""
    name: TUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDUSDT(Symbol):
    """
        name: TUSDUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TUSDUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDUSDT"

    def __str__(self):
        return "TUSDUSDT"

    def __call__(self):
        return "TUSDUSDT"


TUSDUSDT = TUSDUSDT(*TUSDUSDT._fields)
"""
    name: TUSDUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TVKBTC(Symbol):
    """
        name: TVKBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TVKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVKBTC"

    def __str__(self):
        return "TVKBTC"

    def __call__(self):
        return "TVKBTC"


TVKBTC = TVKBTC(*TVKBTC._fields)
"""
    name: TVKBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TVKBUSD(Symbol):
    """
        name: TVKBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TVKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVKBUSD"

    def __str__(self):
        return "TVKBUSD"

    def __call__(self):
        return "TVKBUSD"


TVKBUSD = TVKBUSD(*TVKBUSD._fields)
"""
    name: TVKBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TVKUSDT(Symbol):
    """
        name: TVKUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TVKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVKUSDT"

    def __str__(self):
        return "TVKUSDT"

    def __call__(self):
        return "TVKUSDT"


TVKUSDT = TVKUSDT(*TVKUSDT._fields)
"""
    name: TVKUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TWTBTC(Symbol):
    """
        name: TWTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TWTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWTBTC"

    def __str__(self):
        return "TWTBTC"

    def __call__(self):
        return "TWTBTC"


TWTBTC = TWTBTC(*TWTBTC._fields)
"""
    name: TWTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TWTBUSD(Symbol):
    """
        name: TWTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TWTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWTBUSD"

    def __str__(self):
        return "TWTBUSD"

    def __call__(self):
        return "TWTBUSD"


TWTBUSD = TWTBUSD(*TWTBUSD._fields)
"""
    name: TWTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TWTTRY(Symbol):
    """
        name: TWTTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TWTTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWTTRY"

    def __str__(self):
        return "TWTTRY"

    def __call__(self):
        return "TWTTRY"


TWTTRY = TWTTRY(*TWTTRY._fields)
"""
    name: TWTTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class TWTUSDT(Symbol):
    """
        name: TWTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TWTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWTUSDT"

    def __str__(self):
        return "TWTUSDT"

    def __call__(self):
        return "TWTUSDT"


TWTUSDT = TWTUSDT(*TWTUSDT._fields)
"""
    name: TWTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UFTBUSD(Symbol):
    """
        name: UFTBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UFTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UFTBUSD"

    def __str__(self):
        return "UFTBUSD"

    def __call__(self):
        return "UFTBUSD"


UFTBUSD = UFTBUSD(*UFTBUSD._fields)
"""
    name: UFTBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UFTETH(Symbol):
    """
        name: UFTETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UFTETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UFTETH"

    def __str__(self):
        return "UFTETH"

    def __call__(self):
        return "UFTETH"


UFTETH = UFTETH(*UFTETH._fields)
"""
    name: UFTETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UFTUSDT(Symbol):
    """
        name: UFTUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UFTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UFTUSDT"

    def __str__(self):
        return "UFTUSDT"

    def __call__(self):
        return "UFTUSDT"


UFTUSDT = UFTUSDT(*UFTUSDT._fields)
"""
    name: UFTUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UMABTC(Symbol):
    """
        name: UMABTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UMABTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMABTC"

    def __str__(self):
        return "UMABTC"

    def __call__(self):
        return "UMABTC"


UMABTC = UMABTC(*UMABTC._fields)
"""
    name: UMABTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UMABUSD(Symbol):
    """
        name: UMABUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UMABUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMABUSD"

    def __str__(self):
        return "UMABUSD"

    def __call__(self):
        return "UMABUSD"


UMABUSD = UMABUSD(*UMABUSD._fields)
"""
    name: UMABUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UMATRY(Symbol):
    """
        name: UMATRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UMATRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMATRY"

    def __str__(self):
        return "UMATRY"

    def __call__(self):
        return "UMATRY"


UMATRY = UMATRY(*UMATRY._fields)
"""
    name: UMATRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class UMAUSDT(Symbol):
    """
        name: UMAUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UMAUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMAUSDT"

    def __str__(self):
        return "UMAUSDT"

    def __call__(self):
        return "UMAUSDT"


UMAUSDT = UMAUSDT(*UMAUSDT._fields)
"""
    name: UMAUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UNFIBNB(Symbol):
    """
        name: UNFIBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNFIBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIBNB"

    def __str__(self):
        return "UNFIBNB"

    def __call__(self):
        return "UNFIBNB"


UNFIBNB = UNFIBNB(*UNFIBNB._fields)
"""
    name: UNFIBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNFIBTC(Symbol):
    """
        name: UNFIBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNFIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIBTC"

    def __str__(self):
        return "UNFIBTC"

    def __call__(self):
        return "UNFIBTC"


UNFIBTC = UNFIBTC(*UNFIBTC._fields)
"""
    name: UNFIBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNFIBUSD(Symbol):
    """
        name: UNFIBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNFIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIBUSD"

    def __str__(self):
        return "UNFIBUSD"

    def __call__(self):
        return "UNFIBUSD"


UNFIBUSD = UNFIBUSD(*UNFIBUSD._fields)
"""
    name: UNFIBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNFIETH(Symbol):
    """
        name: UNFIETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNFIETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIETH"

    def __str__(self):
        return "UNFIETH"

    def __call__(self):
        return "UNFIETH"


UNFIETH = UNFIETH(*UNFIETH._fields)
"""
    name: UNFIETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNFIUSDT(Symbol):
    """
        name: UNFIUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UNFIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIUSDT"

    def __str__(self):
        return "UNFIUSDT"

    def __call__(self):
        return "UNFIUSDT"


UNFIUSDT = UNFIUSDT(*UNFIUSDT._fields)
"""
    name: UNFIUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UNIAUD(Symbol):
    """
        name: UNIAUD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIAUD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIAUD"

    def __str__(self):
        return "UNIAUD"

    def __call__(self):
        return "UNIAUD"


UNIAUD = UNIAUD(*UNIAUD._fields)
"""
    name: UNIAUD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIBNB(Symbol):
    """
        name: UNIBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIBNB"

    def __str__(self):
        return "UNIBNB"

    def __call__(self):
        return "UNIBNB"


UNIBNB = UNIBNB(*UNIBNB._fields)
"""
    name: UNIBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIBTC(Symbol):
    """
        name: UNIBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UNIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIBTC"

    def __str__(self):
        return "UNIBTC"

    def __call__(self):
        return "UNIBTC"


UNIBTC = UNIBTC(*UNIBTC._fields)
"""
    name: UNIBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UNIBUSD(Symbol):
    """
        name: UNIBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UNIBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIBUSD"

    def __str__(self):
        return "UNIBUSD"

    def __call__(self):
        return "UNIBUSD"


UNIBUSD = UNIBUSD(*UNIBUSD._fields)
"""
    name: UNIBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UNIDOWNUSDT(Symbol):
    """
        name: UNIDOWNUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIDOWNUSDT"

    def __str__(self):
        return "UNIDOWNUSDT"

    def __call__(self):
        return "UNIDOWNUSDT"


UNIDOWNUSDT = UNIDOWNUSDT(*UNIDOWNUSDT._fields)
"""
    name: UNIDOWNUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIETH(Symbol):
    """
        name: UNIETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIETH"

    def __str__(self):
        return "UNIETH"

    def __call__(self):
        return "UNIETH"


UNIETH = UNIETH(*UNIETH._fields)
"""
    name: UNIETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIEUR(Symbol):
    """
        name: UNIEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIEUR"

    def __str__(self):
        return "UNIEUR"

    def __call__(self):
        return "UNIEUR"


UNIEUR = UNIEUR(*UNIEUR._fields)
"""
    name: UNIEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIUPUSDT(Symbol):
    """
        name: UNIUPUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIUPUSDT"

    def __str__(self):
        return "UNIUPUSDT"

    def __call__(self):
        return "UNIUPUSDT"


UNIUPUSDT = UNIUPUSDT(*UNIUPUSDT._fields)
"""
    name: UNIUPUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIUSDT(Symbol):
    """
        name: UNIUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UNIUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIUSDT"

    def __str__(self):
        return "UNIUSDT"

    def __call__(self):
        return "UNIUSDT"


UNIUSDT = UNIUSDT(*UNIUSDT._fields)
"""
    name: UNIUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class USDCBNB(Symbol):
    """
        name: USDCBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDCBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCBNB"

    def __str__(self):
        return "USDCBNB"

    def __call__(self):
        return "USDCBNB"


USDCBNB = USDCBNB(*USDCBNB._fields)
"""
    name: USDCBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDCBUSD(Symbol):
    """
        name: USDCBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCBUSD"

    def __str__(self):
        return "USDCBUSD"

    def __call__(self):
        return "USDCBUSD"


USDCBUSD = USDCBUSD(*USDCBUSD._fields)
"""
    name: USDCBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDCPAX(Symbol):
    """
        name: USDCPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDCPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCPAX"

    def __str__(self):
        return "USDCPAX"

    def __call__(self):
        return "USDCPAX"


USDCPAX = USDCPAX(*USDCPAX._fields)
"""
    name: USDCPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDCTUSD(Symbol):
    """
        name: USDCTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDCTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCTUSD"

    def __str__(self):
        return "USDCTUSD"

    def __call__(self):
        return "USDCTUSD"


USDCTUSD = USDCTUSD(*USDCTUSD._fields)
"""
    name: USDCTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDCUSDT(Symbol):
    """
        name: USDCUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "USDCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCUSDT"

    def __str__(self):
        return "USDCUSDT"

    def __call__(self):
        return "USDCUSDT"


USDCUSDT = USDCUSDT(*USDCUSDT._fields)
"""
    name: USDCUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class USDPBUSD(Symbol):
    """
        name: USDPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDPBUSD"

    def __str__(self):
        return "USDPBUSD"

    def __call__(self):
        return "USDPBUSD"


USDPBUSD = USDPBUSD(*USDPBUSD._fields)
"""
    name: USDPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDPUSDT(Symbol):
    """
        name: USDPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDPUSDT"

    def __str__(self):
        return "USDPUSDT"

    def __call__(self):
        return "USDPUSDT"


USDPUSDT = USDPUSDT(*USDPUSDT._fields)
"""
    name: USDPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSBUSDS(Symbol):
    """
        name: USDSBUSDS
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSBUSDS"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSBUSDS"

    def __str__(self):
        return "USDSBUSDS"

    def __call__(self):
        return "USDSBUSDS"


USDSBUSDS = USDSBUSDS(*USDSBUSDS._fields)
"""
    name: USDSBUSDS
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSBUSDT(Symbol):
    """
        name: USDSBUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSBUSDT"

    def __str__(self):
        return "USDSBUSDT"

    def __call__(self):
        return "USDSBUSDT"


USDSBUSDT = USDSBUSDT(*USDSBUSDT._fields)
"""
    name: USDSBUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSPAX(Symbol):
    """
        name: USDSPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSPAX"

    def __str__(self):
        return "USDSPAX"

    def __call__(self):
        return "USDSPAX"


USDSPAX = USDSPAX(*USDSPAX._fields)
"""
    name: USDSPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSTUSD(Symbol):
    """
        name: USDSTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSTUSD"

    def __str__(self):
        return "USDSTUSD"

    def __call__(self):
        return "USDSTUSD"


USDSTUSD = USDSTUSD(*USDSTUSD._fields)
"""
    name: USDSTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSUSDC(Symbol):
    """
        name: USDSUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSUSDC"

    def __str__(self):
        return "USDSUSDC"

    def __call__(self):
        return "USDSUSDC"


USDSUSDC = USDSUSDC(*USDSUSDC._fields)
"""
    name: USDSUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSUSDT(Symbol):
    """
        name: USDSUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSUSDT"

    def __str__(self):
        return "USDSUSDT"

    def __call__(self):
        return "USDSUSDT"


USDSUSDT = USDSUSDT(*USDSUSDT._fields)
"""
    name: USDSUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTARS(Symbol):
    """
        name: USDTARS
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 2000.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTARS"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 2000.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTARS"

    def __str__(self):
        return "USDTARS"

    def __call__(self):
        return "USDTARS"


USDTARS = USDTARS(*USDTARS._fields)
"""
    name: USDTARS
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 2000.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTBIDR(Symbol):
    """
        name: USDTBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "USDTBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTBIDR"

    def __str__(self):
        return "USDTBIDR"

    def __call__(self):
        return "USDTBIDR"


USDTBIDR = USDTBIDR(*USDTBIDR._fields)
"""
    name: USDTBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class USDTBKRW(Symbol):
    """
        name: USDTBKRW
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTBKRW"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTBKRW"

    def __str__(self):
        return "USDTBKRW"

    def __call__(self):
        return "USDTBKRW"


USDTBKRW = USDTBKRW(*USDTBKRW._fields)
"""
    name: USDTBKRW
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTBRL(Symbol):
    """
        name: USDTBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTBRL"

    def __str__(self):
        return "USDTBRL"

    def __call__(self):
        return "USDTBRL"


USDTBRL = USDTBRL(*USDTBRL._fields)
"""
    name: USDTBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTBVND(Symbol):
    """
        name: USDTBVND
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 30000.00
        max_order_size: 9000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "USDTBVND"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 30000.00
    max_order_size: float = 9000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTBVND"

    def __str__(self):
        return "USDTBVND"

    def __call__(self):
        return "USDTBVND"


USDTBVND = USDTBVND(*USDTBVND._fields)
"""
    name: USDTBVND
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 30000.00
    max_order_size: 9000000.00
    has_margin: False
    exchange: binance
"""


class USDTDAI(Symbol):
    """
        name: USDTDAI
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTDAI"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTDAI"

    def __str__(self):
        return "USDTDAI"

    def __call__(self):
        return "USDTDAI"


USDTDAI = USDTDAI(*USDTDAI._fields)
"""
    name: USDTDAI
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTIDRT(Symbol):
    """
        name: USDTIDRT
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "USDTIDRT"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTIDRT"

    def __str__(self):
        return "USDTIDRT"

    def __call__(self):
        return "USDTIDRT"


USDTIDRT = USDTIDRT(*USDTIDRT._fields)
"""
    name: USDTIDRT
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class USDTNGN(Symbol):
    """
        name: USDTNGN
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTNGN"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTNGN"

    def __str__(self):
        return "USDTNGN"

    def __call__(self):
        return "USDTNGN"


USDTNGN = USDTNGN(*USDTNGN._fields)
"""
    name: USDTNGN
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTPLN(Symbol):
    """
        name: USDTPLN
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 50.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTPLN"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 50.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTPLN"

    def __str__(self):
        return "USDTPLN"

    def __call__(self):
        return "USDTPLN"


USDTPLN = USDTPLN(*USDTPLN._fields)
"""
    name: USDTPLN
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 50.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTRON(Symbol):
    """
        name: USDTRON
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 40.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTRON"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 40.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTRON"

    def __str__(self):
        return "USDTRON"

    def __call__(self):
        return "USDTRON"


USDTRON = USDTRON(*USDTRON._fields)
"""
    name: USDTRON
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 40.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTRUB(Symbol):
    """
        name: USDTRUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTRUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTRUB"

    def __str__(self):
        return "USDTRUB"

    def __call__(self):
        return "USDTRUB"


USDTRUB = USDTRUB(*USDTRUB._fields)
"""
    name: USDTRUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTTRY(Symbol):
    """
        name: USDTTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTTRY"

    def __str__(self):
        return "USDTTRY"

    def __call__(self):
        return "USDTTRY"


USDTTRY = USDTTRY(*USDTTRY._fields)
"""
    name: USDTTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTUAH(Symbol):
    """
        name: USDTUAH
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTUAH"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTUAH"

    def __str__(self):
        return "USDTUAH"

    def __call__(self):
        return "USDTUAH"


USDTUAH = USDTUAH(*USDTUAH._fields)
"""
    name: USDTUAH
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTZAR(Symbol):
    """
        name: USDTZAR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTZAR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTZAR"

    def __str__(self):
        return "USDTZAR"

    def __call__(self):
        return "USDTZAR"


USDTZAR = USDTZAR(*USDTZAR._fields)
"""
    name: USDTZAR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USTBTC(Symbol):
    """
        name: USTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTBTC"

    def __str__(self):
        return "USTBTC"

    def __call__(self):
        return "USTBTC"


USTBTC = USTBTC(*USTBTC._fields)
"""
    name: USTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USTBUSD(Symbol):
    """
        name: USTBUSD
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTBUSD"

    def __str__(self):
        return "USTBUSD"

    def __call__(self):
        return "USTBUSD"


USTBUSD = USTBUSD(*USTBUSD._fields)
"""
    name: USTBUSD
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USTCBUSD(Symbol):
    """
        name: USTCBUSD
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "USTCBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTCBUSD"

    def __str__(self):
        return "USTCBUSD"

    def __call__(self):
        return "USTCBUSD"


USTCBUSD = USTCBUSD(*USTCBUSD._fields)
"""
    name: USTCBUSD
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class USTCUSDT(Symbol):
    """
        name: USTCUSDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "USTCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTCUSDT"

    def __str__(self):
        return "USTCUSDT"

    def __call__(self):
        return "USTCUSDT"


USTCUSDT = USTCUSDT(*USTCUSDT._fields)
"""
    name: USTCUSDT
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class USTUSDT(Symbol):
    """
        name: USTUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTUSDT"

    def __str__(self):
        return "USTUSDT"

    def __call__(self):
        return "USTUSDT"


USTUSDT = USTUSDT(*USTUSDT._fields)
"""
    name: USTUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UTKBTC(Symbol):
    """
        name: UTKBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UTKBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTKBTC"

    def __str__(self):
        return "UTKBTC"

    def __call__(self):
        return "UTKBTC"


UTKBTC = UTKBTC(*UTKBTC._fields)
"""
    name: UTKBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UTKBUSD(Symbol):
    """
        name: UTKBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UTKBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTKBUSD"

    def __str__(self):
        return "UTKBUSD"

    def __call__(self):
        return "UTKBUSD"


UTKBUSD = UTKBUSD(*UTKBUSD._fields)
"""
    name: UTKBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UTKUSDT(Symbol):
    """
        name: UTKUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UTKUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTKUSDT"

    def __str__(self):
        return "UTKUSDT"

    def __call__(self):
        return "UTKUSDT"


UTKUSDT = UTKUSDT(*UTKUSDT._fields)
"""
    name: UTKUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VENBNB(Symbol):
    """
        name: VENBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VENBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VENBNB"

    def __str__(self):
        return "VENBNB"

    def __call__(self):
        return "VENBNB"


VENBNB = VENBNB(*VENBNB._fields)
"""
    name: VENBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VENBTC(Symbol):
    """
        name: VENBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VENBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VENBTC"

    def __str__(self):
        return "VENBTC"

    def __call__(self):
        return "VENBTC"


VENBTC = VENBTC(*VENBTC._fields)
"""
    name: VENBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VENETH(Symbol):
    """
        name: VENETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VENETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VENETH"

    def __str__(self):
        return "VENETH"

    def __call__(self):
        return "VENETH"


VENETH = VENETH(*VENETH._fields)
"""
    name: VENETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VENUSDT(Symbol):
    """
        name: VENUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VENUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VENUSDT"

    def __str__(self):
        return "VENUSDT"

    def __call__(self):
        return "VENUSDT"


VENUSDT = VENUSDT(*VENUSDT._fields)
"""
    name: VENUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETBNB(Symbol):
    """
        name: VETBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETBNB"

    def __str__(self):
        return "VETBNB"

    def __call__(self):
        return "VETBNB"


VETBNB = VETBNB(*VETBNB._fields)
"""
    name: VETBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETBTC(Symbol):
    """
        name: VETBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VETBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETBTC"

    def __str__(self):
        return "VETBTC"

    def __call__(self):
        return "VETBTC"


VETBTC = VETBTC(*VETBTC._fields)
"""
    name: VETBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VETBUSD(Symbol):
    """
        name: VETBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VETBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETBUSD"

    def __str__(self):
        return "VETBUSD"

    def __call__(self):
        return "VETBUSD"


VETBUSD = VETBUSD(*VETBUSD._fields)
"""
    name: VETBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VETETH(Symbol):
    """
        name: VETETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETETH"

    def __str__(self):
        return "VETETH"

    def __call__(self):
        return "VETETH"


VETETH = VETETH(*VETETH._fields)
"""
    name: VETETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETEUR(Symbol):
    """
        name: VETEUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETEUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETEUR"

    def __str__(self):
        return "VETEUR"

    def __call__(self):
        return "VETEUR"


VETEUR = VETEUR(*VETEUR._fields)
"""
    name: VETEUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETGBP(Symbol):
    """
        name: VETGBP
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETGBP"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETGBP"

    def __str__(self):
        return "VETGBP"

    def __call__(self):
        return "VETGBP"


VETGBP = VETGBP(*VETGBP._fields)
"""
    name: VETGBP
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETTRY(Symbol):
    """
        name: VETTRY
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETTRY"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETTRY"

    def __str__(self):
        return "VETTRY"

    def __call__(self):
        return "VETTRY"


VETTRY = VETTRY(*VETTRY._fields)
"""
    name: VETTRY
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class VETUSDT(Symbol):
    """
        name: VETUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VETUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETUSDT"

    def __str__(self):
        return "VETUSDT"

    def __call__(self):
        return "VETUSDT"


VETUSDT = VETUSDT(*VETUSDT._fields)
"""
    name: VETUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VGXBTC(Symbol):
    """
        name: VGXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VGXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VGXBTC"

    def __str__(self):
        return "VGXBTC"

    def __call__(self):
        return "VGXBTC"


VGXBTC = VGXBTC(*VGXBTC._fields)
"""
    name: VGXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VGXETH(Symbol):
    """
        name: VGXETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VGXETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VGXETH"

    def __str__(self):
        return "VGXETH"

    def __call__(self):
        return "VGXETH"


VGXETH = VGXETH(*VGXETH._fields)
"""
    name: VGXETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VGXUSDT(Symbol):
    """
        name: VGXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VGXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VGXUSDT"

    def __str__(self):
        return "VGXUSDT"

    def __call__(self):
        return "VGXUSDT"


VGXUSDT = VGXUSDT(*VGXUSDT._fields)
"""
    name: VGXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIABNB(Symbol):
    """
        name: VIABNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIABNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIABNB"

    def __str__(self):
        return "VIABNB"

    def __call__(self):
        return "VIABNB"


VIABNB = VIABNB(*VIABNB._fields)
"""
    name: VIABNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIABTC(Symbol):
    """
        name: VIABTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIABTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIABTC"

    def __str__(self):
        return "VIABTC"

    def __call__(self):
        return "VIABTC"


VIABTC = VIABTC(*VIABTC._fields)
"""
    name: VIABTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIAETH(Symbol):
    """
        name: VIAETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIAETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIAETH"

    def __str__(self):
        return "VIAETH"

    def __call__(self):
        return "VIAETH"


VIAETH = VIAETH(*VIAETH._fields)
"""
    name: VIAETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBBTC(Symbol):
    """
        name: VIBBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIBBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBBTC"

    def __str__(self):
        return "VIBBTC"

    def __call__(self):
        return "VIBBTC"


VIBBTC = VIBBTC(*VIBBTC._fields)
"""
    name: VIBBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBBUSD(Symbol):
    """
        name: VIBBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VIBBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBBUSD"

    def __str__(self):
        return "VIBBUSD"

    def __call__(self):
        return "VIBBUSD"


VIBBUSD = VIBBUSD(*VIBBUSD._fields)
"""
    name: VIBBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VIBEBTC(Symbol):
    """
        name: VIBEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIBEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBEBTC"

    def __str__(self):
        return "VIBEBTC"

    def __call__(self):
        return "VIBEBTC"


VIBEBTC = VIBEBTC(*VIBEBTC._fields)
"""
    name: VIBEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBEETH(Symbol):
    """
        name: VIBEETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIBEETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBEETH"

    def __str__(self):
        return "VIBEETH"

    def __call__(self):
        return "VIBEETH"


VIBEETH = VIBEETH(*VIBEETH._fields)
"""
    name: VIBEETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBETH(Symbol):
    """
        name: VIBETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIBETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBETH"

    def __str__(self):
        return "VIBETH"

    def __call__(self):
        return "VIBETH"


VIBETH = VIBETH(*VIBETH._fields)
"""
    name: VIBETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBUSDT(Symbol):
    """
        name: VIBUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VIBUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBUSDT"

    def __str__(self):
        return "VIBUSDT"

    def __call__(self):
        return "VIBUSDT"


VIBUSDT = VIBUSDT(*VIBUSDT._fields)
"""
    name: VIBUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VIDTBTC(Symbol):
    """
        name: VIDTBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIDTBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIDTBTC"

    def __str__(self):
        return "VIDTBTC"

    def __call__(self):
        return "VIDTBTC"


VIDTBTC = VIDTBTC(*VIDTBTC._fields)
"""
    name: VIDTBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIDTBUSD(Symbol):
    """
        name: VIDTBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIDTBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIDTBUSD"

    def __str__(self):
        return "VIDTBUSD"

    def __call__(self):
        return "VIDTBUSD"


VIDTBUSD = VIDTBUSD(*VIDTBUSD._fields)
"""
    name: VIDTBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIDTUSDT(Symbol):
    """
        name: VIDTUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIDTUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIDTUSDT"

    def __str__(self):
        return "VIDTUSDT"

    def __call__(self):
        return "VIDTUSDT"


VIDTUSDT = VIDTUSDT(*VIDTUSDT._fields)
"""
    name: VIDTUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VITEBNB(Symbol):
    """
        name: VITEBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VITEBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VITEBNB"

    def __str__(self):
        return "VITEBNB"

    def __call__(self):
        return "VITEBNB"


VITEBNB = VITEBNB(*VITEBNB._fields)
"""
    name: VITEBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VITEBTC(Symbol):
    """
        name: VITEBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VITEBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VITEBTC"

    def __str__(self):
        return "VITEBTC"

    def __call__(self):
        return "VITEBTC"


VITEBTC = VITEBTC(*VITEBTC._fields)
"""
    name: VITEBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VITEBUSD(Symbol):
    """
        name: VITEBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VITEBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VITEBUSD"

    def __str__(self):
        return "VITEBUSD"

    def __call__(self):
        return "VITEBUSD"


VITEBUSD = VITEBUSD(*VITEBUSD._fields)
"""
    name: VITEBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VITEUSDT(Symbol):
    """
        name: VITEUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VITEUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VITEUSDT"

    def __str__(self):
        return "VITEUSDT"

    def __call__(self):
        return "VITEUSDT"


VITEUSDT = VITEUSDT(*VITEUSDT._fields)
"""
    name: VITEUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELBNB(Symbol):
    """
        name: VOXELBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELBNB"

    def __str__(self):
        return "VOXELBNB"

    def __call__(self):
        return "VOXELBNB"


VOXELBNB = VOXELBNB(*VOXELBNB._fields)
"""
    name: VOXELBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELBTC(Symbol):
    """
        name: VOXELBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELBTC"

    def __str__(self):
        return "VOXELBTC"

    def __call__(self):
        return "VOXELBTC"


VOXELBTC = VOXELBTC(*VOXELBTC._fields)
"""
    name: VOXELBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELBUSD(Symbol):
    """
        name: VOXELBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELBUSD"

    def __str__(self):
        return "VOXELBUSD"

    def __call__(self):
        return "VOXELBUSD"


VOXELBUSD = VOXELBUSD(*VOXELBUSD._fields)
"""
    name: VOXELBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELETH(Symbol):
    """
        name: VOXELETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELETH"

    def __str__(self):
        return "VOXELETH"

    def __call__(self):
        return "VOXELETH"


VOXELETH = VOXELETH(*VOXELETH._fields)
"""
    name: VOXELETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELUSDT(Symbol):
    """
        name: VOXELUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELUSDT"

    def __str__(self):
        return "VOXELUSDT"

    def __call__(self):
        return "VOXELUSDT"


VOXELUSDT = VOXELUSDT(*VOXELUSDT._fields)
"""
    name: VOXELUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VTHOBNB(Symbol):
    """
        name: VTHOBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VTHOBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VTHOBNB"

    def __str__(self):
        return "VTHOBNB"

    def __call__(self):
        return "VTHOBNB"


VTHOBNB = VTHOBNB(*VTHOBNB._fields)
"""
    name: VTHOBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VTHOBUSD(Symbol):
    """
        name: VTHOBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VTHOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VTHOBUSD"

    def __str__(self):
        return "VTHOBUSD"

    def __call__(self):
        return "VTHOBUSD"


VTHOBUSD = VTHOBUSD(*VTHOBUSD._fields)
"""
    name: VTHOBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VTHOUSDT(Symbol):
    """
        name: VTHOUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VTHOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VTHOUSDT"

    def __str__(self):
        return "VTHOUSDT"

    def __call__(self):
        return "VTHOUSDT"


VTHOUSDT = VTHOUSDT(*VTHOUSDT._fields)
"""
    name: VTHOUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WABIBNB(Symbol):
    """
        name: WABIBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WABIBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WABIBNB"

    def __str__(self):
        return "WABIBNB"

    def __call__(self):
        return "WABIBNB"


WABIBNB = WABIBNB(*WABIBNB._fields)
"""
    name: WABIBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WABIBTC(Symbol):
    """
        name: WABIBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WABIBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WABIBTC"

    def __str__(self):
        return "WABIBTC"

    def __call__(self):
        return "WABIBTC"


WABIBTC = WABIBTC(*WABIBTC._fields)
"""
    name: WABIBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WABIETH(Symbol):
    """
        name: WABIETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WABIETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WABIETH"

    def __str__(self):
        return "WABIETH"

    def __call__(self):
        return "WABIETH"


WABIETH = WABIETH(*WABIETH._fields)
"""
    name: WABIETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WANBNB(Symbol):
    """
        name: WANBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WANBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WANBNB"

    def __str__(self):
        return "WANBNB"

    def __call__(self):
        return "WANBNB"


WANBNB = WANBNB(*WANBNB._fields)
"""
    name: WANBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WANBTC(Symbol):
    """
        name: WANBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WANBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WANBTC"

    def __str__(self):
        return "WANBTC"

    def __call__(self):
        return "WANBTC"


WANBTC = WANBTC(*WANBTC._fields)
"""
    name: WANBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WANETH(Symbol):
    """
        name: WANETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WANETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WANETH"

    def __str__(self):
        return "WANETH"

    def __call__(self):
        return "WANETH"


WANETH = WANETH(*WANETH._fields)
"""
    name: WANETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WANUSDT(Symbol):
    """
        name: WANUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WANUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WANUSDT"

    def __str__(self):
        return "WANUSDT"

    def __call__(self):
        return "WANUSDT"


WANUSDT = WANUSDT(*WANUSDT._fields)
"""
    name: WANUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESBNB(Symbol):
    """
        name: WAVESBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESBNB"

    def __str__(self):
        return "WAVESBNB"

    def __call__(self):
        return "WAVESBNB"


WAVESBNB = WAVESBNB(*WAVESBNB._fields)
"""
    name: WAVESBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESBTC(Symbol):
    """
        name: WAVESBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAVESBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESBTC"

    def __str__(self):
        return "WAVESBTC"

    def __call__(self):
        return "WAVESBTC"


WAVESBTC = WAVESBTC(*WAVESBTC._fields)
"""
    name: WAVESBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WAVESBUSD(Symbol):
    """
        name: WAVESBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESBUSD"

    def __str__(self):
        return "WAVESBUSD"

    def __call__(self):
        return "WAVESBUSD"


WAVESBUSD = WAVESBUSD(*WAVESBUSD._fields)
"""
    name: WAVESBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESETH(Symbol):
    """
        name: WAVESETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESETH"

    def __str__(self):
        return "WAVESETH"

    def __call__(self):
        return "WAVESETH"


WAVESETH = WAVESETH(*WAVESETH._fields)
"""
    name: WAVESETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESEUR(Symbol):
    """
        name: WAVESEUR
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESEUR"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESEUR"

    def __str__(self):
        return "WAVESEUR"

    def __call__(self):
        return "WAVESEUR"


WAVESEUR = WAVESEUR(*WAVESEUR._fields)
"""
    name: WAVESEUR
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESPAX(Symbol):
    """
        name: WAVESPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESPAX"

    def __str__(self):
        return "WAVESPAX"

    def __call__(self):
        return "WAVESPAX"


WAVESPAX = WAVESPAX(*WAVESPAX._fields)
"""
    name: WAVESPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESRUB(Symbol):
    """
        name: WAVESRUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESRUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESRUB"

    def __str__(self):
        return "WAVESRUB"

    def __call__(self):
        return "WAVESRUB"


WAVESRUB = WAVESRUB(*WAVESRUB._fields)
"""
    name: WAVESRUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESTRY(Symbol):
    """
        name: WAVESTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESTRY"

    def __str__(self):
        return "WAVESTRY"

    def __call__(self):
        return "WAVESTRY"


WAVESTRY = WAVESTRY(*WAVESTRY._fields)
"""
    name: WAVESTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESTUSD(Symbol):
    """
        name: WAVESTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESTUSD"

    def __str__(self):
        return "WAVESTUSD"

    def __call__(self):
        return "WAVESTUSD"


WAVESTUSD = WAVESTUSD(*WAVESTUSD._fields)
"""
    name: WAVESTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESUSDC(Symbol):
    """
        name: WAVESUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESUSDC"

    def __str__(self):
        return "WAVESUSDC"

    def __call__(self):
        return "WAVESUSDC"


WAVESUSDC = WAVESUSDC(*WAVESUSDC._fields)
"""
    name: WAVESUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESUSDT(Symbol):
    """
        name: WAVESUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAVESUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESUSDT"

    def __str__(self):
        return "WAVESUSDT"

    def __call__(self):
        return "WAVESUSDT"


WAVESUSDT = WAVESUSDT(*WAVESUSDT._fields)
"""
    name: WAVESUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WAXPBNB(Symbol):
    """
        name: WAXPBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAXPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXPBNB"

    def __str__(self):
        return "WAXPBNB"

    def __call__(self):
        return "WAXPBNB"


WAXPBNB = WAXPBNB(*WAXPBNB._fields)
"""
    name: WAXPBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAXPBTC(Symbol):
    """
        name: WAXPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAXPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXPBTC"

    def __str__(self):
        return "WAXPBTC"

    def __call__(self):
        return "WAXPBTC"


WAXPBTC = WAXPBTC(*WAXPBTC._fields)
"""
    name: WAXPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WAXPBUSD(Symbol):
    """
        name: WAXPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAXPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXPBUSD"

    def __str__(self):
        return "WAXPBUSD"

    def __call__(self):
        return "WAXPBUSD"


WAXPBUSD = WAXPBUSD(*WAXPBUSD._fields)
"""
    name: WAXPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WAXPUSDT(Symbol):
    """
        name: WAXPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAXPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXPUSDT"

    def __str__(self):
        return "WAXPUSDT"

    def __call__(self):
        return "WAXPUSDT"


WAXPUSDT = WAXPUSDT(*WAXPUSDT._fields)
"""
    name: WAXPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WBTCBTC(Symbol):
    """
        name: WBTCBTC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WBTCBTC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTCBTC"

    def __str__(self):
        return "WBTCBTC"

    def __call__(self):
        return "WBTCBTC"


WBTCBTC = WBTCBTC(*WBTCBTC._fields)
"""
    name: WBTCBTC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WBTCBUSD(Symbol):
    """
        name: WBTCBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WBTCBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTCBUSD"

    def __str__(self):
        return "WBTCBUSD"

    def __call__(self):
        return "WBTCBUSD"


WBTCBUSD = WBTCBUSD(*WBTCBUSD._fields)
"""
    name: WBTCBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WBTCETH(Symbol):
    """
        name: WBTCETH
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WBTCETH"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTCETH"

    def __str__(self):
        return "WBTCETH"

    def __call__(self):
        return "WBTCETH"


WBTCETH = WBTCETH(*WBTCETH._fields)
"""
    name: WBTCETH
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WBTCUSDT(Symbol):
    """
        name: WBTCUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WBTCUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTCUSDT"

    def __str__(self):
        return "WBTCUSDT"

    def __call__(self):
        return "WBTCUSDT"


WBTCUSDT = WBTCUSDT(*WBTCUSDT._fields)
"""
    name: WBTCUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINBNB(Symbol):
    """
        name: WINBNB
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINBNB"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINBNB"

    def __str__(self):
        return "WINBNB"

    def __call__(self):
        return "WINBNB"


WINBNB = WINBNB(*WINBNB._fields)
"""
    name: WINBNB
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINBRL(Symbol):
    """
        name: WINBRL
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINBRL"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINBRL"

    def __str__(self):
        return "WINBRL"

    def __call__(self):
        return "WINBRL"


WINBRL = WINBRL(*WINBRL._fields)
"""
    name: WINBRL
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINBTC(Symbol):
    """
        name: WINBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINBTC"

    def __str__(self):
        return "WINBTC"

    def __call__(self):
        return "WINBTC"


WINBTC = WINBTC(*WINBTC._fields)
"""
    name: WINBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINBUSD(Symbol):
    """
        name: WINBUSD
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINBUSD"

    def __str__(self):
        return "WINBUSD"

    def __call__(self):
        return "WINBUSD"


WINBUSD = WINBUSD(*WINBUSD._fields)
"""
    name: WINBUSD
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINEUR(Symbol):
    """
        name: WINEUR
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINEUR"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINEUR"

    def __str__(self):
        return "WINEUR"

    def __call__(self):
        return "WINEUR"


WINEUR = WINEUR(*WINEUR._fields)
"""
    name: WINEUR
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGBNB(Symbol):
    """
        name: WINGBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGBNB"

    def __str__(self):
        return "WINGBNB"

    def __call__(self):
        return "WINGBNB"


WINGBNB = WINGBNB(*WINGBNB._fields)
"""
    name: WINGBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGBTC(Symbol):
    """
        name: WINGBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGBTC"

    def __str__(self):
        return "WINGBTC"

    def __call__(self):
        return "WINGBTC"


WINGBTC = WINGBTC(*WINGBTC._fields)
"""
    name: WINGBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGBUSD(Symbol):
    """
        name: WINGBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WINGBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGBUSD"

    def __str__(self):
        return "WINGBUSD"

    def __call__(self):
        return "WINGBUSD"


WINGBUSD = WINGBUSD(*WINGBUSD._fields)
"""
    name: WINGBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WINGETH(Symbol):
    """
        name: WINGETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGETH"

    def __str__(self):
        return "WINGETH"

    def __call__(self):
        return "WINGETH"


WINGETH = WINGETH(*WINGETH._fields)
"""
    name: WINGETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGSBTC(Symbol):
    """
        name: WINGSBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGSBTC"

    def __str__(self):
        return "WINGSBTC"

    def __call__(self):
        return "WINGSBTC"


WINGSBTC = WINGSBTC(*WINGSBTC._fields)
"""
    name: WINGSBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGSETH(Symbol):
    """
        name: WINGSETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGSETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGSETH"

    def __str__(self):
        return "WINGSETH"

    def __call__(self):
        return "WINGSETH"


WINGSETH = WINGSETH(*WINGSETH._fields)
"""
    name: WINGSETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGUSDT(Symbol):
    """
        name: WINGUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WINGUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGUSDT"

    def __str__(self):
        return "WINGUSDT"

    def __call__(self):
        return "WINGUSDT"


WINGUSDT = WINGUSDT(*WINGUSDT._fields)
"""
    name: WINGUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WINTRX(Symbol):
    """
        name: WINTRX
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINTRX"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINTRX"

    def __str__(self):
        return "WINTRX"

    def __call__(self):
        return "WINTRX"


WINTRX = WINTRX(*WINTRX._fields)
"""
    name: WINTRX
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINUSDC(Symbol):
    """
        name: WINUSDC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINUSDC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINUSDC"

    def __str__(self):
        return "WINUSDC"

    def __call__(self):
        return "WINUSDC"


WINUSDC = WINUSDC(*WINUSDC._fields)
"""
    name: WINUSDC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINUSDT(Symbol):
    """
        name: WINUSDT
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINUSDT"

    def __str__(self):
        return "WINUSDT"

    def __call__(self):
        return "WINUSDT"


WINUSDT = WINUSDT(*WINUSDT._fields)
"""
    name: WINUSDT
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WNXMBNB(Symbol):
    """
        name: WNXMBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WNXMBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WNXMBNB"

    def __str__(self):
        return "WNXMBNB"

    def __call__(self):
        return "WNXMBNB"


WNXMBNB = WNXMBNB(*WNXMBNB._fields)
"""
    name: WNXMBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WNXMBTC(Symbol):
    """
        name: WNXMBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WNXMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WNXMBTC"

    def __str__(self):
        return "WNXMBTC"

    def __call__(self):
        return "WNXMBTC"


WNXMBTC = WNXMBTC(*WNXMBTC._fields)
"""
    name: WNXMBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WNXMBUSD(Symbol):
    """
        name: WNXMBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WNXMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WNXMBUSD"

    def __str__(self):
        return "WNXMBUSD"

    def __call__(self):
        return "WNXMBUSD"


WNXMBUSD = WNXMBUSD(*WNXMBUSD._fields)
"""
    name: WNXMBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WNXMUSDT(Symbol):
    """
        name: WNXMUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WNXMUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WNXMUSDT"

    def __str__(self):
        return "WNXMUSDT"

    def __call__(self):
        return "WNXMUSDT"


WNXMUSDT = WNXMUSDT(*WNXMUSDT._fields)
"""
    name: WNXMUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WOOBNB(Symbol):
    """
        name: WOOBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WOOBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOBNB"

    def __str__(self):
        return "WOOBNB"

    def __call__(self):
        return "WOOBNB"


WOOBNB = WOOBNB(*WOOBNB._fields)
"""
    name: WOOBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WOOBTC(Symbol):
    """
        name: WOOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WOOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOBTC"

    def __str__(self):
        return "WOOBTC"

    def __call__(self):
        return "WOOBTC"


WOOBTC = WOOBTC(*WOOBTC._fields)
"""
    name: WOOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WOOBUSD(Symbol):
    """
        name: WOOBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WOOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOBUSD"

    def __str__(self):
        return "WOOBUSD"

    def __call__(self):
        return "WOOBUSD"


WOOBUSD = WOOBUSD(*WOOBUSD._fields)
"""
    name: WOOBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WOOUSDT(Symbol):
    """
        name: WOOUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WOOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOUSDT"

    def __str__(self):
        return "WOOUSDT"

    def __call__(self):
        return "WOOUSDT"


WOOUSDT = WOOUSDT(*WOOUSDT._fields)
"""
    name: WOOUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WPRBTC(Symbol):
    """
        name: WPRBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WPRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WPRBTC"

    def __str__(self):
        return "WPRBTC"

    def __call__(self):
        return "WPRBTC"


WPRBTC = WPRBTC(*WPRBTC._fields)
"""
    name: WPRBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WPRETH(Symbol):
    """
        name: WPRETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WPRETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WPRETH"

    def __str__(self):
        return "WPRETH"

    def __call__(self):
        return "WPRETH"


WPRETH = WPRETH(*WPRETH._fields)
"""
    name: WPRETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXBNB(Symbol):
    """
        name: WRXBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXBNB"

    def __str__(self):
        return "WRXBNB"

    def __call__(self):
        return "WRXBNB"


WRXBNB = WRXBNB(*WRXBNB._fields)
"""
    name: WRXBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXBTC(Symbol):
    """
        name: WRXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXBTC"

    def __str__(self):
        return "WRXBTC"

    def __call__(self):
        return "WRXBTC"


WRXBTC = WRXBTC(*WRXBTC._fields)
"""
    name: WRXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXBUSD(Symbol):
    """
        name: WRXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXBUSD"

    def __str__(self):
        return "WRXBUSD"

    def __call__(self):
        return "WRXBUSD"


WRXBUSD = WRXBUSD(*WRXBUSD._fields)
"""
    name: WRXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXEUR(Symbol):
    """
        name: WRXEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXEUR"

    def __str__(self):
        return "WRXEUR"

    def __call__(self):
        return "WRXEUR"


WRXEUR = WRXEUR(*WRXEUR._fields)
"""
    name: WRXEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXUSDT(Symbol):
    """
        name: WRXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXUSDT"

    def __str__(self):
        return "WRXUSDT"

    def __call__(self):
        return "WRXUSDT"


WRXUSDT = WRXUSDT(*WRXUSDT._fields)
"""
    name: WRXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WTCBNB(Symbol):
    """
        name: WTCBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WTCBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WTCBNB"

    def __str__(self):
        return "WTCBNB"

    def __call__(self):
        return "WTCBNB"


WTCBNB = WTCBNB(*WTCBNB._fields)
"""
    name: WTCBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WTCBTC(Symbol):
    """
        name: WTCBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WTCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WTCBTC"

    def __str__(self):
        return "WTCBTC"

    def __call__(self):
        return "WTCBTC"


WTCBTC = WTCBTC(*WTCBTC._fields)
"""
    name: WTCBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WTCETH(Symbol):
    """
        name: WTCETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WTCETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WTCETH"

    def __str__(self):
        return "WTCETH"

    def __call__(self):
        return "WTCETH"


WTCETH = WTCETH(*WTCETH._fields)
"""
    name: WTCETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WTCUSDT(Symbol):
    """
        name: WTCUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WTCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WTCUSDT"

    def __str__(self):
        return "WTCUSDT"

    def __call__(self):
        return "WTCUSDT"


WTCUSDT = WTCUSDT(*WTCUSDT._fields)
"""
    name: WTCUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XECBUSD(Symbol):
    """
        name: XECBUSD
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XECBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XECBUSD"

    def __str__(self):
        return "XECBUSD"

    def __call__(self):
        return "XECBUSD"


XECBUSD = XECBUSD(*XECBUSD._fields)
"""
    name: XECBUSD
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XECUSDT(Symbol):
    """
        name: XECUSDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XECUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XECUSDT"

    def __str__(self):
        return "XECUSDT"

    def __call__(self):
        return "XECUSDT"


XECUSDT = XECUSDT(*XECUSDT._fields)
"""
    name: XECUSDT
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMBNB(Symbol):
    """
        name: XEMBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMBNB"

    def __str__(self):
        return "XEMBNB"

    def __call__(self):
        return "XEMBNB"


XEMBNB = XEMBNB(*XEMBNB._fields)
"""
    name: XEMBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMBTC(Symbol):
    """
        name: XEMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMBTC"

    def __str__(self):
        return "XEMBTC"

    def __call__(self):
        return "XEMBTC"


XEMBTC = XEMBTC(*XEMBTC._fields)
"""
    name: XEMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMBUSD(Symbol):
    """
        name: XEMBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMBUSD"

    def __str__(self):
        return "XEMBUSD"

    def __call__(self):
        return "XEMBUSD"


XEMBUSD = XEMBUSD(*XEMBUSD._fields)
"""
    name: XEMBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMETH(Symbol):
    """
        name: XEMETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMETH"

    def __str__(self):
        return "XEMETH"

    def __call__(self):
        return "XEMETH"


XEMETH = XEMETH(*XEMETH._fields)
"""
    name: XEMETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMUSDT(Symbol):
    """
        name: XEMUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMUSDT"

    def __str__(self):
        return "XEMUSDT"

    def __call__(self):
        return "XEMUSDT"


XEMUSDT = XEMUSDT(*XEMUSDT._fields)
"""
    name: XEMUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMBNB(Symbol):
    """
        name: XLMBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMBNB"

    def __str__(self):
        return "XLMBNB"

    def __call__(self):
        return "XLMBNB"


XLMBNB = XLMBNB(*XLMBNB._fields)
"""
    name: XLMBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMBTC(Symbol):
    """
        name: XLMBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XLMBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMBTC"

    def __str__(self):
        return "XLMBTC"

    def __call__(self):
        return "XLMBTC"


XLMBTC = XLMBTC(*XLMBTC._fields)
"""
    name: XLMBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XLMBUSD(Symbol):
    """
        name: XLMBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XLMBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMBUSD"

    def __str__(self):
        return "XLMBUSD"

    def __call__(self):
        return "XLMBUSD"


XLMBUSD = XLMBUSD(*XLMBUSD._fields)
"""
    name: XLMBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XLMDOWNUSDT(Symbol):
    """
        name: XLMDOWNUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMDOWNUSDT"

    def __str__(self):
        return "XLMDOWNUSDT"

    def __call__(self):
        return "XLMDOWNUSDT"


XLMDOWNUSDT = XLMDOWNUSDT(*XLMDOWNUSDT._fields)
"""
    name: XLMDOWNUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMETH(Symbol):
    """
        name: XLMETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMETH"

    def __str__(self):
        return "XLMETH"

    def __call__(self):
        return "XLMETH"


XLMETH = XLMETH(*XLMETH._fields)
"""
    name: XLMETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMEUR(Symbol):
    """
        name: XLMEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMEUR"

    def __str__(self):
        return "XLMEUR"

    def __call__(self):
        return "XLMEUR"


XLMEUR = XLMEUR(*XLMEUR._fields)
"""
    name: XLMEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMPAX(Symbol):
    """
        name: XLMPAX
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMPAX"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMPAX"

    def __str__(self):
        return "XLMPAX"

    def __call__(self):
        return "XLMPAX"


XLMPAX = XLMPAX(*XLMPAX._fields)
"""
    name: XLMPAX
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMTRY(Symbol):
    """
        name: XLMTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMTRY"

    def __str__(self):
        return "XLMTRY"

    def __call__(self):
        return "XLMTRY"


XLMTRY = XLMTRY(*XLMTRY._fields)
"""
    name: XLMTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMTUSD(Symbol):
    """
        name: XLMTUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMTUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMTUSD"

    def __str__(self):
        return "XLMTUSD"

    def __call__(self):
        return "XLMTUSD"


XLMTUSD = XLMTUSD(*XLMTUSD._fields)
"""
    name: XLMTUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMUPUSDT(Symbol):
    """
        name: XLMUPUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMUPUSDT"

    def __str__(self):
        return "XLMUPUSDT"

    def __call__(self):
        return "XLMUPUSDT"


XLMUPUSDT = XLMUPUSDT(*XLMUPUSDT._fields)
"""
    name: XLMUPUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMUSDC(Symbol):
    """
        name: XLMUSDC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMUSDC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMUSDC"

    def __str__(self):
        return "XLMUSDC"

    def __call__(self):
        return "XLMUSDC"


XLMUSDC = XLMUSDC(*XLMUSDC._fields)
"""
    name: XLMUSDC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMUSDT(Symbol):
    """
        name: XLMUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XLMUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMUSDT"

    def __str__(self):
        return "XLMUSDT"

    def __call__(self):
        return "XLMUSDT"


XLMUSDT = XLMUSDT(*XLMUSDT._fields)
"""
    name: XLMUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XMRBNB(Symbol):
    """
        name: XMRBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XMRBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRBNB"

    def __str__(self):
        return "XMRBNB"

    def __call__(self):
        return "XMRBNB"


XMRBNB = XMRBNB(*XMRBNB._fields)
"""
    name: XMRBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XMRBTC(Symbol):
    """
        name: XMRBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XMRBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRBTC"

    def __str__(self):
        return "XMRBTC"

    def __call__(self):
        return "XMRBTC"


XMRBTC = XMRBTC(*XMRBTC._fields)
"""
    name: XMRBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XMRBUSD(Symbol):
    """
        name: XMRBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XMRBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRBUSD"

    def __str__(self):
        return "XMRBUSD"

    def __call__(self):
        return "XMRBUSD"


XMRBUSD = XMRBUSD(*XMRBUSD._fields)
"""
    name: XMRBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XMRETH(Symbol):
    """
        name: XMRETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XMRETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRETH"

    def __str__(self):
        return "XMRETH"

    def __call__(self):
        return "XMRETH"


XMRETH = XMRETH(*XMRETH._fields)
"""
    name: XMRETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XMRUSDT(Symbol):
    """
        name: XMRUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XMRUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRUSDT"

    def __str__(self):
        return "XMRUSDT"

    def __call__(self):
        return "XMRUSDT"


XMRUSDT = XMRUSDT(*XMRUSDT._fields)
"""
    name: XMRUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XNOBTC(Symbol):
    """
        name: XNOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XNOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNOBTC"

    def __str__(self):
        return "XNOBTC"

    def __call__(self):
        return "XNOBTC"


XNOBTC = XNOBTC(*XNOBTC._fields)
"""
    name: XNOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XNOBUSD(Symbol):
    """
        name: XNOBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XNOBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNOBUSD"

    def __str__(self):
        return "XNOBUSD"

    def __call__(self):
        return "XNOBUSD"


XNOBUSD = XNOBUSD(*XNOBUSD._fields)
"""
    name: XNOBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XNOETH(Symbol):
    """
        name: XNOETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XNOETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNOETH"

    def __str__(self):
        return "XNOETH"

    def __call__(self):
        return "XNOETH"


XNOETH = XNOETH(*XNOETH._fields)
"""
    name: XNOETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XNOUSDT(Symbol):
    """
        name: XNOUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XNOUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNOUSDT"

    def __str__(self):
        return "XNOUSDT"

    def __call__(self):
        return "XNOUSDT"


XNOUSDT = XNOUSDT(*XNOUSDT._fields)
"""
    name: XNOUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPAUD(Symbol):
    """
        name: XRPAUD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPAUD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPAUD"

    def __str__(self):
        return "XRPAUD"

    def __call__(self):
        return "XRPAUD"


XRPAUD = XRPAUD(*XRPAUD._fields)
"""
    name: XRPAUD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBEARBUSD(Symbol):
    """
        name: XRPBEARBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBEARBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBEARBUSD"

    def __str__(self):
        return "XRPBEARBUSD"

    def __call__(self):
        return "XRPBEARBUSD"


XRPBEARBUSD = XRPBEARBUSD(*XRPBEARBUSD._fields)
"""
    name: XRPBEARBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBEARUSDT(Symbol):
    """
        name: XRPBEARUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBEARUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBEARUSDT"

    def __str__(self):
        return "XRPBEARUSDT"

    def __call__(self):
        return "XRPBEARUSDT"


XRPBEARUSDT = XRPBEARUSDT(*XRPBEARUSDT._fields)
"""
    name: XRPBEARUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBIDR(Symbol):
    """
        name: XRPBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBIDR"

    def __str__(self):
        return "XRPBIDR"

    def __call__(self):
        return "XRPBIDR"


XRPBIDR = XRPBIDR(*XRPBIDR._fields)
"""
    name: XRPBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class XRPBKRW(Symbol):
    """
        name: XRPBKRW
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBKRW"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBKRW"

    def __str__(self):
        return "XRPBKRW"

    def __call__(self):
        return "XRPBKRW"


XRPBKRW = XRPBKRW(*XRPBKRW._fields)
"""
    name: XRPBKRW
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBNB(Symbol):
    """
        name: XRPBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBNB"

    def __str__(self):
        return "XRPBNB"

    def __call__(self):
        return "XRPBNB"


XRPBNB = XRPBNB(*XRPBNB._fields)
"""
    name: XRPBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBRL(Symbol):
    """
        name: XRPBRL
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBRL"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBRL"

    def __str__(self):
        return "XRPBRL"

    def __call__(self):
        return "XRPBRL"


XRPBRL = XRPBRL(*XRPBRL._fields)
"""
    name: XRPBRL
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBTC(Symbol):
    """
        name: XRPBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XRPBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBTC"

    def __str__(self):
        return "XRPBTC"

    def __call__(self):
        return "XRPBTC"


XRPBTC = XRPBTC(*XRPBTC._fields)
"""
    name: XRPBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XRPBULLBUSD(Symbol):
    """
        name: XRPBULLBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBULLBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBULLBUSD"

    def __str__(self):
        return "XRPBULLBUSD"

    def __call__(self):
        return "XRPBULLBUSD"


XRPBULLBUSD = XRPBULLBUSD(*XRPBULLBUSD._fields)
"""
    name: XRPBULLBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBULLUSDT(Symbol):
    """
        name: XRPBULLUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBULLUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBULLUSDT"

    def __str__(self):
        return "XRPBULLUSDT"

    def __call__(self):
        return "XRPBULLUSDT"


XRPBULLUSDT = XRPBULLUSDT(*XRPBULLUSDT._fields)
"""
    name: XRPBULLUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBUSD(Symbol):
    """
        name: XRPBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XRPBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBUSD"

    def __str__(self):
        return "XRPBUSD"

    def __call__(self):
        return "XRPBUSD"


XRPBUSD = XRPBUSD(*XRPBUSD._fields)
"""
    name: XRPBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XRPDOWNUSDT(Symbol):
    """
        name: XRPDOWNUSDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPDOWNUSDT"

    def __str__(self):
        return "XRPDOWNUSDT"

    def __call__(self):
        return "XRPDOWNUSDT"


XRPDOWNUSDT = XRPDOWNUSDT(*XRPDOWNUSDT._fields)
"""
    name: XRPDOWNUSDT
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPETH(Symbol):
    """
        name: XRPETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XRPETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPETH"

    def __str__(self):
        return "XRPETH"

    def __call__(self):
        return "XRPETH"


XRPETH = XRPETH(*XRPETH._fields)
"""
    name: XRPETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XRPEUR(Symbol):
    """
        name: XRPEUR
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPEUR"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPEUR"

    def __str__(self):
        return "XRPEUR"

    def __call__(self):
        return "XRPEUR"


XRPEUR = XRPEUR(*XRPEUR._fields)
"""
    name: XRPEUR
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPGBP(Symbol):
    """
        name: XRPGBP
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPGBP"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPGBP"

    def __str__(self):
        return "XRPGBP"

    def __call__(self):
        return "XRPGBP"


XRPGBP = XRPGBP(*XRPGBP._fields)
"""
    name: XRPGBP
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPNGN(Symbol):
    """
        name: XRPNGN
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPNGN"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPNGN"

    def __str__(self):
        return "XRPNGN"

    def __call__(self):
        return "XRPNGN"


XRPNGN = XRPNGN(*XRPNGN._fields)
"""
    name: XRPNGN
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPPAX(Symbol):
    """
        name: XRPPAX
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPPAX"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPPAX"

    def __str__(self):
        return "XRPPAX"

    def __call__(self):
        return "XRPPAX"


XRPPAX = XRPPAX(*XRPPAX._fields)
"""
    name: XRPPAX
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPRUB(Symbol):
    """
        name: XRPRUB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPRUB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPRUB"

    def __str__(self):
        return "XRPRUB"

    def __call__(self):
        return "XRPRUB"


XRPRUB = XRPRUB(*XRPRUB._fields)
"""
    name: XRPRUB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPTRY(Symbol):
    """
        name: XRPTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPTRY"

    def __str__(self):
        return "XRPTRY"

    def __call__(self):
        return "XRPTRY"


XRPTRY = XRPTRY(*XRPTRY._fields)
"""
    name: XRPTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPTUSD(Symbol):
    """
        name: XRPTUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPTUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPTUSD"

    def __str__(self):
        return "XRPTUSD"

    def __call__(self):
        return "XRPTUSD"


XRPTUSD = XRPTUSD(*XRPTUSD._fields)
"""
    name: XRPTUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPUPUSDT(Symbol):
    """
        name: XRPUPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPUPUSDT"

    def __str__(self):
        return "XRPUPUSDT"

    def __call__(self):
        return "XRPUPUSDT"


XRPUPUSDT = XRPUPUSDT(*XRPUPUSDT._fields)
"""
    name: XRPUPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPUSDC(Symbol):
    """
        name: XRPUSDC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPUSDC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPUSDC"

    def __str__(self):
        return "XRPUSDC"

    def __call__(self):
        return "XRPUSDC"


XRPUSDC = XRPUSDC(*XRPUSDC._fields)
"""
    name: XRPUSDC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPUSDT(Symbol):
    """
        name: XRPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XRPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPUSDT"

    def __str__(self):
        return "XRPUSDT"

    def __call__(self):
        return "XRPUSDT"


XRPUSDT = XRPUSDT(*XRPUSDT._fields)
"""
    name: XRPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XTZBNB(Symbol):
    """
        name: XTZBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZBNB"

    def __str__(self):
        return "XTZBNB"

    def __call__(self):
        return "XTZBNB"


XTZBNB = XTZBNB(*XTZBNB._fields)
"""
    name: XTZBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZBTC(Symbol):
    """
        name: XTZBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XTZBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZBTC"

    def __str__(self):
        return "XTZBTC"

    def __call__(self):
        return "XTZBTC"


XTZBTC = XTZBTC(*XTZBTC._fields)
"""
    name: XTZBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XTZBUSD(Symbol):
    """
        name: XTZBUSD
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XTZBUSD"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZBUSD"

    def __str__(self):
        return "XTZBUSD"

    def __call__(self):
        return "XTZBUSD"


XTZBUSD = XTZBUSD(*XTZBUSD._fields)
"""
    name: XTZBUSD
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XTZDOWNUSDT(Symbol):
    """
        name: XTZDOWNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZDOWNUSDT"

    def __str__(self):
        return "XTZDOWNUSDT"

    def __call__(self):
        return "XTZDOWNUSDT"


XTZDOWNUSDT = XTZDOWNUSDT(*XTZDOWNUSDT._fields)
"""
    name: XTZDOWNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZETH(Symbol):
    """
        name: XTZETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZETH"

    def __str__(self):
        return "XTZETH"

    def __call__(self):
        return "XTZETH"


XTZETH = XTZETH(*XTZETH._fields)
"""
    name: XTZETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZTRY(Symbol):
    """
        name: XTZTRY
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZTRY"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZTRY"

    def __str__(self):
        return "XTZTRY"

    def __call__(self):
        return "XTZTRY"


XTZTRY = XTZTRY(*XTZTRY._fields)
"""
    name: XTZTRY
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZUPUSDT(Symbol):
    """
        name: XTZUPUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZUPUSDT"

    def __str__(self):
        return "XTZUPUSDT"

    def __call__(self):
        return "XTZUPUSDT"


XTZUPUSDT = XTZUPUSDT(*XTZUPUSDT._fields)
"""
    name: XTZUPUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZUSDT(Symbol):
    """
        name: XTZUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XTZUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZUSDT"

    def __str__(self):
        return "XTZUSDT"

    def __call__(self):
        return "XTZUSDT"


XTZUSDT = XTZUSDT(*XTZUSDT._fields)
"""
    name: XTZUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XVGBTC(Symbol):
    """
        name: XVGBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVGBTC"

    def __str__(self):
        return "XVGBTC"

    def __call__(self):
        return "XVGBTC"


XVGBTC = XVGBTC(*XVGBTC._fields)
"""
    name: XVGBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVGBUSD(Symbol):
    """
        name: XVGBUSD
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVGBUSD"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVGBUSD"

    def __str__(self):
        return "XVGBUSD"

    def __call__(self):
        return "XVGBUSD"


XVGBUSD = XVGBUSD(*XVGBUSD._fields)
"""
    name: XVGBUSD
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVGETH(Symbol):
    """
        name: XVGETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVGETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVGETH"

    def __str__(self):
        return "XVGETH"

    def __call__(self):
        return "XVGETH"


XVGETH = XVGETH(*XVGETH._fields)
"""
    name: XVGETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVGUSDT(Symbol):
    """
        name: XVGUSDT
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVGUSDT"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVGUSDT"

    def __str__(self):
        return "XVGUSDT"

    def __call__(self):
        return "XVGUSDT"


XVGUSDT = XVGUSDT(*XVGUSDT._fields)
"""
    name: XVGUSDT
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSBNB(Symbol):
    """
        name: XVSBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVSBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSBNB"

    def __str__(self):
        return "XVSBNB"

    def __call__(self):
        return "XVSBNB"


XVSBNB = XVSBNB(*XVSBNB._fields)
"""
    name: XVSBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSBTC(Symbol):
    """
        name: XVSBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVSBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSBTC"

    def __str__(self):
        return "XVSBTC"

    def __call__(self):
        return "XVSBTC"


XVSBTC = XVSBTC(*XVSBTC._fields)
"""
    name: XVSBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSBUSD(Symbol):
    """
        name: XVSBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVSBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSBUSD"

    def __str__(self):
        return "XVSBUSD"

    def __call__(self):
        return "XVSBUSD"


XVSBUSD = XVSBUSD(*XVSBUSD._fields)
"""
    name: XVSBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSTRY(Symbol):
    """
        name: XVSTRY
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVSTRY"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSTRY"

    def __str__(self):
        return "XVSTRY"

    def __call__(self):
        return "XVSTRY"


XVSTRY = XVSTRY(*XVSTRY._fields)
"""
    name: XVSTRY
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSUSDT(Symbol):
    """
        name: XVSUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XVSUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSUSDT"

    def __str__(self):
        return "XVSUSDT"

    def __call__(self):
        return "XVSUSDT"


XVSUSDT = XVSUSDT(*XVSUSDT._fields)
"""
    name: XVSUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XZCBNB(Symbol):
    """
        name: XZCBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCBNB"

    def __str__(self):
        return "XZCBNB"

    def __call__(self):
        return "XZCBNB"


XZCBNB = XZCBNB(*XZCBNB._fields)
"""
    name: XZCBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XZCBTC(Symbol):
    """
        name: XZCBTC
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCBTC"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCBTC"

    def __str__(self):
        return "XZCBTC"

    def __call__(self):
        return "XZCBTC"


XZCBTC = XZCBTC(*XZCBTC._fields)
"""
    name: XZCBTC
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XZCETH(Symbol):
    """
        name: XZCETH
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCETH"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCETH"

    def __str__(self):
        return "XZCETH"

    def __call__(self):
        return "XZCETH"


XZCETH = XZCETH(*XZCETH._fields)
"""
    name: XZCETH
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XZCUSDT(Symbol):
    """
        name: XZCUSDT
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCUSDT"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCUSDT"

    def __str__(self):
        return "XZCUSDT"

    def __call__(self):
        return "XZCUSDT"


XZCUSDT = XZCUSDT(*XZCUSDT._fields)
"""
    name: XZCUSDT
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XZCXRP(Symbol):
    """
        name: XZCXRP
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCXRP"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCXRP"

    def __str__(self):
        return "XZCXRP"

    def __call__(self):
        return "XZCXRP"


XZCXRP = XZCXRP(*XZCXRP._fields)
"""
    name: XZCXRP
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIBNB(Symbol):
    """
        name: YFIBNB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIBNB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIBNB"

    def __str__(self):
        return "YFIBNB"

    def __call__(self):
        return "YFIBNB"


YFIBNB = YFIBNB(*YFIBNB._fields)
"""
    name: YFIBNB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIBTC(Symbol):
    """
        name: YFIBTC
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIBTC"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIBTC"

    def __str__(self):
        return "YFIBTC"

    def __call__(self):
        return "YFIBTC"


YFIBTC = YFIBTC(*YFIBTC._fields)
"""
    name: YFIBTC
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIBUSD(Symbol):
    """
        name: YFIBUSD
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIBUSD"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIBUSD"

    def __str__(self):
        return "YFIBUSD"

    def __call__(self):
        return "YFIBUSD"


YFIBUSD = YFIBUSD(*YFIBUSD._fields)
"""
    name: YFIBUSD
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIDOWNUSDT(Symbol):
    """
        name: YFIDOWNUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIDOWNUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIDOWNUSDT"

    def __str__(self):
        return "YFIDOWNUSDT"

    def __call__(self):
        return "YFIDOWNUSDT"


YFIDOWNUSDT = YFIDOWNUSDT(*YFIDOWNUSDT._fields)
"""
    name: YFIDOWNUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIEUR(Symbol):
    """
        name: YFIEUR
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIEUR"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIEUR"

    def __str__(self):
        return "YFIEUR"

    def __call__(self):
        return "YFIEUR"


YFIEUR = YFIEUR(*YFIEUR._fields)
"""
    name: YFIEUR
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIIBNB(Symbol):
    """
        name: YFIIBNB
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIIBNB"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIIBNB"

    def __str__(self):
        return "YFIIBNB"

    def __call__(self):
        return "YFIIBNB"


YFIIBNB = YFIIBNB(*YFIIBNB._fields)
"""
    name: YFIIBNB
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIIBTC(Symbol):
    """
        name: YFIIBTC
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIIBTC"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIIBTC"

    def __str__(self):
        return "YFIIBTC"

    def __call__(self):
        return "YFIIBTC"


YFIIBTC = YFIIBTC(*YFIIBTC._fields)
"""
    name: YFIIBTC
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIIBUSD(Symbol):
    """
        name: YFIIBUSD
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIIBUSD"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIIBUSD"

    def __str__(self):
        return "YFIIBUSD"

    def __call__(self):
        return "YFIIBUSD"


YFIIBUSD = YFIIBUSD(*YFIIBUSD._fields)
"""
    name: YFIIBUSD
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIIUSDT(Symbol):
    """
        name: YFIIUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIIUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIIUSDT"

    def __str__(self):
        return "YFIIUSDT"

    def __call__(self):
        return "YFIIUSDT"


YFIIUSDT = YFIIUSDT(*YFIIUSDT._fields)
"""
    name: YFIIUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIUPUSDT(Symbol):
    """
        name: YFIUPUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIUPUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIUPUSDT"

    def __str__(self):
        return "YFIUPUSDT"

    def __call__(self):
        return "YFIUPUSDT"


YFIUPUSDT = YFIUPUSDT(*YFIUPUSDT._fields)
"""
    name: YFIUPUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIUSDT(Symbol):
    """
        name: YFIUSDT
        significant_digits: None
        tick_size: 1.00000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "YFIUSDT"
    significant_digits: int = None
    tick_size: int = 1.00000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIUSDT"

    def __str__(self):
        return "YFIUSDT"

    def __call__(self):
        return "YFIUSDT"


YFIUSDT = YFIUSDT(*YFIUSDT._fields)
"""
    name: YFIUSDT
    significant_digits: None
    tick_size: 1.00000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class YGGBNB(Symbol):
    """
        name: YGGBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YGGBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGGBNB"

    def __str__(self):
        return "YGGBNB"

    def __call__(self):
        return "YGGBNB"


YGGBNB = YGGBNB(*YGGBNB._fields)
"""
    name: YGGBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YGGBTC(Symbol):
    """
        name: YGGBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YGGBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGGBTC"

    def __str__(self):
        return "YGGBTC"

    def __call__(self):
        return "YGGBTC"


YGGBTC = YGGBTC(*YGGBTC._fields)
"""
    name: YGGBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YGGBUSD(Symbol):
    """
        name: YGGBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "YGGBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGGBUSD"

    def __str__(self):
        return "YGGBUSD"

    def __call__(self):
        return "YGGBUSD"


YGGBUSD = YGGBUSD(*YGGBUSD._fields)
"""
    name: YGGBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class YGGUSDT(Symbol):
    """
        name: YGGUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "YGGUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGGUSDT"

    def __str__(self):
        return "YGGUSDT"

    def __call__(self):
        return "YGGUSDT"


YGGUSDT = YGGUSDT(*YGGUSDT._fields)
"""
    name: YGGUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class YOYOBNB(Symbol):
    """
        name: YOYOBNB
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YOYOBNB"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YOYOBNB"

    def __str__(self):
        return "YOYOBNB"

    def __call__(self):
        return "YOYOBNB"


YOYOBNB = YOYOBNB(*YOYOBNB._fields)
"""
    name: YOYOBNB
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YOYOBTC(Symbol):
    """
        name: YOYOBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YOYOBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YOYOBTC"

    def __str__(self):
        return "YOYOBTC"

    def __call__(self):
        return "YOYOBTC"


YOYOBTC = YOYOBTC(*YOYOBTC._fields)
"""
    name: YOYOBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YOYOETH(Symbol):
    """
        name: YOYOETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YOYOETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YOYOETH"

    def __str__(self):
        return "YOYOETH"

    def __call__(self):
        return "YOYOETH"


YOYOETH = YOYOETH(*YOYOETH._fields)
"""
    name: YOYOETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECBNB(Symbol):
    """
        name: ZECBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECBNB"

    def __str__(self):
        return "ZECBNB"

    def __call__(self):
        return "ZECBNB"


ZECBNB = ZECBNB(*ZECBNB._fields)
"""
    name: ZECBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECBTC(Symbol):
    """
        name: ZECBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZECBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECBTC"

    def __str__(self):
        return "ZECBTC"

    def __call__(self):
        return "ZECBTC"


ZECBTC = ZECBTC(*ZECBTC._fields)
"""
    name: ZECBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZECBUSD(Symbol):
    """
        name: ZECBUSD
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECBUSD"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECBUSD"

    def __str__(self):
        return "ZECBUSD"

    def __call__(self):
        return "ZECBUSD"


ZECBUSD = ZECBUSD(*ZECBUSD._fields)
"""
    name: ZECBUSD
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECETH(Symbol):
    """
        name: ZECETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECETH"

    def __str__(self):
        return "ZECETH"

    def __call__(self):
        return "ZECETH"


ZECETH = ZECETH(*ZECETH._fields)
"""
    name: ZECETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECPAX(Symbol):
    """
        name: ZECPAX
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECPAX"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECPAX"

    def __str__(self):
        return "ZECPAX"

    def __call__(self):
        return "ZECPAX"


ZECPAX = ZECPAX(*ZECPAX._fields)
"""
    name: ZECPAX
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECTUSD(Symbol):
    """
        name: ZECTUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECTUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECTUSD"

    def __str__(self):
        return "ZECTUSD"

    def __call__(self):
        return "ZECTUSD"


ZECTUSD = ZECTUSD(*ZECTUSD._fields)
"""
    name: ZECTUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECUSDC(Symbol):
    """
        name: ZECUSDC
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECUSDC"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECUSDC"

    def __str__(self):
        return "ZECUSDC"

    def __call__(self):
        return "ZECUSDC"


ZECUSDC = ZECUSDC(*ZECUSDC._fields)
"""
    name: ZECUSDC
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECUSDT(Symbol):
    """
        name: ZECUSDT
        significant_digits: None
        tick_size: 0.10000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZECUSDT"
    significant_digits: int = None
    tick_size: int = 0.10000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECUSDT"

    def __str__(self):
        return "ZECUSDT"

    def __call__(self):
        return "ZECUSDT"


ZECUSDT = ZECUSDT(*ZECUSDT._fields)
"""
    name: ZECUSDT
    significant_digits: None
    tick_size: 0.10000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZENBNB(Symbol):
    """
        name: ZENBNB
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZENBNB"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENBNB"

    def __str__(self):
        return "ZENBNB"

    def __call__(self):
        return "ZENBNB"


ZENBNB = ZENBNB(*ZENBNB._fields)
"""
    name: ZENBNB
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZENBTC(Symbol):
    """
        name: ZENBTC
        significant_digits: None
        tick_size: 0.00000100
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZENBTC"
    significant_digits: int = None
    tick_size: int = 0.00000100
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENBTC"

    def __str__(self):
        return "ZENBTC"

    def __call__(self):
        return "ZENBTC"


ZENBTC = ZENBTC(*ZENBTC._fields)
"""
    name: ZENBTC
    significant_digits: None
    tick_size: 0.00000100
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZENBUSD(Symbol):
    """
        name: ZENBUSD
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZENBUSD"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENBUSD"

    def __str__(self):
        return "ZENBUSD"

    def __call__(self):
        return "ZENBUSD"


ZENBUSD = ZENBUSD(*ZENBUSD._fields)
"""
    name: ZENBUSD
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZENETH(Symbol):
    """
        name: ZENETH
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZENETH"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENETH"

    def __str__(self):
        return "ZENETH"

    def __call__(self):
        return "ZENETH"


ZENETH = ZENETH(*ZENETH._fields)
"""
    name: ZENETH
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZENUSDT(Symbol):
    """
        name: ZENUSDT
        significant_digits: None
        tick_size: 0.01000000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZENUSDT"
    significant_digits: int = None
    tick_size: int = 0.01000000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENUSDT"

    def __str__(self):
        return "ZENUSDT"

    def __call__(self):
        return "ZENUSDT"


ZENUSDT = ZENUSDT(*ZENUSDT._fields)
"""
    name: ZENUSDT
    significant_digits: None
    tick_size: 0.01000000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZILBIDR(Symbol):
    """
        name: ZILBIDR
        significant_digits: None
        tick_size: 1.00
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ZILBIDR"
    significant_digits: int = None
    tick_size: int = 1.00
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILBIDR"

    def __str__(self):
        return "ZILBIDR"

    def __call__(self):
        return "ZILBIDR"


ZILBIDR = ZILBIDR(*ZILBIDR._fields)
"""
    name: ZILBIDR
    significant_digits: None
    tick_size: 1.00
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ZILBNB(Symbol):
    """
        name: ZILBNB
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZILBNB"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILBNB"

    def __str__(self):
        return "ZILBNB"

    def __call__(self):
        return "ZILBNB"


ZILBNB = ZILBNB(*ZILBNB._fields)
"""
    name: ZILBNB
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZILBTC(Symbol):
    """
        name: ZILBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZILBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILBTC"

    def __str__(self):
        return "ZILBTC"

    def __call__(self):
        return "ZILBTC"


ZILBTC = ZILBTC(*ZILBTC._fields)
"""
    name: ZILBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZILBUSD(Symbol):
    """
        name: ZILBUSD
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZILBUSD"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILBUSD"

    def __str__(self):
        return "ZILBUSD"

    def __call__(self):
        return "ZILBUSD"


ZILBUSD = ZILBUSD(*ZILBUSD._fields)
"""
    name: ZILBUSD
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZILETH(Symbol):
    """
        name: ZILETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZILETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILETH"

    def __str__(self):
        return "ZILETH"

    def __call__(self):
        return "ZILETH"


ZILETH = ZILETH(*ZILETH._fields)
"""
    name: ZILETH
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZILEUR(Symbol):
    """
        name: ZILEUR
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZILEUR"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILEUR"

    def __str__(self):
        return "ZILEUR"

    def __call__(self):
        return "ZILEUR"


ZILEUR = ZILEUR(*ZILEUR._fields)
"""
    name: ZILEUR
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZILTRY(Symbol):
    """
        name: ZILTRY
        significant_digits: None
        tick_size: 0.00100000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZILTRY"
    significant_digits: int = None
    tick_size: int = 0.00100000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILTRY"

    def __str__(self):
        return "ZILTRY"

    def __call__(self):
        return "ZILTRY"


ZILTRY = ZILTRY(*ZILTRY._fields)
"""
    name: ZILTRY
    significant_digits: None
    tick_size: 0.00100000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ZILUSDT(Symbol):
    """
        name: ZILUSDT
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZILUSDT"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILUSDT"

    def __str__(self):
        return "ZILUSDT"

    def __call__(self):
        return "ZILUSDT"


ZILUSDT = ZILUSDT(*ZILUSDT._fields)
"""
    name: ZILUSDT
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZRXBNB(Symbol):
    """
        name: ZRXBNB
        significant_digits: None
        tick_size: 0.00001000
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZRXBNB"
    significant_digits: int = None
    tick_size: int = 0.00001000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXBNB"

    def __str__(self):
        return "ZRXBNB"

    def __call__(self):
        return "ZRXBNB"


ZRXBNB = ZRXBNB(*ZRXBNB._fields)
"""
    name: ZRXBNB
    significant_digits: None
    tick_size: 0.00001000
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZRXBTC(Symbol):
    """
        name: ZRXBTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZRXBTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXBTC"

    def __str__(self):
        return "ZRXBTC"

    def __call__(self):
        return "ZRXBTC"


ZRXBTC = ZRXBTC(*ZRXBTC._fields)
"""
    name: ZRXBTC
    significant_digits: None
    tick_size: 0.00000001
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZRXBUSD(Symbol):
    """
        name: ZRXBUSD
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZRXBUSD"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXBUSD"

    def __str__(self):
        return "ZRXBUSD"

    def __call__(self):
        return "ZRXBUSD"


ZRXBUSD = ZRXBUSD(*ZRXBUSD._fields)
"""
    name: ZRXBUSD
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZRXETH(Symbol):
    """
        name: ZRXETH
        significant_digits: None
        tick_size: 0.00000010
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZRXETH"
    significant_digits: int = None
    tick_size: int = 0.00000010
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXETH"

    def __str__(self):
        return "ZRXETH"

    def __call__(self):
        return "ZRXETH"


ZRXETH = ZRXETH(*ZRXETH._fields)
"""
    name: ZRXETH
    significant_digits: None
    tick_size: 0.00000010
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZRXUSDT(Symbol):
    """
        name: ZRXUSDT
        significant_digits: None
        tick_size: 0.00010000
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZRXUSDT"
    significant_digits: int = None
    tick_size: int = 0.00010000
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXUSDT"

    def __str__(self):
        return "ZRXUSDT"

    def __call__(self):
        return "ZRXUSDT"


ZRXUSDT = ZRXUSDT(*ZRXUSDT._fields)
"""
    name: ZRXUSDT
    significant_digits: None
    tick_size: 0.00010000
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""
