from typing import NamedTuple


class ONEINCHBTC(NamedTuple):
    """
        name: 1INCHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "1INCHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHBTC"

    def __str__(self):
        return "1INCHBTC"

    def __call__(self):
        return "1INCHBTC"


ONEINCHBTC = ONEINCHBTC()
"""
    name: 1INCHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONEINCHBUSD(NamedTuple):
    """
        name: 1INCHBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "1INCHBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHBUSD"

    def __str__(self):
        return "1INCHBUSD"

    def __call__(self):
        return "1INCHBUSD"


ONEINCHBUSD = ONEINCHBUSD()
"""
    name: 1INCHBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEINCHDOWNUSDT(NamedTuple):
    """
        name: 1INCHDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "1INCHDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHDOWNUSDT"

    def __str__(self):
        return "1INCHDOWNUSDT"

    def __call__(self):
        return "1INCHDOWNUSDT"


ONEINCHDOWNUSDT = ONEINCHDOWNUSDT()
"""
    name: 1INCHDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEINCHUPUSDT(NamedTuple):
    """
        name: 1INCHUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "1INCHUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHUPUSDT"

    def __str__(self):
        return "1INCHUPUSDT"

    def __call__(self):
        return "1INCHUPUSDT"


ONEINCHUPUSDT = ONEINCHUPUSDT()
"""
    name: 1INCHUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEINCHUSDT(NamedTuple):
    """
        name: 1INCHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "1INCHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCHUSDT"

    def __str__(self):
        return "1INCHUSDT"

    def __call__(self):
        return "1INCHUSDT"


ONEINCHUSDT = ONEINCHUSDT()
"""
    name: 1INCHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AAVEBKRW(NamedTuple):
    """
        name: AAVEBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBKRW"

    def __str__(self):
        return "AAVEBKRW"

    def __call__(self):
        return "AAVEBKRW"


AAVEBKRW = AAVEBKRW()
"""
    name: AAVEBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEBNB(NamedTuple):
    """
        name: AAVEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBNB"

    def __str__(self):
        return "AAVEBNB"

    def __call__(self):
        return "AAVEBNB"


AAVEBNB = AAVEBNB()
"""
    name: AAVEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEBRL(NamedTuple):
    """
        name: AAVEBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBRL"

    def __str__(self):
        return "AAVEBRL"

    def __call__(self):
        return "AAVEBRL"


AAVEBRL = AAVEBRL()
"""
    name: AAVEBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEBTC(NamedTuple):
    """
        name: AAVEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AAVEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBTC"

    def __str__(self):
        return "AAVEBTC"

    def __call__(self):
        return "AAVEBTC"


AAVEBTC = AAVEBTC()
"""
    name: AAVEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AAVEBUSD(NamedTuple):
    """
        name: AAVEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEBUSD"

    def __str__(self):
        return "AAVEBUSD"

    def __call__(self):
        return "AAVEBUSD"


AAVEBUSD = AAVEBUSD()
"""
    name: AAVEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEDOWNUSDT(NamedTuple):
    """
        name: AAVEDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEDOWNUSDT"

    def __str__(self):
        return "AAVEDOWNUSDT"

    def __call__(self):
        return "AAVEDOWNUSDT"


AAVEDOWNUSDT = AAVEDOWNUSDT()
"""
    name: AAVEDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEETH(NamedTuple):
    """
        name: AAVEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEETH"

    def __str__(self):
        return "AAVEETH"

    def __call__(self):
        return "AAVEETH"


AAVEETH = AAVEETH()
"""
    name: AAVEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEUPUSDT(NamedTuple):
    """
        name: AAVEUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AAVEUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEUPUSDT"

    def __str__(self):
        return "AAVEUPUSDT"

    def __call__(self):
        return "AAVEUPUSDT"


AAVEUPUSDT = AAVEUPUSDT()
"""
    name: AAVEUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AAVEUSDT(NamedTuple):
    """
        name: AAVEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AAVEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVEUSDT"

    def __str__(self):
        return "AAVEUSDT"

    def __call__(self):
        return "AAVEUSDT"


AAVEUSDT = AAVEUSDT()
"""
    name: AAVEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ACABTC(NamedTuple):
    """
        name: ACABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACABTC"

    def __str__(self):
        return "ACABTC"

    def __call__(self):
        return "ACABTC"


ACABTC = ACABTC()
"""
    name: ACABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACABUSD(NamedTuple):
    """
        name: ACABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACABUSD"

    def __str__(self):
        return "ACABUSD"

    def __call__(self):
        return "ACABUSD"


ACABUSD = ACABUSD()
"""
    name: ACABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACAUSDT(NamedTuple):
    """
        name: ACAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACAUSDT"

    def __str__(self):
        return "ACAUSDT"

    def __call__(self):
        return "ACAUSDT"


ACAUSDT = ACAUSDT()
"""
    name: ACAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACHBTC(NamedTuple):
    """
        name: ACHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACHBTC"

    def __str__(self):
        return "ACHBTC"

    def __call__(self):
        return "ACHBTC"


ACHBTC = ACHBTC()
"""
    name: ACHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACHBUSD(NamedTuple):
    """
        name: ACHBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ACHBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACHBUSD"

    def __str__(self):
        return "ACHBUSD"

    def __call__(self):
        return "ACHBUSD"


ACHBUSD = ACHBUSD()
"""
    name: ACHBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ACHTRY(NamedTuple):
    """
        name: ACHTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACHTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACHTRY"

    def __str__(self):
        return "ACHTRY"

    def __call__(self):
        return "ACHTRY"


ACHTRY = ACHTRY()
"""
    name: ACHTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACHUSDT(NamedTuple):
    """
        name: ACHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ACHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACHUSDT"

    def __str__(self):
        return "ACHUSDT"

    def __call__(self):
        return "ACHUSDT"


ACHUSDT = ACHUSDT()
"""
    name: ACHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ACMBTC(NamedTuple):
    """
        name: ACMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACMBTC"

    def __str__(self):
        return "ACMBTC"

    def __call__(self):
        return "ACMBTC"


ACMBTC = ACMBTC()
"""
    name: ACMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACMBUSD(NamedTuple):
    """
        name: ACMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACMBUSD"

    def __str__(self):
        return "ACMBUSD"

    def __call__(self):
        return "ACMBUSD"


ACMBUSD = ACMBUSD()
"""
    name: ACMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ACMUSDT(NamedTuple):
    """
        name: ACMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ACMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACMUSDT"

    def __str__(self):
        return "ACMUSDT"

    def __call__(self):
        return "ACMUSDT"


ACMUSDT = ACMUSDT()
"""
    name: ACMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAAUD(NamedTuple):
    """
        name: ADAAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAAUD"

    def __str__(self):
        return "ADAAUD"

    def __call__(self):
        return "ADAAUD"


ADAAUD = ADAAUD()
"""
    name: ADAAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADABIDR(NamedTuple):
    """
        name: ADABIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ADABIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABIDR"

    def __str__(self):
        return "ADABIDR"

    def __call__(self):
        return "ADABIDR"


ADABIDR = ADABIDR()
"""
    name: ADABIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ADABKRW(NamedTuple):
    """
        name: ADABKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADABKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABKRW"

    def __str__(self):
        return "ADABKRW"

    def __call__(self):
        return "ADABKRW"


ADABKRW = ADABKRW()
"""
    name: ADABKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADABNB(NamedTuple):
    """
        name: ADABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABNB"

    def __str__(self):
        return "ADABNB"

    def __call__(self):
        return "ADABNB"


ADABNB = ADABNB()
"""
    name: ADABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADABRL(NamedTuple):
    """
        name: ADABRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADABRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABRL"

    def __str__(self):
        return "ADABRL"

    def __call__(self):
        return "ADABRL"


ADABRL = ADABRL()
"""
    name: ADABRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADABTC(NamedTuple):
    """
        name: ADABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ADABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABTC"

    def __str__(self):
        return "ADABTC"

    def __call__(self):
        return "ADABTC"


ADABTC = ADABTC()
"""
    name: ADABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ADABUSD(NamedTuple):
    """
        name: ADABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ADABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADABUSD"

    def __str__(self):
        return "ADABUSD"

    def __call__(self):
        return "ADABUSD"


ADABUSD = ADABUSD()
"""
    name: ADABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ADADOWNUSDT(NamedTuple):
    """
        name: ADADOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADADOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADADOWNUSDT"

    def __str__(self):
        return "ADADOWNUSDT"

    def __call__(self):
        return "ADADOWNUSDT"


ADADOWNUSDT = ADADOWNUSDT()
"""
    name: ADADOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAETH(NamedTuple):
    """
        name: ADAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ADAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAETH"

    def __str__(self):
        return "ADAETH"

    def __call__(self):
        return "ADAETH"


ADAETH = ADAETH()
"""
    name: ADAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ADAEUR(NamedTuple):
    """
        name: ADAEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAEUR"

    def __str__(self):
        return "ADAEUR"

    def __call__(self):
        return "ADAEUR"


ADAEUR = ADAEUR()
"""
    name: ADAEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAGBP(NamedTuple):
    """
        name: ADAGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAGBP"

    def __str__(self):
        return "ADAGBP"

    def __call__(self):
        return "ADAGBP"


ADAGBP = ADAGBP()
"""
    name: ADAGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAPAX(NamedTuple):
    """
        name: ADAPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAPAX"

    def __str__(self):
        return "ADAPAX"

    def __call__(self):
        return "ADAPAX"


ADAPAX = ADAPAX()
"""
    name: ADAPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADARUB(NamedTuple):
    """
        name: ADARUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADARUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADARUB"

    def __str__(self):
        return "ADARUB"

    def __call__(self):
        return "ADARUB"


ADARUB = ADARUB()
"""
    name: ADARUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ADATRY(NamedTuple):
    """
        name: ADATRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADATRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADATRY"

    def __str__(self):
        return "ADATRY"

    def __call__(self):
        return "ADATRY"


ADATRY = ADATRY()
"""
    name: ADATRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADATUSD(NamedTuple):
    """
        name: ADATUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADATUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADATUSD"

    def __str__(self):
        return "ADATUSD"

    def __call__(self):
        return "ADATUSD"


ADATUSD = ADATUSD()
"""
    name: ADATUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAUPUSDT(NamedTuple):
    """
        name: ADAUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAUPUSDT"

    def __str__(self):
        return "ADAUPUSDT"

    def __call__(self):
        return "ADAUPUSDT"


ADAUPUSDT = ADAUPUSDT()
"""
    name: ADAUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAUSDC(NamedTuple):
    """
        name: ADAUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADAUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAUSDC"

    def __str__(self):
        return "ADAUSDC"

    def __call__(self):
        return "ADAUSDC"


ADAUSDC = ADAUSDC()
"""
    name: ADAUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADAUSDT(NamedTuple):
    """
        name: ADAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ADAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADAUSDT"

    def __str__(self):
        return "ADAUSDT"

    def __call__(self):
        return "ADAUSDT"


ADAUSDT = ADAUSDT()
"""
    name: ADAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ADXBNB(NamedTuple):
    """
        name: ADXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXBNB"

    def __str__(self):
        return "ADXBNB"

    def __call__(self):
        return "ADXBNB"


ADXBNB = ADXBNB()
"""
    name: ADXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADXBTC(NamedTuple):
    """
        name: ADXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXBTC"

    def __str__(self):
        return "ADXBTC"

    def __call__(self):
        return "ADXBTC"


ADXBTC = ADXBTC()
"""
    name: ADXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADXBUSD(NamedTuple):
    """
        name: ADXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXBUSD"

    def __str__(self):
        return "ADXBUSD"

    def __call__(self):
        return "ADXBUSD"


ADXBUSD = ADXBUSD()
"""
    name: ADXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADXETH(NamedTuple):
    """
        name: ADXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXETH"

    def __str__(self):
        return "ADXETH"

    def __call__(self):
        return "ADXETH"


ADXETH = ADXETH()
"""
    name: ADXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ADXUSDT(NamedTuple):
    """
        name: ADXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ADXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADXUSDT"

    def __str__(self):
        return "ADXUSDT"

    def __call__(self):
        return "ADXUSDT"


ADXUSDT = ADXUSDT()
"""
    name: ADXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AEBNB(NamedTuple):
    """
        name: AEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AEBNB"

    def __str__(self):
        return "AEBNB"

    def __call__(self):
        return "AEBNB"


AEBNB = AEBNB()
"""
    name: AEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AEBTC(NamedTuple):
    """
        name: AEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AEBTC"

    def __str__(self):
        return "AEBTC"

    def __call__(self):
        return "AEBTC"


AEBTC = AEBTC()
"""
    name: AEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AEETH(NamedTuple):
    """
        name: AEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AEETH"

    def __str__(self):
        return "AEETH"

    def __call__(self):
        return "AEETH"


AEETH = AEETH()
"""
    name: AEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AERGOBTC(NamedTuple):
    """
        name: AERGOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AERGOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGOBTC"

    def __str__(self):
        return "AERGOBTC"

    def __call__(self):
        return "AERGOBTC"


AERGOBTC = AERGOBTC()
"""
    name: AERGOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AERGOBUSD(NamedTuple):
    """
        name: AERGOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AERGOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGOBUSD"

    def __str__(self):
        return "AERGOBUSD"

    def __call__(self):
        return "AERGOBUSD"


AERGOBUSD = AERGOBUSD()
"""
    name: AERGOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIBNB(NamedTuple):
    """
        name: AGIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIBNB"

    def __str__(self):
        return "AGIBNB"

    def __call__(self):
        return "AGIBNB"


AGIBNB = AGIBNB()
"""
    name: AGIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIBTC(NamedTuple):
    """
        name: AGIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIBTC"

    def __str__(self):
        return "AGIBTC"

    def __call__(self):
        return "AGIBTC"


AGIBTC = AGIBTC()
"""
    name: AGIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIETH(NamedTuple):
    """
        name: AGIETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGIETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIETH"

    def __str__(self):
        return "AGIETH"

    def __call__(self):
        return "AGIETH"


AGIETH = AGIETH()
"""
    name: AGIETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIXBTC(NamedTuple):
    """
        name: AGIXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AGIXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIXBTC"

    def __str__(self):
        return "AGIXBTC"

    def __call__(self):
        return "AGIXBTC"


AGIXBTC = AGIXBTC()
"""
    name: AGIXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AGIXBUSD(NamedTuple):
    """
        name: AGIXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AGIXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIXBUSD"

    def __str__(self):
        return "AGIXBUSD"

    def __call__(self):
        return "AGIXBUSD"


AGIXBUSD = AGIXBUSD()
"""
    name: AGIXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AGIXTRY(NamedTuple):
    """
        name: AGIXTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGIXTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIXTRY"

    def __str__(self):
        return "AGIXTRY"

    def __call__(self):
        return "AGIXTRY"


AGIXTRY = AGIXTRY()
"""
    name: AGIXTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGIXUSDT(NamedTuple):
    """
        name: AGIXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AGIXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIXUSDT"

    def __str__(self):
        return "AGIXUSDT"

    def __call__(self):
        return "AGIXUSDT"


AGIXUSDT = AGIXUSDT()
"""
    name: AGIXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AGLDBNB(NamedTuple):
    """
        name: AGLDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGLDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLDBNB"

    def __str__(self):
        return "AGLDBNB"

    def __call__(self):
        return "AGLDBNB"


AGLDBNB = AGLDBNB()
"""
    name: AGLDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGLDBTC(NamedTuple):
    """
        name: AGLDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGLDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLDBTC"

    def __str__(self):
        return "AGLDBTC"

    def __call__(self):
        return "AGLDBTC"


AGLDBTC = AGLDBTC()
"""
    name: AGLDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGLDBUSD(NamedTuple):
    """
        name: AGLDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGLDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLDBUSD"

    def __str__(self):
        return "AGLDBUSD"

    def __call__(self):
        return "AGLDBUSD"


AGLDBUSD = AGLDBUSD()
"""
    name: AGLDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AGLDUSDT(NamedTuple):
    """
        name: AGLDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AGLDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLDUSDT"

    def __str__(self):
        return "AGLDUSDT"

    def __call__(self):
        return "AGLDUSDT"


AGLDUSDT = AGLDUSDT()
"""
    name: AGLDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONBNB(NamedTuple):
    """
        name: AIONBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONBNB"

    def __str__(self):
        return "AIONBNB"

    def __call__(self):
        return "AIONBNB"


AIONBNB = AIONBNB()
"""
    name: AIONBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONBTC(NamedTuple):
    """
        name: AIONBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONBTC"

    def __str__(self):
        return "AIONBTC"

    def __call__(self):
        return "AIONBTC"


AIONBTC = AIONBTC()
"""
    name: AIONBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONBUSD(NamedTuple):
    """
        name: AIONBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONBUSD"

    def __str__(self):
        return "AIONBUSD"

    def __call__(self):
        return "AIONBUSD"


AIONBUSD = AIONBUSD()
"""
    name: AIONBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONETH(NamedTuple):
    """
        name: AIONETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONETH"

    def __str__(self):
        return "AIONETH"

    def __call__(self):
        return "AIONETH"


AIONETH = AIONETH()
"""
    name: AIONETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AIONUSDT(NamedTuple):
    """
        name: AIONUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AIONUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIONUSDT"

    def __str__(self):
        return "AIONUSDT"

    def __call__(self):
        return "AIONUSDT"


AIONUSDT = AIONUSDT()
"""
    name: AIONUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AKROBTC(NamedTuple):
    """
        name: AKROBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AKROBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKROBTC"

    def __str__(self):
        return "AKROBTC"

    def __call__(self):
        return "AKROBTC"


AKROBTC = AKROBTC()
"""
    name: AKROBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AKROBUSD(NamedTuple):
    """
        name: AKROBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AKROBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKROBUSD"

    def __str__(self):
        return "AKROBUSD"

    def __call__(self):
        return "AKROBUSD"


AKROBUSD = AKROBUSD()
"""
    name: AKROBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AKROUSDT(NamedTuple):
    """
        name: AKROUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AKROUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKROUSDT"

    def __str__(self):
        return "AKROUSDT"

    def __call__(self):
        return "AKROUSDT"


AKROUSDT = AKROUSDT()
"""
    name: AKROUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALCXBTC(NamedTuple):
    """
        name: ALCXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALCXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALCXBTC"

    def __str__(self):
        return "ALCXBTC"

    def __call__(self):
        return "ALCXBTC"


ALCXBTC = ALCXBTC()
"""
    name: ALCXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALCXBUSD(NamedTuple):
    """
        name: ALCXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALCXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALCXBUSD"

    def __str__(self):
        return "ALCXBUSD"

    def __call__(self):
        return "ALCXBUSD"


ALCXBUSD = ALCXBUSD()
"""
    name: ALCXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALCXUSDT(NamedTuple):
    """
        name: ALCXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALCXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALCXUSDT"

    def __str__(self):
        return "ALCXUSDT"

    def __call__(self):
        return "ALCXUSDT"


ALCXUSDT = ALCXUSDT()
"""
    name: ALCXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALGOBIDR(NamedTuple):
    """
        name: ALGOBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOBIDR"

    def __str__(self):
        return "ALGOBIDR"

    def __call__(self):
        return "ALGOBIDR"


ALGOBIDR = ALGOBIDR()
"""
    name: ALGOBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ALGOBNB(NamedTuple):
    """
        name: ALGOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOBNB"

    def __str__(self):
        return "ALGOBNB"

    def __call__(self):
        return "ALGOBNB"


ALGOBNB = ALGOBNB()
"""
    name: ALGOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOBTC(NamedTuple):
    """
        name: ALGOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALGOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOBTC"

    def __str__(self):
        return "ALGOBTC"

    def __call__(self):
        return "ALGOBTC"


ALGOBTC = ALGOBTC()
"""
    name: ALGOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALGOBUSD(NamedTuple):
    """
        name: ALGOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALGOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOBUSD"

    def __str__(self):
        return "ALGOBUSD"

    def __call__(self):
        return "ALGOBUSD"


ALGOBUSD = ALGOBUSD()
"""
    name: ALGOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALGOETH(NamedTuple):
    """
        name: ALGOETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOETH"

    def __str__(self):
        return "ALGOETH"

    def __call__(self):
        return "ALGOETH"


ALGOETH = ALGOETH()
"""
    name: ALGOETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOPAX(NamedTuple):
    """
        name: ALGOPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOPAX"

    def __str__(self):
        return "ALGOPAX"

    def __call__(self):
        return "ALGOPAX"


ALGOPAX = ALGOPAX()
"""
    name: ALGOPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGORUB(NamedTuple):
    """
        name: ALGORUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGORUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGORUB"

    def __str__(self):
        return "ALGORUB"

    def __call__(self):
        return "ALGORUB"


ALGORUB = ALGORUB()
"""
    name: ALGORUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOTRY(NamedTuple):
    """
        name: ALGOTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOTRY"

    def __str__(self):
        return "ALGOTRY"

    def __call__(self):
        return "ALGOTRY"


ALGOTRY = ALGOTRY()
"""
    name: ALGOTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOTUSD(NamedTuple):
    """
        name: ALGOTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOTUSD"

    def __str__(self):
        return "ALGOTUSD"

    def __call__(self):
        return "ALGOTUSD"


ALGOTUSD = ALGOTUSD()
"""
    name: ALGOTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOUSDC(NamedTuple):
    """
        name: ALGOUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALGOUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOUSDC"

    def __str__(self):
        return "ALGOUSDC"

    def __call__(self):
        return "ALGOUSDC"


ALGOUSDC = ALGOUSDC()
"""
    name: ALGOUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALGOUSDT(NamedTuple):
    """
        name: ALGOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALGOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGOUSDT"

    def __str__(self):
        return "ALGOUSDT"

    def __call__(self):
        return "ALGOUSDT"


ALGOUSDT = ALGOUSDT()
"""
    name: ALGOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALICEBIDR(NamedTuple):
    """
        name: ALICEBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ALICEBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEBIDR"

    def __str__(self):
        return "ALICEBIDR"

    def __call__(self):
        return "ALICEBIDR"


ALICEBIDR = ALICEBIDR()
"""
    name: ALICEBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ALICEBNB(NamedTuple):
    """
        name: ALICEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALICEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEBNB"

    def __str__(self):
        return "ALICEBNB"

    def __call__(self):
        return "ALICEBNB"


ALICEBNB = ALICEBNB()
"""
    name: ALICEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALICEBTC(NamedTuple):
    """
        name: ALICEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALICEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEBTC"

    def __str__(self):
        return "ALICEBTC"

    def __call__(self):
        return "ALICEBTC"


ALICEBTC = ALICEBTC()
"""
    name: ALICEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALICEBUSD(NamedTuple):
    """
        name: ALICEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALICEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEBUSD"

    def __str__(self):
        return "ALICEBUSD"

    def __call__(self):
        return "ALICEBUSD"


ALICEBUSD = ALICEBUSD()
"""
    name: ALICEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALICETRY(NamedTuple):
    """
        name: ALICETRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALICETRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICETRY"

    def __str__(self):
        return "ALICETRY"

    def __call__(self):
        return "ALICETRY"


ALICETRY = ALICETRY()
"""
    name: ALICETRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALICEUSDT(NamedTuple):
    """
        name: ALICEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALICEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICEUSDT"

    def __str__(self):
        return "ALICEUSDT"

    def __call__(self):
        return "ALICEUSDT"


ALICEUSDT = ALICEUSDT()
"""
    name: ALICEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALPACABNB(NamedTuple):
    """
        name: ALPACABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPACABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPACABNB"

    def __str__(self):
        return "ALPACABNB"

    def __call__(self):
        return "ALPACABNB"


ALPACABNB = ALPACABNB()
"""
    name: ALPACABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPACABTC(NamedTuple):
    """
        name: ALPACABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPACABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPACABTC"

    def __str__(self):
        return "ALPACABTC"

    def __call__(self):
        return "ALPACABTC"


ALPACABTC = ALPACABTC()
"""
    name: ALPACABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPACABUSD(NamedTuple):
    """
        name: ALPACABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPACABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPACABUSD"

    def __str__(self):
        return "ALPACABUSD"

    def __call__(self):
        return "ALPACABUSD"


ALPACABUSD = ALPACABUSD()
"""
    name: ALPACABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPACAUSDT(NamedTuple):
    """
        name: ALPACAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPACAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPACAUSDT"

    def __str__(self):
        return "ALPACAUSDT"

    def __call__(self):
        return "ALPACAUSDT"


ALPACAUSDT = ALPACAUSDT()
"""
    name: ALPACAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPHABNB(NamedTuple):
    """
        name: ALPHABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPHABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHABNB"

    def __str__(self):
        return "ALPHABNB"

    def __call__(self):
        return "ALPHABNB"


ALPHABNB = ALPHABNB()
"""
    name: ALPHABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPHABTC(NamedTuple):
    """
        name: ALPHABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALPHABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHABTC"

    def __str__(self):
        return "ALPHABTC"

    def __call__(self):
        return "ALPHABTC"


ALPHABTC = ALPHABTC()
"""
    name: ALPHABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALPHABUSD(NamedTuple):
    """
        name: ALPHABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPHABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHABUSD"

    def __str__(self):
        return "ALPHABUSD"

    def __call__(self):
        return "ALPHABUSD"


ALPHABUSD = ALPHABUSD()
"""
    name: ALPHABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPHAUSDT(NamedTuple):
    """
        name: ALPHAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ALPHAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHAUSDT"

    def __str__(self):
        return "ALPHAUSDT"

    def __call__(self):
        return "ALPHAUSDT"


ALPHAUSDT = ALPHAUSDT()
"""
    name: ALPHAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ALPINEBTC(NamedTuple):
    """
        name: ALPINEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINEBTC"

    def __str__(self):
        return "ALPINEBTC"

    def __call__(self):
        return "ALPINEBTC"


ALPINEBTC = ALPINEBTC()
"""
    name: ALPINEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPINEBUSD(NamedTuple):
    """
        name: ALPINEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINEBUSD"

    def __str__(self):
        return "ALPINEBUSD"

    def __call__(self):
        return "ALPINEBUSD"


ALPINEBUSD = ALPINEBUSD()
"""
    name: ALPINEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPINEEUR(NamedTuple):
    """
        name: ALPINEEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINEEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINEEUR"

    def __str__(self):
        return "ALPINEEUR"

    def __call__(self):
        return "ALPINEEUR"


ALPINEEUR = ALPINEEUR()
"""
    name: ALPINEEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPINETRY(NamedTuple):
    """
        name: ALPINETRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINETRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINETRY"

    def __str__(self):
        return "ALPINETRY"

    def __call__(self):
        return "ALPINETRY"


ALPINETRY = ALPINETRY()
"""
    name: ALPINETRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ALPINEUSDT(NamedTuple):
    """
        name: ALPINEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ALPINEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINEUSDT"

    def __str__(self):
        return "ALPINEUSDT"

    def __call__(self):
        return "ALPINEUSDT"


ALPINEUSDT = ALPINEUSDT()
"""
    name: ALPINEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMBBNB(NamedTuple):
    """
        name: AMBBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMBBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBBNB"

    def __str__(self):
        return "AMBBNB"

    def __call__(self):
        return "AMBBNB"


AMBBNB = AMBBNB()
"""
    name: AMBBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMBBTC(NamedTuple):
    """
        name: AMBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBBTC"

    def __str__(self):
        return "AMBBTC"

    def __call__(self):
        return "AMBBTC"


AMBBTC = AMBBTC()
"""
    name: AMBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMBBUSD(NamedTuple):
    """
        name: AMBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AMBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBBUSD"

    def __str__(self):
        return "AMBBUSD"

    def __call__(self):
        return "AMBBUSD"


AMBBUSD = AMBBUSD()
"""
    name: AMBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AMBETH(NamedTuple):
    """
        name: AMBETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMBETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBETH"

    def __str__(self):
        return "AMBETH"

    def __call__(self):
        return "AMBETH"


AMBETH = AMBETH()
"""
    name: AMBETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMBUSDT(NamedTuple):
    """
        name: AMBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AMBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMBUSDT"

    def __str__(self):
        return "AMBUSDT"

    def __call__(self):
        return "AMBUSDT"


AMBUSDT = AMBUSDT()
"""
    name: AMBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AMPBNB(NamedTuple):
    """
        name: AMPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPBNB"

    def __str__(self):
        return "AMPBNB"

    def __call__(self):
        return "AMPBNB"


AMPBNB = AMPBNB()
"""
    name: AMPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMPBTC(NamedTuple):
    """
        name: AMPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPBTC"

    def __str__(self):
        return "AMPBTC"

    def __call__(self):
        return "AMPBTC"


AMPBTC = AMPBTC()
"""
    name: AMPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMPBUSD(NamedTuple):
    """
        name: AMPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPBUSD"

    def __str__(self):
        return "AMPBUSD"

    def __call__(self):
        return "AMPBUSD"


AMPBUSD = AMPBUSD()
"""
    name: AMPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AMPUSDT(NamedTuple):
    """
        name: AMPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AMPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPUSDT"

    def __str__(self):
        return "AMPUSDT"

    def __call__(self):
        return "AMPUSDT"


AMPUSDT = AMPUSDT()
"""
    name: AMPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANCBNB(NamedTuple):
    """
        name: ANCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANCBNB"

    def __str__(self):
        return "ANCBNB"

    def __call__(self):
        return "ANCBNB"


ANCBNB = ANCBNB()
"""
    name: ANCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANCBTC(NamedTuple):
    """
        name: ANCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANCBTC"

    def __str__(self):
        return "ANCBTC"

    def __call__(self):
        return "ANCBTC"


ANCBTC = ANCBTC()
"""
    name: ANCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANCBUSD(NamedTuple):
    """
        name: ANCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANCBUSD"

    def __str__(self):
        return "ANCBUSD"

    def __call__(self):
        return "ANCBUSD"


ANCBUSD = ANCBUSD()
"""
    name: ANCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANCUSDT(NamedTuple):
    """
        name: ANCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANCUSDT"

    def __str__(self):
        return "ANCUSDT"

    def __call__(self):
        return "ANCUSDT"


ANCUSDT = ANCUSDT()
"""
    name: ANCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRBNB(NamedTuple):
    """
        name: ANKRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRBNB"

    def __str__(self):
        return "ANKRBNB"

    def __call__(self):
        return "ANKRBNB"


ANKRBNB = ANKRBNB()
"""
    name: ANKRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRBTC(NamedTuple):
    """
        name: ANKRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANKRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRBTC"

    def __str__(self):
        return "ANKRBTC"

    def __call__(self):
        return "ANKRBTC"


ANKRBTC = ANKRBTC()
"""
    name: ANKRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANKRBUSD(NamedTuple):
    """
        name: ANKRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANKRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRBUSD"

    def __str__(self):
        return "ANKRBUSD"

    def __call__(self):
        return "ANKRBUSD"


ANKRBUSD = ANKRBUSD()
"""
    name: ANKRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANKRPAX(NamedTuple):
    """
        name: ANKRPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRPAX"

    def __str__(self):
        return "ANKRPAX"

    def __call__(self):
        return "ANKRPAX"


ANKRPAX = ANKRPAX()
"""
    name: ANKRPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRTRY(NamedTuple):
    """
        name: ANKRTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRTRY"

    def __str__(self):
        return "ANKRTRY"

    def __call__(self):
        return "ANKRTRY"


ANKRTRY = ANKRTRY()
"""
    name: ANKRTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRTUSD(NamedTuple):
    """
        name: ANKRTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRTUSD"

    def __str__(self):
        return "ANKRTUSD"

    def __call__(self):
        return "ANKRTUSD"


ANKRTUSD = ANKRTUSD()
"""
    name: ANKRTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRUSDC(NamedTuple):
    """
        name: ANKRUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANKRUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRUSDC"

    def __str__(self):
        return "ANKRUSDC"

    def __call__(self):
        return "ANKRUSDC"


ANKRUSDC = ANKRUSDC()
"""
    name: ANKRUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANKRUSDT(NamedTuple):
    """
        name: ANKRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANKRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKRUSDT"

    def __str__(self):
        return "ANKRUSDT"

    def __call__(self):
        return "ANKRUSDT"


ANKRUSDT = ANKRUSDT()
"""
    name: ANKRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANTBNB(NamedTuple):
    """
        name: ANTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANTBNB"

    def __str__(self):
        return "ANTBNB"

    def __call__(self):
        return "ANTBNB"


ANTBNB = ANTBNB()
"""
    name: ANTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANTBTC(NamedTuple):
    """
        name: ANTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANTBTC"

    def __str__(self):
        return "ANTBTC"

    def __call__(self):
        return "ANTBTC"


ANTBTC = ANTBTC()
"""
    name: ANTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANTBUSD(NamedTuple):
    """
        name: ANTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANTBUSD"

    def __str__(self):
        return "ANTBUSD"

    def __call__(self):
        return "ANTBUSD"


ANTBUSD = ANTBUSD()
"""
    name: ANTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANTUSDT(NamedTuple):
    """
        name: ANTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ANTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANTUSDT"

    def __str__(self):
        return "ANTUSDT"

    def __call__(self):
        return "ANTUSDT"


ANTUSDT = ANTUSDT()
"""
    name: ANTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ANYBTC(NamedTuple):
    """
        name: ANYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANYBTC"

    def __str__(self):
        return "ANYBTC"

    def __call__(self):
        return "ANYBTC"


ANYBTC = ANYBTC()
"""
    name: ANYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANYBUSD(NamedTuple):
    """
        name: ANYBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANYBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANYBUSD"

    def __str__(self):
        return "ANYBUSD"

    def __call__(self):
        return "ANYBUSD"


ANYBUSD = ANYBUSD()
"""
    name: ANYBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ANYUSDT(NamedTuple):
    """
        name: ANYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ANYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANYUSDT"

    def __str__(self):
        return "ANYUSDT"

    def __call__(self):
        return "ANYUSDT"


ANYUSDT = ANYUSDT()
"""
    name: ANYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEAUD(NamedTuple):
    """
        name: APEAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEAUD"

    def __str__(self):
        return "APEAUD"

    def __call__(self):
        return "APEAUD"


APEAUD = APEAUD()
"""
    name: APEAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEBNB(NamedTuple):
    """
        name: APEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEBNB"

    def __str__(self):
        return "APEBNB"

    def __call__(self):
        return "APEBNB"


APEBNB = APEBNB()
"""
    name: APEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEBRL(NamedTuple):
    """
        name: APEBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEBRL"

    def __str__(self):
        return "APEBRL"

    def __call__(self):
        return "APEBRL"


APEBRL = APEBRL()
"""
    name: APEBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEBTC(NamedTuple):
    """
        name: APEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEBTC"

    def __str__(self):
        return "APEBTC"

    def __call__(self):
        return "APEBTC"


APEBTC = APEBTC()
"""
    name: APEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APEBUSD(NamedTuple):
    """
        name: APEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEBUSD"

    def __str__(self):
        return "APEBUSD"

    def __call__(self):
        return "APEBUSD"


APEBUSD = APEBUSD()
"""
    name: APEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APEETH(NamedTuple):
    """
        name: APEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEETH"

    def __str__(self):
        return "APEETH"

    def __call__(self):
        return "APEETH"


APEETH = APEETH()
"""
    name: APEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APEEUR(NamedTuple):
    """
        name: APEEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEEUR"

    def __str__(self):
        return "APEEUR"

    def __call__(self):
        return "APEEUR"


APEEUR = APEEUR()
"""
    name: APEEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEGBP(NamedTuple):
    """
        name: APEGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APEGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEGBP"

    def __str__(self):
        return "APEGBP"

    def __call__(self):
        return "APEGBP"


APEGBP = APEGBP()
"""
    name: APEGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APETRY(NamedTuple):
    """
        name: APETRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APETRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APETRY"

    def __str__(self):
        return "APETRY"

    def __call__(self):
        return "APETRY"


APETRY = APETRY()
"""
    name: APETRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APEUSDT(NamedTuple):
    """
        name: APEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APEUSDT"

    def __str__(self):
        return "APEUSDT"

    def __call__(self):
        return "APEUSDT"


APEUSDT = APEUSDT()
"""
    name: APEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class API3BNB(NamedTuple):
    """
        name: API3BNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "API3BNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3BNB"

    def __str__(self):
        return "API3BNB"

    def __call__(self):
        return "API3BNB"


API3BNB = API3BNB()
"""
    name: API3BNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class API3BTC(NamedTuple):
    """
        name: API3BTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "API3BTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3BTC"

    def __str__(self):
        return "API3BTC"

    def __call__(self):
        return "API3BTC"


API3BTC = API3BTC()
"""
    name: API3BTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class API3BUSD(NamedTuple):
    """
        name: API3BUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "API3BUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3BUSD"

    def __str__(self):
        return "API3BUSD"

    def __call__(self):
        return "API3BUSD"


API3BUSD = API3BUSD()
"""
    name: API3BUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class API3TRY(NamedTuple):
    """
        name: API3TRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "API3TRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3TRY"

    def __str__(self):
        return "API3TRY"

    def __call__(self):
        return "API3TRY"


API3TRY = API3TRY()
"""
    name: API3TRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class API3USDT(NamedTuple):
    """
        name: API3USDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "API3USDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3USDT"

    def __str__(self):
        return "API3USDT"

    def __call__(self):
        return "API3USDT"


API3USDT = API3USDT()
"""
    name: API3USDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APPCBNB(NamedTuple):
    """
        name: APPCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APPCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APPCBNB"

    def __str__(self):
        return "APPCBNB"

    def __call__(self):
        return "APPCBNB"


APPCBNB = APPCBNB()
"""
    name: APPCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APPCBTC(NamedTuple):
    """
        name: APPCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APPCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APPCBTC"

    def __str__(self):
        return "APPCBTC"

    def __call__(self):
        return "APPCBTC"


APPCBTC = APPCBTC()
"""
    name: APPCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APPCETH(NamedTuple):
    """
        name: APPCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APPCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APPCETH"

    def __str__(self):
        return "APPCETH"

    def __call__(self):
        return "APPCETH"


APPCETH = APPCETH()
"""
    name: APPCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTBRL(NamedTuple):
    """
        name: APTBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTBRL"

    def __str__(self):
        return "APTBRL"

    def __call__(self):
        return "APTBRL"


APTBRL = APTBRL()
"""
    name: APTBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTBTC(NamedTuple):
    """
        name: APTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTBTC"

    def __str__(self):
        return "APTBTC"

    def __call__(self):
        return "APTBTC"


APTBTC = APTBTC()
"""
    name: APTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTBUSD(NamedTuple):
    """
        name: APTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTBUSD"

    def __str__(self):
        return "APTBUSD"

    def __call__(self):
        return "APTBUSD"


APTBUSD = APTBUSD()
"""
    name: APTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class APTETH(NamedTuple):
    """
        name: APTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTETH"

    def __str__(self):
        return "APTETH"

    def __call__(self):
        return "APTETH"


APTETH = APTETH()
"""
    name: APTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTEUR(NamedTuple):
    """
        name: APTEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTEUR"

    def __str__(self):
        return "APTEUR"

    def __call__(self):
        return "APTEUR"


APTEUR = APTEUR()
"""
    name: APTEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTTRY(NamedTuple):
    """
        name: APTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "APTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTTRY"

    def __str__(self):
        return "APTTRY"

    def __call__(self):
        return "APTTRY"


APTTRY = APTTRY()
"""
    name: APTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class APTUSDT(NamedTuple):
    """
        name: APTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "APTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APTUSDT"

    def __str__(self):
        return "APTUSDT"

    def __call__(self):
        return "APTUSDT"


APTUSDT = APTUSDT()
"""
    name: APTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARBBTC(NamedTuple):
    """
        name: ARBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBBTC"

    def __str__(self):
        return "ARBBTC"

    def __call__(self):
        return "ARBBTC"


ARBBTC = ARBBTC()
"""
    name: ARBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARBEUR(NamedTuple):
    """
        name: ARBEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBEUR"

    def __str__(self):
        return "ARBEUR"

    def __call__(self):
        return "ARBEUR"


ARBEUR = ARBEUR()
"""
    name: ARBEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBNB(NamedTuple):
    """
        name: ARBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBNB"

    def __str__(self):
        return "ARBNB"

    def __call__(self):
        return "ARBNB"


ARBNB = ARBNB()
"""
    name: ARBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBRUB(NamedTuple):
    """
        name: ARBRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBRUB"

    def __str__(self):
        return "ARBRUB"

    def __call__(self):
        return "ARBRUB"


ARBRUB = ARBRUB()
"""
    name: ARBRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBTC(NamedTuple):
    """
        name: ARBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBTC"

    def __str__(self):
        return "ARBTC"

    def __call__(self):
        return "ARBTC"


ARBTC = ARBTC()
"""
    name: ARBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBTRY(NamedTuple):
    """
        name: ARBTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBTRY"

    def __str__(self):
        return "ARBTRY"

    def __call__(self):
        return "ARBTRY"


ARBTRY = ARBTRY()
"""
    name: ARBTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBTUSD(NamedTuple):
    """
        name: ARBTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARBTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBTUSD"

    def __str__(self):
        return "ARBTUSD"

    def __call__(self):
        return "ARBTUSD"


ARBTUSD = ARBTUSD()
"""
    name: ARBTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARBUSD(NamedTuple):
    """
        name: ARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBUSD"

    def __str__(self):
        return "ARBUSD"

    def __call__(self):
        return "ARBUSD"


ARBUSD = ARBUSD()
"""
    name: ARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARBUSDT(NamedTuple):
    """
        name: ARBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARBUSDT"

    def __str__(self):
        return "ARBUSDT"

    def __call__(self):
        return "ARBUSDT"


ARBUSDT = ARBUSDT()
"""
    name: ARBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARDRBNB(NamedTuple):
    """
        name: ARDRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARDRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARDRBNB"

    def __str__(self):
        return "ARDRBNB"

    def __call__(self):
        return "ARDRBNB"


ARDRBNB = ARDRBNB()
"""
    name: ARDRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARDRBTC(NamedTuple):
    """
        name: ARDRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARDRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARDRBTC"

    def __str__(self):
        return "ARDRBTC"

    def __call__(self):
        return "ARDRBTC"


ARDRBTC = ARDRBTC()
"""
    name: ARDRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARDRETH(NamedTuple):
    """
        name: ARDRETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARDRETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARDRETH"

    def __str__(self):
        return "ARDRETH"

    def __call__(self):
        return "ARDRETH"


ARDRETH = ARDRETH()
"""
    name: ARDRETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARDRUSDT(NamedTuple):
    """
        name: ARDRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARDRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARDRUSDT"

    def __str__(self):
        return "ARDRUSDT"

    def __call__(self):
        return "ARDRUSDT"


ARDRUSDT = ARDRUSDT()
"""
    name: ARDRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARKBTC(NamedTuple):
    """
        name: ARKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARKBTC"

    def __str__(self):
        return "ARKBTC"

    def __call__(self):
        return "ARKBTC"


ARKBTC = ARKBTC()
"""
    name: ARKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARKBUSD(NamedTuple):
    """
        name: ARKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARKBUSD"

    def __str__(self):
        return "ARKBUSD"

    def __call__(self):
        return "ARKBUSD"


ARKBUSD = ARKBUSD()
"""
    name: ARKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARKETH(NamedTuple):
    """
        name: ARKETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARKETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARKETH"

    def __str__(self):
        return "ARKETH"

    def __call__(self):
        return "ARKETH"


ARKETH = ARKETH()
"""
    name: ARKETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARNBTC(NamedTuple):
    """
        name: ARNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARNBTC"

    def __str__(self):
        return "ARNBTC"

    def __call__(self):
        return "ARNBTC"


ARNBTC = ARNBTC()
"""
    name: ARNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARNETH(NamedTuple):
    """
        name: ARNETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARNETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARNETH"

    def __str__(self):
        return "ARNETH"

    def __call__(self):
        return "ARNETH"


ARNETH = ARNETH()
"""
    name: ARNETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPABNB(NamedTuple):
    """
        name: ARPABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARPABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPABNB"

    def __str__(self):
        return "ARPABNB"

    def __call__(self):
        return "ARPABNB"


ARPABNB = ARPABNB()
"""
    name: ARPABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPABTC(NamedTuple):
    """
        name: ARPABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARPABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPABTC"

    def __str__(self):
        return "ARPABTC"

    def __call__(self):
        return "ARPABTC"


ARPABTC = ARPABTC()
"""
    name: ARPABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARPABUSD(NamedTuple):
    """
        name: ARPABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARPABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPABUSD"

    def __str__(self):
        return "ARPABUSD"

    def __call__(self):
        return "ARPABUSD"


ARPABUSD = ARPABUSD()
"""
    name: ARPABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARPAETH(NamedTuple):
    """
        name: ARPAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARPAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPAETH"

    def __str__(self):
        return "ARPAETH"

    def __call__(self):
        return "ARPAETH"


ARPAETH = ARPAETH()
"""
    name: ARPAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPARUB(NamedTuple):
    """
        name: ARPARUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARPARUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPARUB"

    def __str__(self):
        return "ARPARUB"

    def __call__(self):
        return "ARPARUB"


ARPARUB = ARPARUB()
"""
    name: ARPARUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPATRY(NamedTuple):
    """
        name: ARPATRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ARPATRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPATRY"

    def __str__(self):
        return "ARPATRY"

    def __call__(self):
        return "ARPATRY"


ARPATRY = ARPATRY()
"""
    name: ARPATRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ARPAUSDT(NamedTuple):
    """
        name: ARPAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARPAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPAUSDT"

    def __str__(self):
        return "ARPAUSDT"

    def __call__(self):
        return "ARPAUSDT"


ARPAUSDT = ARPAUSDT()
"""
    name: ARPAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ARUSDT(NamedTuple):
    """
        name: ARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARUSDT"

    def __str__(self):
        return "ARUSDT"

    def __call__(self):
        return "ARUSDT"


ARUSDT = ARUSDT()
"""
    name: ARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ASRBTC(NamedTuple):
    """
        name: ASRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASRBTC"

    def __str__(self):
        return "ASRBTC"

    def __call__(self):
        return "ASRBTC"


ASRBTC = ASRBTC()
"""
    name: ASRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASRBUSD(NamedTuple):
    """
        name: ASRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASRBUSD"

    def __str__(self):
        return "ASRBUSD"

    def __call__(self):
        return "ASRBUSD"


ASRBUSD = ASRBUSD()
"""
    name: ASRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASRUSDT(NamedTuple):
    """
        name: ASRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASRUSDT"

    def __str__(self):
        return "ASRUSDT"

    def __call__(self):
        return "ASRUSDT"


ASRUSDT = ASRUSDT()
"""
    name: ASRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTBTC(NamedTuple):
    """
        name: ASTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTBTC"

    def __str__(self):
        return "ASTBTC"

    def __call__(self):
        return "ASTBTC"


ASTBTC = ASTBTC()
"""
    name: ASTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTETH(NamedTuple):
    """
        name: ASTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTETH"

    def __str__(self):
        return "ASTETH"

    def __call__(self):
        return "ASTETH"


ASTETH = ASTETH()
"""
    name: ASTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTRBTC(NamedTuple):
    """
        name: ASTRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASTRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRBTC"

    def __str__(self):
        return "ASTRBTC"

    def __call__(self):
        return "ASTRBTC"


ASTRBTC = ASTRBTC()
"""
    name: ASTRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTRBUSD(NamedTuple):
    """
        name: ASTRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ASTRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRBUSD"

    def __str__(self):
        return "ASTRBUSD"

    def __call__(self):
        return "ASTRBUSD"


ASTRBUSD = ASTRBUSD()
"""
    name: ASTRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ASTRETH(NamedTuple):
    """
        name: ASTRETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ASTRETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRETH"

    def __str__(self):
        return "ASTRETH"

    def __call__(self):
        return "ASTRETH"


ASTRETH = ASTRETH()
"""
    name: ASTRETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ASTRUSDT(NamedTuple):
    """
        name: ASTRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ASTRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRUSDT"

    def __str__(self):
        return "ASTRUSDT"

    def __call__(self):
        return "ASTRUSDT"


ASTRUSDT = ASTRUSDT()
"""
    name: ASTRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ATABNB(NamedTuple):
    """
        name: ATABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATABNB"

    def __str__(self):
        return "ATABNB"

    def __call__(self):
        return "ATABNB"


ATABNB = ATABNB()
"""
    name: ATABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATABTC(NamedTuple):
    """
        name: ATABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATABTC"

    def __str__(self):
        return "ATABTC"

    def __call__(self):
        return "ATABTC"


ATABTC = ATABTC()
"""
    name: ATABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATABUSD(NamedTuple):
    """
        name: ATABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATABUSD"

    def __str__(self):
        return "ATABUSD"

    def __call__(self):
        return "ATABUSD"


ATABUSD = ATABUSD()
"""
    name: ATABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATAUSDT(NamedTuple):
    """
        name: ATAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATAUSDT"

    def __str__(self):
        return "ATAUSDT"

    def __call__(self):
        return "ATAUSDT"


ATAUSDT = ATAUSDT()
"""
    name: ATAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATMBTC(NamedTuple):
    """
        name: ATMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATMBTC"

    def __str__(self):
        return "ATMBTC"

    def __call__(self):
        return "ATMBTC"


ATMBTC = ATMBTC()
"""
    name: ATMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATMBUSD(NamedTuple):
    """
        name: ATMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATMBUSD"

    def __str__(self):
        return "ATMBUSD"

    def __call__(self):
        return "ATMBUSD"


ATMBUSD = ATMBUSD()
"""
    name: ATMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATMUSDT(NamedTuple):
    """
        name: ATMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATMUSDT"

    def __str__(self):
        return "ATMUSDT"

    def __call__(self):
        return "ATMUSDT"


ATMUSDT = ATMUSDT()
"""
    name: ATMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMBIDR(NamedTuple):
    """
        name: ATOMBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBIDR"

    def __str__(self):
        return "ATOMBIDR"

    def __call__(self):
        return "ATOMBIDR"


ATOMBIDR = ATOMBIDR()
"""
    name: ATOMBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ATOMBNB(NamedTuple):
    """
        name: ATOMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBNB"

    def __str__(self):
        return "ATOMBNB"

    def __call__(self):
        return "ATOMBNB"


ATOMBNB = ATOMBNB()
"""
    name: ATOMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMBRL(NamedTuple):
    """
        name: ATOMBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBRL"

    def __str__(self):
        return "ATOMBRL"

    def __call__(self):
        return "ATOMBRL"


ATOMBRL = ATOMBRL()
"""
    name: ATOMBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMBTC(NamedTuple):
    """
        name: ATOMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ATOMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBTC"

    def __str__(self):
        return "ATOMBTC"

    def __call__(self):
        return "ATOMBTC"


ATOMBTC = ATOMBTC()
"""
    name: ATOMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ATOMBUSD(NamedTuple):
    """
        name: ATOMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ATOMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMBUSD"

    def __str__(self):
        return "ATOMBUSD"

    def __call__(self):
        return "ATOMBUSD"


ATOMBUSD = ATOMBUSD()
"""
    name: ATOMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ATOMETH(NamedTuple):
    """
        name: ATOMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMETH"

    def __str__(self):
        return "ATOMETH"

    def __call__(self):
        return "ATOMETH"


ATOMETH = ATOMETH()
"""
    name: ATOMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMEUR(NamedTuple):
    """
        name: ATOMEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMEUR"

    def __str__(self):
        return "ATOMEUR"

    def __call__(self):
        return "ATOMEUR"


ATOMEUR = ATOMEUR()
"""
    name: ATOMEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMPAX(NamedTuple):
    """
        name: ATOMPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMPAX"

    def __str__(self):
        return "ATOMPAX"

    def __call__(self):
        return "ATOMPAX"


ATOMPAX = ATOMPAX()
"""
    name: ATOMPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMTRY(NamedTuple):
    """
        name: ATOMTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMTRY"

    def __str__(self):
        return "ATOMTRY"

    def __call__(self):
        return "ATOMTRY"


ATOMTRY = ATOMTRY()
"""
    name: ATOMTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMTUSD(NamedTuple):
    """
        name: ATOMTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMTUSD"

    def __str__(self):
        return "ATOMTUSD"

    def __call__(self):
        return "ATOMTUSD"


ATOMTUSD = ATOMTUSD()
"""
    name: ATOMTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMUSDC(NamedTuple):
    """
        name: ATOMUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ATOMUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMUSDC"

    def __str__(self):
        return "ATOMUSDC"

    def __call__(self):
        return "ATOMUSDC"


ATOMUSDC = ATOMUSDC()
"""
    name: ATOMUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ATOMUSDT(NamedTuple):
    """
        name: ATOMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ATOMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOMUSDT"

    def __str__(self):
        return "ATOMUSDT"

    def __call__(self):
        return "ATOMUSDT"


ATOMUSDT = ATOMUSDT()
"""
    name: ATOMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUCTIONBTC(NamedTuple):
    """
        name: AUCTIONBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUCTIONBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUCTIONBTC"

    def __str__(self):
        return "AUCTIONBTC"

    def __call__(self):
        return "AUCTIONBTC"


AUCTIONBTC = AUCTIONBTC()
"""
    name: AUCTIONBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUCTIONBUSD(NamedTuple):
    """
        name: AUCTIONBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUCTIONBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUCTIONBUSD"

    def __str__(self):
        return "AUCTIONBUSD"

    def __call__(self):
        return "AUCTIONBUSD"


AUCTIONBUSD = AUCTIONBUSD()
"""
    name: AUCTIONBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUCTIONUSDT(NamedTuple):
    """
        name: AUCTIONUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUCTIONUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUCTIONUSDT"

    def __str__(self):
        return "AUCTIONUSDT"

    def __call__(self):
        return "AUCTIONUSDT"


AUCTIONUSDT = AUCTIONUSDT()
"""
    name: AUCTIONUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUDBUSD(NamedTuple):
    """
        name: AUDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDBUSD"

    def __str__(self):
        return "AUDBUSD"

    def __call__(self):
        return "AUDBUSD"


AUDBUSD = AUDBUSD()
"""
    name: AUDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUDIOBTC(NamedTuple):
    """
        name: AUDIOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUDIOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIOBTC"

    def __str__(self):
        return "AUDIOBTC"

    def __call__(self):
        return "AUDIOBTC"


AUDIOBTC = AUDIOBTC()
"""
    name: AUDIOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUDIOBUSD(NamedTuple):
    """
        name: AUDIOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUDIOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIOBUSD"

    def __str__(self):
        return "AUDIOBUSD"

    def __call__(self):
        return "AUDIOBUSD"


AUDIOBUSD = AUDIOBUSD()
"""
    name: AUDIOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUDIOTRY(NamedTuple):
    """
        name: AUDIOTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUDIOTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIOTRY"

    def __str__(self):
        return "AUDIOTRY"

    def __call__(self):
        return "AUDIOTRY"


AUDIOTRY = AUDIOTRY()
"""
    name: AUDIOTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUDIOUSDT(NamedTuple):
    """
        name: AUDIOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AUDIOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIOUSDT"

    def __str__(self):
        return "AUDIOUSDT"

    def __call__(self):
        return "AUDIOUSDT"


AUDIOUSDT = AUDIOUSDT()
"""
    name: AUDIOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AUDUSDC(NamedTuple):
    """
        name: AUDUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUDUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDUSDC"

    def __str__(self):
        return "AUDUSDC"

    def __call__(self):
        return "AUDUSDC"


AUDUSDC = AUDUSDC()
"""
    name: AUDUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUDUSDT(NamedTuple):
    """
        name: AUDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDUSDT"

    def __str__(self):
        return "AUDUSDT"

    def __call__(self):
        return "AUDUSDT"


AUDUSDT = AUDUSDT()
"""
    name: AUDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUTOBTC(NamedTuple):
    """
        name: AUTOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUTOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUTOBTC"

    def __str__(self):
        return "AUTOBTC"

    def __call__(self):
        return "AUTOBTC"


AUTOBTC = AUTOBTC()
"""
    name: AUTOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUTOBUSD(NamedTuple):
    """
        name: AUTOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUTOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUTOBUSD"

    def __str__(self):
        return "AUTOBUSD"

    def __call__(self):
        return "AUTOBUSD"


AUTOBUSD = AUTOBUSD()
"""
    name: AUTOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AUTOUSDT(NamedTuple):
    """
        name: AUTOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AUTOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUTOUSDT"

    def __str__(self):
        return "AUTOUSDT"

    def __call__(self):
        return "AUTOUSDT"


AUTOUSDT = AUTOUSDT()
"""
    name: AUTOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVABNB(NamedTuple):
    """
        name: AVABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVABNB"

    def __str__(self):
        return "AVABNB"

    def __call__(self):
        return "AVABNB"


AVABNB = AVABNB()
"""
    name: AVABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVABTC(NamedTuple):
    """
        name: AVABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVABTC"

    def __str__(self):
        return "AVABTC"

    def __call__(self):
        return "AVABTC"


AVABTC = AVABTC()
"""
    name: AVABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVABUSD(NamedTuple):
    """
        name: AVABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVABUSD"

    def __str__(self):
        return "AVABUSD"

    def __call__(self):
        return "AVABUSD"


AVABUSD = AVABUSD()
"""
    name: AVABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AVAUSDT(NamedTuple):
    """
        name: AVAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAUSDT"

    def __str__(self):
        return "AVAUSDT"

    def __call__(self):
        return "AVAUSDT"


AVAUSDT = AVAUSDT()
"""
    name: AVAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AVAXAUD(NamedTuple):
    """
        name: AVAXAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXAUD"

    def __str__(self):
        return "AVAXAUD"

    def __call__(self):
        return "AVAXAUD"


AVAXAUD = AVAXAUD()
"""
    name: AVAXAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXBIDR(NamedTuple):
    """
        name: AVAXBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBIDR"

    def __str__(self):
        return "AVAXBIDR"

    def __call__(self):
        return "AVAXBIDR"


AVAXBIDR = AVAXBIDR()
"""
    name: AVAXBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class AVAXBNB(NamedTuple):
    """
        name: AVAXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBNB"

    def __str__(self):
        return "AVAXBNB"

    def __call__(self):
        return "AVAXBNB"


AVAXBNB = AVAXBNB()
"""
    name: AVAXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXBRL(NamedTuple):
    """
        name: AVAXBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBRL"

    def __str__(self):
        return "AVAXBRL"

    def __call__(self):
        return "AVAXBRL"


AVAXBRL = AVAXBRL()
"""
    name: AVAXBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXBTC(NamedTuple):
    """
        name: AVAXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVAXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBTC"

    def __str__(self):
        return "AVAXBTC"

    def __call__(self):
        return "AVAXBTC"


AVAXBTC = AVAXBTC()
"""
    name: AVAXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AVAXBUSD(NamedTuple):
    """
        name: AVAXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVAXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXBUSD"

    def __str__(self):
        return "AVAXBUSD"

    def __call__(self):
        return "AVAXBUSD"


AVAXBUSD = AVAXBUSD()
"""
    name: AVAXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AVAXETH(NamedTuple):
    """
        name: AVAXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXETH"

    def __str__(self):
        return "AVAXETH"

    def __call__(self):
        return "AVAXETH"


AVAXETH = AVAXETH()
"""
    name: AVAXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXEUR(NamedTuple):
    """
        name: AVAXEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXEUR"

    def __str__(self):
        return "AVAXEUR"

    def __call__(self):
        return "AVAXEUR"


AVAXEUR = AVAXEUR()
"""
    name: AVAXEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXGBP(NamedTuple):
    """
        name: AVAXGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXGBP"

    def __str__(self):
        return "AVAXGBP"

    def __call__(self):
        return "AVAXGBP"


AVAXGBP = AVAXGBP()
"""
    name: AVAXGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXTRY(NamedTuple):
    """
        name: AVAXTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AVAXTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXTRY"

    def __str__(self):
        return "AVAXTRY"

    def __call__(self):
        return "AVAXTRY"


AVAXTRY = AVAXTRY()
"""
    name: AVAXTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AVAXUSDT(NamedTuple):
    """
        name: AVAXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AVAXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAXUSDT"

    def __str__(self):
        return "AVAXUSDT"

    def __call__(self):
        return "AVAXUSDT"


AVAXUSDT = AVAXUSDT()
"""
    name: AVAXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AXSAUD(NamedTuple):
    """
        name: AXSAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSAUD"

    def __str__(self):
        return "AXSAUD"

    def __call__(self):
        return "AXSAUD"


AXSAUD = AXSAUD()
"""
    name: AXSAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSBNB(NamedTuple):
    """
        name: AXSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSBNB"

    def __str__(self):
        return "AXSBNB"

    def __call__(self):
        return "AXSBNB"


AXSBNB = AXSBNB()
"""
    name: AXSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSBRL(NamedTuple):
    """
        name: AXSBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSBRL"

    def __str__(self):
        return "AXSBRL"

    def __call__(self):
        return "AXSBRL"


AXSBRL = AXSBRL()
"""
    name: AXSBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSBTC(NamedTuple):
    """
        name: AXSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AXSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSBTC"

    def __str__(self):
        return "AXSBTC"

    def __call__(self):
        return "AXSBTC"


AXSBTC = AXSBTC()
"""
    name: AXSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AXSBUSD(NamedTuple):
    """
        name: AXSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AXSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSBUSD"

    def __str__(self):
        return "AXSBUSD"

    def __call__(self):
        return "AXSBUSD"


AXSBUSD = AXSBUSD()
"""
    name: AXSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class AXSETH(NamedTuple):
    """
        name: AXSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSETH"

    def __str__(self):
        return "AXSETH"

    def __call__(self):
        return "AXSETH"


AXSETH = AXSETH()
"""
    name: AXSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSTRY(NamedTuple):
    """
        name: AXSTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "AXSTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSTRY"

    def __str__(self):
        return "AXSTRY"

    def __call__(self):
        return "AXSTRY"


AXSTRY = AXSTRY()
"""
    name: AXSTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class AXSUSDT(NamedTuple):
    """
        name: AXSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "AXSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXSUSDT"

    def __str__(self):
        return "AXSUSDT"

    def __call__(self):
        return "AXSUSDT"


AXSUSDT = AXSUSDT()
"""
    name: AXSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BADGERBTC(NamedTuple):
    """
        name: BADGERBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BADGERBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BADGERBTC"

    def __str__(self):
        return "BADGERBTC"

    def __call__(self):
        return "BADGERBTC"


BADGERBTC = BADGERBTC()
"""
    name: BADGERBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BADGERBUSD(NamedTuple):
    """
        name: BADGERBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BADGERBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BADGERBUSD"

    def __str__(self):
        return "BADGERBUSD"

    def __call__(self):
        return "BADGERBUSD"


BADGERBUSD = BADGERBUSD()
"""
    name: BADGERBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BADGERUSDT(NamedTuple):
    """
        name: BADGERUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BADGERUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BADGERUSDT"

    def __str__(self):
        return "BADGERUSDT"

    def __call__(self):
        return "BADGERUSDT"


BADGERUSDT = BADGERUSDT()
"""
    name: BADGERUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BAKEBNB(NamedTuple):
    """
        name: BAKEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BAKEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAKEBNB"

    def __str__(self):
        return "BAKEBNB"

    def __call__(self):
        return "BAKEBNB"


BAKEBNB = BAKEBNB()
"""
    name: BAKEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BAKEBTC(NamedTuple):
    """
        name: BAKEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BAKEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAKEBTC"

    def __str__(self):
        return "BAKEBTC"

    def __call__(self):
        return "BAKEBTC"


BAKEBTC = BAKEBTC()
"""
    name: BAKEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BAKEBUSD(NamedTuple):
    """
        name: BAKEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BAKEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAKEBUSD"

    def __str__(self):
        return "BAKEBUSD"

    def __call__(self):
        return "BAKEBUSD"


BAKEBUSD = BAKEBUSD()
"""
    name: BAKEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BAKEUSDT(NamedTuple):
    """
        name: BAKEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BAKEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAKEUSDT"

    def __str__(self):
        return "BAKEUSDT"

    def __call__(self):
        return "BAKEUSDT"


BAKEUSDT = BAKEUSDT()
"""
    name: BAKEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BALBNB(NamedTuple):
    """
        name: BALBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BALBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BALBNB"

    def __str__(self):
        return "BALBNB"

    def __call__(self):
        return "BALBNB"


BALBNB = BALBNB()
"""
    name: BALBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BALBTC(NamedTuple):
    """
        name: BALBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BALBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BALBTC"

    def __str__(self):
        return "BALBTC"

    def __call__(self):
        return "BALBTC"


BALBTC = BALBTC()
"""
    name: BALBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BALBUSD(NamedTuple):
    """
        name: BALBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BALBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BALBUSD"

    def __str__(self):
        return "BALBUSD"

    def __call__(self):
        return "BALBUSD"


BALBUSD = BALBUSD()
"""
    name: BALBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BALUSDT(NamedTuple):
    """
        name: BALUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BALUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BALUSDT"

    def __str__(self):
        return "BALUSDT"

    def __call__(self):
        return "BALUSDT"


BALUSDT = BALUSDT()
"""
    name: BALUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BANDBNB(NamedTuple):
    """
        name: BANDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BANDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BANDBNB"

    def __str__(self):
        return "BANDBNB"

    def __call__(self):
        return "BANDBNB"


BANDBNB = BANDBNB()
"""
    name: BANDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BANDBTC(NamedTuple):
    """
        name: BANDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BANDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BANDBTC"

    def __str__(self):
        return "BANDBTC"

    def __call__(self):
        return "BANDBTC"


BANDBTC = BANDBTC()
"""
    name: BANDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BANDBUSD(NamedTuple):
    """
        name: BANDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BANDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BANDBUSD"

    def __str__(self):
        return "BANDBUSD"

    def __call__(self):
        return "BANDBUSD"


BANDBUSD = BANDBUSD()
"""
    name: BANDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BANDUSDT(NamedTuple):
    """
        name: BANDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BANDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BANDUSDT"

    def __str__(self):
        return "BANDUSDT"

    def __call__(self):
        return "BANDUSDT"


BANDUSDT = BANDUSDT()
"""
    name: BANDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BARBTC(NamedTuple):
    """
        name: BARBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BARBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BARBTC"

    def __str__(self):
        return "BARBTC"

    def __call__(self):
        return "BARBTC"


BARBTC = BARBTC()
"""
    name: BARBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BARBUSD(NamedTuple):
    """
        name: BARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BARBUSD"

    def __str__(self):
        return "BARBUSD"

    def __call__(self):
        return "BARBUSD"


BARBUSD = BARBUSD()
"""
    name: BARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BARUSDT(NamedTuple):
    """
        name: BARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BARUSDT"

    def __str__(self):
        return "BARUSDT"

    def __call__(self):
        return "BARUSDT"


BARUSDT = BARUSDT()
"""
    name: BARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATBNB(NamedTuple):
    """
        name: BATBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATBNB"

    def __str__(self):
        return "BATBNB"

    def __call__(self):
        return "BATBNB"


BATBNB = BATBNB()
"""
    name: BATBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATBTC(NamedTuple):
    """
        name: BATBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BATBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATBTC"

    def __str__(self):
        return "BATBTC"

    def __call__(self):
        return "BATBTC"


BATBTC = BATBTC()
"""
    name: BATBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BATBUSD(NamedTuple):
    """
        name: BATBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BATBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATBUSD"

    def __str__(self):
        return "BATBUSD"

    def __call__(self):
        return "BATBUSD"


BATBUSD = BATBUSD()
"""
    name: BATBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BATETH(NamedTuple):
    """
        name: BATETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATETH"

    def __str__(self):
        return "BATETH"

    def __call__(self):
        return "BATETH"


BATETH = BATETH()
"""
    name: BATETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATPAX(NamedTuple):
    """
        name: BATPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATPAX"

    def __str__(self):
        return "BATPAX"

    def __call__(self):
        return "BATPAX"


BATPAX = BATPAX()
"""
    name: BATPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATTUSD(NamedTuple):
    """
        name: BATTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATTUSD"

    def __str__(self):
        return "BATTUSD"

    def __call__(self):
        return "BATTUSD"


BATTUSD = BATTUSD()
"""
    name: BATTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATUSDC(NamedTuple):
    """
        name: BATUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BATUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATUSDC"

    def __str__(self):
        return "BATUSDC"

    def __call__(self):
        return "BATUSDC"


BATUSDC = BATUSDC()
"""
    name: BATUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BATUSDT(NamedTuple):
    """
        name: BATUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BATUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BATUSDT"

    def __str__(self):
        return "BATUSDT"

    def __call__(self):
        return "BATUSDT"


BATUSDT = BATUSDT()
"""
    name: BATUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BCCBNB(NamedTuple):
    """
        name: BCCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCCBNB"

    def __str__(self):
        return "BCCBNB"

    def __call__(self):
        return "BCCBNB"


BCCBNB = BCCBNB()
"""
    name: BCCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCCBTC(NamedTuple):
    """
        name: BCCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCCBTC"

    def __str__(self):
        return "BCCBTC"

    def __call__(self):
        return "BCCBTC"


BCCBTC = BCCBTC()
"""
    name: BCCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCCETH(NamedTuple):
    """
        name: BCCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCCETH"

    def __str__(self):
        return "BCCETH"

    def __call__(self):
        return "BCCETH"


BCCETH = BCCETH()
"""
    name: BCCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCCUSDT(NamedTuple):
    """
        name: BCCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCCUSDT"

    def __str__(self):
        return "BCCUSDT"

    def __call__(self):
        return "BCCUSDT"


BCCUSDT = BCCUSDT()
"""
    name: BCCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCDBTC(NamedTuple):
    """
        name: BCDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCDBTC"

    def __str__(self):
        return "BCDBTC"

    def __call__(self):
        return "BCDBTC"


BCDBTC = BCDBTC()
"""
    name: BCDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCDETH(NamedTuple):
    """
        name: BCDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCDETH"

    def __str__(self):
        return "BCDETH"

    def __call__(self):
        return "BCDETH"


BCDETH = BCDETH()
"""
    name: BCDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCBTC(NamedTuple):
    """
        name: BCHABCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCBTC"

    def __str__(self):
        return "BCHABCBTC"

    def __call__(self):
        return "BCHABCBTC"


BCHABCBTC = BCHABCBTC()
"""
    name: BCHABCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCBUSD(NamedTuple):
    """
        name: BCHABCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCBUSD"

    def __str__(self):
        return "BCHABCBUSD"

    def __call__(self):
        return "BCHABCBUSD"


BCHABCBUSD = BCHABCBUSD()
"""
    name: BCHABCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCPAX(NamedTuple):
    """
        name: BCHABCPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCPAX"

    def __str__(self):
        return "BCHABCPAX"

    def __call__(self):
        return "BCHABCPAX"


BCHABCPAX = BCHABCPAX()
"""
    name: BCHABCPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCTUSD(NamedTuple):
    """
        name: BCHABCTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCTUSD"

    def __str__(self):
        return "BCHABCTUSD"

    def __call__(self):
        return "BCHABCTUSD"


BCHABCTUSD = BCHABCTUSD()
"""
    name: BCHABCTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCUSDC(NamedTuple):
    """
        name: BCHABCUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCUSDC"

    def __str__(self):
        return "BCHABCUSDC"

    def __call__(self):
        return "BCHABCUSDC"


BCHABCUSDC = BCHABCUSDC()
"""
    name: BCHABCUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABCUSDT(NamedTuple):
    """
        name: BCHABCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABCUSDT"

    def __str__(self):
        return "BCHABCUSDT"

    def __call__(self):
        return "BCHABCUSDT"


BCHABCUSDT = BCHABCUSDT()
"""
    name: BCHABCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHABUSD(NamedTuple):
    """
        name: BCHABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHABUSD"

    def __str__(self):
        return "BCHABUSD"

    def __call__(self):
        return "BCHABUSD"


BCHABUSD = BCHABUSD()
"""
    name: BCHABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHBNB(NamedTuple):
    """
        name: BCHBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHBNB"

    def __str__(self):
        return "BCHBNB"

    def __call__(self):
        return "BCHBNB"


BCHBNB = BCHBNB()
"""
    name: BCHBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHBTC(NamedTuple):
    """
        name: BCHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BCHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHBTC"

    def __str__(self):
        return "BCHBTC"

    def __call__(self):
        return "BCHBTC"


BCHBTC = BCHBTC()
"""
    name: BCHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BCHBUSD(NamedTuple):
    """
        name: BCHBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BCHBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHBUSD"

    def __str__(self):
        return "BCHBUSD"

    def __call__(self):
        return "BCHBUSD"


BCHBUSD = BCHBUSD()
"""
    name: BCHBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BCHDOWNUSDT(NamedTuple):
    """
        name: BCHDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHDOWNUSDT"

    def __str__(self):
        return "BCHDOWNUSDT"

    def __call__(self):
        return "BCHDOWNUSDT"


BCHDOWNUSDT = BCHDOWNUSDT()
"""
    name: BCHDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHEUR(NamedTuple):
    """
        name: BCHEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHEUR"

    def __str__(self):
        return "BCHEUR"

    def __call__(self):
        return "BCHEUR"


BCHEUR = BCHEUR()
"""
    name: BCHEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHPAX(NamedTuple):
    """
        name: BCHPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHPAX"

    def __str__(self):
        return "BCHPAX"

    def __call__(self):
        return "BCHPAX"


BCHPAX = BCHPAX()
"""
    name: BCHPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVBTC(NamedTuple):
    """
        name: BCHSVBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVBTC"

    def __str__(self):
        return "BCHSVBTC"

    def __call__(self):
        return "BCHSVBTC"


BCHSVBTC = BCHSVBTC()
"""
    name: BCHSVBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVPAX(NamedTuple):
    """
        name: BCHSVPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVPAX"

    def __str__(self):
        return "BCHSVPAX"

    def __call__(self):
        return "BCHSVPAX"


BCHSVPAX = BCHSVPAX()
"""
    name: BCHSVPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVTUSD(NamedTuple):
    """
        name: BCHSVTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVTUSD"

    def __str__(self):
        return "BCHSVTUSD"

    def __call__(self):
        return "BCHSVTUSD"


BCHSVTUSD = BCHSVTUSD()
"""
    name: BCHSVTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVUSDC(NamedTuple):
    """
        name: BCHSVUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVUSDC"

    def __str__(self):
        return "BCHSVUSDC"

    def __call__(self):
        return "BCHSVUSDC"


BCHSVUSDC = BCHSVUSDC()
"""
    name: BCHSVUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHSVUSDT(NamedTuple):
    """
        name: BCHSVUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHSVUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSVUSDT"

    def __str__(self):
        return "BCHSVUSDT"

    def __call__(self):
        return "BCHSVUSDT"


BCHSVUSDT = BCHSVUSDT()
"""
    name: BCHSVUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHTUSD(NamedTuple):
    """
        name: BCHTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHTUSD"

    def __str__(self):
        return "BCHTUSD"

    def __call__(self):
        return "BCHTUSD"


BCHTUSD = BCHTUSD()
"""
    name: BCHTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHUPUSDT(NamedTuple):
    """
        name: BCHUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHUPUSDT"

    def __str__(self):
        return "BCHUPUSDT"

    def __call__(self):
        return "BCHUPUSDT"


BCHUPUSDT = BCHUPUSDT()
"""
    name: BCHUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHUSDC(NamedTuple):
    """
        name: BCHUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCHUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHUSDC"

    def __str__(self):
        return "BCHUSDC"

    def __call__(self):
        return "BCHUSDC"


BCHUSDC = BCHUSDC()
"""
    name: BCHUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCHUSDT(NamedTuple):
    """
        name: BCHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BCHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHUSDT"

    def __str__(self):
        return "BCHUSDT"

    def __call__(self):
        return "BCHUSDT"


BCHUSDT = BCHUSDT()
"""
    name: BCHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BCNBNB(NamedTuple):
    """
        name: BCNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCNBNB"

    def __str__(self):
        return "BCNBNB"

    def __call__(self):
        return "BCNBNB"


BCNBNB = BCNBNB()
"""
    name: BCNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCNBTC(NamedTuple):
    """
        name: BCNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCNBTC"

    def __str__(self):
        return "BCNBTC"

    def __call__(self):
        return "BCNBTC"


BCNBTC = BCNBTC()
"""
    name: BCNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCNETH(NamedTuple):
    """
        name: BCNETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCNETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCNETH"

    def __str__(self):
        return "BCNETH"

    def __call__(self):
        return "BCNETH"


BCNETH = BCNETH()
"""
    name: BCNETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTBNB(NamedTuple):
    """
        name: BCPTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTBNB"

    def __str__(self):
        return "BCPTBNB"

    def __call__(self):
        return "BCPTBNB"


BCPTBNB = BCPTBNB()
"""
    name: BCPTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTBTC(NamedTuple):
    """
        name: BCPTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTBTC"

    def __str__(self):
        return "BCPTBTC"

    def __call__(self):
        return "BCPTBTC"


BCPTBTC = BCPTBTC()
"""
    name: BCPTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTETH(NamedTuple):
    """
        name: BCPTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTETH"

    def __str__(self):
        return "BCPTETH"

    def __call__(self):
        return "BCPTETH"


BCPTETH = BCPTETH()
"""
    name: BCPTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTPAX(NamedTuple):
    """
        name: BCPTPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTPAX"

    def __str__(self):
        return "BCPTPAX"

    def __call__(self):
        return "BCPTPAX"


BCPTPAX = BCPTPAX()
"""
    name: BCPTPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTTUSD(NamedTuple):
    """
        name: BCPTTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTTUSD"

    def __str__(self):
        return "BCPTTUSD"

    def __call__(self):
        return "BCPTTUSD"


BCPTTUSD = BCPTTUSD()
"""
    name: BCPTTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BCPTUSDC(NamedTuple):
    """
        name: BCPTUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BCPTUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCPTUSDC"

    def __str__(self):
        return "BCPTUSDC"

    def __call__(self):
        return "BCPTUSDC"


BCPTUSDC = BCPTUSDC()
"""
    name: BCPTUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BDOTDOT(NamedTuple):
    """
        name: BDOTDOT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.30000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BDOTDOT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.30000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BDOTDOT"

    def __str__(self):
        return "BDOTDOT"

    def __call__(self):
        return "BDOTDOT"


BDOTDOT = BDOTDOT()
"""
    name: BDOTDOT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.30000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEAMBNB(NamedTuple):
    """
        name: BEAMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEAMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEAMBNB"

    def __str__(self):
        return "BEAMBNB"

    def __call__(self):
        return "BEAMBNB"


BEAMBNB = BEAMBNB()
"""
    name: BEAMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEAMBTC(NamedTuple):
    """
        name: BEAMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEAMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEAMBTC"

    def __str__(self):
        return "BEAMBTC"

    def __call__(self):
        return "BEAMBTC"


BEAMBTC = BEAMBTC()
"""
    name: BEAMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEAMUSDT(NamedTuple):
    """
        name: BEAMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEAMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEAMUSDT"

    def __str__(self):
        return "BEAMUSDT"

    def __call__(self):
        return "BEAMUSDT"


BEAMUSDT = BEAMUSDT()
"""
    name: BEAMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEARBUSD(NamedTuple):
    """
        name: BEARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEARBUSD"

    def __str__(self):
        return "BEARBUSD"

    def __call__(self):
        return "BEARBUSD"


BEARBUSD = BEARBUSD()
"""
    name: BEARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BEARUSDT(NamedTuple):
    """
        name: BEARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BEARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEARUSDT"

    def __str__(self):
        return "BEARUSDT"

    def __call__(self):
        return "BEARUSDT"


BEARUSDT = BEARUSDT()
"""
    name: BEARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELBNB(NamedTuple):
    """
        name: BELBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BELBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELBNB"

    def __str__(self):
        return "BELBNB"

    def __call__(self):
        return "BELBNB"


BELBNB = BELBNB()
"""
    name: BELBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELBTC(NamedTuple):
    """
        name: BELBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BELBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELBTC"

    def __str__(self):
        return "BELBTC"

    def __call__(self):
        return "BELBTC"


BELBTC = BELBTC()
"""
    name: BELBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELBUSD(NamedTuple):
    """
        name: BELBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BELBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELBUSD"

    def __str__(self):
        return "BELBUSD"

    def __call__(self):
        return "BELBUSD"


BELBUSD = BELBUSD()
"""
    name: BELBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BELETH(NamedTuple):
    """
        name: BELETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BELETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELETH"

    def __str__(self):
        return "BELETH"

    def __call__(self):
        return "BELETH"


BELETH = BELETH()
"""
    name: BELETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELTRY(NamedTuple):
    """
        name: BELTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BELTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELTRY"

    def __str__(self):
        return "BELTRY"

    def __call__(self):
        return "BELTRY"


BELTRY = BELTRY()
"""
    name: BELTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BELUSDT(NamedTuple):
    """
        name: BELUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BELUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BELUSDT"

    def __str__(self):
        return "BELUSDT"

    def __call__(self):
        return "BELUSDT"


BELUSDT = BELUSDT()
"""
    name: BELUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BETABNB(NamedTuple):
    """
        name: BETABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETABNB"

    def __str__(self):
        return "BETABNB"

    def __call__(self):
        return "BETABNB"


BETABNB = BETABNB()
"""
    name: BETABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETABTC(NamedTuple):
    """
        name: BETABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETABTC"

    def __str__(self):
        return "BETABTC"

    def __call__(self):
        return "BETABTC"


BETABTC = BETABTC()
"""
    name: BETABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETABUSD(NamedTuple):
    """
        name: BETABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETABUSD"

    def __str__(self):
        return "BETABUSD"

    def __call__(self):
        return "BETABUSD"


BETABUSD = BETABUSD()
"""
    name: BETABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETAETH(NamedTuple):
    """
        name: BETAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETAETH"

    def __str__(self):
        return "BETAETH"

    def __call__(self):
        return "BETAETH"


BETAETH = BETAETH()
"""
    name: BETAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETAUSDT(NamedTuple):
    """
        name: BETAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BETAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETAUSDT"

    def __str__(self):
        return "BETAUSDT"

    def __call__(self):
        return "BETAUSDT"


BETAUSDT = BETAUSDT()
"""
    name: BETAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BETHBUSD(NamedTuple):
    """
        name: BETHBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETHBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETHBUSD"

    def __str__(self):
        return "BETHBUSD"

    def __call__(self):
        return "BETHBUSD"


BETHBUSD = BETHBUSD()
"""
    name: BETHBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETHETH(NamedTuple):
    """
        name: BETHETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETHETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETHETH"

    def __str__(self):
        return "BETHETH"

    def __call__(self):
        return "BETHETH"


BETHETH = BETHETH()
"""
    name: BETHETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BETHUSDT(NamedTuple):
    """
        name: BETHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BETHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BETHUSDT"

    def __str__(self):
        return "BETHUSDT"

    def __call__(self):
        return "BETHUSDT"


BETHUSDT = BETHUSDT()
"""
    name: BETHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BGBPUSDC(NamedTuple):
    """
        name: BGBPUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BGBPUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BGBPUSDC"

    def __str__(self):
        return "BGBPUSDC"

    def __call__(self):
        return "BGBPUSDC"


BGBPUSDC = BGBPUSDC()
"""
    name: BGBPUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BICOBTC(NamedTuple):
    """
        name: BICOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BICOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BICOBTC"

    def __str__(self):
        return "BICOBTC"

    def __call__(self):
        return "BICOBTC"


BICOBTC = BICOBTC()
"""
    name: BICOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BICOBUSD(NamedTuple):
    """
        name: BICOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BICOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BICOBUSD"

    def __str__(self):
        return "BICOBUSD"

    def __call__(self):
        return "BICOBUSD"


BICOBUSD = BICOBUSD()
"""
    name: BICOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BICOUSDT(NamedTuple):
    """
        name: BICOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BICOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BICOUSDT"

    def __str__(self):
        return "BICOUSDT"

    def __call__(self):
        return "BICOUSDT"


BICOUSDT = BICOUSDT()
"""
    name: BICOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BIFIBNB(NamedTuple):
    """
        name: BIFIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BIFIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BIFIBNB"

    def __str__(self):
        return "BIFIBNB"

    def __call__(self):
        return "BIFIBNB"


BIFIBNB = BIFIBNB()
"""
    name: BIFIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BIFIBUSD(NamedTuple):
    """
        name: BIFIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BIFIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BIFIBUSD"

    def __str__(self):
        return "BIFIBUSD"

    def __call__(self):
        return "BIFIBUSD"


BIFIBUSD = BIFIBUSD()
"""
    name: BIFIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BIFIUSDT(NamedTuple):
    """
        name: BIFIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BIFIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BIFIUSDT"

    def __str__(self):
        return "BIFIUSDT"

    def __call__(self):
        return "BIFIUSDT"


BIFIUSDT = BIFIUSDT()
"""
    name: BIFIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BKRWBUSD(NamedTuple):
    """
        name: BKRWBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BKRWBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BKRWBUSD"

    def __str__(self):
        return "BKRWBUSD"

    def __call__(self):
        return "BKRWBUSD"


BKRWBUSD = BKRWBUSD()
"""
    name: BKRWBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BKRWUSDT(NamedTuple):
    """
        name: BKRWUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BKRWUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BKRWUSDT"

    def __str__(self):
        return "BKRWUSDT"

    def __call__(self):
        return "BKRWUSDT"


BKRWUSDT = BKRWUSDT()
"""
    name: BKRWUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BLZBNB(NamedTuple):
    """
        name: BLZBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BLZBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZBNB"

    def __str__(self):
        return "BLZBNB"

    def __call__(self):
        return "BLZBNB"


BLZBNB = BLZBNB()
"""
    name: BLZBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BLZBTC(NamedTuple):
    """
        name: BLZBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BLZBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZBTC"

    def __str__(self):
        return "BLZBTC"

    def __call__(self):
        return "BLZBTC"


BLZBTC = BLZBTC()
"""
    name: BLZBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BLZBUSD(NamedTuple):
    """
        name: BLZBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BLZBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZBUSD"

    def __str__(self):
        return "BLZBUSD"

    def __call__(self):
        return "BLZBUSD"


BLZBUSD = BLZBUSD()
"""
    name: BLZBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BLZETH(NamedTuple):
    """
        name: BLZETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BLZETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZETH"

    def __str__(self):
        return "BLZETH"

    def __call__(self):
        return "BLZETH"


BLZETH = BLZETH()
"""
    name: BLZETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BLZUSDT(NamedTuple):
    """
        name: BLZUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BLZUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZUSDT"

    def __str__(self):
        return "BLZUSDT"

    def __call__(self):
        return "BLZUSDT"


BLZUSDT = BLZUSDT()
"""
    name: BLZUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBAUD(NamedTuple):
    """
        name: BNBAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBAUD"

    def __str__(self):
        return "BNBAUD"

    def __call__(self):
        return "BNBAUD"


BNBAUD = BNBAUD()
"""
    name: BNBAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBEARBUSD(NamedTuple):
    """
        name: BNBBEARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBEARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBEARBUSD"

    def __str__(self):
        return "BNBBEARBUSD"

    def __call__(self):
        return "BNBBEARBUSD"


BNBBEARBUSD = BNBBEARBUSD()
"""
    name: BNBBEARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBEARUSDT(NamedTuple):
    """
        name: BNBBEARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBEARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBEARUSDT"

    def __str__(self):
        return "BNBBEARUSDT"

    def __call__(self):
        return "BNBBEARUSDT"


BNBBEARUSDT = BNBBEARUSDT()
"""
    name: BNBBEARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBIDR(NamedTuple):
    """
        name: BNBBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBIDR"

    def __str__(self):
        return "BNBBIDR"

    def __call__(self):
        return "BNBBIDR"


BNBBIDR = BNBBIDR()
"""
    name: BNBBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BNBBKRW(NamedTuple):
    """
        name: BNBBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBKRW"

    def __str__(self):
        return "BNBBKRW"

    def __call__(self):
        return "BNBBKRW"


BNBBKRW = BNBBKRW()
"""
    name: BNBBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBRL(NamedTuple):
    """
        name: BNBBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBRL"

    def __str__(self):
        return "BNBBRL"

    def __call__(self):
        return "BNBBRL"


BNBBRL = BNBBRL()
"""
    name: BNBBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBTC(NamedTuple):
    """
        name: BNBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBTC"

    def __str__(self):
        return "BNBBTC"

    def __call__(self):
        return "BNBBTC"


BNBBTC = BNBBTC()
"""
    name: BNBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBBULLBUSD(NamedTuple):
    """
        name: BNBBULLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBULLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBULLBUSD"

    def __str__(self):
        return "BNBBULLBUSD"

    def __call__(self):
        return "BNBBULLBUSD"


BNBBULLBUSD = BNBBULLBUSD()
"""
    name: BNBBULLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBULLUSDT(NamedTuple):
    """
        name: BNBBULLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBBULLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBULLUSDT"

    def __str__(self):
        return "BNBBULLUSDT"

    def __call__(self):
        return "BNBBULLUSDT"


BNBBULLUSDT = BNBBULLUSDT()
"""
    name: BNBBULLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBBUSD(NamedTuple):
    """
        name: BNBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBBUSD"

    def __str__(self):
        return "BNBBUSD"

    def __call__(self):
        return "BNBBUSD"


BNBBUSD = BNBBUSD()
"""
    name: BNBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBDAI(NamedTuple):
    """
        name: BNBDAI
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBDAI"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBDAI"

    def __str__(self):
        return "BNBDAI"

    def __call__(self):
        return "BNBDAI"


BNBDAI = BNBDAI()
"""
    name: BNBDAI
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBDOWNUSDT(NamedTuple):
    """
        name: BNBDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBDOWNUSDT"

    def __str__(self):
        return "BNBDOWNUSDT"

    def __call__(self):
        return "BNBDOWNUSDT"


BNBDOWNUSDT = BNBDOWNUSDT()
"""
    name: BNBDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBETH(NamedTuple):
    """
        name: BNBETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBETH"

    def __str__(self):
        return "BNBETH"

    def __call__(self):
        return "BNBETH"


BNBETH = BNBETH()
"""
    name: BNBETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBEUR(NamedTuple):
    """
        name: BNBEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBEUR"

    def __str__(self):
        return "BNBEUR"

    def __call__(self):
        return "BNBEUR"


BNBEUR = BNBEUR()
"""
    name: BNBEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBGBP(NamedTuple):
    """
        name: BNBGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBGBP"

    def __str__(self):
        return "BNBGBP"

    def __call__(self):
        return "BNBGBP"


BNBGBP = BNBGBP()
"""
    name: BNBGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBIDRT(NamedTuple):
    """
        name: BNBIDRT
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BNBIDRT"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBIDRT"

    def __str__(self):
        return "BNBIDRT"

    def __call__(self):
        return "BNBIDRT"


BNBIDRT = BNBIDRT()
"""
    name: BNBIDRT
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BNBNGN(NamedTuple):
    """
        name: BNBNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBNGN"

    def __str__(self):
        return "BNBNGN"

    def __call__(self):
        return "BNBNGN"


BNBNGN = BNBNGN()
"""
    name: BNBNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBPAX(NamedTuple):
    """
        name: BNBPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBPAX"

    def __str__(self):
        return "BNBPAX"

    def __call__(self):
        return "BNBPAX"


BNBPAX = BNBPAX()
"""
    name: BNBPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBRUB(NamedTuple):
    """
        name: BNBRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBRUB"

    def __str__(self):
        return "BNBRUB"

    def __call__(self):
        return "BNBRUB"


BNBRUB = BNBRUB()
"""
    name: BNBRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBTRY(NamedTuple):
    """
        name: BNBTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBTRY"

    def __str__(self):
        return "BNBTRY"

    def __call__(self):
        return "BNBTRY"


BNBTRY = BNBTRY()
"""
    name: BNBTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBTUSD(NamedTuple):
    """
        name: BNBTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBTUSD"

    def __str__(self):
        return "BNBTUSD"

    def __call__(self):
        return "BNBTUSD"


BNBTUSD = BNBTUSD()
"""
    name: BNBTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBUAH(NamedTuple):
    """
        name: BNBUAH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUAH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUAH"

    def __str__(self):
        return "BNBUAH"

    def __call__(self):
        return "BNBUAH"


BNBUAH = BNBUAH()
"""
    name: BNBUAH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUPUSDT(NamedTuple):
    """
        name: BNBUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUPUSDT"

    def __str__(self):
        return "BNBUPUSDT"

    def __call__(self):
        return "BNBUPUSDT"


BNBUPUSDT = BNBUPUSDT()
"""
    name: BNBUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUSDC(NamedTuple):
    """
        name: BNBUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUSDC"

    def __str__(self):
        return "BNBUSDC"

    def __call__(self):
        return "BNBUSDC"


BNBUSDC = BNBUSDC()
"""
    name: BNBUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUSDP(NamedTuple):
    """
        name: BNBUSDP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUSDP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUSDP"

    def __str__(self):
        return "BNBUSDP"

    def __call__(self):
        return "BNBUSDP"


BNBUSDP = BNBUSDP()
"""
    name: BNBUSDP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUSDS(NamedTuple):
    """
        name: BNBUSDS
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUSDS"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUSDS"

    def __str__(self):
        return "BNBUSDS"

    def __call__(self):
        return "BNBUSDS"


BNBUSDS = BNBUSDS()
"""
    name: BNBUSDS
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBUSDT(NamedTuple):
    """
        name: BNBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUSDT"

    def __str__(self):
        return "BNBUSDT"

    def __call__(self):
        return "BNBUSDT"


BNBUSDT = BNBUSDT()
"""
    name: BNBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNBUST(NamedTuple):
    """
        name: BNBUST
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBUST"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBUST"

    def __str__(self):
        return "BNBUST"

    def __call__(self):
        return "BNBUST"


BNBUST = BNBUST()
"""
    name: BNBUST
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNBZAR(NamedTuple):
    """
        name: BNBZAR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNBZAR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNBZAR"

    def __str__(self):
        return "BNBZAR"

    def __call__(self):
        return "BNBZAR"


BNBZAR = BNBZAR()
"""
    name: BNBZAR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNTBTC(NamedTuple):
    """
        name: BNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNTBTC"

    def __str__(self):
        return "BNTBTC"

    def __call__(self):
        return "BNTBTC"


BNTBTC = BNTBTC()
"""
    name: BNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNTBUSD(NamedTuple):
    """
        name: BNTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNTBUSD"

    def __str__(self):
        return "BNTBUSD"

    def __call__(self):
        return "BNTBUSD"


BNTBUSD = BNTBUSD()
"""
    name: BNTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNTETH(NamedTuple):
    """
        name: BNTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNTETH"

    def __str__(self):
        return "BNTETH"

    def __call__(self):
        return "BNTETH"


BNTETH = BNTETH()
"""
    name: BNTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNTUSDT(NamedTuple):
    """
        name: BNTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNTUSDT"

    def __str__(self):
        return "BNTUSDT"

    def __call__(self):
        return "BNTUSDT"


BNTUSDT = BNTUSDT()
"""
    name: BNTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BNXBNB(NamedTuple):
    """
        name: BNXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNXBNB"

    def __str__(self):
        return "BNXBNB"

    def __call__(self):
        return "BNXBNB"


BNXBNB = BNXBNB()
"""
    name: BNXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNXBTC(NamedTuple):
    """
        name: BNXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNXBTC"

    def __str__(self):
        return "BNXBTC"

    def __call__(self):
        return "BNXBTC"


BNXBTC = BNXBTC()
"""
    name: BNXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNXBUSD(NamedTuple):
    """
        name: BNXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BNXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNXBUSD"

    def __str__(self):
        return "BNXBUSD"

    def __call__(self):
        return "BNXBUSD"


BNXBUSD = BNXBUSD()
"""
    name: BNXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BNXUSDT(NamedTuple):
    """
        name: BNXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BNXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNXUSDT"

    def __str__(self):
        return "BNXUSDT"

    def __call__(self):
        return "BNXUSDT"


BNXUSDT = BNXUSDT()
"""
    name: BNXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BONDBNB(NamedTuple):
    """
        name: BONDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BONDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDBNB"

    def __str__(self):
        return "BONDBNB"

    def __call__(self):
        return "BONDBNB"


BONDBNB = BONDBNB()
"""
    name: BONDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BONDBTC(NamedTuple):
    """
        name: BONDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BONDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDBTC"

    def __str__(self):
        return "BONDBTC"

    def __call__(self):
        return "BONDBTC"


BONDBTC = BONDBTC()
"""
    name: BONDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BONDBUSD(NamedTuple):
    """
        name: BONDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BONDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDBUSD"

    def __str__(self):
        return "BONDBUSD"

    def __call__(self):
        return "BONDBUSD"


BONDBUSD = BONDBUSD()
"""
    name: BONDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BONDETH(NamedTuple):
    """
        name: BONDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BONDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDETH"

    def __str__(self):
        return "BONDETH"

    def __call__(self):
        return "BONDETH"


BONDETH = BONDETH()
"""
    name: BONDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BONDUSDT(NamedTuple):
    """
        name: BONDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BONDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDUSDT"

    def __str__(self):
        return "BONDUSDT"

    def __call__(self):
        return "BONDUSDT"


BONDUSDT = BONDUSDT()
"""
    name: BONDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BOTBTC(NamedTuple):
    """
        name: BOTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BOTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOTBTC"

    def __str__(self):
        return "BOTBTC"

    def __call__(self):
        return "BOTBTC"


BOTBTC = BOTBTC()
"""
    name: BOTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BOTBUSD(NamedTuple):
    """
        name: BOTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BOTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOTBUSD"

    def __str__(self):
        return "BOTBUSD"

    def __call__(self):
        return "BOTBUSD"


BOTBUSD = BOTBUSD()
"""
    name: BOTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BQXBTC(NamedTuple):
    """
        name: BQXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BQXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BQXBTC"

    def __str__(self):
        return "BQXBTC"

    def __call__(self):
        return "BQXBTC"


BQXBTC = BQXBTC()
"""
    name: BQXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BQXETH(NamedTuple):
    """
        name: BQXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BQXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BQXETH"

    def __str__(self):
        return "BQXETH"

    def __call__(self):
        return "BQXETH"


BQXETH = BQXETH()
"""
    name: BQXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BRDBNB(NamedTuple):
    """
        name: BRDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BRDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRDBNB"

    def __str__(self):
        return "BRDBNB"

    def __call__(self):
        return "BRDBNB"


BRDBNB = BRDBNB()
"""
    name: BRDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BRDBTC(NamedTuple):
    """
        name: BRDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BRDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRDBTC"

    def __str__(self):
        return "BRDBTC"

    def __call__(self):
        return "BRDBTC"


BRDBTC = BRDBTC()
"""
    name: BRDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BRDETH(NamedTuple):
    """
        name: BRDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BRDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRDETH"

    def __str__(self):
        return "BRDETH"

    def __call__(self):
        return "BRDETH"


BRDETH = BRDETH()
"""
    name: BRDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BSWBNB(NamedTuple):
    """
        name: BSWBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BSWBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWBNB"

    def __str__(self):
        return "BSWBNB"

    def __call__(self):
        return "BSWBNB"


BSWBNB = BSWBNB()
"""
    name: BSWBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BSWBUSD(NamedTuple):
    """
        name: BSWBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BSWBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWBUSD"

    def __str__(self):
        return "BSWBUSD"

    def __call__(self):
        return "BSWBUSD"


BSWBUSD = BSWBUSD()
"""
    name: BSWBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BSWETH(NamedTuple):
    """
        name: BSWETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BSWETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWETH"

    def __str__(self):
        return "BSWETH"

    def __call__(self):
        return "BSWETH"


BSWETH = BSWETH()
"""
    name: BSWETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BSWTRY(NamedTuple):
    """
        name: BSWTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BSWTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWTRY"

    def __str__(self):
        return "BSWTRY"

    def __call__(self):
        return "BSWTRY"


BSWTRY = BSWTRY()
"""
    name: BSWTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BSWUSDT(NamedTuple):
    """
        name: BSWUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BSWUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSWUSDT"

    def __str__(self):
        return "BSWUSDT"

    def __call__(self):
        return "BSWUSDT"


BSWUSDT = BSWUSDT()
"""
    name: BSWUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCAUD(NamedTuple):
    """
        name: BTCAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCAUD"

    def __str__(self):
        return "BTCAUD"

    def __call__(self):
        return "BTCAUD"


BTCAUD = BTCAUD()
"""
    name: BTCAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCBBTC(NamedTuple):
    """
        name: BTCBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBBTC"

    def __str__(self):
        return "BTCBBTC"

    def __call__(self):
        return "BTCBBTC"


BTCBBTC = BTCBBTC()
"""
    name: BTCBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCBIDR(NamedTuple):
    """
        name: BTCBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BTCBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBIDR"

    def __str__(self):
        return "BTCBIDR"

    def __call__(self):
        return "BTCBIDR"


BTCBIDR = BTCBIDR()
"""
    name: BTCBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BTCBKRW(NamedTuple):
    """
        name: BTCBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBKRW"

    def __str__(self):
        return "BTCBKRW"

    def __call__(self):
        return "BTCBKRW"


BTCBKRW = BTCBKRW()
"""
    name: BTCBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCBRL(NamedTuple):
    """
        name: BTCBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBRL"

    def __str__(self):
        return "BTCBRL"

    def __call__(self):
        return "BTCBRL"


BTCBRL = BTCBRL()
"""
    name: BTCBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCBUSD(NamedTuple):
    """
        name: BTCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCBUSD"

    def __str__(self):
        return "BTCBUSD"

    def __call__(self):
        return "BTCBUSD"


BTCBUSD = BTCBUSD()
"""
    name: BTCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCDAI(NamedTuple):
    """
        name: BTCDAI
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCDAI"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCDAI"

    def __str__(self):
        return "BTCDAI"

    def __call__(self):
        return "BTCDAI"


BTCDAI = BTCDAI()
"""
    name: BTCDAI
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCDOWNUSDT(NamedTuple):
    """
        name: BTCDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCDOWNUSDT"

    def __str__(self):
        return "BTCDOWNUSDT"

    def __call__(self):
        return "BTCDOWNUSDT"


BTCDOWNUSDT = BTCDOWNUSDT()
"""
    name: BTCDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCEUR(NamedTuple):
    """
        name: BTCEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCEUR"

    def __str__(self):
        return "BTCEUR"

    def __call__(self):
        return "BTCEUR"


BTCEUR = BTCEUR()
"""
    name: BTCEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCGBP(NamedTuple):
    """
        name: BTCGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCGBP"

    def __str__(self):
        return "BTCGBP"

    def __call__(self):
        return "BTCGBP"


BTCGBP = BTCGBP()
"""
    name: BTCGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCIDRT(NamedTuple):
    """
        name: BTCIDRT
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BTCIDRT"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCIDRT"

    def __str__(self):
        return "BTCIDRT"

    def __call__(self):
        return "BTCIDRT"


BTCIDRT = BTCIDRT()
"""
    name: BTCIDRT
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BTCNGN(NamedTuple):
    """
        name: BTCNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCNGN"

    def __str__(self):
        return "BTCNGN"

    def __call__(self):
        return "BTCNGN"


BTCNGN = BTCNGN()
"""
    name: BTCNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCPAX(NamedTuple):
    """
        name: BTCPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCPAX"

    def __str__(self):
        return "BTCPAX"

    def __call__(self):
        return "BTCPAX"


BTCPAX = BTCPAX()
"""
    name: BTCPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCPLN(NamedTuple):
    """
        name: BTCPLN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 50.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCPLN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 50.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCPLN"

    def __str__(self):
        return "BTCPLN"

    def __call__(self):
        return "BTCPLN"


BTCPLN = BTCPLN()
"""
    name: BTCPLN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 50.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCRON(NamedTuple):
    """
        name: BTCRON
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 40.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCRON"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 40.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCRON"

    def __str__(self):
        return "BTCRON"

    def __call__(self):
        return "BTCRON"


BTCRON = BTCRON()
"""
    name: BTCRON
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 40.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCRUB(NamedTuple):
    """
        name: BTCRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCRUB"

    def __str__(self):
        return "BTCRUB"

    def __call__(self):
        return "BTCRUB"


BTCRUB = BTCRUB()
"""
    name: BTCRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCSTBTC(NamedTuple):
    """
        name: BTCSTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCSTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCSTBTC"

    def __str__(self):
        return "BTCSTBTC"

    def __call__(self):
        return "BTCSTBTC"


BTCSTBTC = BTCSTBTC()
"""
    name: BTCSTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCSTBUSD(NamedTuple):
    """
        name: BTCSTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCSTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCSTBUSD"

    def __str__(self):
        return "BTCSTBUSD"

    def __call__(self):
        return "BTCSTBUSD"


BTCSTBUSD = BTCSTBUSD()
"""
    name: BTCSTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCSTUSDT(NamedTuple):
    """
        name: BTCSTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCSTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCSTUSDT"

    def __str__(self):
        return "BTCSTUSDT"

    def __call__(self):
        return "BTCSTUSDT"


BTCSTUSDT = BTCSTUSDT()
"""
    name: BTCSTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCTRY(NamedTuple):
    """
        name: BTCTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCTRY"

    def __str__(self):
        return "BTCTRY"

    def __call__(self):
        return "BTCTRY"


BTCTRY = BTCTRY()
"""
    name: BTCTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCTUSD(NamedTuple):
    """
        name: BTCTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTCTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCTUSD"

    def __str__(self):
        return "BTCTUSD"

    def __call__(self):
        return "BTCTUSD"


BTCTUSD = BTCTUSD()
"""
    name: BTCTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCUAH(NamedTuple):
    """
        name: BTCUAH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUAH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUAH"

    def __str__(self):
        return "BTCUAH"

    def __call__(self):
        return "BTCUAH"


BTCUAH = BTCUAH()
"""
    name: BTCUAH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCUPUSDT(NamedTuple):
    """
        name: BTCUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUPUSDT"

    def __str__(self):
        return "BTCUPUSDT"

    def __call__(self):
        return "BTCUPUSDT"


BTCUPUSDT = BTCUPUSDT()
"""
    name: BTCUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCUSDC(NamedTuple):
    """
        name: BTCUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTCUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUSDC"

    def __str__(self):
        return "BTCUSDC"

    def __call__(self):
        return "BTCUSDC"


BTCUSDC = BTCUSDC()
"""
    name: BTCUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCUSDP(NamedTuple):
    """
        name: BTCUSDP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUSDP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUSDP"

    def __str__(self):
        return "BTCUSDP"

    def __call__(self):
        return "BTCUSDP"


BTCUSDP = BTCUSDP()
"""
    name: BTCUSDP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCUSDS(NamedTuple):
    """
        name: BTCUSDS
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUSDS"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUSDS"

    def __str__(self):
        return "BTCUSDS"

    def __call__(self):
        return "BTCUSDS"


BTCUSDS = BTCUSDS()
"""
    name: BTCUSDS
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCUSDT(NamedTuple):
    """
        name: BTCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUSDT"

    def __str__(self):
        return "BTCUSDT"

    def __call__(self):
        return "BTCUSDT"


BTCUSDT = BTCUSDT()
"""
    name: BTCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTCUST(NamedTuple):
    """
        name: BTCUST
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCUST"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUST"

    def __str__(self):
        return "BTCUST"

    def __call__(self):
        return "BTCUST"


BTCUST = BTCUST()
"""
    name: BTCUST
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCVAI(NamedTuple):
    """
        name: BTCVAI
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCVAI"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCVAI"

    def __str__(self):
        return "BTCVAI"

    def __call__(self):
        return "BTCVAI"


BTCVAI = BTCVAI()
"""
    name: BTCVAI
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTCZAR(NamedTuple):
    """
        name: BTCZAR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 200.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTCZAR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 200.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCZAR"

    def __str__(self):
        return "BTCZAR"

    def __call__(self):
        return "BTCZAR"


BTCZAR = BTCZAR()
"""
    name: BTCZAR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 200.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTGBTC(NamedTuple):
    """
        name: BTGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTGBTC"

    def __str__(self):
        return "BTGBTC"

    def __call__(self):
        return "BTGBTC"


BTGBTC = BTGBTC()
"""
    name: BTGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTGBUSD(NamedTuple):
    """
        name: BTGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTGBUSD"

    def __str__(self):
        return "BTGBUSD"

    def __call__(self):
        return "BTGBUSD"


BTGBUSD = BTGBUSD()
"""
    name: BTGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTGETH(NamedTuple):
    """
        name: BTGETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTGETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTGETH"

    def __str__(self):
        return "BTGETH"

    def __call__(self):
        return "BTGETH"


BTGETH = BTGETH()
"""
    name: BTGETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTGUSDT(NamedTuple):
    """
        name: BTGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTGUSDT"

    def __str__(self):
        return "BTGUSDT"

    def __call__(self):
        return "BTGUSDT"


BTGUSDT = BTGUSDT()
"""
    name: BTGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTSBNB(NamedTuple):
    """
        name: BTSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSBNB"

    def __str__(self):
        return "BTSBNB"

    def __call__(self):
        return "BTSBNB"


BTSBNB = BTSBNB()
"""
    name: BTSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTSBTC(NamedTuple):
    """
        name: BTSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSBTC"

    def __str__(self):
        return "BTSBTC"

    def __call__(self):
        return "BTSBTC"


BTSBTC = BTSBTC()
"""
    name: BTSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTSBUSD(NamedTuple):
    """
        name: BTSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSBUSD"

    def __str__(self):
        return "BTSBUSD"

    def __call__(self):
        return "BTSBUSD"


BTSBUSD = BTSBUSD()
"""
    name: BTSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTSETH(NamedTuple):
    """
        name: BTSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSETH"

    def __str__(self):
        return "BTSETH"

    def __call__(self):
        return "BTSETH"


BTSETH = BTSETH()
"""
    name: BTSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTSUSDT(NamedTuple):
    """
        name: BTSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BTSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTSUSDT"

    def __str__(self):
        return "BTSUSDT"

    def __call__(self):
        return "BTSUSDT"


BTSUSDT = BTSUSDT()
"""
    name: BTSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BTTBNB(NamedTuple):
    """
        name: BTTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTBNB"

    def __str__(self):
        return "BTTBNB"

    def __call__(self):
        return "BTTBNB"


BTTBNB = BTTBNB()
"""
    name: BTTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTBRL(NamedTuple):
    """
        name: BTTBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTBRL"

    def __str__(self):
        return "BTTBRL"

    def __call__(self):
        return "BTTBRL"


BTTBRL = BTTBRL()
"""
    name: BTTBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTBTC(NamedTuple):
    """
        name: BTTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTBTC"

    def __str__(self):
        return "BTTBTC"

    def __call__(self):
        return "BTTBTC"


BTTBTC = BTTBTC()
"""
    name: BTTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTBUSD(NamedTuple):
    """
        name: BTTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTBUSD"

    def __str__(self):
        return "BTTBUSD"

    def __call__(self):
        return "BTTBUSD"


BTTBUSD = BTTBUSD()
"""
    name: BTTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTCBUSD(NamedTuple):
    """
        name: BTTCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTCBUSD"

    def __str__(self):
        return "BTTCBUSD"

    def __call__(self):
        return "BTTCBUSD"


BTTCBUSD = BTTCBUSD()
"""
    name: BTTCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTCTRY(NamedTuple):
    """
        name: BTTCTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTCTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTCTRY"

    def __str__(self):
        return "BTTCTRY"

    def __call__(self):
        return "BTTCTRY"


BTTCTRY = BTTCTRY()
"""
    name: BTTCTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTCUSDC(NamedTuple):
    """
        name: BTTCUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTCUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTCUSDC"

    def __str__(self):
        return "BTTCUSDC"

    def __call__(self):
        return "BTTCUSDC"


BTTCUSDC = BTTCUSDC()
"""
    name: BTTCUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTCUSDT(NamedTuple):
    """
        name: BTTCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTCUSDT"

    def __str__(self):
        return "BTTCUSDT"

    def __call__(self):
        return "BTTCUSDT"


BTTCUSDT = BTTCUSDT()
"""
    name: BTTCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTEUR(NamedTuple):
    """
        name: BTTEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTEUR"

    def __str__(self):
        return "BTTEUR"

    def __call__(self):
        return "BTTEUR"


BTTEUR = BTTEUR()
"""
    name: BTTEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTPAX(NamedTuple):
    """
        name: BTTPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTPAX"

    def __str__(self):
        return "BTTPAX"

    def __call__(self):
        return "BTTPAX"


BTTPAX = BTTPAX()
"""
    name: BTTPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTTRX(NamedTuple):
    """
        name: BTTTRX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTTRX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTTRX"

    def __str__(self):
        return "BTTTRX"

    def __call__(self):
        return "BTTTRX"


BTTTRX = BTTTRX()
"""
    name: BTTTRX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTTRY(NamedTuple):
    """
        name: BTTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTTRY"

    def __str__(self):
        return "BTTTRY"

    def __call__(self):
        return "BTTTRY"


BTTTRY = BTTTRY()
"""
    name: BTTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTTUSD(NamedTuple):
    """
        name: BTTTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTTUSD"

    def __str__(self):
        return "BTTTUSD"

    def __call__(self):
        return "BTTTUSD"


BTTTUSD = BTTTUSD()
"""
    name: BTTTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTUSDC(NamedTuple):
    """
        name: BTTUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTUSDC"

    def __str__(self):
        return "BTTUSDC"

    def __call__(self):
        return "BTTUSDC"


BTTUSDC = BTTUSDC()
"""
    name: BTTUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BTTUSDT(NamedTuple):
    """
        name: BTTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BTTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTTUSDT"

    def __str__(self):
        return "BTTUSDT"

    def __call__(self):
        return "BTTUSDT"


BTTUSDT = BTTUSDT()
"""
    name: BTTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BULLBUSD(NamedTuple):
    """
        name: BULLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BULLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BULLBUSD"

    def __str__(self):
        return "BULLBUSD"

    def __call__(self):
        return "BULLBUSD"


BULLBUSD = BULLBUSD()
"""
    name: BULLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BULLUSDT(NamedTuple):
    """
        name: BULLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BULLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BULLUSDT"

    def __str__(self):
        return "BULLUSDT"

    def __call__(self):
        return "BULLUSDT"


BULLUSDT = BULLUSDT()
"""
    name: BULLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BURGERBNB(NamedTuple):
    """
        name: BURGERBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BURGERBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGERBNB"

    def __str__(self):
        return "BURGERBNB"

    def __call__(self):
        return "BURGERBNB"


BURGERBNB = BURGERBNB()
"""
    name: BURGERBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BURGERBUSD(NamedTuple):
    """
        name: BURGERBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BURGERBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGERBUSD"

    def __str__(self):
        return "BURGERBUSD"

    def __call__(self):
        return "BURGERBUSD"


BURGERBUSD = BURGERBUSD()
"""
    name: BURGERBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BURGERETH(NamedTuple):
    """
        name: BURGERETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BURGERETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGERETH"

    def __str__(self):
        return "BURGERETH"

    def __call__(self):
        return "BURGERETH"


BURGERETH = BURGERETH()
"""
    name: BURGERETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BURGERUSDT(NamedTuple):
    """
        name: BURGERUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BURGERUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGERUSDT"

    def __str__(self):
        return "BURGERUSDT"

    def __call__(self):
        return "BURGERUSDT"


BURGERUSDT = BURGERUSDT()
"""
    name: BURGERUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BUSDBIDR(NamedTuple):
    """
        name: BUSDBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDBIDR"

    def __str__(self):
        return "BUSDBIDR"

    def __call__(self):
        return "BUSDBIDR"


BUSDBIDR = BUSDBIDR()
"""
    name: BUSDBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BUSDBKRW(NamedTuple):
    """
        name: BUSDBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDBKRW"

    def __str__(self):
        return "BUSDBKRW"

    def __call__(self):
        return "BUSDBKRW"


BUSDBKRW = BUSDBKRW()
"""
    name: BUSDBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDBRL(NamedTuple):
    """
        name: BUSDBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDBRL"

    def __str__(self):
        return "BUSDBRL"

    def __call__(self):
        return "BUSDBRL"


BUSDBRL = BUSDBRL()
"""
    name: BUSDBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDBVND(NamedTuple):
    """
        name: BUSDBVND
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 30000.00
        max_order_size: 9000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDBVND"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 30000.00
    max_order_size: float = 9000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDBVND"

    def __str__(self):
        return "BUSDBVND"

    def __call__(self):
        return "BUSDBVND"


BUSDBVND = BUSDBVND()
"""
    name: BUSDBVND
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 30000.00
    max_order_size: 9000000.00
    has_margin: False
    exchange: binance
"""


class BUSDDAI(NamedTuple):
    """
        name: BUSDDAI
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDDAI"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDDAI"

    def __str__(self):
        return "BUSDDAI"

    def __call__(self):
        return "BUSDDAI"


BUSDDAI = BUSDDAI()
"""
    name: BUSDDAI
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDIDRT(NamedTuple):
    """
        name: BUSDIDRT
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDIDRT"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDIDRT"

    def __str__(self):
        return "BUSDIDRT"

    def __call__(self):
        return "BUSDIDRT"


BUSDIDRT = BUSDIDRT()
"""
    name: BUSDIDRT
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class BUSDNGN(NamedTuple):
    """
        name: BUSDNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDNGN"

    def __str__(self):
        return "BUSDNGN"

    def __call__(self):
        return "BUSDNGN"


BUSDNGN = BUSDNGN()
"""
    name: BUSDNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDPLN(NamedTuple):
    """
        name: BUSDPLN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 50.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDPLN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 50.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDPLN"

    def __str__(self):
        return "BUSDPLN"

    def __call__(self):
        return "BUSDPLN"


BUSDPLN = BUSDPLN()
"""
    name: BUSDPLN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 50.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDRON(NamedTuple):
    """
        name: BUSDRON
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 40.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDRON"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 40.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDRON"

    def __str__(self):
        return "BUSDRON"

    def __call__(self):
        return "BUSDRON"


BUSDRON = BUSDRON()
"""
    name: BUSDRON
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 40.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDRUB(NamedTuple):
    """
        name: BUSDRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDRUB"

    def __str__(self):
        return "BUSDRUB"

    def __call__(self):
        return "BUSDRUB"


BUSDRUB = BUSDRUB()
"""
    name: BUSDRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDTRY(NamedTuple):
    """
        name: BUSDTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDTRY"

    def __str__(self):
        return "BUSDTRY"

    def __call__(self):
        return "BUSDTRY"


BUSDTRY = BUSDTRY()
"""
    name: BUSDTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDUAH(NamedTuple):
    """
        name: BUSDUAH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDUAH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDUAH"

    def __str__(self):
        return "BUSDUAH"

    def __call__(self):
        return "BUSDUAH"


BUSDUAH = BUSDUAH()
"""
    name: BUSDUAH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDUSDT(NamedTuple):
    """
        name: BUSDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "BUSDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDUSDT"

    def __str__(self):
        return "BUSDUSDT"

    def __call__(self):
        return "BUSDUSDT"


BUSDUSDT = BUSDUSDT()
"""
    name: BUSDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class BUSDVAI(NamedTuple):
    """
        name: BUSDVAI
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDVAI"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDVAI"

    def __str__(self):
        return "BUSDVAI"

    def __call__(self):
        return "BUSDVAI"


BUSDVAI = BUSDVAI()
"""
    name: BUSDVAI
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BUSDZAR(NamedTuple):
    """
        name: BUSDZAR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 200.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BUSDZAR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 200.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSDZAR"

    def __str__(self):
        return "BUSDZAR"

    def __call__(self):
        return "BUSDZAR"


BUSDZAR = BUSDZAR()
"""
    name: BUSDZAR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 200.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BZRXBNB(NamedTuple):
    """
        name: BZRXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BZRXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BZRXBNB"

    def __str__(self):
        return "BZRXBNB"

    def __call__(self):
        return "BZRXBNB"


BZRXBNB = BZRXBNB()
"""
    name: BZRXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BZRXBTC(NamedTuple):
    """
        name: BZRXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BZRXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BZRXBTC"

    def __str__(self):
        return "BZRXBTC"

    def __call__(self):
        return "BZRXBTC"


BZRXBTC = BZRXBTC()
"""
    name: BZRXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BZRXBUSD(NamedTuple):
    """
        name: BZRXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BZRXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BZRXBUSD"

    def __str__(self):
        return "BZRXBUSD"

    def __call__(self):
        return "BZRXBUSD"


BZRXBUSD = BZRXBUSD()
"""
    name: BZRXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class BZRXUSDT(NamedTuple):
    """
        name: BZRXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "BZRXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BZRXUSDT"

    def __str__(self):
        return "BZRXUSDT"

    def __call__(self):
        return "BZRXUSDT"


BZRXUSDT = BZRXUSDT()
"""
    name: BZRXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class C98BNB(NamedTuple):
    """
        name: C98BNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "C98BNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98BNB"

    def __str__(self):
        return "C98BNB"

    def __call__(self):
        return "C98BNB"


C98BNB = C98BNB()
"""
    name: C98BNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class C98BRL(NamedTuple):
    """
        name: C98BRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "C98BRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98BRL"

    def __str__(self):
        return "C98BRL"

    def __call__(self):
        return "C98BRL"


C98BRL = C98BRL()
"""
    name: C98BRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class C98BTC(NamedTuple):
    """
        name: C98BTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "C98BTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98BTC"

    def __str__(self):
        return "C98BTC"

    def __call__(self):
        return "C98BTC"


C98BTC = C98BTC()
"""
    name: C98BTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class C98BUSD(NamedTuple):
    """
        name: C98BUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "C98BUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98BUSD"

    def __str__(self):
        return "C98BUSD"

    def __call__(self):
        return "C98BUSD"


C98BUSD = C98BUSD()
"""
    name: C98BUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class C98USDT(NamedTuple):
    """
        name: C98USDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "C98USDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98USDT"

    def __str__(self):
        return "C98USDT"

    def __call__(self):
        return "C98USDT"


C98USDT = C98USDT()
"""
    name: C98USDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CAKEAUD(NamedTuple):
    """
        name: CAKEAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CAKEAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEAUD"

    def __str__(self):
        return "CAKEAUD"

    def __call__(self):
        return "CAKEAUD"


CAKEAUD = CAKEAUD()
"""
    name: CAKEAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CAKEBNB(NamedTuple):
    """
        name: CAKEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CAKEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEBNB"

    def __str__(self):
        return "CAKEBNB"

    def __call__(self):
        return "CAKEBNB"


CAKEBNB = CAKEBNB()
"""
    name: CAKEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CAKEBRL(NamedTuple):
    """
        name: CAKEBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CAKEBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEBRL"

    def __str__(self):
        return "CAKEBRL"

    def __call__(self):
        return "CAKEBRL"


CAKEBRL = CAKEBRL()
"""
    name: CAKEBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CAKEBTC(NamedTuple):
    """
        name: CAKEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CAKEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEBTC"

    def __str__(self):
        return "CAKEBTC"

    def __call__(self):
        return "CAKEBTC"


CAKEBTC = CAKEBTC()
"""
    name: CAKEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CAKEBUSD(NamedTuple):
    """
        name: CAKEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CAKEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEBUSD"

    def __str__(self):
        return "CAKEBUSD"

    def __call__(self):
        return "CAKEBUSD"


CAKEBUSD = CAKEBUSD()
"""
    name: CAKEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CAKEGBP(NamedTuple):
    """
        name: CAKEGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CAKEGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEGBP"

    def __str__(self):
        return "CAKEGBP"

    def __call__(self):
        return "CAKEGBP"


CAKEGBP = CAKEGBP()
"""
    name: CAKEGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CAKEUSDT(NamedTuple):
    """
        name: CAKEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CAKEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKEUSDT"

    def __str__(self):
        return "CAKEUSDT"

    def __call__(self):
        return "CAKEUSDT"


CAKEUSDT = CAKEUSDT()
"""
    name: CAKEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CDTBTC(NamedTuple):
    """
        name: CDTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CDTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CDTBTC"

    def __str__(self):
        return "CDTBTC"

    def __call__(self):
        return "CDTBTC"


CDTBTC = CDTBTC()
"""
    name: CDTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CDTETH(NamedTuple):
    """
        name: CDTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CDTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CDTETH"

    def __str__(self):
        return "CDTETH"

    def __call__(self):
        return "CDTETH"


CDTETH = CDTETH()
"""
    name: CDTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELOBTC(NamedTuple):
    """
        name: CELOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELOBTC"

    def __str__(self):
        return "CELOBTC"

    def __call__(self):
        return "CELOBTC"


CELOBTC = CELOBTC()
"""
    name: CELOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELOBUSD(NamedTuple):
    """
        name: CELOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CELOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELOBUSD"

    def __str__(self):
        return "CELOBUSD"

    def __call__(self):
        return "CELOBUSD"


CELOBUSD = CELOBUSD()
"""
    name: CELOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CELOUSDT(NamedTuple):
    """
        name: CELOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CELOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELOUSDT"

    def __str__(self):
        return "CELOUSDT"

    def __call__(self):
        return "CELOUSDT"


CELOUSDT = CELOUSDT()
"""
    name: CELOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CELRBNB(NamedTuple):
    """
        name: CELRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRBNB"

    def __str__(self):
        return "CELRBNB"

    def __call__(self):
        return "CELRBNB"


CELRBNB = CELRBNB()
"""
    name: CELRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELRBTC(NamedTuple):
    """
        name: CELRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRBTC"

    def __str__(self):
        return "CELRBTC"

    def __call__(self):
        return "CELRBTC"


CELRBTC = CELRBTC()
"""
    name: CELRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELRBUSD(NamedTuple):
    """
        name: CELRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRBUSD"

    def __str__(self):
        return "CELRBUSD"

    def __call__(self):
        return "CELRBUSD"


CELRBUSD = CELRBUSD()
"""
    name: CELRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELRETH(NamedTuple):
    """
        name: CELRETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CELRETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRETH"

    def __str__(self):
        return "CELRETH"

    def __call__(self):
        return "CELRETH"


CELRETH = CELRETH()
"""
    name: CELRETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CELRUSDT(NamedTuple):
    """
        name: CELRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CELRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELRUSDT"

    def __str__(self):
        return "CELRUSDT"

    def __call__(self):
        return "CELRUSDT"


CELRUSDT = CELRUSDT()
"""
    name: CELRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CFXBTC(NamedTuple):
    """
        name: CFXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CFXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFXBTC"

    def __str__(self):
        return "CFXBTC"

    def __call__(self):
        return "CFXBTC"


CFXBTC = CFXBTC()
"""
    name: CFXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CFXBUSD(NamedTuple):
    """
        name: CFXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CFXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFXBUSD"

    def __str__(self):
        return "CFXBUSD"

    def __call__(self):
        return "CFXBUSD"


CFXBUSD = CFXBUSD()
"""
    name: CFXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CFXTRY(NamedTuple):
    """
        name: CFXTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CFXTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFXTRY"

    def __str__(self):
        return "CFXTRY"

    def __call__(self):
        return "CFXTRY"


CFXTRY = CFXTRY()
"""
    name: CFXTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CFXUSDT(NamedTuple):
    """
        name: CFXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CFXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFXUSDT"

    def __str__(self):
        return "CFXUSDT"

    def __call__(self):
        return "CFXUSDT"


CFXUSDT = CFXUSDT()
"""
    name: CFXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHATBTC(NamedTuple):
    """
        name: CHATBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHATBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHATBTC"

    def __str__(self):
        return "CHATBTC"

    def __call__(self):
        return "CHATBTC"


CHATBTC = CHATBTC()
"""
    name: CHATBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHATETH(NamedTuple):
    """
        name: CHATETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHATETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHATETH"

    def __str__(self):
        return "CHATETH"

    def __call__(self):
        return "CHATETH"


CHATETH = CHATETH()
"""
    name: CHATETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHESSBNB(NamedTuple):
    """
        name: CHESSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHESSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHESSBNB"

    def __str__(self):
        return "CHESSBNB"

    def __call__(self):
        return "CHESSBNB"


CHESSBNB = CHESSBNB()
"""
    name: CHESSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHESSBTC(NamedTuple):
    """
        name: CHESSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHESSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHESSBTC"

    def __str__(self):
        return "CHESSBTC"

    def __call__(self):
        return "CHESSBTC"


CHESSBTC = CHESSBTC()
"""
    name: CHESSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHESSBUSD(NamedTuple):
    """
        name: CHESSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHESSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHESSBUSD"

    def __str__(self):
        return "CHESSBUSD"

    def __call__(self):
        return "CHESSBUSD"


CHESSBUSD = CHESSBUSD()
"""
    name: CHESSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHESSUSDT(NamedTuple):
    """
        name: CHESSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHESSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHESSUSDT"

    def __str__(self):
        return "CHESSUSDT"

    def __call__(self):
        return "CHESSUSDT"


CHESSUSDT = CHESSUSDT()
"""
    name: CHESSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHRBNB(NamedTuple):
    """
        name: CHRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRBNB"

    def __str__(self):
        return "CHRBNB"

    def __call__(self):
        return "CHRBNB"


CHRBNB = CHRBNB()
"""
    name: CHRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHRBTC(NamedTuple):
    """
        name: CHRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRBTC"

    def __str__(self):
        return "CHRBTC"

    def __call__(self):
        return "CHRBTC"


CHRBTC = CHRBTC()
"""
    name: CHRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHRBUSD(NamedTuple):
    """
        name: CHRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRBUSD"

    def __str__(self):
        return "CHRBUSD"

    def __call__(self):
        return "CHRBUSD"


CHRBUSD = CHRBUSD()
"""
    name: CHRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHRETH(NamedTuple):
    """
        name: CHRETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHRETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRETH"

    def __str__(self):
        return "CHRETH"

    def __call__(self):
        return "CHRETH"


CHRETH = CHRETH()
"""
    name: CHRETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHRUSDT(NamedTuple):
    """
        name: CHRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHRUSDT"

    def __str__(self):
        return "CHRUSDT"

    def __call__(self):
        return "CHRUSDT"


CHRUSDT = CHRUSDT()
"""
    name: CHRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHZBNB(NamedTuple):
    """
        name: CHZBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZBNB"

    def __str__(self):
        return "CHZBNB"

    def __call__(self):
        return "CHZBNB"


CHZBNB = CHZBNB()
"""
    name: CHZBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZBRL(NamedTuple):
    """
        name: CHZBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZBRL"

    def __str__(self):
        return "CHZBRL"

    def __call__(self):
        return "CHZBRL"


CHZBRL = CHZBRL()
"""
    name: CHZBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZBTC(NamedTuple):
    """
        name: CHZBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHZBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZBTC"

    def __str__(self):
        return "CHZBTC"

    def __call__(self):
        return "CHZBTC"


CHZBTC = CHZBTC()
"""
    name: CHZBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CHZBUSD(NamedTuple):
    """
        name: CHZBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZBUSD"

    def __str__(self):
        return "CHZBUSD"

    def __call__(self):
        return "CHZBUSD"


CHZBUSD = CHZBUSD()
"""
    name: CHZBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZEUR(NamedTuple):
    """
        name: CHZEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZEUR"

    def __str__(self):
        return "CHZEUR"

    def __call__(self):
        return "CHZEUR"


CHZEUR = CHZEUR()
"""
    name: CHZEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZGBP(NamedTuple):
    """
        name: CHZGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZGBP"

    def __str__(self):
        return "CHZGBP"

    def __call__(self):
        return "CHZGBP"


CHZGBP = CHZGBP()
"""
    name: CHZGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZTRY(NamedTuple):
    """
        name: CHZTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CHZTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZTRY"

    def __str__(self):
        return "CHZTRY"

    def __call__(self):
        return "CHZTRY"


CHZTRY = CHZTRY()
"""
    name: CHZTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CHZUSDT(NamedTuple):
    """
        name: CHZUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CHZUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZUSDT"

    def __str__(self):
        return "CHZUSDT"

    def __call__(self):
        return "CHZUSDT"


CHZUSDT = CHZUSDT()
"""
    name: CHZUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CITYBNB(NamedTuple):
    """
        name: CITYBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CITYBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CITYBNB"

    def __str__(self):
        return "CITYBNB"

    def __call__(self):
        return "CITYBNB"


CITYBNB = CITYBNB()
"""
    name: CITYBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CITYBTC(NamedTuple):
    """
        name: CITYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CITYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CITYBTC"

    def __str__(self):
        return "CITYBTC"

    def __call__(self):
        return "CITYBTC"


CITYBTC = CITYBTC()
"""
    name: CITYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CITYBUSD(NamedTuple):
    """
        name: CITYBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CITYBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CITYBUSD"

    def __str__(self):
        return "CITYBUSD"

    def __call__(self):
        return "CITYBUSD"


CITYBUSD = CITYBUSD()
"""
    name: CITYBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CITYUSDT(NamedTuple):
    """
        name: CITYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CITYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CITYUSDT"

    def __str__(self):
        return "CITYUSDT"

    def __call__(self):
        return "CITYUSDT"


CITYUSDT = CITYUSDT()
"""
    name: CITYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CKBBTC(NamedTuple):
    """
        name: CKBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CKBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKBBTC"

    def __str__(self):
        return "CKBBTC"

    def __call__(self):
        return "CKBBTC"


CKBBTC = CKBBTC()
"""
    name: CKBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CKBBUSD(NamedTuple):
    """
        name: CKBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CKBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKBBUSD"

    def __str__(self):
        return "CKBBUSD"

    def __call__(self):
        return "CKBBUSD"


CKBBUSD = CKBBUSD()
"""
    name: CKBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CKBUSDT(NamedTuple):
    """
        name: CKBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CKBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKBUSDT"

    def __str__(self):
        return "CKBUSDT"

    def __call__(self):
        return "CKBUSDT"


CKBUSDT = CKBUSDT()
"""
    name: CKBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CLOAKBTC(NamedTuple):
    """
        name: CLOAKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CLOAKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLOAKBTC"

    def __str__(self):
        return "CLOAKBTC"

    def __call__(self):
        return "CLOAKBTC"


CLOAKBTC = CLOAKBTC()
"""
    name: CLOAKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CLOAKETH(NamedTuple):
    """
        name: CLOAKETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CLOAKETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLOAKETH"

    def __str__(self):
        return "CLOAKETH"

    def __call__(self):
        return "CLOAKETH"


CLOAKETH = CLOAKETH()
"""
    name: CLOAKETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CLVBNB(NamedTuple):
    """
        name: CLVBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CLVBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLVBNB"

    def __str__(self):
        return "CLVBNB"

    def __call__(self):
        return "CLVBNB"


CLVBNB = CLVBNB()
"""
    name: CLVBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CLVBTC(NamedTuple):
    """
        name: CLVBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CLVBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLVBTC"

    def __str__(self):
        return "CLVBTC"

    def __call__(self):
        return "CLVBTC"


CLVBTC = CLVBTC()
"""
    name: CLVBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CLVBUSD(NamedTuple):
    """
        name: CLVBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CLVBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLVBUSD"

    def __str__(self):
        return "CLVBUSD"

    def __call__(self):
        return "CLVBUSD"


CLVBUSD = CLVBUSD()
"""
    name: CLVBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CLVUSDT(NamedTuple):
    """
        name: CLVUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CLVUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLVUSDT"

    def __str__(self):
        return "CLVUSDT"

    def __call__(self):
        return "CLVUSDT"


CLVUSDT = CLVUSDT()
"""
    name: CLVUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CMTBNB(NamedTuple):
    """
        name: CMTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CMTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CMTBNB"

    def __str__(self):
        return "CMTBNB"

    def __call__(self):
        return "CMTBNB"


CMTBNB = CMTBNB()
"""
    name: CMTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CMTBTC(NamedTuple):
    """
        name: CMTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CMTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CMTBTC"

    def __str__(self):
        return "CMTBTC"

    def __call__(self):
        return "CMTBTC"


CMTBTC = CMTBTC()
"""
    name: CMTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CMTETH(NamedTuple):
    """
        name: CMTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CMTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CMTETH"

    def __str__(self):
        return "CMTETH"

    def __call__(self):
        return "CMTETH"


CMTETH = CMTETH()
"""
    name: CMTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CNDBNB(NamedTuple):
    """
        name: CNDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CNDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CNDBNB"

    def __str__(self):
        return "CNDBNB"

    def __call__(self):
        return "CNDBNB"


CNDBNB = CNDBNB()
"""
    name: CNDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CNDBTC(NamedTuple):
    """
        name: CNDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CNDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CNDBTC"

    def __str__(self):
        return "CNDBTC"

    def __call__(self):
        return "CNDBTC"


CNDBTC = CNDBTC()
"""
    name: CNDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CNDETH(NamedTuple):
    """
        name: CNDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CNDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CNDETH"

    def __str__(self):
        return "CNDETH"

    def __call__(self):
        return "CNDETH"


CNDETH = CNDETH()
"""
    name: CNDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSBNB(NamedTuple):
    """
        name: COCOSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COCOSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSBNB"

    def __str__(self):
        return "COCOSBNB"

    def __call__(self):
        return "COCOSBNB"


COCOSBNB = COCOSBNB()
"""
    name: COCOSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSBTC(NamedTuple):
    """
        name: COCOSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COCOSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSBTC"

    def __str__(self):
        return "COCOSBTC"

    def __call__(self):
        return "COCOSBTC"


COCOSBTC = COCOSBTC()
"""
    name: COCOSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSBUSD(NamedTuple):
    """
        name: COCOSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COCOSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSBUSD"

    def __str__(self):
        return "COCOSBUSD"

    def __call__(self):
        return "COCOSBUSD"


COCOSBUSD = COCOSBUSD()
"""
    name: COCOSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSTRY(NamedTuple):
    """
        name: COCOSTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COCOSTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSTRY"

    def __str__(self):
        return "COCOSTRY"

    def __call__(self):
        return "COCOSTRY"


COCOSTRY = COCOSTRY()
"""
    name: COCOSTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COCOSUSDT(NamedTuple):
    """
        name: COCOSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COCOSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOSUSDT"

    def __str__(self):
        return "COCOSUSDT"

    def __call__(self):
        return "COCOSUSDT"


COCOSUSDT = COCOSUSDT()
"""
    name: COCOSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COMPBNB(NamedTuple):
    """
        name: COMPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COMPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMPBNB"

    def __str__(self):
        return "COMPBNB"

    def __call__(self):
        return "COMPBNB"


COMPBNB = COMPBNB()
"""
    name: COMPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COMPBTC(NamedTuple):
    """
        name: COMPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COMPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMPBTC"

    def __str__(self):
        return "COMPBTC"

    def __call__(self):
        return "COMPBTC"


COMPBTC = COMPBTC()
"""
    name: COMPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COMPBUSD(NamedTuple):
    """
        name: COMPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COMPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMPBUSD"

    def __str__(self):
        return "COMPBUSD"

    def __call__(self):
        return "COMPBUSD"


COMPBUSD = COMPBUSD()
"""
    name: COMPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COMPUSDT(NamedTuple):
    """
        name: COMPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COMPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMPUSDT"

    def __str__(self):
        return "COMPUSDT"

    def __call__(self):
        return "COMPUSDT"


COMPUSDT = COMPUSDT()
"""
    name: COMPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COSBNB(NamedTuple):
    """
        name: COSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSBNB"

    def __str__(self):
        return "COSBNB"

    def __call__(self):
        return "COSBNB"


COSBNB = COSBNB()
"""
    name: COSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COSBTC(NamedTuple):
    """
        name: COSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSBTC"

    def __str__(self):
        return "COSBTC"

    def __call__(self):
        return "COSBTC"


COSBTC = COSBTC()
"""
    name: COSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COSBUSD(NamedTuple):
    """
        name: COSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSBUSD"

    def __str__(self):
        return "COSBUSD"

    def __call__(self):
        return "COSBUSD"


COSBUSD = COSBUSD()
"""
    name: COSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COSTRY(NamedTuple):
    """
        name: COSTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COSTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSTRY"

    def __str__(self):
        return "COSTRY"

    def __call__(self):
        return "COSTRY"


COSTRY = COSTRY()
"""
    name: COSTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COSUSDT(NamedTuple):
    """
        name: COSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COSUSDT"

    def __str__(self):
        return "COSUSDT"

    def __call__(self):
        return "COSUSDT"


COSUSDT = COSUSDT()
"""
    name: COSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COTIBNB(NamedTuple):
    """
        name: COTIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COTIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTIBNB"

    def __str__(self):
        return "COTIBNB"

    def __call__(self):
        return "COTIBNB"


COTIBNB = COTIBNB()
"""
    name: COTIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COTIBTC(NamedTuple):
    """
        name: COTIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COTIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTIBTC"

    def __str__(self):
        return "COTIBTC"

    def __call__(self):
        return "COTIBTC"


COTIBTC = COTIBTC()
"""
    name: COTIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COTIBUSD(NamedTuple):
    """
        name: COTIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COTIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTIBUSD"

    def __str__(self):
        return "COTIBUSD"

    def __call__(self):
        return "COTIBUSD"


COTIBUSD = COTIBUSD()
"""
    name: COTIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COTIUSDT(NamedTuple):
    """
        name: COTIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "COTIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTIUSDT"

    def __str__(self):
        return "COTIUSDT"

    def __call__(self):
        return "COTIUSDT"


COTIUSDT = COTIUSDT()
"""
    name: COTIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class COVERBUSD(NamedTuple):
    """
        name: COVERBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COVERBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COVERBUSD"

    def __str__(self):
        return "COVERBUSD"

    def __call__(self):
        return "COVERBUSD"


COVERBUSD = COVERBUSD()
"""
    name: COVERBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class COVERETH(NamedTuple):
    """
        name: COVERETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "COVERETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COVERETH"

    def __str__(self):
        return "COVERETH"

    def __call__(self):
        return "COVERETH"


COVERETH = COVERETH()
"""
    name: COVERETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CREAMBNB(NamedTuple):
    """
        name: CREAMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CREAMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREAMBNB"

    def __str__(self):
        return "CREAMBNB"

    def __call__(self):
        return "CREAMBNB"


CREAMBNB = CREAMBNB()
"""
    name: CREAMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CREAMBUSD(NamedTuple):
    """
        name: CREAMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CREAMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREAMBUSD"

    def __str__(self):
        return "CREAMBUSD"

    def __call__(self):
        return "CREAMBUSD"


CREAMBUSD = CREAMBUSD()
"""
    name: CREAMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CRVBNB(NamedTuple):
    """
        name: CRVBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CRVBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVBNB"

    def __str__(self):
        return "CRVBNB"

    def __call__(self):
        return "CRVBNB"


CRVBNB = CRVBNB()
"""
    name: CRVBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CRVBTC(NamedTuple):
    """
        name: CRVBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CRVBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVBTC"

    def __str__(self):
        return "CRVBTC"

    def __call__(self):
        return "CRVBTC"


CRVBTC = CRVBTC()
"""
    name: CRVBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CRVBUSD(NamedTuple):
    """
        name: CRVBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CRVBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVBUSD"

    def __str__(self):
        return "CRVBUSD"

    def __call__(self):
        return "CRVBUSD"


CRVBUSD = CRVBUSD()
"""
    name: CRVBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CRVETH(NamedTuple):
    """
        name: CRVETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CRVETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVETH"

    def __str__(self):
        return "CRVETH"

    def __call__(self):
        return "CRVETH"


CRVETH = CRVETH()
"""
    name: CRVETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CRVUSDT(NamedTuple):
    """
        name: CRVUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CRVUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRVUSDT"

    def __str__(self):
        return "CRVUSDT"

    def __call__(self):
        return "CRVUSDT"


CRVUSDT = CRVUSDT()
"""
    name: CRVUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTKBNB(NamedTuple):
    """
        name: CTKBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTKBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTKBNB"

    def __str__(self):
        return "CTKBNB"

    def __call__(self):
        return "CTKBNB"


CTKBNB = CTKBNB()
"""
    name: CTKBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTKBTC(NamedTuple):
    """
        name: CTKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTKBTC"

    def __str__(self):
        return "CTKBTC"

    def __call__(self):
        return "CTKBTC"


CTKBTC = CTKBTC()
"""
    name: CTKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTKBUSD(NamedTuple):
    """
        name: CTKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTKBUSD"

    def __str__(self):
        return "CTKBUSD"

    def __call__(self):
        return "CTKBUSD"


CTKBUSD = CTKBUSD()
"""
    name: CTKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTKUSDT(NamedTuple):
    """
        name: CTKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTKUSDT"

    def __str__(self):
        return "CTKUSDT"

    def __call__(self):
        return "CTKUSDT"


CTKUSDT = CTKUSDT()
"""
    name: CTKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTSIBNB(NamedTuple):
    """
        name: CTSIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTSIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSIBNB"

    def __str__(self):
        return "CTSIBNB"

    def __call__(self):
        return "CTSIBNB"


CTSIBNB = CTSIBNB()
"""
    name: CTSIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTSIBTC(NamedTuple):
    """
        name: CTSIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTSIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSIBTC"

    def __str__(self):
        return "CTSIBTC"

    def __call__(self):
        return "CTSIBTC"


CTSIBTC = CTSIBTC()
"""
    name: CTSIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTSIBUSD(NamedTuple):
    """
        name: CTSIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTSIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSIBUSD"

    def __str__(self):
        return "CTSIBUSD"

    def __call__(self):
        return "CTSIBUSD"


CTSIBUSD = CTSIBUSD()
"""
    name: CTSIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTSIUSDT(NamedTuple):
    """
        name: CTSIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTSIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSIUSDT"

    def __str__(self):
        return "CTSIUSDT"

    def __call__(self):
        return "CTSIUSDT"


CTSIUSDT = CTSIUSDT()
"""
    name: CTSIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTXCBNB(NamedTuple):
    """
        name: CTXCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CTXCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTXCBNB"

    def __str__(self):
        return "CTXCBNB"

    def __call__(self):
        return "CTXCBNB"


CTXCBNB = CTXCBNB()
"""
    name: CTXCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CTXCBTC(NamedTuple):
    """
        name: CTXCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTXCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTXCBTC"

    def __str__(self):
        return "CTXCBTC"

    def __call__(self):
        return "CTXCBTC"


CTXCBTC = CTXCBTC()
"""
    name: CTXCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTXCBUSD(NamedTuple):
    """
        name: CTXCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTXCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTXCBUSD"

    def __str__(self):
        return "CTXCBUSD"

    def __call__(self):
        return "CTXCBUSD"


CTXCBUSD = CTXCBUSD()
"""
    name: CTXCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CTXCUSDT(NamedTuple):
    """
        name: CTXCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "CTXCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTXCUSDT"

    def __str__(self):
        return "CTXCUSDT"

    def __call__(self):
        return "CTXCUSDT"


CTXCUSDT = CTXCUSDT()
"""
    name: CTXCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class CVCBNB(NamedTuple):
    """
        name: CVCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCBNB"

    def __str__(self):
        return "CVCBNB"

    def __call__(self):
        return "CVCBNB"


CVCBNB = CVCBNB()
"""
    name: CVCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVCBTC(NamedTuple):
    """
        name: CVCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCBTC"

    def __str__(self):
        return "CVCBTC"

    def __call__(self):
        return "CVCBTC"


CVCBTC = CVCBTC()
"""
    name: CVCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVCBUSD(NamedTuple):
    """
        name: CVCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCBUSD"

    def __str__(self):
        return "CVCBUSD"

    def __call__(self):
        return "CVCBUSD"


CVCBUSD = CVCBUSD()
"""
    name: CVCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVCETH(NamedTuple):
    """
        name: CVCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCETH"

    def __str__(self):
        return "CVCETH"

    def __call__(self):
        return "CVCETH"


CVCETH = CVCETH()
"""
    name: CVCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVCUSDT(NamedTuple):
    """
        name: CVCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVCUSDT"

    def __str__(self):
        return "CVCUSDT"

    def __call__(self):
        return "CVCUSDT"


CVCUSDT = CVCUSDT()
"""
    name: CVCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVPBUSD(NamedTuple):
    """
        name: CVPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVPBUSD"

    def __str__(self):
        return "CVPBUSD"

    def __call__(self):
        return "CVPBUSD"


CVPBUSD = CVPBUSD()
"""
    name: CVPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVPETH(NamedTuple):
    """
        name: CVPETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVPETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVPETH"

    def __str__(self):
        return "CVPETH"

    def __call__(self):
        return "CVPETH"


CVPETH = CVPETH()
"""
    name: CVPETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVPUSDT(NamedTuple):
    """
        name: CVPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVPUSDT"

    def __str__(self):
        return "CVPUSDT"

    def __call__(self):
        return "CVPUSDT"


CVPUSDT = CVPUSDT()
"""
    name: CVPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVXBTC(NamedTuple):
    """
        name: CVXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVXBTC"

    def __str__(self):
        return "CVXBTC"

    def __call__(self):
        return "CVXBTC"


CVXBTC = CVXBTC()
"""
    name: CVXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVXBUSD(NamedTuple):
    """
        name: CVXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVXBUSD"

    def __str__(self):
        return "CVXBUSD"

    def __call__(self):
        return "CVXBUSD"


CVXBUSD = CVXBUSD()
"""
    name: CVXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class CVXUSDT(NamedTuple):
    """
        name: CVXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "CVXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVXUSDT"

    def __str__(self):
        return "CVXUSDT"

    def __call__(self):
        return "CVXUSDT"


CVXUSDT = CVXUSDT()
"""
    name: CVXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAIBNB(NamedTuple):
    """
        name: DAIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAIBNB"

    def __str__(self):
        return "DAIBNB"

    def __call__(self):
        return "DAIBNB"


DAIBNB = DAIBNB()
"""
    name: DAIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAIBTC(NamedTuple):
    """
        name: DAIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAIBTC"

    def __str__(self):
        return "DAIBTC"

    def __call__(self):
        return "DAIBTC"


DAIBTC = DAIBTC()
"""
    name: DAIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAIBUSD(NamedTuple):
    """
        name: DAIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAIBUSD"

    def __str__(self):
        return "DAIBUSD"

    def __call__(self):
        return "DAIBUSD"


DAIBUSD = DAIBUSD()
"""
    name: DAIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAIUSDT(NamedTuple):
    """
        name: DAIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAIUSDT"

    def __str__(self):
        return "DAIUSDT"

    def __call__(self):
        return "DAIUSDT"


DAIUSDT = DAIUSDT()
"""
    name: DAIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DARBNB(NamedTuple):
    """
        name: DARBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DARBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARBNB"

    def __str__(self):
        return "DARBNB"

    def __call__(self):
        return "DARBNB"


DARBNB = DARBNB()
"""
    name: DARBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DARBTC(NamedTuple):
    """
        name: DARBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DARBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARBTC"

    def __str__(self):
        return "DARBTC"

    def __call__(self):
        return "DARBTC"


DARBTC = DARBTC()
"""
    name: DARBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DARBUSD(NamedTuple):
    """
        name: DARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARBUSD"

    def __str__(self):
        return "DARBUSD"

    def __call__(self):
        return "DARBUSD"


DARBUSD = DARBUSD()
"""
    name: DARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DARETH(NamedTuple):
    """
        name: DARETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DARETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARETH"

    def __str__(self):
        return "DARETH"

    def __call__(self):
        return "DARETH"


DARETH = DARETH()
"""
    name: DARETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DAREUR(NamedTuple):
    """
        name: DAREUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DAREUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAREUR"

    def __str__(self):
        return "DAREUR"

    def __call__(self):
        return "DAREUR"


DAREUR = DAREUR()
"""
    name: DAREUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DARTRY(NamedTuple):
    """
        name: DARTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DARTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARTRY"

    def __str__(self):
        return "DARTRY"

    def __call__(self):
        return "DARTRY"


DARTRY = DARTRY()
"""
    name: DARTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DARUSDT(NamedTuple):
    """
        name: DARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DARUSDT"

    def __str__(self):
        return "DARUSDT"

    def __call__(self):
        return "DARUSDT"


DARUSDT = DARUSDT()
"""
    name: DARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DASHBNB(NamedTuple):
    """
        name: DASHBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DASHBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHBNB"

    def __str__(self):
        return "DASHBNB"

    def __call__(self):
        return "DASHBNB"


DASHBNB = DASHBNB()
"""
    name: DASHBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DASHBTC(NamedTuple):
    """
        name: DASHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DASHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHBTC"

    def __str__(self):
        return "DASHBTC"

    def __call__(self):
        return "DASHBTC"


DASHBTC = DASHBTC()
"""
    name: DASHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DASHBUSD(NamedTuple):
    """
        name: DASHBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DASHBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHBUSD"

    def __str__(self):
        return "DASHBUSD"

    def __call__(self):
        return "DASHBUSD"


DASHBUSD = DASHBUSD()
"""
    name: DASHBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DASHETH(NamedTuple):
    """
        name: DASHETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DASHETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHETH"

    def __str__(self):
        return "DASHETH"

    def __call__(self):
        return "DASHETH"


DASHETH = DASHETH()
"""
    name: DASHETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DASHUSDT(NamedTuple):
    """
        name: DASHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DASHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASHUSDT"

    def __str__(self):
        return "DASHUSDT"

    def __call__(self):
        return "DASHUSDT"


DASHUSDT = DASHUSDT()
"""
    name: DASHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DATABTC(NamedTuple):
    """
        name: DATABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DATABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATABTC"

    def __str__(self):
        return "DATABTC"

    def __call__(self):
        return "DATABTC"


DATABTC = DATABTC()
"""
    name: DATABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DATABUSD(NamedTuple):
    """
        name: DATABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DATABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATABUSD"

    def __str__(self):
        return "DATABUSD"

    def __call__(self):
        return "DATABUSD"


DATABUSD = DATABUSD()
"""
    name: DATABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DATAETH(NamedTuple):
    """
        name: DATAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DATAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATAETH"

    def __str__(self):
        return "DATAETH"

    def __call__(self):
        return "DATAETH"


DATAETH = DATAETH()
"""
    name: DATAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DATAUSDT(NamedTuple):
    """
        name: DATAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DATAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATAUSDT"

    def __str__(self):
        return "DATAUSDT"

    def __call__(self):
        return "DATAUSDT"


DATAUSDT = DATAUSDT()
"""
    name: DATAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DCRBNB(NamedTuple):
    """
        name: DCRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DCRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCRBNB"

    def __str__(self):
        return "DCRBNB"

    def __call__(self):
        return "DCRBNB"


DCRBNB = DCRBNB()
"""
    name: DCRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DCRBTC(NamedTuple):
    """
        name: DCRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DCRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCRBTC"

    def __str__(self):
        return "DCRBTC"

    def __call__(self):
        return "DCRBTC"


DCRBTC = DCRBTC()
"""
    name: DCRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DCRBUSD(NamedTuple):
    """
        name: DCRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DCRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCRBUSD"

    def __str__(self):
        return "DCRBUSD"

    def __call__(self):
        return "DCRBUSD"


DCRBUSD = DCRBUSD()
"""
    name: DCRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DCRUSDT(NamedTuple):
    """
        name: DCRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DCRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCRUSDT"

    def __str__(self):
        return "DCRUSDT"

    def __call__(self):
        return "DCRUSDT"


DCRUSDT = DCRUSDT()
"""
    name: DCRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DEGOBTC(NamedTuple):
    """
        name: DEGOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DEGOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGOBTC"

    def __str__(self):
        return "DEGOBTC"

    def __call__(self):
        return "DEGOBTC"


DEGOBTC = DEGOBTC()
"""
    name: DEGOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DEGOBUSD(NamedTuple):
    """
        name: DEGOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DEGOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGOBUSD"

    def __str__(self):
        return "DEGOBUSD"

    def __call__(self):
        return "DEGOBUSD"


DEGOBUSD = DEGOBUSD()
"""
    name: DEGOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DEGOUSDT(NamedTuple):
    """
        name: DEGOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DEGOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGOUSDT"

    def __str__(self):
        return "DEGOUSDT"

    def __call__(self):
        return "DEGOUSDT"


DEGOUSDT = DEGOUSDT()
"""
    name: DEGOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DENTBTC(NamedTuple):
    """
        name: DENTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DENTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTBTC"

    def __str__(self):
        return "DENTBTC"

    def __call__(self):
        return "DENTBTC"


DENTBTC = DENTBTC()
"""
    name: DENTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DENTBUSD(NamedTuple):
    """
        name: DENTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DENTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTBUSD"

    def __str__(self):
        return "DENTBUSD"

    def __call__(self):
        return "DENTBUSD"


DENTBUSD = DENTBUSD()
"""
    name: DENTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DENTETH(NamedTuple):
    """
        name: DENTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DENTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTETH"

    def __str__(self):
        return "DENTETH"

    def __call__(self):
        return "DENTETH"


DENTETH = DENTETH()
"""
    name: DENTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DENTTRY(NamedTuple):
    """
        name: DENTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DENTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTTRY"

    def __str__(self):
        return "DENTTRY"

    def __call__(self):
        return "DENTTRY"


DENTTRY = DENTTRY()
"""
    name: DENTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DENTUSDT(NamedTuple):
    """
        name: DENTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DENTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENTUSDT"

    def __str__(self):
        return "DENTUSDT"

    def __call__(self):
        return "DENTUSDT"


DENTUSDT = DENTUSDT()
"""
    name: DENTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DEXEBUSD(NamedTuple):
    """
        name: DEXEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DEXEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXEBUSD"

    def __str__(self):
        return "DEXEBUSD"

    def __call__(self):
        return "DEXEBUSD"


DEXEBUSD = DEXEBUSD()
"""
    name: DEXEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DEXEETH(NamedTuple):
    """
        name: DEXEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DEXEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXEETH"

    def __str__(self):
        return "DEXEETH"

    def __call__(self):
        return "DEXEETH"


DEXEETH = DEXEETH()
"""
    name: DEXEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DEXEUSDT(NamedTuple):
    """
        name: DEXEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DEXEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXEUSDT"

    def __str__(self):
        return "DEXEUSDT"

    def __call__(self):
        return "DEXEUSDT"


DEXEUSDT = DEXEUSDT()
"""
    name: DEXEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DFBUSD(NamedTuple):
    """
        name: DFBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DFBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFBUSD"

    def __str__(self):
        return "DFBUSD"

    def __call__(self):
        return "DFBUSD"


DFBUSD = DFBUSD()
"""
    name: DFBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DFETH(NamedTuple):
    """
        name: DFETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DFETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFETH"

    def __str__(self):
        return "DFETH"

    def __call__(self):
        return "DFETH"


DFETH = DFETH()
"""
    name: DFETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DFUSDT(NamedTuple):
    """
        name: DFUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DFUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFUSDT"

    def __str__(self):
        return "DFUSDT"

    def __call__(self):
        return "DFUSDT"


DFUSDT = DFUSDT()
"""
    name: DFUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DGBBTC(NamedTuple):
    """
        name: DGBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DGBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGBBTC"

    def __str__(self):
        return "DGBBTC"

    def __call__(self):
        return "DGBBTC"


DGBBTC = DGBBTC()
"""
    name: DGBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DGBBUSD(NamedTuple):
    """
        name: DGBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DGBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGBBUSD"

    def __str__(self):
        return "DGBBUSD"

    def __call__(self):
        return "DGBBUSD"


DGBBUSD = DGBBUSD()
"""
    name: DGBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DGBUSDT(NamedTuple):
    """
        name: DGBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DGBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGBUSDT"

    def __str__(self):
        return "DGBUSDT"

    def __call__(self):
        return "DGBUSDT"


DGBUSDT = DGBUSDT()
"""
    name: DGBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DGDBTC(NamedTuple):
    """
        name: DGDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DGDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGDBTC"

    def __str__(self):
        return "DGDBTC"

    def __call__(self):
        return "DGDBTC"


DGDBTC = DGDBTC()
"""
    name: DGDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DGDETH(NamedTuple):
    """
        name: DGDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DGDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGDETH"

    def __str__(self):
        return "DGDETH"

    def __call__(self):
        return "DGDETH"


DGDETH = DGDETH()
"""
    name: DGDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DIABNB(NamedTuple):
    """
        name: DIABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DIABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIABNB"

    def __str__(self):
        return "DIABNB"

    def __call__(self):
        return "DIABNB"


DIABNB = DIABNB()
"""
    name: DIABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DIABTC(NamedTuple):
    """
        name: DIABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DIABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIABTC"

    def __str__(self):
        return "DIABTC"

    def __call__(self):
        return "DIABTC"


DIABTC = DIABTC()
"""
    name: DIABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DIABUSD(NamedTuple):
    """
        name: DIABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DIABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIABUSD"

    def __str__(self):
        return "DIABUSD"

    def __call__(self):
        return "DIABUSD"


DIABUSD = DIABUSD()
"""
    name: DIABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DIAUSDT(NamedTuple):
    """
        name: DIAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DIAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIAUSDT"

    def __str__(self):
        return "DIAUSDT"

    def __call__(self):
        return "DIAUSDT"


DIAUSDT = DIAUSDT()
"""
    name: DIAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DLTBNB(NamedTuple):
    """
        name: DLTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DLTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DLTBNB"

    def __str__(self):
        return "DLTBNB"

    def __call__(self):
        return "DLTBNB"


DLTBNB = DLTBNB()
"""
    name: DLTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DLTBTC(NamedTuple):
    """
        name: DLTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DLTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DLTBTC"

    def __str__(self):
        return "DLTBTC"

    def __call__(self):
        return "DLTBTC"


DLTBTC = DLTBTC()
"""
    name: DLTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DLTETH(NamedTuple):
    """
        name: DLTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DLTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DLTETH"

    def __str__(self):
        return "DLTETH"

    def __call__(self):
        return "DLTETH"


DLTETH = DLTETH()
"""
    name: DLTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DNTBTC(NamedTuple):
    """
        name: DNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DNTBTC"

    def __str__(self):
        return "DNTBTC"

    def __call__(self):
        return "DNTBTC"


DNTBTC = DNTBTC()
"""
    name: DNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DNTBUSD(NamedTuple):
    """
        name: DNTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DNTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DNTBUSD"

    def __str__(self):
        return "DNTBUSD"

    def __call__(self):
        return "DNTBUSD"


DNTBUSD = DNTBUSD()
"""
    name: DNTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DNTETH(NamedTuple):
    """
        name: DNTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DNTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DNTETH"

    def __str__(self):
        return "DNTETH"

    def __call__(self):
        return "DNTETH"


DNTETH = DNTETH()
"""
    name: DNTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DNTUSDT(NamedTuple):
    """
        name: DNTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DNTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DNTUSDT"

    def __str__(self):
        return "DNTUSDT"

    def __call__(self):
        return "DNTUSDT"


DNTUSDT = DNTUSDT()
"""
    name: DNTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOCKBTC(NamedTuple):
    """
        name: DOCKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOCKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCKBTC"

    def __str__(self):
        return "DOCKBTC"

    def __call__(self):
        return "DOCKBTC"


DOCKBTC = DOCKBTC()
"""
    name: DOCKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOCKBUSD(NamedTuple):
    """
        name: DOCKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOCKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCKBUSD"

    def __str__(self):
        return "DOCKBUSD"

    def __call__(self):
        return "DOCKBUSD"


DOCKBUSD = DOCKBUSD()
"""
    name: DOCKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOCKETH(NamedTuple):
    """
        name: DOCKETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOCKETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCKETH"

    def __str__(self):
        return "DOCKETH"

    def __call__(self):
        return "DOCKETH"


DOCKETH = DOCKETH()
"""
    name: DOCKETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOCKUSDT(NamedTuple):
    """
        name: DOCKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOCKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCKUSDT"

    def __str__(self):
        return "DOCKUSDT"

    def __call__(self):
        return "DOCKUSDT"


DOCKUSDT = DOCKUSDT()
"""
    name: DOCKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DODOBTC(NamedTuple):
    """
        name: DODOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DODOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DODOBTC"

    def __str__(self):
        return "DODOBTC"

    def __call__(self):
        return "DODOBTC"


DODOBTC = DODOBTC()
"""
    name: DODOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DODOBUSD(NamedTuple):
    """
        name: DODOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DODOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DODOBUSD"

    def __str__(self):
        return "DODOBUSD"

    def __call__(self):
        return "DODOBUSD"


DODOBUSD = DODOBUSD()
"""
    name: DODOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DODOUSDT(NamedTuple):
    """
        name: DODOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DODOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DODOUSDT"

    def __str__(self):
        return "DODOUSDT"

    def __call__(self):
        return "DODOUSDT"


DODOUSDT = DODOUSDT()
"""
    name: DODOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOGEAUD(NamedTuple):
    """
        name: DOGEAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEAUD"

    def __str__(self):
        return "DOGEAUD"

    def __call__(self):
        return "DOGEAUD"


DOGEAUD = DOGEAUD()
"""
    name: DOGEAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEBIDR(NamedTuple):
    """
        name: DOGEBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBIDR"

    def __str__(self):
        return "DOGEBIDR"

    def __call__(self):
        return "DOGEBIDR"


DOGEBIDR = DOGEBIDR()
"""
    name: DOGEBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class DOGEBNB(NamedTuple):
    """
        name: DOGEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBNB"

    def __str__(self):
        return "DOGEBNB"

    def __call__(self):
        return "DOGEBNB"


DOGEBNB = DOGEBNB()
"""
    name: DOGEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEBRL(NamedTuple):
    """
        name: DOGEBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBRL"

    def __str__(self):
        return "DOGEBRL"

    def __call__(self):
        return "DOGEBRL"


DOGEBRL = DOGEBRL()
"""
    name: DOGEBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEBTC(NamedTuple):
    """
        name: DOGEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOGEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBTC"

    def __str__(self):
        return "DOGEBTC"

    def __call__(self):
        return "DOGEBTC"


DOGEBTC = DOGEBTC()
"""
    name: DOGEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOGEBUSD(NamedTuple):
    """
        name: DOGEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOGEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEBUSD"

    def __str__(self):
        return "DOGEBUSD"

    def __call__(self):
        return "DOGEBUSD"


DOGEBUSD = DOGEBUSD()
"""
    name: DOGEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOGEEUR(NamedTuple):
    """
        name: DOGEEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEEUR"

    def __str__(self):
        return "DOGEEUR"

    def __call__(self):
        return "DOGEEUR"


DOGEEUR = DOGEEUR()
"""
    name: DOGEEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEGBP(NamedTuple):
    """
        name: DOGEGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEGBP"

    def __str__(self):
        return "DOGEGBP"

    def __call__(self):
        return "DOGEGBP"


DOGEGBP = DOGEGBP()
"""
    name: DOGEGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEPAX(NamedTuple):
    """
        name: DOGEPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEPAX"

    def __str__(self):
        return "DOGEPAX"

    def __call__(self):
        return "DOGEPAX"


DOGEPAX = DOGEPAX()
"""
    name: DOGEPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGERUB(NamedTuple):
    """
        name: DOGERUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGERUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGERUB"

    def __str__(self):
        return "DOGERUB"

    def __call__(self):
        return "DOGERUB"


DOGERUB = DOGERUB()
"""
    name: DOGERUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGETRY(NamedTuple):
    """
        name: DOGETRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGETRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGETRY"

    def __str__(self):
        return "DOGETRY"

    def __call__(self):
        return "DOGETRY"


DOGETRY = DOGETRY()
"""
    name: DOGETRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEUSDC(NamedTuple):
    """
        name: DOGEUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOGEUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEUSDC"

    def __str__(self):
        return "DOGEUSDC"

    def __call__(self):
        return "DOGEUSDC"


DOGEUSDC = DOGEUSDC()
"""
    name: DOGEUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOGEUSDT(NamedTuple):
    """
        name: DOGEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOGEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGEUSDT"

    def __str__(self):
        return "DOGEUSDT"

    def __call__(self):
        return "DOGEUSDT"


DOGEUSDT = DOGEUSDT()
"""
    name: DOGEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOTAUD(NamedTuple):
    """
        name: DOTAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTAUD"

    def __str__(self):
        return "DOTAUD"

    def __call__(self):
        return "DOTAUD"


DOTAUD = DOTAUD()
"""
    name: DOTAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTBIDR(NamedTuple):
    """
        name: DOTBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "DOTBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBIDR"

    def __str__(self):
        return "DOTBIDR"

    def __call__(self):
        return "DOTBIDR"


DOTBIDR = DOTBIDR()
"""
    name: DOTBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class DOTBKRW(NamedTuple):
    """
        name: DOTBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBKRW"

    def __str__(self):
        return "DOTBKRW"

    def __call__(self):
        return "DOTBKRW"


DOTBKRW = DOTBKRW()
"""
    name: DOTBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTBNB(NamedTuple):
    """
        name: DOTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBNB"

    def __str__(self):
        return "DOTBNB"

    def __call__(self):
        return "DOTBNB"


DOTBNB = DOTBNB()
"""
    name: DOTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTBRL(NamedTuple):
    """
        name: DOTBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBRL"

    def __str__(self):
        return "DOTBRL"

    def __call__(self):
        return "DOTBRL"


DOTBRL = DOTBRL()
"""
    name: DOTBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTBTC(NamedTuple):
    """
        name: DOTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBTC"

    def __str__(self):
        return "DOTBTC"

    def __call__(self):
        return "DOTBTC"


DOTBTC = DOTBTC()
"""
    name: DOTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOTBUSD(NamedTuple):
    """
        name: DOTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTBUSD"

    def __str__(self):
        return "DOTBUSD"

    def __call__(self):
        return "DOTBUSD"


DOTBUSD = DOTBUSD()
"""
    name: DOTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DOTDOWNUSDT(NamedTuple):
    """
        name: DOTDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTDOWNUSDT"

    def __str__(self):
        return "DOTDOWNUSDT"

    def __call__(self):
        return "DOTDOWNUSDT"


DOTDOWNUSDT = DOTDOWNUSDT()
"""
    name: DOTDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTETH(NamedTuple):
    """
        name: DOTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTETH"

    def __str__(self):
        return "DOTETH"

    def __call__(self):
        return "DOTETH"


DOTETH = DOTETH()
"""
    name: DOTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTEUR(NamedTuple):
    """
        name: DOTEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTEUR"

    def __str__(self):
        return "DOTEUR"

    def __call__(self):
        return "DOTEUR"


DOTEUR = DOTEUR()
"""
    name: DOTEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTGBP(NamedTuple):
    """
        name: DOTGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTGBP"

    def __str__(self):
        return "DOTGBP"

    def __call__(self):
        return "DOTGBP"


DOTGBP = DOTGBP()
"""
    name: DOTGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTNGN(NamedTuple):
    """
        name: DOTNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTNGN"

    def __str__(self):
        return "DOTNGN"

    def __call__(self):
        return "DOTNGN"


DOTNGN = DOTNGN()
"""
    name: DOTNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTRUB(NamedTuple):
    """
        name: DOTRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTRUB"

    def __str__(self):
        return "DOTRUB"

    def __call__(self):
        return "DOTRUB"


DOTRUB = DOTRUB()
"""
    name: DOTRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTTRY(NamedTuple):
    """
        name: DOTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTTRY"

    def __str__(self):
        return "DOTTRY"

    def __call__(self):
        return "DOTTRY"


DOTTRY = DOTTRY()
"""
    name: DOTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTUPUSDT(NamedTuple):
    """
        name: DOTUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DOTUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTUPUSDT"

    def __str__(self):
        return "DOTUPUSDT"

    def __call__(self):
        return "DOTUPUSDT"


DOTUPUSDT = DOTUPUSDT()
"""
    name: DOTUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DOTUSDT(NamedTuple):
    """
        name: DOTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DOTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOTUSDT"

    def __str__(self):
        return "DOTUSDT"

    def __call__(self):
        return "DOTUSDT"


DOTUSDT = DOTUSDT()
"""
    name: DOTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DREPBNB(NamedTuple):
    """
        name: DREPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DREPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREPBNB"

    def __str__(self):
        return "DREPBNB"

    def __call__(self):
        return "DREPBNB"


DREPBNB = DREPBNB()
"""
    name: DREPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DREPBTC(NamedTuple):
    """
        name: DREPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DREPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREPBTC"

    def __str__(self):
        return "DREPBTC"

    def __call__(self):
        return "DREPBTC"


DREPBTC = DREPBTC()
"""
    name: DREPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DREPBUSD(NamedTuple):
    """
        name: DREPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DREPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREPBUSD"

    def __str__(self):
        return "DREPBUSD"

    def __call__(self):
        return "DREPBUSD"


DREPBUSD = DREPBUSD()
"""
    name: DREPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DREPUSDT(NamedTuple):
    """
        name: DREPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DREPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREPUSDT"

    def __str__(self):
        return "DREPUSDT"

    def __call__(self):
        return "DREPUSDT"


DREPUSDT = DREPUSDT()
"""
    name: DREPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKBNB(NamedTuple):
    """
        name: DUSKBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DUSKBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKBNB"

    def __str__(self):
        return "DUSKBNB"

    def __call__(self):
        return "DUSKBNB"


DUSKBNB = DUSKBNB()
"""
    name: DUSKBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKBTC(NamedTuple):
    """
        name: DUSKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DUSKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKBTC"

    def __str__(self):
        return "DUSKBTC"

    def __call__(self):
        return "DUSKBTC"


DUSKBTC = DUSKBTC()
"""
    name: DUSKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DUSKBUSD(NamedTuple):
    """
        name: DUSKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DUSKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKBUSD"

    def __str__(self):
        return "DUSKBUSD"

    def __call__(self):
        return "DUSKBUSD"


DUSKBUSD = DUSKBUSD()
"""
    name: DUSKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKPAX(NamedTuple):
    """
        name: DUSKPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DUSKPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKPAX"

    def __str__(self):
        return "DUSKPAX"

    def __call__(self):
        return "DUSKPAX"


DUSKPAX = DUSKPAX()
"""
    name: DUSKPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKUSDC(NamedTuple):
    """
        name: DUSKUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DUSKUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKUSDC"

    def __str__(self):
        return "DUSKUSDC"

    def __call__(self):
        return "DUSKUSDC"


DUSKUSDC = DUSKUSDC()
"""
    name: DUSKUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DUSKUSDT(NamedTuple):
    """
        name: DUSKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DUSKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSKUSDT"

    def __str__(self):
        return "DUSKUSDT"

    def __call__(self):
        return "DUSKUSDT"


DUSKUSDT = DUSKUSDT()
"""
    name: DUSKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DYDXBNB(NamedTuple):
    """
        name: DYDXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DYDXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXBNB"

    def __str__(self):
        return "DYDXBNB"

    def __call__(self):
        return "DYDXBNB"


DYDXBNB = DYDXBNB()
"""
    name: DYDXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DYDXBTC(NamedTuple):
    """
        name: DYDXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DYDXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXBTC"

    def __str__(self):
        return "DYDXBTC"

    def __call__(self):
        return "DYDXBTC"


DYDXBTC = DYDXBTC()
"""
    name: DYDXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DYDXBUSD(NamedTuple):
    """
        name: DYDXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DYDXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXBUSD"

    def __str__(self):
        return "DYDXBUSD"

    def __call__(self):
        return "DYDXBUSD"


DYDXBUSD = DYDXBUSD()
"""
    name: DYDXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class DYDXETH(NamedTuple):
    """
        name: DYDXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "DYDXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXETH"

    def __str__(self):
        return "DYDXETH"

    def __call__(self):
        return "DYDXETH"


DYDXETH = DYDXETH()
"""
    name: DYDXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class DYDXUSDT(NamedTuple):
    """
        name: DYDXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "DYDXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXUSDT"

    def __str__(self):
        return "DYDXUSDT"

    def __call__(self):
        return "DYDXUSDT"


DYDXUSDT = DYDXUSDT()
"""
    name: DYDXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EASYBTC(NamedTuple):
    """
        name: EASYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EASYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EASYBTC"

    def __str__(self):
        return "EASYBTC"

    def __call__(self):
        return "EASYBTC"


EASYBTC = EASYBTC()
"""
    name: EASYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EASYETH(NamedTuple):
    """
        name: EASYETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EASYETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EASYETH"

    def __str__(self):
        return "EASYETH"

    def __call__(self):
        return "EASYETH"


EASYETH = EASYETH()
"""
    name: EASYETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDOBTC(NamedTuple):
    """
        name: EDOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDOBTC"

    def __str__(self):
        return "EDOBTC"

    def __call__(self):
        return "EDOBTC"


EDOBTC = EDOBTC()
"""
    name: EDOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EDOETH(NamedTuple):
    """
        name: EDOETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EDOETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDOETH"

    def __str__(self):
        return "EDOETH"

    def __call__(self):
        return "EDOETH"


EDOETH = EDOETH()
"""
    name: EDOETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDBNB(NamedTuple):
    """
        name: EGLDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EGLDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDBNB"

    def __str__(self):
        return "EGLDBNB"

    def __call__(self):
        return "EGLDBNB"


EGLDBNB = EGLDBNB()
"""
    name: EGLDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDBTC(NamedTuple):
    """
        name: EGLDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EGLDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDBTC"

    def __str__(self):
        return "EGLDBTC"

    def __call__(self):
        return "EGLDBTC"


EGLDBTC = EGLDBTC()
"""
    name: EGLDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EGLDBUSD(NamedTuple):
    """
        name: EGLDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EGLDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDBUSD"

    def __str__(self):
        return "EGLDBUSD"

    def __call__(self):
        return "EGLDBUSD"


EGLDBUSD = EGLDBUSD()
"""
    name: EGLDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EGLDETH(NamedTuple):
    """
        name: EGLDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EGLDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDETH"

    def __str__(self):
        return "EGLDETH"

    def __call__(self):
        return "EGLDETH"


EGLDETH = EGLDETH()
"""
    name: EGLDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDEUR(NamedTuple):
    """
        name: EGLDEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EGLDEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDEUR"

    def __str__(self):
        return "EGLDEUR"

    def __call__(self):
        return "EGLDEUR"


EGLDEUR = EGLDEUR()
"""
    name: EGLDEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDRON(NamedTuple):
    """
        name: EGLDRON
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 40.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EGLDRON"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 40.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDRON"

    def __str__(self):
        return "EGLDRON"

    def __call__(self):
        return "EGLDRON"


EGLDRON = EGLDRON()
"""
    name: EGLDRON
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 40.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EGLDUSDT(NamedTuple):
    """
        name: EGLDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EGLDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLDUSDT"

    def __str__(self):
        return "EGLDUSDT"

    def __call__(self):
        return "EGLDUSDT"


EGLDUSDT = EGLDUSDT()
"""
    name: EGLDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ELFBTC(NamedTuple):
    """
        name: ELFBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ELFBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELFBTC"

    def __str__(self):
        return "ELFBTC"

    def __call__(self):
        return "ELFBTC"


ELFBTC = ELFBTC()
"""
    name: ELFBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ELFBUSD(NamedTuple):
    """
        name: ELFBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ELFBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELFBUSD"

    def __str__(self):
        return "ELFBUSD"

    def __call__(self):
        return "ELFBUSD"


ELFBUSD = ELFBUSD()
"""
    name: ELFBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ELFETH(NamedTuple):
    """
        name: ELFETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ELFETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELFETH"

    def __str__(self):
        return "ELFETH"

    def __call__(self):
        return "ELFETH"


ELFETH = ELFETH()
"""
    name: ELFETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ELFUSDT(NamedTuple):
    """
        name: ELFUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ELFUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELFUSDT"

    def __str__(self):
        return "ELFUSDT"

    def __call__(self):
        return "ELFUSDT"


ELFUSDT = ELFUSDT()
"""
    name: ELFUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENGBTC(NamedTuple):
    """
        name: ENGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENGBTC"

    def __str__(self):
        return "ENGBTC"

    def __call__(self):
        return "ENGBTC"


ENGBTC = ENGBTC()
"""
    name: ENGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENGETH(NamedTuple):
    """
        name: ENGETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENGETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENGETH"

    def __str__(self):
        return "ENGETH"

    def __call__(self):
        return "ENGETH"


ENGETH = ENGETH()
"""
    name: ENGETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJBNB(NamedTuple):
    """
        name: ENJBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJBNB"

    def __str__(self):
        return "ENJBNB"

    def __call__(self):
        return "ENJBNB"


ENJBNB = ENJBNB()
"""
    name: ENJBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJBRL(NamedTuple):
    """
        name: ENJBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJBRL"

    def __str__(self):
        return "ENJBRL"

    def __call__(self):
        return "ENJBRL"


ENJBRL = ENJBRL()
"""
    name: ENJBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJBTC(NamedTuple):
    """
        name: ENJBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENJBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJBTC"

    def __str__(self):
        return "ENJBTC"

    def __call__(self):
        return "ENJBTC"


ENJBTC = ENJBTC()
"""
    name: ENJBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENJBUSD(NamedTuple):
    """
        name: ENJBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENJBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJBUSD"

    def __str__(self):
        return "ENJBUSD"

    def __call__(self):
        return "ENJBUSD"


ENJBUSD = ENJBUSD()
"""
    name: ENJBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENJETH(NamedTuple):
    """
        name: ENJETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJETH"

    def __str__(self):
        return "ENJETH"

    def __call__(self):
        return "ENJETH"


ENJETH = ENJETH()
"""
    name: ENJETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJEUR(NamedTuple):
    """
        name: ENJEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJEUR"

    def __str__(self):
        return "ENJEUR"

    def __call__(self):
        return "ENJEUR"


ENJEUR = ENJEUR()
"""
    name: ENJEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJGBP(NamedTuple):
    """
        name: ENJGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJGBP"

    def __str__(self):
        return "ENJGBP"

    def __call__(self):
        return "ENJGBP"


ENJGBP = ENJGBP()
"""
    name: ENJGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJTRY(NamedTuple):
    """
        name: ENJTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENJTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJTRY"

    def __str__(self):
        return "ENJTRY"

    def __call__(self):
        return "ENJTRY"


ENJTRY = ENJTRY()
"""
    name: ENJTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENJUSDT(NamedTuple):
    """
        name: ENJUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENJUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJUSDT"

    def __str__(self):
        return "ENJUSDT"

    def __call__(self):
        return "ENJUSDT"


ENJUSDT = ENJUSDT()
"""
    name: ENJUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENSBNB(NamedTuple):
    """
        name: ENSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSBNB"

    def __str__(self):
        return "ENSBNB"

    def __call__(self):
        return "ENSBNB"


ENSBNB = ENSBNB()
"""
    name: ENSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENSBTC(NamedTuple):
    """
        name: ENSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSBTC"

    def __str__(self):
        return "ENSBTC"

    def __call__(self):
        return "ENSBTC"


ENSBTC = ENSBTC()
"""
    name: ENSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENSBUSD(NamedTuple):
    """
        name: ENSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSBUSD"

    def __str__(self):
        return "ENSBUSD"

    def __call__(self):
        return "ENSBUSD"


ENSBUSD = ENSBUSD()
"""
    name: ENSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ENSTRY(NamedTuple):
    """
        name: ENSTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ENSTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSTRY"

    def __str__(self):
        return "ENSTRY"

    def __call__(self):
        return "ENSTRY"


ENSTRY = ENSTRY()
"""
    name: ENSTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ENSUSDT(NamedTuple):
    """
        name: ENSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ENSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENSUSDT"

    def __str__(self):
        return "ENSUSDT"

    def __call__(self):
        return "ENSUSDT"


ENSUSDT = ENSUSDT()
"""
    name: ENSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EOSAUD(NamedTuple):
    """
        name: EOSAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSAUD"

    def __str__(self):
        return "EOSAUD"

    def __call__(self):
        return "EOSAUD"


EOSAUD = EOSAUD()
"""
    name: EOSAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBEARBUSD(NamedTuple):
    """
        name: EOSBEARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBEARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBEARBUSD"

    def __str__(self):
        return "EOSBEARBUSD"

    def __call__(self):
        return "EOSBEARBUSD"


EOSBEARBUSD = EOSBEARBUSD()
"""
    name: EOSBEARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBEARUSDT(NamedTuple):
    """
        name: EOSBEARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBEARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBEARUSDT"

    def __str__(self):
        return "EOSBEARUSDT"

    def __call__(self):
        return "EOSBEARUSDT"


EOSBEARUSDT = EOSBEARUSDT()
"""
    name: EOSBEARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBNB(NamedTuple):
    """
        name: EOSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBNB"

    def __str__(self):
        return "EOSBNB"

    def __call__(self):
        return "EOSBNB"


EOSBNB = EOSBNB()
"""
    name: EOSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBTC(NamedTuple):
    """
        name: EOSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EOSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBTC"

    def __str__(self):
        return "EOSBTC"

    def __call__(self):
        return "EOSBTC"


EOSBTC = EOSBTC()
"""
    name: EOSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EOSBULLBUSD(NamedTuple):
    """
        name: EOSBULLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBULLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBULLBUSD"

    def __str__(self):
        return "EOSBULLBUSD"

    def __call__(self):
        return "EOSBULLBUSD"


EOSBULLBUSD = EOSBULLBUSD()
"""
    name: EOSBULLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBULLUSDT(NamedTuple):
    """
        name: EOSBULLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSBULLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBULLUSDT"

    def __str__(self):
        return "EOSBULLUSDT"

    def __call__(self):
        return "EOSBULLUSDT"


EOSBULLUSDT = EOSBULLUSDT()
"""
    name: EOSBULLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSBUSD(NamedTuple):
    """
        name: EOSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EOSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSBUSD"

    def __str__(self):
        return "EOSBUSD"

    def __call__(self):
        return "EOSBUSD"


EOSBUSD = EOSBUSD()
"""
    name: EOSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EOSDOWNUSDT(NamedTuple):
    """
        name: EOSDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSDOWNUSDT"

    def __str__(self):
        return "EOSDOWNUSDT"

    def __call__(self):
        return "EOSDOWNUSDT"


EOSDOWNUSDT = EOSDOWNUSDT()
"""
    name: EOSDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSETH(NamedTuple):
    """
        name: EOSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EOSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSETH"

    def __str__(self):
        return "EOSETH"

    def __call__(self):
        return "EOSETH"


EOSETH = EOSETH()
"""
    name: EOSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EOSEUR(NamedTuple):
    """
        name: EOSEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSEUR"

    def __str__(self):
        return "EOSEUR"

    def __call__(self):
        return "EOSEUR"


EOSEUR = EOSEUR()
"""
    name: EOSEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSPAX(NamedTuple):
    """
        name: EOSPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSPAX"

    def __str__(self):
        return "EOSPAX"

    def __call__(self):
        return "EOSPAX"


EOSPAX = EOSPAX()
"""
    name: EOSPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSTRY(NamedTuple):
    """
        name: EOSTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSTRY"

    def __str__(self):
        return "EOSTRY"

    def __call__(self):
        return "EOSTRY"


EOSTRY = EOSTRY()
"""
    name: EOSTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSTUSD(NamedTuple):
    """
        name: EOSTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSTUSD"

    def __str__(self):
        return "EOSTUSD"

    def __call__(self):
        return "EOSTUSD"


EOSTUSD = EOSTUSD()
"""
    name: EOSTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSUPUSDT(NamedTuple):
    """
        name: EOSUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSUPUSDT"

    def __str__(self):
        return "EOSUPUSDT"

    def __call__(self):
        return "EOSUPUSDT"


EOSUPUSDT = EOSUPUSDT()
"""
    name: EOSUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSUSDC(NamedTuple):
    """
        name: EOSUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EOSUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSUSDC"

    def __str__(self):
        return "EOSUSDC"

    def __call__(self):
        return "EOSUSDC"


EOSUSDC = EOSUSDC()
"""
    name: EOSUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EOSUSDT(NamedTuple):
    """
        name: EOSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EOSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSUSDT"

    def __str__(self):
        return "EOSUSDT"

    def __call__(self):
        return "EOSUSDT"


EOSUSDT = EOSUSDT()
"""
    name: EOSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EPSBTC(NamedTuple):
    """
        name: EPSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EPSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPSBTC"

    def __str__(self):
        return "EPSBTC"

    def __call__(self):
        return "EPSBTC"


EPSBTC = EPSBTC()
"""
    name: EPSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EPSBUSD(NamedTuple):
    """
        name: EPSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EPSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPSBUSD"

    def __str__(self):
        return "EPSBUSD"

    def __call__(self):
        return "EPSBUSD"


EPSBUSD = EPSBUSD()
"""
    name: EPSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EPSUSDT(NamedTuple):
    """
        name: EPSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EPSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPSUSDT"

    def __str__(self):
        return "EPSUSDT"

    def __call__(self):
        return "EPSUSDT"


EPSUSDT = EPSUSDT()
"""
    name: EPSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EPXBUSD(NamedTuple):
    """
        name: EPXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EPXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPXBUSD"

    def __str__(self):
        return "EPXBUSD"

    def __call__(self):
        return "EPXBUSD"


EPXBUSD = EPXBUSD()
"""
    name: EPXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class EPXUSDT(NamedTuple):
    """
        name: EPXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "EPXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPXUSDT"

    def __str__(self):
        return "EPXUSDT"

    def __call__(self):
        return "EPXUSDT"


EPXUSDT = EPXUSDT()
"""
    name: EPXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ERDBNB(NamedTuple):
    """
        name: ERDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDBNB"

    def __str__(self):
        return "ERDBNB"

    def __call__(self):
        return "ERDBNB"


ERDBNB = ERDBNB()
"""
    name: ERDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDBTC(NamedTuple):
    """
        name: ERDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDBTC"

    def __str__(self):
        return "ERDBTC"

    def __call__(self):
        return "ERDBTC"


ERDBTC = ERDBTC()
"""
    name: ERDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDBUSD(NamedTuple):
    """
        name: ERDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDBUSD"

    def __str__(self):
        return "ERDBUSD"

    def __call__(self):
        return "ERDBUSD"


ERDBUSD = ERDBUSD()
"""
    name: ERDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDPAX(NamedTuple):
    """
        name: ERDPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDPAX"

    def __str__(self):
        return "ERDPAX"

    def __call__(self):
        return "ERDPAX"


ERDPAX = ERDPAX()
"""
    name: ERDPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDUSDC(NamedTuple):
    """
        name: ERDUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDUSDC"

    def __str__(self):
        return "ERDUSDC"

    def __call__(self):
        return "ERDUSDC"


ERDUSDC = ERDUSDC()
"""
    name: ERDUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERDUSDT(NamedTuple):
    """
        name: ERDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERDUSDT"

    def __str__(self):
        return "ERDUSDT"

    def __call__(self):
        return "ERDUSDT"


ERDUSDT = ERDUSDT()
"""
    name: ERDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERNBNB(NamedTuple):
    """
        name: ERNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERNBNB"

    def __str__(self):
        return "ERNBNB"

    def __call__(self):
        return "ERNBNB"


ERNBNB = ERNBNB()
"""
    name: ERNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERNBUSD(NamedTuple):
    """
        name: ERNBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ERNBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERNBUSD"

    def __str__(self):
        return "ERNBUSD"

    def __call__(self):
        return "ERNBUSD"


ERNBUSD = ERNBUSD()
"""
    name: ERNBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ERNUSDT(NamedTuple):
    """
        name: ERNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ERNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERNUSDT"

    def __str__(self):
        return "ERNUSDT"

    def __call__(self):
        return "ERNUSDT"


ERNUSDT = ERNUSDT()
"""
    name: ERNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETCBNB(NamedTuple):
    """
        name: ETCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCBNB"

    def __str__(self):
        return "ETCBNB"

    def __call__(self):
        return "ETCBNB"


ETCBNB = ETCBNB()
"""
    name: ETCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCBRL(NamedTuple):
    """
        name: ETCBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCBRL"

    def __str__(self):
        return "ETCBRL"

    def __call__(self):
        return "ETCBRL"


ETCBRL = ETCBRL()
"""
    name: ETCBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCBTC(NamedTuple):
    """
        name: ETCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCBTC"

    def __str__(self):
        return "ETCBTC"

    def __call__(self):
        return "ETCBTC"


ETCBTC = ETCBTC()
"""
    name: ETCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETCBUSD(NamedTuple):
    """
        name: ETCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCBUSD"

    def __str__(self):
        return "ETCBUSD"

    def __call__(self):
        return "ETCBUSD"


ETCBUSD = ETCBUSD()
"""
    name: ETCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETCETH(NamedTuple):
    """
        name: ETCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCETH"

    def __str__(self):
        return "ETCETH"

    def __call__(self):
        return "ETCETH"


ETCETH = ETCETH()
"""
    name: ETCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCEUR(NamedTuple):
    """
        name: ETCEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCEUR"

    def __str__(self):
        return "ETCEUR"

    def __call__(self):
        return "ETCEUR"


ETCEUR = ETCEUR()
"""
    name: ETCEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCGBP(NamedTuple):
    """
        name: ETCGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCGBP"

    def __str__(self):
        return "ETCGBP"

    def __call__(self):
        return "ETCGBP"


ETCGBP = ETCGBP()
"""
    name: ETCGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCPAX(NamedTuple):
    """
        name: ETCPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCPAX"

    def __str__(self):
        return "ETCPAX"

    def __call__(self):
        return "ETCPAX"


ETCPAX = ETCPAX()
"""
    name: ETCPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCTRY(NamedTuple):
    """
        name: ETCTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCTRY"

    def __str__(self):
        return "ETCTRY"

    def __call__(self):
        return "ETCTRY"


ETCTRY = ETCTRY()
"""
    name: ETCTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCTUSD(NamedTuple):
    """
        name: ETCTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCTUSD"

    def __str__(self):
        return "ETCTUSD"

    def __call__(self):
        return "ETCTUSD"


ETCTUSD = ETCTUSD()
"""
    name: ETCTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCUSDC(NamedTuple):
    """
        name: ETCUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETCUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCUSDC"

    def __str__(self):
        return "ETCUSDC"

    def __call__(self):
        return "ETCUSDC"


ETCUSDC = ETCUSDC()
"""
    name: ETCUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETCUSDT(NamedTuple):
    """
        name: ETCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCUSDT"

    def __str__(self):
        return "ETCUSDT"

    def __call__(self):
        return "ETCUSDT"


ETCUSDT = ETCUSDT()
"""
    name: ETCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHAUD(NamedTuple):
    """
        name: ETHAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHAUD"

    def __str__(self):
        return "ETHAUD"

    def __call__(self):
        return "ETHAUD"


ETHAUD = ETHAUD()
"""
    name: ETHAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBEARBUSD(NamedTuple):
    """
        name: ETHBEARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBEARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBEARBUSD"

    def __str__(self):
        return "ETHBEARBUSD"

    def __call__(self):
        return "ETHBEARBUSD"


ETHBEARBUSD = ETHBEARBUSD()
"""
    name: ETHBEARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBEARUSDT(NamedTuple):
    """
        name: ETHBEARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBEARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBEARUSDT"

    def __str__(self):
        return "ETHBEARUSDT"

    def __call__(self):
        return "ETHBEARUSDT"


ETHBEARUSDT = ETHBEARUSDT()
"""
    name: ETHBEARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBIDR(NamedTuple):
    """
        name: ETHBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBIDR"

    def __str__(self):
        return "ETHBIDR"

    def __call__(self):
        return "ETHBIDR"


ETHBIDR = ETHBIDR()
"""
    name: ETHBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ETHBKRW(NamedTuple):
    """
        name: ETHBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBKRW"

    def __str__(self):
        return "ETHBKRW"

    def __call__(self):
        return "ETHBKRW"


ETHBKRW = ETHBKRW()
"""
    name: ETHBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBRL(NamedTuple):
    """
        name: ETHBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBRL"

    def __str__(self):
        return "ETHBRL"

    def __call__(self):
        return "ETHBRL"


ETHBRL = ETHBRL()
"""
    name: ETHBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBTC(NamedTuple):
    """
        name: ETHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBTC"

    def __str__(self):
        return "ETHBTC"

    def __call__(self):
        return "ETHBTC"


ETHBTC = ETHBTC()
"""
    name: ETHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHBULLBUSD(NamedTuple):
    """
        name: ETHBULLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBULLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBULLBUSD"

    def __str__(self):
        return "ETHBULLBUSD"

    def __call__(self):
        return "ETHBULLBUSD"


ETHBULLBUSD = ETHBULLBUSD()
"""
    name: ETHBULLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBULLUSDT(NamedTuple):
    """
        name: ETHBULLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHBULLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBULLUSDT"

    def __str__(self):
        return "ETHBULLUSDT"

    def __call__(self):
        return "ETHBULLUSDT"


ETHBULLUSDT = ETHBULLUSDT()
"""
    name: ETHBULLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHBUSD(NamedTuple):
    """
        name: ETHBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHBUSD"

    def __str__(self):
        return "ETHBUSD"

    def __call__(self):
        return "ETHBUSD"


ETHBUSD = ETHBUSD()
"""
    name: ETHBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHDAI(NamedTuple):
    """
        name: ETHDAI
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHDAI"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHDAI"

    def __str__(self):
        return "ETHDAI"

    def __call__(self):
        return "ETHDAI"


ETHDAI = ETHDAI()
"""
    name: ETHDAI
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHDOWNUSDT(NamedTuple):
    """
        name: ETHDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHDOWNUSDT"

    def __str__(self):
        return "ETHDOWNUSDT"

    def __call__(self):
        return "ETHDOWNUSDT"


ETHDOWNUSDT = ETHDOWNUSDT()
"""
    name: ETHDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHEUR(NamedTuple):
    """
        name: ETHEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHEUR"

    def __str__(self):
        return "ETHEUR"

    def __call__(self):
        return "ETHEUR"


ETHEUR = ETHEUR()
"""
    name: ETHEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHGBP(NamedTuple):
    """
        name: ETHGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHGBP"

    def __str__(self):
        return "ETHGBP"

    def __call__(self):
        return "ETHGBP"


ETHGBP = ETHGBP()
"""
    name: ETHGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHNGN(NamedTuple):
    """
        name: ETHNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHNGN"

    def __str__(self):
        return "ETHNGN"

    def __call__(self):
        return "ETHNGN"


ETHNGN = ETHNGN()
"""
    name: ETHNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHPAX(NamedTuple):
    """
        name: ETHPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHPAX"

    def __str__(self):
        return "ETHPAX"

    def __call__(self):
        return "ETHPAX"


ETHPAX = ETHPAX()
"""
    name: ETHPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHPLN(NamedTuple):
    """
        name: ETHPLN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 50.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHPLN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 50.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHPLN"

    def __str__(self):
        return "ETHPLN"

    def __call__(self):
        return "ETHPLN"


ETHPLN = ETHPLN()
"""
    name: ETHPLN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 50.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHRUB(NamedTuple):
    """
        name: ETHRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHRUB"

    def __str__(self):
        return "ETHRUB"

    def __call__(self):
        return "ETHRUB"


ETHRUB = ETHRUB()
"""
    name: ETHRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHTRY(NamedTuple):
    """
        name: ETHTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHTRY"

    def __str__(self):
        return "ETHTRY"

    def __call__(self):
        return "ETHTRY"


ETHTRY = ETHTRY()
"""
    name: ETHTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHTUSD(NamedTuple):
    """
        name: ETHTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHTUSD"

    def __str__(self):
        return "ETHTUSD"

    def __call__(self):
        return "ETHTUSD"


ETHTUSD = ETHTUSD()
"""
    name: ETHTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHUAH(NamedTuple):
    """
        name: ETHUAH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHUAH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUAH"

    def __str__(self):
        return "ETHUAH"

    def __call__(self):
        return "ETHUAH"


ETHUAH = ETHUAH()
"""
    name: ETHUAH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHUPUSDT(NamedTuple):
    """
        name: ETHUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUPUSDT"

    def __str__(self):
        return "ETHUPUSDT"

    def __call__(self):
        return "ETHUPUSDT"


ETHUPUSDT = ETHUPUSDT()
"""
    name: ETHUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHUSDC(NamedTuple):
    """
        name: ETHUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUSDC"

    def __str__(self):
        return "ETHUSDC"

    def __call__(self):
        return "ETHUSDC"


ETHUSDC = ETHUSDC()
"""
    name: ETHUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHUSDP(NamedTuple):
    """
        name: ETHUSDP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHUSDP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUSDP"

    def __str__(self):
        return "ETHUSDP"

    def __call__(self):
        return "ETHUSDP"


ETHUSDP = ETHUSDP()
"""
    name: ETHUSDP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHUSDT(NamedTuple):
    """
        name: ETHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ETHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUSDT"

    def __str__(self):
        return "ETHUSDT"

    def __call__(self):
        return "ETHUSDT"


ETHUSDT = ETHUSDT()
"""
    name: ETHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ETHUST(NamedTuple):
    """
        name: ETHUST
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHUST"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUST"

    def __str__(self):
        return "ETHUST"

    def __call__(self):
        return "ETHUST"


ETHUST = ETHUST()
"""
    name: ETHUST
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ETHZAR(NamedTuple):
    """
        name: ETHZAR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 200.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ETHZAR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 200.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHZAR"

    def __str__(self):
        return "ETHZAR"

    def __call__(self):
        return "ETHZAR"


ETHZAR = ETHZAR()
"""
    name: ETHZAR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 200.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EURBUSD(NamedTuple):
    """
        name: EURBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EURBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EURBUSD"

    def __str__(self):
        return "EURBUSD"

    def __call__(self):
        return "EURBUSD"


EURBUSD = EURBUSD()
"""
    name: EURBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EURUSDT(NamedTuple):
    """
        name: EURUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EURUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EURUSDT"

    def __str__(self):
        return "EURUSDT"

    def __call__(self):
        return "EURUSDT"


EURUSDT = EURUSDT()
"""
    name: EURUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EVXBTC(NamedTuple):
    """
        name: EVXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EVXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EVXBTC"

    def __str__(self):
        return "EVXBTC"

    def __call__(self):
        return "EVXBTC"


EVXBTC = EVXBTC()
"""
    name: EVXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class EVXETH(NamedTuple):
    """
        name: EVXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "EVXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EVXETH"

    def __str__(self):
        return "EVXETH"

    def __call__(self):
        return "EVXETH"


EVXETH = EVXETH()
"""
    name: EVXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMBNB(NamedTuple):
    """
        name: FARMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMBNB"

    def __str__(self):
        return "FARMBNB"

    def __call__(self):
        return "FARMBNB"


FARMBNB = FARMBNB()
"""
    name: FARMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMBTC(NamedTuple):
    """
        name: FARMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMBTC"

    def __str__(self):
        return "FARMBTC"

    def __call__(self):
        return "FARMBTC"


FARMBTC = FARMBTC()
"""
    name: FARMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMBUSD(NamedTuple):
    """
        name: FARMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMBUSD"

    def __str__(self):
        return "FARMBUSD"

    def __call__(self):
        return "FARMBUSD"


FARMBUSD = FARMBUSD()
"""
    name: FARMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMETH(NamedTuple):
    """
        name: FARMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMETH"

    def __str__(self):
        return "FARMETH"

    def __call__(self):
        return "FARMETH"


FARMETH = FARMETH()
"""
    name: FARMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FARMUSDT(NamedTuple):
    """
        name: FARMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FARMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FARMUSDT"

    def __str__(self):
        return "FARMUSDT"

    def __call__(self):
        return "FARMUSDT"


FARMUSDT = FARMUSDT()
"""
    name: FARMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETBNB(NamedTuple):
    """
        name: FETBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FETBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETBNB"

    def __str__(self):
        return "FETBNB"

    def __call__(self):
        return "FETBNB"


FETBNB = FETBNB()
"""
    name: FETBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETBTC(NamedTuple):
    """
        name: FETBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FETBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETBTC"

    def __str__(self):
        return "FETBTC"

    def __call__(self):
        return "FETBTC"


FETBTC = FETBTC()
"""
    name: FETBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETBUSD(NamedTuple):
    """
        name: FETBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FETBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETBUSD"

    def __str__(self):
        return "FETBUSD"

    def __call__(self):
        return "FETBUSD"


FETBUSD = FETBUSD()
"""
    name: FETBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETTRY(NamedTuple):
    """
        name: FETTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FETTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETTRY"

    def __str__(self):
        return "FETTRY"

    def __call__(self):
        return "FETTRY"


FETTRY = FETTRY()
"""
    name: FETTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FETUSDT(NamedTuple):
    """
        name: FETUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FETUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FETUSDT"

    def __str__(self):
        return "FETUSDT"

    def __call__(self):
        return "FETUSDT"


FETUSDT = FETUSDT()
"""
    name: FETUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FIDABNB(NamedTuple):
    """
        name: FIDABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIDABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDABNB"

    def __str__(self):
        return "FIDABNB"

    def __call__(self):
        return "FIDABNB"


FIDABNB = FIDABNB()
"""
    name: FIDABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIDABTC(NamedTuple):
    """
        name: FIDABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIDABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDABTC"

    def __str__(self):
        return "FIDABTC"

    def __call__(self):
        return "FIDABTC"


FIDABTC = FIDABTC()
"""
    name: FIDABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIDABUSD(NamedTuple):
    """
        name: FIDABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FIDABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDABUSD"

    def __str__(self):
        return "FIDABUSD"

    def __call__(self):
        return "FIDABUSD"


FIDABUSD = FIDABUSD()
"""
    name: FIDABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FIDAUSDT(NamedTuple):
    """
        name: FIDAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FIDAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDAUSDT"

    def __str__(self):
        return "FIDAUSDT"

    def __call__(self):
        return "FIDAUSDT"


FIDAUSDT = FIDAUSDT()
"""
    name: FIDAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FILBNB(NamedTuple):
    """
        name: FILBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILBNB"

    def __str__(self):
        return "FILBNB"

    def __call__(self):
        return "FILBNB"


FILBNB = FILBNB()
"""
    name: FILBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILBTC(NamedTuple):
    """
        name: FILBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FILBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILBTC"

    def __str__(self):
        return "FILBTC"

    def __call__(self):
        return "FILBTC"


FILBTC = FILBTC()
"""
    name: FILBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FILBUSD(NamedTuple):
    """
        name: FILBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FILBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILBUSD"

    def __str__(self):
        return "FILBUSD"

    def __call__(self):
        return "FILBUSD"


FILBUSD = FILBUSD()
"""
    name: FILBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FILDOWNUSDT(NamedTuple):
    """
        name: FILDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILDOWNUSDT"

    def __str__(self):
        return "FILDOWNUSDT"

    def __call__(self):
        return "FILDOWNUSDT"


FILDOWNUSDT = FILDOWNUSDT()
"""
    name: FILDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILETH(NamedTuple):
    """
        name: FILETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILETH"

    def __str__(self):
        return "FILETH"

    def __call__(self):
        return "FILETH"


FILETH = FILETH()
"""
    name: FILETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILTRY(NamedTuple):
    """
        name: FILTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILTRY"

    def __str__(self):
        return "FILTRY"

    def __call__(self):
        return "FILTRY"


FILTRY = FILTRY()
"""
    name: FILTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILUPUSDT(NamedTuple):
    """
        name: FILUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FILUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILUPUSDT"

    def __str__(self):
        return "FILUPUSDT"

    def __call__(self):
        return "FILUPUSDT"


FILUPUSDT = FILUPUSDT()
"""
    name: FILUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FILUSDT(NamedTuple):
    """
        name: FILUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FILUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FILUSDT"

    def __str__(self):
        return "FILUSDT"

    def __call__(self):
        return "FILUSDT"


FILUSDT = FILUSDT()
"""
    name: FILUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FIOBNB(NamedTuple):
    """
        name: FIOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIOBNB"

    def __str__(self):
        return "FIOBNB"

    def __call__(self):
        return "FIOBNB"


FIOBNB = FIOBNB()
"""
    name: FIOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIOBTC(NamedTuple):
    """
        name: FIOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIOBTC"

    def __str__(self):
        return "FIOBTC"

    def __call__(self):
        return "FIOBTC"


FIOBTC = FIOBTC()
"""
    name: FIOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIOBUSD(NamedTuple):
    """
        name: FIOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIOBUSD"

    def __str__(self):
        return "FIOBUSD"

    def __call__(self):
        return "FIOBUSD"


FIOBUSD = FIOBUSD()
"""
    name: FIOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIOUSDT(NamedTuple):
    """
        name: FIOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIOUSDT"

    def __str__(self):
        return "FIOUSDT"

    def __call__(self):
        return "FIOUSDT"


FIOUSDT = FIOUSDT()
"""
    name: FIOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIROBTC(NamedTuple):
    """
        name: FIROBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIROBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIROBTC"

    def __str__(self):
        return "FIROBTC"

    def __call__(self):
        return "FIROBTC"


FIROBTC = FIROBTC()
"""
    name: FIROBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIROBUSD(NamedTuple):
    """
        name: FIROBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIROBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIROBUSD"

    def __str__(self):
        return "FIROBUSD"

    def __call__(self):
        return "FIROBUSD"


FIROBUSD = FIROBUSD()
"""
    name: FIROBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIROETH(NamedTuple):
    """
        name: FIROETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIROETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIROETH"

    def __str__(self):
        return "FIROETH"

    def __call__(self):
        return "FIROETH"


FIROETH = FIROETH()
"""
    name: FIROETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FIROUSDT(NamedTuple):
    """
        name: FIROUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FIROUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIROUSDT"

    def __str__(self):
        return "FIROUSDT"

    def __call__(self):
        return "FIROUSDT"


FIROUSDT = FIROUSDT()
"""
    name: FIROUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISBIDR(NamedTuple):
    """
        name: FISBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "FISBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISBIDR"

    def __str__(self):
        return "FISBIDR"

    def __call__(self):
        return "FISBIDR"


FISBIDR = FISBIDR()
"""
    name: FISBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class FISBRL(NamedTuple):
    """
        name: FISBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISBRL"

    def __str__(self):
        return "FISBRL"

    def __call__(self):
        return "FISBRL"


FISBRL = FISBRL()
"""
    name: FISBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISBTC(NamedTuple):
    """
        name: FISBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISBTC"

    def __str__(self):
        return "FISBTC"

    def __call__(self):
        return "FISBTC"


FISBTC = FISBTC()
"""
    name: FISBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISBUSD(NamedTuple):
    """
        name: FISBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISBUSD"

    def __str__(self):
        return "FISBUSD"

    def __call__(self):
        return "FISBUSD"


FISBUSD = FISBUSD()
"""
    name: FISBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISTRY(NamedTuple):
    """
        name: FISTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISTRY"

    def __str__(self):
        return "FISTRY"

    def __call__(self):
        return "FISTRY"


FISTRY = FISTRY()
"""
    name: FISTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FISUSDT(NamedTuple):
    """
        name: FISUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FISUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FISUSDT"

    def __str__(self):
        return "FISUSDT"

    def __call__(self):
        return "FISUSDT"


FISUSDT = FISUSDT()
"""
    name: FISUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLMBNB(NamedTuple):
    """
        name: FLMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLMBNB"

    def __str__(self):
        return "FLMBNB"

    def __call__(self):
        return "FLMBNB"


FLMBNB = FLMBNB()
"""
    name: FLMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLMBTC(NamedTuple):
    """
        name: FLMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLMBTC"

    def __str__(self):
        return "FLMBTC"

    def __call__(self):
        return "FLMBTC"


FLMBTC = FLMBTC()
"""
    name: FLMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLMBUSD(NamedTuple):
    """
        name: FLMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLMBUSD"

    def __str__(self):
        return "FLMBUSD"

    def __call__(self):
        return "FLMBUSD"


FLMBUSD = FLMBUSD()
"""
    name: FLMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLMUSDT(NamedTuple):
    """
        name: FLMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLMUSDT"

    def __str__(self):
        return "FLMUSDT"

    def __call__(self):
        return "FLMUSDT"


FLMUSDT = FLMUSDT()
"""
    name: FLMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLOWBNB(NamedTuple):
    """
        name: FLOWBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLOWBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOWBNB"

    def __str__(self):
        return "FLOWBNB"

    def __call__(self):
        return "FLOWBNB"


FLOWBNB = FLOWBNB()
"""
    name: FLOWBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLOWBTC(NamedTuple):
    """
        name: FLOWBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLOWBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOWBTC"

    def __str__(self):
        return "FLOWBTC"

    def __call__(self):
        return "FLOWBTC"


FLOWBTC = FLOWBTC()
"""
    name: FLOWBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FLOWBUSD(NamedTuple):
    """
        name: FLOWBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLOWBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOWBUSD"

    def __str__(self):
        return "FLOWBUSD"

    def __call__(self):
        return "FLOWBUSD"


FLOWBUSD = FLOWBUSD()
"""
    name: FLOWBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FLOWUSDT(NamedTuple):
    """
        name: FLOWUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLOWUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOWUSDT"

    def __str__(self):
        return "FLOWUSDT"

    def __call__(self):
        return "FLOWUSDT"


FLOWUSDT = FLOWUSDT()
"""
    name: FLOWUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FLUXBTC(NamedTuple):
    """
        name: FLUXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FLUXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUXBTC"

    def __str__(self):
        return "FLUXBTC"

    def __call__(self):
        return "FLUXBTC"


FLUXBTC = FLUXBTC()
"""
    name: FLUXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FLUXBUSD(NamedTuple):
    """
        name: FLUXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLUXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUXBUSD"

    def __str__(self):
        return "FLUXBUSD"

    def __call__(self):
        return "FLUXBUSD"


FLUXBUSD = FLUXBUSD()
"""
    name: FLUXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FLUXUSDT(NamedTuple):
    """
        name: FLUXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FLUXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUXUSDT"

    def __str__(self):
        return "FLUXUSDT"

    def __call__(self):
        return "FLUXUSDT"


FLUXUSDT = FLUXUSDT()
"""
    name: FLUXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FORBNB(NamedTuple):
    """
        name: FORBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORBNB"

    def __str__(self):
        return "FORBNB"

    def __call__(self):
        return "FORBNB"


FORBNB = FORBNB()
"""
    name: FORBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORBTC(NamedTuple):
    """
        name: FORBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORBTC"

    def __str__(self):
        return "FORBTC"

    def __call__(self):
        return "FORBTC"


FORBTC = FORBTC()
"""
    name: FORBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORBUSD(NamedTuple):
    """
        name: FORBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORBUSD"

    def __str__(self):
        return "FORBUSD"

    def __call__(self):
        return "FORBUSD"


FORBUSD = FORBUSD()
"""
    name: FORBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORTHBTC(NamedTuple):
    """
        name: FORTHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORTHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORTHBTC"

    def __str__(self):
        return "FORTHBTC"

    def __call__(self):
        return "FORTHBTC"


FORTHBTC = FORTHBTC()
"""
    name: FORTHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORTHBUSD(NamedTuple):
    """
        name: FORTHBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORTHBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORTHBUSD"

    def __str__(self):
        return "FORTHBUSD"

    def __call__(self):
        return "FORTHBUSD"


FORTHBUSD = FORTHBUSD()
"""
    name: FORTHBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORTHUSDT(NamedTuple):
    """
        name: FORTHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORTHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORTHUSDT"

    def __str__(self):
        return "FORTHUSDT"

    def __call__(self):
        return "FORTHUSDT"


FORTHUSDT = FORTHUSDT()
"""
    name: FORTHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FORUSDT(NamedTuple):
    """
        name: FORUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FORUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORUSDT"

    def __str__(self):
        return "FORUSDT"

    def __call__(self):
        return "FORUSDT"


FORUSDT = FORUSDT()
"""
    name: FORUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FRONTBTC(NamedTuple):
    """
        name: FRONTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FRONTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONTBTC"

    def __str__(self):
        return "FRONTBTC"

    def __call__(self):
        return "FRONTBTC"


FRONTBTC = FRONTBTC()
"""
    name: FRONTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FRONTBUSD(NamedTuple):
    """
        name: FRONTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FRONTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONTBUSD"

    def __str__(self):
        return "FRONTBUSD"

    def __call__(self):
        return "FRONTBUSD"


FRONTBUSD = FRONTBUSD()
"""
    name: FRONTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FRONTETH(NamedTuple):
    """
        name: FRONTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FRONTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONTETH"

    def __str__(self):
        return "FRONTETH"

    def __call__(self):
        return "FRONTETH"


FRONTETH = FRONTETH()
"""
    name: FRONTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FRONTUSDT(NamedTuple):
    """
        name: FRONTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FRONTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONTUSDT"

    def __str__(self):
        return "FRONTUSDT"

    def __call__(self):
        return "FRONTUSDT"


FRONTUSDT = FRONTUSDT()
"""
    name: FRONTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMAUD(NamedTuple):
    """
        name: FTMAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMAUD"

    def __str__(self):
        return "FTMAUD"

    def __call__(self):
        return "FTMAUD"


FTMAUD = FTMAUD()
"""
    name: FTMAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMBIDR(NamedTuple):
    """
        name: FTMBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "FTMBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBIDR"

    def __str__(self):
        return "FTMBIDR"

    def __call__(self):
        return "FTMBIDR"


FTMBIDR = FTMBIDR()
"""
    name: FTMBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class FTMBNB(NamedTuple):
    """
        name: FTMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBNB"

    def __str__(self):
        return "FTMBNB"

    def __call__(self):
        return "FTMBNB"


FTMBNB = FTMBNB()
"""
    name: FTMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMBRL(NamedTuple):
    """
        name: FTMBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBRL"

    def __str__(self):
        return "FTMBRL"

    def __call__(self):
        return "FTMBRL"


FTMBRL = FTMBRL()
"""
    name: FTMBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMBTC(NamedTuple):
    """
        name: FTMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FTMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBTC"

    def __str__(self):
        return "FTMBTC"

    def __call__(self):
        return "FTMBTC"


FTMBTC = FTMBTC()
"""
    name: FTMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FTMBUSD(NamedTuple):
    """
        name: FTMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FTMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMBUSD"

    def __str__(self):
        return "FTMBUSD"

    def __call__(self):
        return "FTMBUSD"


FTMBUSD = FTMBUSD()
"""
    name: FTMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FTMETH(NamedTuple):
    """
        name: FTMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMETH"

    def __str__(self):
        return "FTMETH"

    def __call__(self):
        return "FTMETH"


FTMETH = FTMETH()
"""
    name: FTMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMEUR(NamedTuple):
    """
        name: FTMEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMEUR"

    def __str__(self):
        return "FTMEUR"

    def __call__(self):
        return "FTMEUR"


FTMEUR = FTMEUR()
"""
    name: FTMEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMPAX(NamedTuple):
    """
        name: FTMPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMPAX"

    def __str__(self):
        return "FTMPAX"

    def __call__(self):
        return "FTMPAX"


FTMPAX = FTMPAX()
"""
    name: FTMPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMRUB(NamedTuple):
    """
        name: FTMRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMRUB"

    def __str__(self):
        return "FTMRUB"

    def __call__(self):
        return "FTMRUB"


FTMRUB = FTMRUB()
"""
    name: FTMRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMTRY(NamedTuple):
    """
        name: FTMTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMTRY"

    def __str__(self):
        return "FTMTRY"

    def __call__(self):
        return "FTMTRY"


FTMTRY = FTMTRY()
"""
    name: FTMTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMTUSD(NamedTuple):
    """
        name: FTMTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMTUSD"

    def __str__(self):
        return "FTMTUSD"

    def __call__(self):
        return "FTMTUSD"


FTMTUSD = FTMTUSD()
"""
    name: FTMTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMUSDC(NamedTuple):
    """
        name: FTMUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTMUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMUSDC"

    def __str__(self):
        return "FTMUSDC"

    def __call__(self):
        return "FTMUSDC"


FTMUSDC = FTMUSDC()
"""
    name: FTMUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTMUSDT(NamedTuple):
    """
        name: FTMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FTMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTMUSDT"

    def __str__(self):
        return "FTMUSDT"

    def __call__(self):
        return "FTMUSDT"


FTMUSDT = FTMUSDT()
"""
    name: FTMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class FTTBNB(NamedTuple):
    """
        name: FTTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTBNB"

    def __str__(self):
        return "FTTBNB"

    def __call__(self):
        return "FTTBNB"


FTTBNB = FTTBNB()
"""
    name: FTTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTTBTC(NamedTuple):
    """
        name: FTTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTBTC"

    def __str__(self):
        return "FTTBTC"

    def __call__(self):
        return "FTTBTC"


FTTBTC = FTTBTC()
"""
    name: FTTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTTBUSD(NamedTuple):
    """
        name: FTTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTBUSD"

    def __str__(self):
        return "FTTBUSD"

    def __call__(self):
        return "FTTBUSD"


FTTBUSD = FTTBUSD()
"""
    name: FTTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTTETH(NamedTuple):
    """
        name: FTTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTETH"

    def __str__(self):
        return "FTTETH"

    def __call__(self):
        return "FTTETH"


FTTETH = FTTETH()
"""
    name: FTTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FTTUSDT(NamedTuple):
    """
        name: FTTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FTTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTTUSDT"

    def __str__(self):
        return "FTTUSDT"

    def __call__(self):
        return "FTTUSDT"


FTTUSDT = FTTUSDT()
"""
    name: FTTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUELBTC(NamedTuple):
    """
        name: FUELBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUELBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUELBTC"

    def __str__(self):
        return "FUELBTC"

    def __call__(self):
        return "FUELBTC"


FUELBTC = FUELBTC()
"""
    name: FUELBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUELETH(NamedTuple):
    """
        name: FUELETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUELETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUELETH"

    def __str__(self):
        return "FUELETH"

    def __call__(self):
        return "FUELETH"


FUELETH = FUELETH()
"""
    name: FUELETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUNBNB(NamedTuple):
    """
        name: FUNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUNBNB"

    def __str__(self):
        return "FUNBNB"

    def __call__(self):
        return "FUNBNB"


FUNBNB = FUNBNB()
"""
    name: FUNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUNBTC(NamedTuple):
    """
        name: FUNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUNBTC"

    def __str__(self):
        return "FUNBTC"

    def __call__(self):
        return "FUNBTC"


FUNBTC = FUNBTC()
"""
    name: FUNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUNETH(NamedTuple):
    """
        name: FUNETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUNETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUNETH"

    def __str__(self):
        return "FUNETH"

    def __call__(self):
        return "FUNETH"


FUNETH = FUNETH()
"""
    name: FUNETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FUNUSDT(NamedTuple):
    """
        name: FUNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FUNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FUNUSDT"

    def __str__(self):
        return "FUNUSDT"

    def __call__(self):
        return "FUNUSDT"


FUNUSDT = FUNUSDT()
"""
    name: FUNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FXSBTC(NamedTuple):
    """
        name: FXSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FXSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXSBTC"

    def __str__(self):
        return "FXSBTC"

    def __call__(self):
        return "FXSBTC"


FXSBTC = FXSBTC()
"""
    name: FXSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FXSBUSD(NamedTuple):
    """
        name: FXSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "FXSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXSBUSD"

    def __str__(self):
        return "FXSBUSD"

    def __call__(self):
        return "FXSBUSD"


FXSBUSD = FXSBUSD()
"""
    name: FXSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class FXSUSDT(NamedTuple):
    """
        name: FXSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "FXSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXSUSDT"

    def __str__(self):
        return "FXSUSDT"

    def __call__(self):
        return "FXSUSDT"


FXSUSDT = FXSUSDT()
"""
    name: FXSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALAAUD(NamedTuple):
    """
        name: GALAAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALAAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAAUD"

    def __str__(self):
        return "GALAAUD"

    def __call__(self):
        return "GALAAUD"


GALAAUD = GALAAUD()
"""
    name: GALAAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALABNB(NamedTuple):
    """
        name: GALABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALABNB"

    def __str__(self):
        return "GALABNB"

    def __call__(self):
        return "GALABNB"


GALABNB = GALABNB()
"""
    name: GALABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALABRL(NamedTuple):
    """
        name: GALABRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALABRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALABRL"

    def __str__(self):
        return "GALABRL"

    def __call__(self):
        return "GALABRL"


GALABRL = GALABRL()
"""
    name: GALABRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALABTC(NamedTuple):
    """
        name: GALABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALABTC"

    def __str__(self):
        return "GALABTC"

    def __call__(self):
        return "GALABTC"


GALABTC = GALABTC()
"""
    name: GALABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALABUSD(NamedTuple):
    """
        name: GALABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALABUSD"

    def __str__(self):
        return "GALABUSD"

    def __call__(self):
        return "GALABUSD"


GALABUSD = GALABUSD()
"""
    name: GALABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALAETH(NamedTuple):
    """
        name: GALAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAETH"

    def __str__(self):
        return "GALAETH"

    def __call__(self):
        return "GALAETH"


GALAETH = GALAETH()
"""
    name: GALAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALAEUR(NamedTuple):
    """
        name: GALAEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALAEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAEUR"

    def __str__(self):
        return "GALAEUR"

    def __call__(self):
        return "GALAEUR"


GALAEUR = GALAEUR()
"""
    name: GALAEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALATRY(NamedTuple):
    """
        name: GALATRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALATRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALATRY"

    def __str__(self):
        return "GALATRY"

    def __call__(self):
        return "GALATRY"


GALATRY = GALATRY()
"""
    name: GALATRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALAUSDT(NamedTuple):
    """
        name: GALAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAUSDT"

    def __str__(self):
        return "GALAUSDT"

    def __call__(self):
        return "GALAUSDT"


GALAUSDT = GALAUSDT()
"""
    name: GALAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALBNB(NamedTuple):
    """
        name: GALBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALBNB"

    def __str__(self):
        return "GALBNB"

    def __call__(self):
        return "GALBNB"


GALBNB = GALBNB()
"""
    name: GALBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALBRL(NamedTuple):
    """
        name: GALBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALBRL"

    def __str__(self):
        return "GALBRL"

    def __call__(self):
        return "GALBRL"


GALBRL = GALBRL()
"""
    name: GALBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALBTC(NamedTuple):
    """
        name: GALBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALBTC"

    def __str__(self):
        return "GALBTC"

    def __call__(self):
        return "GALBTC"


GALBTC = GALBTC()
"""
    name: GALBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALBUSD(NamedTuple):
    """
        name: GALBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALBUSD"

    def __str__(self):
        return "GALBUSD"

    def __call__(self):
        return "GALBUSD"


GALBUSD = GALBUSD()
"""
    name: GALBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GALETH(NamedTuple):
    """
        name: GALETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALETH"

    def __str__(self):
        return "GALETH"

    def __call__(self):
        return "GALETH"


GALETH = GALETH()
"""
    name: GALETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALEUR(NamedTuple):
    """
        name: GALEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALEUR"

    def __str__(self):
        return "GALEUR"

    def __call__(self):
        return "GALEUR"


GALEUR = GALEUR()
"""
    name: GALEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALTRY(NamedTuple):
    """
        name: GALTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GALTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALTRY"

    def __str__(self):
        return "GALTRY"

    def __call__(self):
        return "GALTRY"


GALTRY = GALTRY()
"""
    name: GALTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GALUSDT(NamedTuple):
    """
        name: GALUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GALUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALUSDT"

    def __str__(self):
        return "GALUSDT"

    def __call__(self):
        return "GALUSDT"


GALUSDT = GALUSDT()
"""
    name: GALUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GASBTC(NamedTuple):
    """
        name: GASBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GASBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GASBTC"

    def __str__(self):
        return "GASBTC"

    def __call__(self):
        return "GASBTC"


GASBTC = GASBTC()
"""
    name: GASBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GASBUSD(NamedTuple):
    """
        name: GASBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GASBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GASBUSD"

    def __str__(self):
        return "GASBUSD"

    def __call__(self):
        return "GASBUSD"


GASBUSD = GASBUSD()
"""
    name: GASBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GASUSDT(NamedTuple):
    """
        name: GASUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GASUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GASUSDT"

    def __str__(self):
        return "GASUSDT"

    def __call__(self):
        return "GASUSDT"


GASUSDT = GASUSDT()
"""
    name: GASUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GBPBUSD(NamedTuple):
    """
        name: GBPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GBPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GBPBUSD"

    def __str__(self):
        return "GBPBUSD"

    def __call__(self):
        return "GBPBUSD"


GBPBUSD = GBPBUSD()
"""
    name: GBPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GBPUSDT(NamedTuple):
    """
        name: GBPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GBPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GBPUSDT"

    def __str__(self):
        return "GBPUSDT"

    def __call__(self):
        return "GBPUSDT"


GBPUSDT = GBPUSDT()
"""
    name: GBPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GFTBUSD(NamedTuple):
    """
        name: GFTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GFTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GFTBUSD"

    def __str__(self):
        return "GFTBUSD"

    def __call__(self):
        return "GFTBUSD"


GFTBUSD = GFTBUSD()
"""
    name: GFTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GHSTBUSD(NamedTuple):
    """
        name: GHSTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GHSTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GHSTBUSD"

    def __str__(self):
        return "GHSTBUSD"

    def __call__(self):
        return "GHSTBUSD"


GHSTBUSD = GHSTBUSD()
"""
    name: GHSTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GHSTETH(NamedTuple):
    """
        name: GHSTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GHSTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GHSTETH"

    def __str__(self):
        return "GHSTETH"

    def __call__(self):
        return "GHSTETH"


GHSTETH = GHSTETH()
"""
    name: GHSTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GHSTUSDT(NamedTuple):
    """
        name: GHSTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GHSTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GHSTUSDT"

    def __str__(self):
        return "GHSTUSDT"

    def __call__(self):
        return "GHSTUSDT"


GHSTUSDT = GHSTUSDT()
"""
    name: GHSTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GLMBTC(NamedTuple):
    """
        name: GLMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GLMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMBTC"

    def __str__(self):
        return "GLMBTC"

    def __call__(self):
        return "GLMBTC"


GLMBTC = GLMBTC()
"""
    name: GLMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GLMBUSD(NamedTuple):
    """
        name: GLMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GLMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMBUSD"

    def __str__(self):
        return "GLMBUSD"

    def __call__(self):
        return "GLMBUSD"


GLMBUSD = GLMBUSD()
"""
    name: GLMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GLMETH(NamedTuple):
    """
        name: GLMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GLMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMETH"

    def __str__(self):
        return "GLMETH"

    def __call__(self):
        return "GLMETH"


GLMETH = GLMETH()
"""
    name: GLMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GLMRBNB(NamedTuple):
    """
        name: GLMRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GLMRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMRBNB"

    def __str__(self):
        return "GLMRBNB"

    def __call__(self):
        return "GLMRBNB"


GLMRBNB = GLMRBNB()
"""
    name: GLMRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GLMRBTC(NamedTuple):
    """
        name: GLMRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GLMRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMRBTC"

    def __str__(self):
        return "GLMRBTC"

    def __call__(self):
        return "GLMRBTC"


GLMRBTC = GLMRBTC()
"""
    name: GLMRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GLMRBUSD(NamedTuple):
    """
        name: GLMRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GLMRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMRBUSD"

    def __str__(self):
        return "GLMRBUSD"

    def __call__(self):
        return "GLMRBUSD"


GLMRBUSD = GLMRBUSD()
"""
    name: GLMRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GLMRUSDT(NamedTuple):
    """
        name: GLMRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GLMRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMRUSDT"

    def __str__(self):
        return "GLMRUSDT"

    def __call__(self):
        return "GLMRUSDT"


GLMRUSDT = GLMRUSDT()
"""
    name: GLMRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GLMUSDT(NamedTuple):
    """
        name: GLMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GLMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMUSDT"

    def __str__(self):
        return "GLMUSDT"

    def __call__(self):
        return "GLMUSDT"


GLMUSDT = GLMUSDT()
"""
    name: GLMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTAUD(NamedTuple):
    """
        name: GMTAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTAUD"

    def __str__(self):
        return "GMTAUD"

    def __call__(self):
        return "GMTAUD"


GMTAUD = GMTAUD()
"""
    name: GMTAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTBNB(NamedTuple):
    """
        name: GMTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTBNB"

    def __str__(self):
        return "GMTBNB"

    def __call__(self):
        return "GMTBNB"


GMTBNB = GMTBNB()
"""
    name: GMTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTBRL(NamedTuple):
    """
        name: GMTBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTBRL"

    def __str__(self):
        return "GMTBRL"

    def __call__(self):
        return "GMTBRL"


GMTBRL = GMTBRL()
"""
    name: GMTBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTBTC(NamedTuple):
    """
        name: GMTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTBTC"

    def __str__(self):
        return "GMTBTC"

    def __call__(self):
        return "GMTBTC"


GMTBTC = GMTBTC()
"""
    name: GMTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTBUSD(NamedTuple):
    """
        name: GMTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GMTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTBUSD"

    def __str__(self):
        return "GMTBUSD"

    def __call__(self):
        return "GMTBUSD"


GMTBUSD = GMTBUSD()
"""
    name: GMTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GMTETH(NamedTuple):
    """
        name: GMTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTETH"

    def __str__(self):
        return "GMTETH"

    def __call__(self):
        return "GMTETH"


GMTETH = GMTETH()
"""
    name: GMTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTEUR(NamedTuple):
    """
        name: GMTEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTEUR"

    def __str__(self):
        return "GMTEUR"

    def __call__(self):
        return "GMTEUR"


GMTEUR = GMTEUR()
"""
    name: GMTEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTGBP(NamedTuple):
    """
        name: GMTGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTGBP"

    def __str__(self):
        return "GMTGBP"

    def __call__(self):
        return "GMTGBP"


GMTGBP = GMTGBP()
"""
    name: GMTGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTTRY(NamedTuple):
    """
        name: GMTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTTRY"

    def __str__(self):
        return "GMTTRY"

    def __call__(self):
        return "GMTTRY"


GMTTRY = GMTTRY()
"""
    name: GMTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMTUSDT(NamedTuple):
    """
        name: GMTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GMTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMTUSDT"

    def __str__(self):
        return "GMTUSDT"

    def __call__(self):
        return "GMTUSDT"


GMTUSDT = GMTUSDT()
"""
    name: GMTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GMXBTC(NamedTuple):
    """
        name: GMXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GMXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMXBTC"

    def __str__(self):
        return "GMXBTC"

    def __call__(self):
        return "GMXBTC"


GMXBTC = GMXBTC()
"""
    name: GMXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GMXBUSD(NamedTuple):
    """
        name: GMXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GMXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMXBUSD"

    def __str__(self):
        return "GMXBUSD"

    def __call__(self):
        return "GMXBUSD"


GMXBUSD = GMXBUSD()
"""
    name: GMXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GMXUSDT(NamedTuple):
    """
        name: GMXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GMXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMXUSDT"

    def __str__(self):
        return "GMXUSDT"

    def __call__(self):
        return "GMXUSDT"


GMXUSDT = GMXUSDT()
"""
    name: GMXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GNOBNB(NamedTuple):
    """
        name: GNOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNOBNB"

    def __str__(self):
        return "GNOBNB"

    def __call__(self):
        return "GNOBNB"


GNOBNB = GNOBNB()
"""
    name: GNOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNOBTC(NamedTuple):
    """
        name: GNOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNOBTC"

    def __str__(self):
        return "GNOBTC"

    def __call__(self):
        return "GNOBTC"


GNOBTC = GNOBTC()
"""
    name: GNOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNOBUSD(NamedTuple):
    """
        name: GNOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNOBUSD"

    def __str__(self):
        return "GNOBUSD"

    def __call__(self):
        return "GNOBUSD"


GNOBUSD = GNOBUSD()
"""
    name: GNOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNOUSDT(NamedTuple):
    """
        name: GNOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNOUSDT"

    def __str__(self):
        return "GNOUSDT"

    def __call__(self):
        return "GNOUSDT"


GNOUSDT = GNOUSDT()
"""
    name: GNOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNSBTC(NamedTuple):
    """
        name: GNSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GNSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNSBTC"

    def __str__(self):
        return "GNSBTC"

    def __call__(self):
        return "GNSBTC"


GNSBTC = GNSBTC()
"""
    name: GNSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GNSUSDT(NamedTuple):
    """
        name: GNSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GNSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNSUSDT"

    def __str__(self):
        return "GNSUSDT"

    def __call__(self):
        return "GNSUSDT"


GNSUSDT = GNSUSDT()
"""
    name: GNSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GNTBNB(NamedTuple):
    """
        name: GNTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNTBNB"

    def __str__(self):
        return "GNTBNB"

    def __call__(self):
        return "GNTBNB"


GNTBNB = GNTBNB()
"""
    name: GNTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNTBTC(NamedTuple):
    """
        name: GNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNTBTC"

    def __str__(self):
        return "GNTBTC"

    def __call__(self):
        return "GNTBTC"


GNTBTC = GNTBTC()
"""
    name: GNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GNTETH(NamedTuple):
    """
        name: GNTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GNTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNTETH"

    def __str__(self):
        return "GNTETH"

    def __call__(self):
        return "GNTETH"


GNTETH = GNTETH()
"""
    name: GNTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GOBNB(NamedTuple):
    """
        name: GOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOBNB"

    def __str__(self):
        return "GOBNB"

    def __call__(self):
        return "GOBNB"


GOBNB = GOBNB()
"""
    name: GOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GOBTC(NamedTuple):
    """
        name: GOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOBTC"

    def __str__(self):
        return "GOBTC"

    def __call__(self):
        return "GOBTC"


GOBTC = GOBTC()
"""
    name: GOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRSBTC(NamedTuple):
    """
        name: GRSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GRSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRSBTC"

    def __str__(self):
        return "GRSBTC"

    def __call__(self):
        return "GRSBTC"


GRSBTC = GRSBTC()
"""
    name: GRSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRSETH(NamedTuple):
    """
        name: GRSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GRSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRSETH"

    def __str__(self):
        return "GRSETH"

    def __call__(self):
        return "GRSETH"


GRSETH = GRSETH()
"""
    name: GRSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRTBTC(NamedTuple):
    """
        name: GRTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GRTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTBTC"

    def __str__(self):
        return "GRTBTC"

    def __call__(self):
        return "GRTBTC"


GRTBTC = GRTBTC()
"""
    name: GRTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GRTBUSD(NamedTuple):
    """
        name: GRTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GRTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTBUSD"

    def __str__(self):
        return "GRTBUSD"

    def __call__(self):
        return "GRTBUSD"


GRTBUSD = GRTBUSD()
"""
    name: GRTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GRTETH(NamedTuple):
    """
        name: GRTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GRTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTETH"

    def __str__(self):
        return "GRTETH"

    def __call__(self):
        return "GRTETH"


GRTETH = GRTETH()
"""
    name: GRTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GRTEUR(NamedTuple):
    """
        name: GRTEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GRTEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTEUR"

    def __str__(self):
        return "GRTEUR"

    def __call__(self):
        return "GRTEUR"


GRTEUR = GRTEUR()
"""
    name: GRTEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRTTRY(NamedTuple):
    """
        name: GRTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GRTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTTRY"

    def __str__(self):
        return "GRTTRY"

    def __call__(self):
        return "GRTTRY"


GRTTRY = GRTTRY()
"""
    name: GRTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GRTUSDT(NamedTuple):
    """
        name: GRTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GRTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRTUSDT"

    def __str__(self):
        return "GRTUSDT"

    def __call__(self):
        return "GRTUSDT"


GRTUSDT = GRTUSDT()
"""
    name: GRTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GTCBNB(NamedTuple):
    """
        name: GTCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTCBNB"

    def __str__(self):
        return "GTCBNB"

    def __call__(self):
        return "GTCBNB"


GTCBNB = GTCBNB()
"""
    name: GTCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTCBTC(NamedTuple):
    """
        name: GTCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GTCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTCBTC"

    def __str__(self):
        return "GTCBTC"

    def __call__(self):
        return "GTCBTC"


GTCBTC = GTCBTC()
"""
    name: GTCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GTCBUSD(NamedTuple):
    """
        name: GTCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GTCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTCBUSD"

    def __str__(self):
        return "GTCBUSD"

    def __call__(self):
        return "GTCBUSD"


GTCBUSD = GTCBUSD()
"""
    name: GTCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GTCUSDT(NamedTuple):
    """
        name: GTCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "GTCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTCUSDT"

    def __str__(self):
        return "GTCUSDT"

    def __call__(self):
        return "GTCUSDT"


GTCUSDT = GTCUSDT()
"""
    name: GTCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class GTOBNB(NamedTuple):
    """
        name: GTOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOBNB"

    def __str__(self):
        return "GTOBNB"

    def __call__(self):
        return "GTOBNB"


GTOBNB = GTOBNB()
"""
    name: GTOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOBTC(NamedTuple):
    """
        name: GTOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOBTC"

    def __str__(self):
        return "GTOBTC"

    def __call__(self):
        return "GTOBTC"


GTOBTC = GTOBTC()
"""
    name: GTOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOBUSD(NamedTuple):
    """
        name: GTOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOBUSD"

    def __str__(self):
        return "GTOBUSD"

    def __call__(self):
        return "GTOBUSD"


GTOBUSD = GTOBUSD()
"""
    name: GTOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOETH(NamedTuple):
    """
        name: GTOETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOETH"

    def __str__(self):
        return "GTOETH"

    def __call__(self):
        return "GTOETH"


GTOETH = GTOETH()
"""
    name: GTOETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOPAX(NamedTuple):
    """
        name: GTOPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOPAX"

    def __str__(self):
        return "GTOPAX"

    def __call__(self):
        return "GTOPAX"


GTOPAX = GTOPAX()
"""
    name: GTOPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOTUSD(NamedTuple):
    """
        name: GTOTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOTUSD"

    def __str__(self):
        return "GTOTUSD"

    def __call__(self):
        return "GTOTUSD"


GTOTUSD = GTOTUSD()
"""
    name: GTOTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOUSDC(NamedTuple):
    """
        name: GTOUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOUSDC"

    def __str__(self):
        return "GTOUSDC"

    def __call__(self):
        return "GTOUSDC"


GTOUSDC = GTOUSDC()
"""
    name: GTOUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GTOUSDT(NamedTuple):
    """
        name: GTOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GTOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTOUSDT"

    def __str__(self):
        return "GTOUSDT"

    def __call__(self):
        return "GTOUSDT"


GTOUSDT = GTOUSDT()
"""
    name: GTOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GVTBTC(NamedTuple):
    """
        name: GVTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GVTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GVTBTC"

    def __str__(self):
        return "GVTBTC"

    def __call__(self):
        return "GVTBTC"


GVTBTC = GVTBTC()
"""
    name: GVTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GVTETH(NamedTuple):
    """
        name: GVTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GVTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GVTETH"

    def __str__(self):
        return "GVTETH"

    def __call__(self):
        return "GVTETH"


GVTETH = GVTETH()
"""
    name: GVTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GXSBNB(NamedTuple):
    """
        name: GXSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GXSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GXSBNB"

    def __str__(self):
        return "GXSBNB"

    def __call__(self):
        return "GXSBNB"


GXSBNB = GXSBNB()
"""
    name: GXSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GXSBTC(NamedTuple):
    """
        name: GXSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GXSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GXSBTC"

    def __str__(self):
        return "GXSBTC"

    def __call__(self):
        return "GXSBTC"


GXSBTC = GXSBTC()
"""
    name: GXSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GXSETH(NamedTuple):
    """
        name: GXSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GXSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GXSETH"

    def __str__(self):
        return "GXSETH"

    def __call__(self):
        return "GXSETH"


GXSETH = GXSETH()
"""
    name: GXSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class GXSUSDT(NamedTuple):
    """
        name: GXSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "GXSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GXSUSDT"

    def __str__(self):
        return "GXSUSDT"

    def __call__(self):
        return "GXSUSDT"


GXSUSDT = GXSUSDT()
"""
    name: GXSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HARDBNB(NamedTuple):
    """
        name: HARDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HARDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARDBNB"

    def __str__(self):
        return "HARDBNB"

    def __call__(self):
        return "HARDBNB"


HARDBNB = HARDBNB()
"""
    name: HARDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HARDBTC(NamedTuple):
    """
        name: HARDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HARDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARDBTC"

    def __str__(self):
        return "HARDBTC"

    def __call__(self):
        return "HARDBTC"


HARDBTC = HARDBTC()
"""
    name: HARDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HARDBUSD(NamedTuple):
    """
        name: HARDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HARDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARDBUSD"

    def __str__(self):
        return "HARDBUSD"

    def __call__(self):
        return "HARDBUSD"


HARDBUSD = HARDBUSD()
"""
    name: HARDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HARDUSDT(NamedTuple):
    """
        name: HARDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HARDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARDUSDT"

    def __str__(self):
        return "HARDUSDT"

    def __call__(self):
        return "HARDUSDT"


HARDUSDT = HARDUSDT()
"""
    name: HARDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HBARBNB(NamedTuple):
    """
        name: HBARBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HBARBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBARBNB"

    def __str__(self):
        return "HBARBNB"

    def __call__(self):
        return "HBARBNB"


HBARBNB = HBARBNB()
"""
    name: HBARBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HBARBTC(NamedTuple):
    """
        name: HBARBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HBARBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBARBTC"

    def __str__(self):
        return "HBARBTC"

    def __call__(self):
        return "HBARBTC"


HBARBTC = HBARBTC()
"""
    name: HBARBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HBARBUSD(NamedTuple):
    """
        name: HBARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HBARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBARBUSD"

    def __str__(self):
        return "HBARBUSD"

    def __call__(self):
        return "HBARBUSD"


HBARBUSD = HBARBUSD()
"""
    name: HBARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HBARUSDT(NamedTuple):
    """
        name: HBARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HBARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBARUSDT"

    def __str__(self):
        return "HBARUSDT"

    def __call__(self):
        return "HBARUSDT"


HBARUSDT = HBARUSDT()
"""
    name: HBARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HCBTC(NamedTuple):
    """
        name: HCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HCBTC"

    def __str__(self):
        return "HCBTC"

    def __call__(self):
        return "HCBTC"


HCBTC = HCBTC()
"""
    name: HCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HCETH(NamedTuple):
    """
        name: HCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HCETH"

    def __str__(self):
        return "HCETH"

    def __call__(self):
        return "HCETH"


HCETH = HCETH()
"""
    name: HCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HCUSDT(NamedTuple):
    """
        name: HCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HCUSDT"

    def __str__(self):
        return "HCUSDT"

    def __call__(self):
        return "HCUSDT"


HCUSDT = HCUSDT()
"""
    name: HCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HEGICBUSD(NamedTuple):
    """
        name: HEGICBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HEGICBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEGICBUSD"

    def __str__(self):
        return "HEGICBUSD"

    def __call__(self):
        return "HEGICBUSD"


HEGICBUSD = HEGICBUSD()
"""
    name: HEGICBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HEGICETH(NamedTuple):
    """
        name: HEGICETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HEGICETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEGICETH"

    def __str__(self):
        return "HEGICETH"

    def __call__(self):
        return "HEGICETH"


HEGICETH = HEGICETH()
"""
    name: HEGICETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HFTBTC(NamedTuple):
    """
        name: HFTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HFTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFTBTC"

    def __str__(self):
        return "HFTBTC"

    def __call__(self):
        return "HFTBTC"


HFTBTC = HFTBTC()
"""
    name: HFTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HFTBUSD(NamedTuple):
    """
        name: HFTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HFTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFTBUSD"

    def __str__(self):
        return "HFTBUSD"

    def __call__(self):
        return "HFTBUSD"


HFTBUSD = HFTBUSD()
"""
    name: HFTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HFTUSDT(NamedTuple):
    """
        name: HFTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HFTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFTUSDT"

    def __str__(self):
        return "HFTUSDT"

    def __call__(self):
        return "HFTUSDT"


HFTUSDT = HFTUSDT()
"""
    name: HFTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HIFIETH(NamedTuple):
    """
        name: HIFIETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIFIETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFIETH"

    def __str__(self):
        return "HIFIETH"

    def __call__(self):
        return "HIFIETH"


HIFIETH = HIFIETH()
"""
    name: HIFIETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIFIUSDT(NamedTuple):
    """
        name: HIFIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIFIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFIUSDT"

    def __str__(self):
        return "HIFIUSDT"

    def __call__(self):
        return "HIFIUSDT"


HIFIUSDT = HIFIUSDT()
"""
    name: HIFIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIGHBNB(NamedTuple):
    """
        name: HIGHBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIGHBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGHBNB"

    def __str__(self):
        return "HIGHBNB"

    def __call__(self):
        return "HIGHBNB"


HIGHBNB = HIGHBNB()
"""
    name: HIGHBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIGHBTC(NamedTuple):
    """
        name: HIGHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIGHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGHBTC"

    def __str__(self):
        return "HIGHBTC"

    def __call__(self):
        return "HIGHBTC"


HIGHBTC = HIGHBTC()
"""
    name: HIGHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIGHBUSD(NamedTuple):
    """
        name: HIGHBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIGHBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGHBUSD"

    def __str__(self):
        return "HIGHBUSD"

    def __call__(self):
        return "HIGHBUSD"


HIGHBUSD = HIGHBUSD()
"""
    name: HIGHBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIGHUSDT(NamedTuple):
    """
        name: HIGHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HIGHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGHUSDT"

    def __str__(self):
        return "HIGHUSDT"

    def __call__(self):
        return "HIGHUSDT"


HIGHUSDT = HIGHUSDT()
"""
    name: HIGHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HIVEBNB(NamedTuple):
    """
        name: HIVEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HIVEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVEBNB"

    def __str__(self):
        return "HIVEBNB"

    def __call__(self):
        return "HIVEBNB"


HIVEBNB = HIVEBNB()
"""
    name: HIVEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HIVEBTC(NamedTuple):
    """
        name: HIVEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HIVEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVEBTC"

    def __str__(self):
        return "HIVEBTC"

    def __call__(self):
        return "HIVEBTC"


HIVEBTC = HIVEBTC()
"""
    name: HIVEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HIVEBUSD(NamedTuple):
    """
        name: HIVEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HIVEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVEBUSD"

    def __str__(self):
        return "HIVEBUSD"

    def __call__(self):
        return "HIVEBUSD"


HIVEBUSD = HIVEBUSD()
"""
    name: HIVEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HIVEUSDT(NamedTuple):
    """
        name: HIVEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HIVEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVEUSDT"

    def __str__(self):
        return "HIVEUSDT"

    def __call__(self):
        return "HIVEUSDT"


HIVEUSDT = HIVEUSDT()
"""
    name: HIVEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HNTBTC(NamedTuple):
    """
        name: HNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNTBTC"

    def __str__(self):
        return "HNTBTC"

    def __call__(self):
        return "HNTBTC"


HNTBTC = HNTBTC()
"""
    name: HNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HNTBUSD(NamedTuple):
    """
        name: HNTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HNTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNTBUSD"

    def __str__(self):
        return "HNTBUSD"

    def __call__(self):
        return "HNTBUSD"


HNTBUSD = HNTBUSD()
"""
    name: HNTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HNTUSDT(NamedTuple):
    """
        name: HNTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HNTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNTUSDT"

    def __str__(self):
        return "HNTUSDT"

    def __call__(self):
        return "HNTUSDT"


HNTUSDT = HNTUSDT()
"""
    name: HNTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOOKBNB(NamedTuple):
    """
        name: HOOKBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOOKBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOOKBNB"

    def __str__(self):
        return "HOOKBNB"

    def __call__(self):
        return "HOOKBNB"


HOOKBNB = HOOKBNB()
"""
    name: HOOKBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOOKBTC(NamedTuple):
    """
        name: HOOKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOOKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOOKBTC"

    def __str__(self):
        return "HOOKBTC"

    def __call__(self):
        return "HOOKBTC"


HOOKBTC = HOOKBTC()
"""
    name: HOOKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOOKBUSD(NamedTuple):
    """
        name: HOOKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HOOKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOOKBUSD"

    def __str__(self):
        return "HOOKBUSD"

    def __call__(self):
        return "HOOKBUSD"


HOOKBUSD = HOOKBUSD()
"""
    name: HOOKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HOOKUSDT(NamedTuple):
    """
        name: HOOKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HOOKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOOKUSDT"

    def __str__(self):
        return "HOOKUSDT"

    def __call__(self):
        return "HOOKUSDT"


HOOKUSDT = HOOKUSDT()
"""
    name: HOOKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HOTBNB(NamedTuple):
    """
        name: HOTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTBNB"

    def __str__(self):
        return "HOTBNB"

    def __call__(self):
        return "HOTBNB"


HOTBNB = HOTBNB()
"""
    name: HOTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTBRL(NamedTuple):
    """
        name: HOTBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTBRL"

    def __str__(self):
        return "HOTBRL"

    def __call__(self):
        return "HOTBRL"


HOTBRL = HOTBRL()
"""
    name: HOTBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTBTC(NamedTuple):
    """
        name: HOTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTBTC"

    def __str__(self):
        return "HOTBTC"

    def __call__(self):
        return "HOTBTC"


HOTBTC = HOTBTC()
"""
    name: HOTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTBUSD(NamedTuple):
    """
        name: HOTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HOTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTBUSD"

    def __str__(self):
        return "HOTBUSD"

    def __call__(self):
        return "HOTBUSD"


HOTBUSD = HOTBUSD()
"""
    name: HOTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HOTETH(NamedTuple):
    """
        name: HOTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTETH"

    def __str__(self):
        return "HOTETH"

    def __call__(self):
        return "HOTETH"


HOTETH = HOTETH()
"""
    name: HOTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTEUR(NamedTuple):
    """
        name: HOTEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTEUR"

    def __str__(self):
        return "HOTEUR"

    def __call__(self):
        return "HOTEUR"


HOTEUR = HOTEUR()
"""
    name: HOTEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTTRY(NamedTuple):
    """
        name: HOTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HOTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTTRY"

    def __str__(self):
        return "HOTTRY"

    def __call__(self):
        return "HOTTRY"


HOTTRY = HOTTRY()
"""
    name: HOTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HOTUSDT(NamedTuple):
    """
        name: HOTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "HOTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTUSDT"

    def __str__(self):
        return "HOTUSDT"

    def __call__(self):
        return "HOTUSDT"


HOTUSDT = HOTUSDT()
"""
    name: HOTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class HSRBTC(NamedTuple):
    """
        name: HSRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HSRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HSRBTC"

    def __str__(self):
        return "HSRBTC"

    def __call__(self):
        return "HSRBTC"


HSRBTC = HSRBTC()
"""
    name: HSRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class HSRETH(NamedTuple):
    """
        name: HSRETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "HSRETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HSRETH"

    def __str__(self):
        return "HSRETH"

    def __call__(self):
        return "HSRETH"


HSRETH = HSRETH()
"""
    name: HSRETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICNBTC(NamedTuple):
    """
        name: ICNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICNBTC"

    def __str__(self):
        return "ICNBTC"

    def __call__(self):
        return "ICNBTC"


ICNBTC = ICNBTC()
"""
    name: ICNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICNETH(NamedTuple):
    """
        name: ICNETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICNETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICNETH"

    def __str__(self):
        return "ICNETH"

    def __call__(self):
        return "ICNETH"


ICNETH = ICNETH()
"""
    name: ICNETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPBNB(NamedTuple):
    """
        name: ICPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPBNB"

    def __str__(self):
        return "ICPBNB"

    def __call__(self):
        return "ICPBNB"


ICPBNB = ICPBNB()
"""
    name: ICPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPBTC(NamedTuple):
    """
        name: ICPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPBTC"

    def __str__(self):
        return "ICPBTC"

    def __call__(self):
        return "ICPBTC"


ICPBTC = ICPBTC()
"""
    name: ICPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICPBUSD(NamedTuple):
    """
        name: ICPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPBUSD"

    def __str__(self):
        return "ICPBUSD"

    def __call__(self):
        return "ICPBUSD"


ICPBUSD = ICPBUSD()
"""
    name: ICPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICPETH(NamedTuple):
    """
        name: ICPETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPETH"

    def __str__(self):
        return "ICPETH"

    def __call__(self):
        return "ICPETH"


ICPETH = ICPETH()
"""
    name: ICPETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPEUR(NamedTuple):
    """
        name: ICPEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPEUR"

    def __str__(self):
        return "ICPEUR"

    def __call__(self):
        return "ICPEUR"


ICPEUR = ICPEUR()
"""
    name: ICPEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPRUB(NamedTuple):
    """
        name: ICPRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPRUB"

    def __str__(self):
        return "ICPRUB"

    def __call__(self):
        return "ICPRUB"


ICPRUB = ICPRUB()
"""
    name: ICPRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPTRY(NamedTuple):
    """
        name: ICPTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICPTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPTRY"

    def __str__(self):
        return "ICPTRY"

    def __call__(self):
        return "ICPTRY"


ICPTRY = ICPTRY()
"""
    name: ICPTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICPUSDT(NamedTuple):
    """
        name: ICPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICPUSDT"

    def __str__(self):
        return "ICPUSDT"

    def __call__(self):
        return "ICPUSDT"


ICPUSDT = ICPUSDT()
"""
    name: ICPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICXBNB(NamedTuple):
    """
        name: ICXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXBNB"

    def __str__(self):
        return "ICXBNB"

    def __call__(self):
        return "ICXBNB"


ICXBNB = ICXBNB()
"""
    name: ICXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICXBTC(NamedTuple):
    """
        name: ICXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXBTC"

    def __str__(self):
        return "ICXBTC"

    def __call__(self):
        return "ICXBTC"


ICXBTC = ICXBTC()
"""
    name: ICXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICXBUSD(NamedTuple):
    """
        name: ICXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXBUSD"

    def __str__(self):
        return "ICXBUSD"

    def __call__(self):
        return "ICXBUSD"


ICXBUSD = ICXBUSD()
"""
    name: ICXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ICXETH(NamedTuple):
    """
        name: ICXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ICXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXETH"

    def __str__(self):
        return "ICXETH"

    def __call__(self):
        return "ICXETH"


ICXETH = ICXETH()
"""
    name: ICXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ICXUSDT(NamedTuple):
    """
        name: ICXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ICXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICXUSDT"

    def __str__(self):
        return "ICXUSDT"

    def __call__(self):
        return "ICXUSDT"


ICXUSDT = ICXUSDT()
"""
    name: ICXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDBNB(NamedTuple):
    """
        name: IDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDBNB"

    def __str__(self):
        return "IDBNB"

    def __call__(self):
        return "IDBNB"


IDBNB = IDBNB()
"""
    name: IDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDBTC(NamedTuple):
    """
        name: IDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDBTC"

    def __str__(self):
        return "IDBTC"

    def __call__(self):
        return "IDBTC"


IDBTC = IDBTC()
"""
    name: IDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDEUR(NamedTuple):
    """
        name: IDEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEUR"

    def __str__(self):
        return "IDEUR"

    def __call__(self):
        return "IDEUR"


IDEUR = IDEUR()
"""
    name: IDEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDEXBNB(NamedTuple):
    """
        name: IDEXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDEXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEXBNB"

    def __str__(self):
        return "IDEXBNB"

    def __call__(self):
        return "IDEXBNB"


IDEXBNB = IDEXBNB()
"""
    name: IDEXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDEXBTC(NamedTuple):
    """
        name: IDEXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDEXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEXBTC"

    def __str__(self):
        return "IDEXBTC"

    def __call__(self):
        return "IDEXBTC"


IDEXBTC = IDEXBTC()
"""
    name: IDEXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDEXBUSD(NamedTuple):
    """
        name: IDEXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDEXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEXBUSD"

    def __str__(self):
        return "IDEXBUSD"

    def __call__(self):
        return "IDEXBUSD"


IDEXBUSD = IDEXBUSD()
"""
    name: IDEXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDEXUSDT(NamedTuple):
    """
        name: IDEXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDEXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEXUSDT"

    def __str__(self):
        return "IDEXUSDT"

    def __call__(self):
        return "IDEXUSDT"


IDEXUSDT = IDEXUSDT()
"""
    name: IDEXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IDTRY(NamedTuple):
    """
        name: IDTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDTRY"

    def __str__(self):
        return "IDTRY"

    def __call__(self):
        return "IDTRY"


IDTRY = IDTRY()
"""
    name: IDTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDTUSD(NamedTuple):
    """
        name: IDTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IDTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDTUSD"

    def __str__(self):
        return "IDTUSD"

    def __call__(self):
        return "IDTUSD"


IDTUSD = IDTUSD()
"""
    name: IDTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IDUSDT(NamedTuple):
    """
        name: IDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDUSDT"

    def __str__(self):
        return "IDUSDT"

    def __call__(self):
        return "IDUSDT"


IDUSDT = IDUSDT()
"""
    name: IDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ILVBNB(NamedTuple):
    """
        name: ILVBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ILVBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILVBNB"

    def __str__(self):
        return "ILVBNB"

    def __call__(self):
        return "ILVBNB"


ILVBNB = ILVBNB()
"""
    name: ILVBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ILVBTC(NamedTuple):
    """
        name: ILVBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ILVBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILVBTC"

    def __str__(self):
        return "ILVBTC"

    def __call__(self):
        return "ILVBTC"


ILVBTC = ILVBTC()
"""
    name: ILVBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ILVBUSD(NamedTuple):
    """
        name: ILVBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ILVBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILVBUSD"

    def __str__(self):
        return "ILVBUSD"

    def __call__(self):
        return "ILVBUSD"


ILVBUSD = ILVBUSD()
"""
    name: ILVBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ILVUSDT(NamedTuple):
    """
        name: ILVUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ILVUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILVUSDT"

    def __str__(self):
        return "ILVUSDT"

    def __call__(self):
        return "ILVUSDT"


ILVUSDT = ILVUSDT()
"""
    name: ILVUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IMXBNB(NamedTuple):
    """
        name: IMXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IMXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMXBNB"

    def __str__(self):
        return "IMXBNB"

    def __call__(self):
        return "IMXBNB"


IMXBNB = IMXBNB()
"""
    name: IMXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IMXBTC(NamedTuple):
    """
        name: IMXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IMXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMXBTC"

    def __str__(self):
        return "IMXBTC"

    def __call__(self):
        return "IMXBTC"


IMXBTC = IMXBTC()
"""
    name: IMXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IMXBUSD(NamedTuple):
    """
        name: IMXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IMXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMXBUSD"

    def __str__(self):
        return "IMXBUSD"

    def __call__(self):
        return "IMXBUSD"


IMXBUSD = IMXBUSD()
"""
    name: IMXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IMXUSDT(NamedTuple):
    """
        name: IMXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IMXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMXUSDT"

    def __str__(self):
        return "IMXUSDT"

    def __call__(self):
        return "IMXUSDT"


IMXUSDT = IMXUSDT()
"""
    name: IMXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class INJBNB(NamedTuple):
    """
        name: INJBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "INJBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJBNB"

    def __str__(self):
        return "INJBNB"

    def __call__(self):
        return "INJBNB"


INJBNB = INJBNB()
"""
    name: INJBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class INJBTC(NamedTuple):
    """
        name: INJBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "INJBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJBTC"

    def __str__(self):
        return "INJBTC"

    def __call__(self):
        return "INJBTC"


INJBTC = INJBTC()
"""
    name: INJBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class INJBUSD(NamedTuple):
    """
        name: INJBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "INJBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJBUSD"

    def __str__(self):
        return "INJBUSD"

    def __call__(self):
        return "INJBUSD"


INJBUSD = INJBUSD()
"""
    name: INJBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class INJTRY(NamedTuple):
    """
        name: INJTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "INJTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJTRY"

    def __str__(self):
        return "INJTRY"

    def __call__(self):
        return "INJTRY"


INJTRY = INJTRY()
"""
    name: INJTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class INJUSDT(NamedTuple):
    """
        name: INJUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "INJUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJUSDT"

    def __str__(self):
        return "INJUSDT"

    def __call__(self):
        return "INJUSDT"


INJUSDT = INJUSDT()
"""
    name: INJUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class INSBTC(NamedTuple):
    """
        name: INSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "INSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INSBTC"

    def __str__(self):
        return "INSBTC"

    def __call__(self):
        return "INSBTC"


INSBTC = INSBTC()
"""
    name: INSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class INSETH(NamedTuple):
    """
        name: INSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "INSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INSETH"

    def __str__(self):
        return "INSETH"

    def __call__(self):
        return "INSETH"


INSETH = INSETH()
"""
    name: INSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOSTBTC(NamedTuple):
    """
        name: IOSTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOSTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOSTBTC"

    def __str__(self):
        return "IOSTBTC"

    def __call__(self):
        return "IOSTBTC"


IOSTBTC = IOSTBTC()
"""
    name: IOSTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOSTBUSD(NamedTuple):
    """
        name: IOSTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOSTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOSTBUSD"

    def __str__(self):
        return "IOSTBUSD"

    def __call__(self):
        return "IOSTBUSD"


IOSTBUSD = IOSTBUSD()
"""
    name: IOSTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOSTETH(NamedTuple):
    """
        name: IOSTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOSTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOSTETH"

    def __str__(self):
        return "IOSTETH"

    def __call__(self):
        return "IOSTETH"


IOSTETH = IOSTETH()
"""
    name: IOSTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOSTUSDT(NamedTuple):
    """
        name: IOSTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOSTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOSTUSDT"

    def __str__(self):
        return "IOSTUSDT"

    def __call__(self):
        return "IOSTUSDT"


IOSTUSDT = IOSTUSDT()
"""
    name: IOSTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTABNB(NamedTuple):
    """
        name: IOTABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOTABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTABNB"

    def __str__(self):
        return "IOTABNB"

    def __call__(self):
        return "IOTABNB"


IOTABNB = IOTABNB()
"""
    name: IOTABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOTABTC(NamedTuple):
    """
        name: IOTABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTABTC"

    def __str__(self):
        return "IOTABTC"

    def __call__(self):
        return "IOTABTC"


IOTABTC = IOTABTC()
"""
    name: IOTABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTABUSD(NamedTuple):
    """
        name: IOTABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOTABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTABUSD"

    def __str__(self):
        return "IOTABUSD"

    def __call__(self):
        return "IOTABUSD"


IOTABUSD = IOTABUSD()
"""
    name: IOTABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOTAETH(NamedTuple):
    """
        name: IOTAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOTAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTAETH"

    def __str__(self):
        return "IOTAETH"

    def __call__(self):
        return "IOTAETH"


IOTAETH = IOTAETH()
"""
    name: IOTAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOTAUSDT(NamedTuple):
    """
        name: IOTAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTAUSDT"

    def __str__(self):
        return "IOTAUSDT"

    def __call__(self):
        return "IOTAUSDT"


IOTAUSDT = IOTAUSDT()
"""
    name: IOTAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTXBTC(NamedTuple):
    """
        name: IOTXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTXBTC"

    def __str__(self):
        return "IOTXBTC"

    def __call__(self):
        return "IOTXBTC"


IOTXBTC = IOTXBTC()
"""
    name: IOTXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTXBUSD(NamedTuple):
    """
        name: IOTXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTXBUSD"

    def __str__(self):
        return "IOTXBUSD"

    def __call__(self):
        return "IOTXBUSD"


IOTXBUSD = IOTXBUSD()
"""
    name: IOTXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IOTXETH(NamedTuple):
    """
        name: IOTXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IOTXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTXETH"

    def __str__(self):
        return "IOTXETH"

    def __call__(self):
        return "IOTXETH"


IOTXETH = IOTXETH()
"""
    name: IOTXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IOTXUSDT(NamedTuple):
    """
        name: IOTXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "IOTXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTXUSDT"

    def __str__(self):
        return "IOTXUSDT"

    def __call__(self):
        return "IOTXUSDT"


IOTXUSDT = IOTXUSDT()
"""
    name: IOTXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class IQBNB(NamedTuple):
    """
        name: IQBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IQBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IQBNB"

    def __str__(self):
        return "IQBNB"

    def __call__(self):
        return "IQBNB"


IQBNB = IQBNB()
"""
    name: IQBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IQBUSD(NamedTuple):
    """
        name: IQBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IQBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IQBUSD"

    def __str__(self):
        return "IQBUSD"

    def __call__(self):
        return "IQBUSD"


IQBUSD = IQBUSD()
"""
    name: IQBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IRISBNB(NamedTuple):
    """
        name: IRISBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IRISBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRISBNB"

    def __str__(self):
        return "IRISBNB"

    def __call__(self):
        return "IRISBNB"


IRISBNB = IRISBNB()
"""
    name: IRISBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IRISBTC(NamedTuple):
    """
        name: IRISBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IRISBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRISBTC"

    def __str__(self):
        return "IRISBTC"

    def __call__(self):
        return "IRISBTC"


IRISBTC = IRISBTC()
"""
    name: IRISBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IRISBUSD(NamedTuple):
    """
        name: IRISBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IRISBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRISBUSD"

    def __str__(self):
        return "IRISBUSD"

    def __call__(self):
        return "IRISBUSD"


IRISBUSD = IRISBUSD()
"""
    name: IRISBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class IRISUSDT(NamedTuple):
    """
        name: IRISUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "IRISUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRISUSDT"

    def __str__(self):
        return "IRISUSDT"

    def __call__(self):
        return "IRISUSDT"


IRISUSDT = IRISUSDT()
"""
    name: IRISUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYBNB(NamedTuple):
    """
        name: JASMYBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JASMYBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYBNB"

    def __str__(self):
        return "JASMYBNB"

    def __call__(self):
        return "JASMYBNB"


JASMYBNB = JASMYBNB()
"""
    name: JASMYBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYBTC(NamedTuple):
    """
        name: JASMYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JASMYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYBTC"

    def __str__(self):
        return "JASMYBTC"

    def __call__(self):
        return "JASMYBTC"


JASMYBTC = JASMYBTC()
"""
    name: JASMYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JASMYBUSD(NamedTuple):
    """
        name: JASMYBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JASMYBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYBUSD"

    def __str__(self):
        return "JASMYBUSD"

    def __call__(self):
        return "JASMYBUSD"


JASMYBUSD = JASMYBUSD()
"""
    name: JASMYBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JASMYETH(NamedTuple):
    """
        name: JASMYETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JASMYETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYETH"

    def __str__(self):
        return "JASMYETH"

    def __call__(self):
        return "JASMYETH"


JASMYETH = JASMYETH()
"""
    name: JASMYETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYEUR(NamedTuple):
    """
        name: JASMYEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JASMYEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYEUR"

    def __str__(self):
        return "JASMYEUR"

    def __call__(self):
        return "JASMYEUR"


JASMYEUR = JASMYEUR()
"""
    name: JASMYEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYTRY(NamedTuple):
    """
        name: JASMYTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JASMYTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYTRY"

    def __str__(self):
        return "JASMYTRY"

    def __call__(self):
        return "JASMYTRY"


JASMYTRY = JASMYTRY()
"""
    name: JASMYTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JASMYUSDT(NamedTuple):
    """
        name: JASMYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JASMYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMYUSDT"

    def __str__(self):
        return "JASMYUSDT"

    def __call__(self):
        return "JASMYUSDT"


JASMYUSDT = JASMYUSDT()
"""
    name: JASMYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JOEBTC(NamedTuple):
    """
        name: JOEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JOEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JOEBTC"

    def __str__(self):
        return "JOEBTC"

    def __call__(self):
        return "JOEBTC"


JOEBTC = JOEBTC()
"""
    name: JOEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JOEBUSD(NamedTuple):
    """
        name: JOEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JOEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JOEBUSD"

    def __str__(self):
        return "JOEBUSD"

    def __call__(self):
        return "JOEBUSD"


JOEBUSD = JOEBUSD()
"""
    name: JOEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JOETRY(NamedTuple):
    """
        name: JOETRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JOETRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JOETRY"

    def __str__(self):
        return "JOETRY"

    def __call__(self):
        return "JOETRY"


JOETRY = JOETRY()
"""
    name: JOETRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JOEUSDT(NamedTuple):
    """
        name: JOEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "JOEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JOEUSDT"

    def __str__(self):
        return "JOEUSDT"

    def __call__(self):
        return "JOEUSDT"


JOEUSDT = JOEUSDT()
"""
    name: JOEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class JSTBNB(NamedTuple):
    """
        name: JSTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JSTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JSTBNB"

    def __str__(self):
        return "JSTBNB"

    def __call__(self):
        return "JSTBNB"


JSTBNB = JSTBNB()
"""
    name: JSTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JSTBTC(NamedTuple):
    """
        name: JSTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JSTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JSTBTC"

    def __str__(self):
        return "JSTBTC"

    def __call__(self):
        return "JSTBTC"


JSTBTC = JSTBTC()
"""
    name: JSTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JSTBUSD(NamedTuple):
    """
        name: JSTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JSTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JSTBUSD"

    def __str__(self):
        return "JSTBUSD"

    def __call__(self):
        return "JSTBUSD"


JSTBUSD = JSTBUSD()
"""
    name: JSTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JSTUSDT(NamedTuple):
    """
        name: JSTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JSTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JSTUSDT"

    def __str__(self):
        return "JSTUSDT"

    def __call__(self):
        return "JSTUSDT"


JSTUSDT = JSTUSDT()
"""
    name: JSTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JUVBTC(NamedTuple):
    """
        name: JUVBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JUVBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JUVBTC"

    def __str__(self):
        return "JUVBTC"

    def __call__(self):
        return "JUVBTC"


JUVBTC = JUVBTC()
"""
    name: JUVBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JUVBUSD(NamedTuple):
    """
        name: JUVBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JUVBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JUVBUSD"

    def __str__(self):
        return "JUVBUSD"

    def __call__(self):
        return "JUVBUSD"


JUVBUSD = JUVBUSD()
"""
    name: JUVBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class JUVUSDT(NamedTuple):
    """
        name: JUVUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "JUVUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JUVUSDT"

    def __str__(self):
        return "JUVUSDT"

    def __call__(self):
        return "JUVUSDT"


JUVUSDT = JUVUSDT()
"""
    name: JUVUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KAVABNB(NamedTuple):
    """
        name: KAVABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KAVABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVABNB"

    def __str__(self):
        return "KAVABNB"

    def __call__(self):
        return "KAVABNB"


KAVABNB = KAVABNB()
"""
    name: KAVABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KAVABTC(NamedTuple):
    """
        name: KAVABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KAVABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVABTC"

    def __str__(self):
        return "KAVABTC"

    def __call__(self):
        return "KAVABTC"


KAVABTC = KAVABTC()
"""
    name: KAVABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KAVABUSD(NamedTuple):
    """
        name: KAVABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KAVABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVABUSD"

    def __str__(self):
        return "KAVABUSD"

    def __call__(self):
        return "KAVABUSD"


KAVABUSD = KAVABUSD()
"""
    name: KAVABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KAVAETH(NamedTuple):
    """
        name: KAVAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KAVAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVAETH"

    def __str__(self):
        return "KAVAETH"

    def __call__(self):
        return "KAVAETH"


KAVAETH = KAVAETH()
"""
    name: KAVAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KAVAUSDT(NamedTuple):
    """
        name: KAVAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KAVAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVAUSDT"

    def __str__(self):
        return "KAVAUSDT"

    def __call__(self):
        return "KAVAUSDT"


KAVAUSDT = KAVAUSDT()
"""
    name: KAVAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KDABTC(NamedTuple):
    """
        name: KDABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KDABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDABTC"

    def __str__(self):
        return "KDABTC"

    def __call__(self):
        return "KDABTC"


KDABTC = KDABTC()
"""
    name: KDABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KDABUSD(NamedTuple):
    """
        name: KDABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KDABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDABUSD"

    def __str__(self):
        return "KDABUSD"

    def __call__(self):
        return "KDABUSD"


KDABUSD = KDABUSD()
"""
    name: KDABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KDAUSDT(NamedTuple):
    """
        name: KDAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KDAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDAUSDT"

    def __str__(self):
        return "KDAUSDT"

    def __call__(self):
        return "KDAUSDT"


KDAUSDT = KDAUSDT()
"""
    name: KDAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KEEPBNB(NamedTuple):
    """
        name: KEEPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEEPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEEPBNB"

    def __str__(self):
        return "KEEPBNB"

    def __call__(self):
        return "KEEPBNB"


KEEPBNB = KEEPBNB()
"""
    name: KEEPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEEPBTC(NamedTuple):
    """
        name: KEEPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEEPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEEPBTC"

    def __str__(self):
        return "KEEPBTC"

    def __call__(self):
        return "KEEPBTC"


KEEPBTC = KEEPBTC()
"""
    name: KEEPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEEPBUSD(NamedTuple):
    """
        name: KEEPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEEPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEEPBUSD"

    def __str__(self):
        return "KEEPBUSD"

    def __call__(self):
        return "KEEPBUSD"


KEEPBUSD = KEEPBUSD()
"""
    name: KEEPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEEPUSDT(NamedTuple):
    """
        name: KEEPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEEPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEEPUSDT"

    def __str__(self):
        return "KEEPUSDT"

    def __call__(self):
        return "KEEPUSDT"


KEEPUSDT = KEEPUSDT()
"""
    name: KEEPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEYBTC(NamedTuple):
    """
        name: KEYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEYBTC"

    def __str__(self):
        return "KEYBTC"

    def __call__(self):
        return "KEYBTC"


KEYBTC = KEYBTC()
"""
    name: KEYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEYBUSD(NamedTuple):
    """
        name: KEYBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KEYBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEYBUSD"

    def __str__(self):
        return "KEYBUSD"

    def __call__(self):
        return "KEYBUSD"


KEYBUSD = KEYBUSD()
"""
    name: KEYBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KEYETH(NamedTuple):
    """
        name: KEYETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KEYETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEYETH"

    def __str__(self):
        return "KEYETH"

    def __call__(self):
        return "KEYETH"


KEYETH = KEYETH()
"""
    name: KEYETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KEYUSDT(NamedTuple):
    """
        name: KEYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KEYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEYUSDT"

    def __str__(self):
        return "KEYUSDT"

    def __call__(self):
        return "KEYUSDT"


KEYUSDT = KEYUSDT()
"""
    name: KEYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KLAYBNB(NamedTuple):
    """
        name: KLAYBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KLAYBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAYBNB"

    def __str__(self):
        return "KLAYBNB"

    def __call__(self):
        return "KLAYBNB"


KLAYBNB = KLAYBNB()
"""
    name: KLAYBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KLAYBTC(NamedTuple):
    """
        name: KLAYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KLAYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAYBTC"

    def __str__(self):
        return "KLAYBTC"

    def __call__(self):
        return "KLAYBTC"


KLAYBTC = KLAYBTC()
"""
    name: KLAYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KLAYBUSD(NamedTuple):
    """
        name: KLAYBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KLAYBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAYBUSD"

    def __str__(self):
        return "KLAYBUSD"

    def __call__(self):
        return "KLAYBUSD"


KLAYBUSD = KLAYBUSD()
"""
    name: KLAYBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KLAYUSDT(NamedTuple):
    """
        name: KLAYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KLAYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAYUSDT"

    def __str__(self):
        return "KLAYUSDT"

    def __call__(self):
        return "KLAYUSDT"


KLAYUSDT = KLAYUSDT()
"""
    name: KLAYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KMDBTC(NamedTuple):
    """
        name: KMDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KMDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMDBTC"

    def __str__(self):
        return "KMDBTC"

    def __call__(self):
        return "KMDBTC"


KMDBTC = KMDBTC()
"""
    name: KMDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KMDBUSD(NamedTuple):
    """
        name: KMDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KMDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMDBUSD"

    def __str__(self):
        return "KMDBUSD"

    def __call__(self):
        return "KMDBUSD"


KMDBUSD = KMDBUSD()
"""
    name: KMDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KMDETH(NamedTuple):
    """
        name: KMDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KMDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMDETH"

    def __str__(self):
        return "KMDETH"

    def __call__(self):
        return "KMDETH"


KMDETH = KMDETH()
"""
    name: KMDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KMDUSDT(NamedTuple):
    """
        name: KMDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KMDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMDUSDT"

    def __str__(self):
        return "KMDUSDT"

    def __call__(self):
        return "KMDUSDT"


KMDUSDT = KMDUSDT()
"""
    name: KMDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KNCBNB(NamedTuple):
    """
        name: KNCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KNCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCBNB"

    def __str__(self):
        return "KNCBNB"

    def __call__(self):
        return "KNCBNB"


KNCBNB = KNCBNB()
"""
    name: KNCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KNCBTC(NamedTuple):
    """
        name: KNCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KNCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCBTC"

    def __str__(self):
        return "KNCBTC"

    def __call__(self):
        return "KNCBTC"


KNCBTC = KNCBTC()
"""
    name: KNCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KNCBUSD(NamedTuple):
    """
        name: KNCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KNCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCBUSD"

    def __str__(self):
        return "KNCBUSD"

    def __call__(self):
        return "KNCBUSD"


KNCBUSD = KNCBUSD()
"""
    name: KNCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KNCETH(NamedTuple):
    """
        name: KNCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KNCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCETH"

    def __str__(self):
        return "KNCETH"

    def __call__(self):
        return "KNCETH"


KNCETH = KNCETH()
"""
    name: KNCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KNCUSDT(NamedTuple):
    """
        name: KNCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KNCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNCUSDT"

    def __str__(self):
        return "KNCUSDT"

    def __call__(self):
        return "KNCUSDT"


KNCUSDT = KNCUSDT()
"""
    name: KNCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KP3RBNB(NamedTuple):
    """
        name: KP3RBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KP3RBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KP3RBNB"

    def __str__(self):
        return "KP3RBNB"

    def __call__(self):
        return "KP3RBNB"


KP3RBNB = KP3RBNB()
"""
    name: KP3RBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KP3RBUSD(NamedTuple):
    """
        name: KP3RBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KP3RBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KP3RBUSD"

    def __str__(self):
        return "KP3RBUSD"

    def __call__(self):
        return "KP3RBUSD"


KP3RBUSD = KP3RBUSD()
"""
    name: KP3RBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KP3RUSDT(NamedTuple):
    """
        name: KP3RUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KP3RUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KP3RUSDT"

    def __str__(self):
        return "KP3RUSDT"

    def __call__(self):
        return "KP3RUSDT"


KP3RUSDT = KP3RUSDT()
"""
    name: KP3RUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KSMAUD(NamedTuple):
    """
        name: KSMAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KSMAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMAUD"

    def __str__(self):
        return "KSMAUD"

    def __call__(self):
        return "KSMAUD"


KSMAUD = KSMAUD()
"""
    name: KSMAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KSMBNB(NamedTuple):
    """
        name: KSMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KSMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMBNB"

    def __str__(self):
        return "KSMBNB"

    def __call__(self):
        return "KSMBNB"


KSMBNB = KSMBNB()
"""
    name: KSMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KSMBTC(NamedTuple):
    """
        name: KSMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KSMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMBTC"

    def __str__(self):
        return "KSMBTC"

    def __call__(self):
        return "KSMBTC"


KSMBTC = KSMBTC()
"""
    name: KSMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KSMBUSD(NamedTuple):
    """
        name: KSMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KSMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMBUSD"

    def __str__(self):
        return "KSMBUSD"

    def __call__(self):
        return "KSMBUSD"


KSMBUSD = KSMBUSD()
"""
    name: KSMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class KSMETH(NamedTuple):
    """
        name: KSMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "KSMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMETH"

    def __str__(self):
        return "KSMETH"

    def __call__(self):
        return "KSMETH"


KSMETH = KSMETH()
"""
    name: KSMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class KSMUSDT(NamedTuple):
    """
        name: KSMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "KSMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSMUSDT"

    def __str__(self):
        return "KSMUSDT"

    def __call__(self):
        return "KSMUSDT"


KSMUSDT = KSMUSDT()
"""
    name: KSMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LAZIOBTC(NamedTuple):
    """
        name: LAZIOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LAZIOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOBTC"

    def __str__(self):
        return "LAZIOBTC"

    def __call__(self):
        return "LAZIOBTC"


LAZIOBTC = LAZIOBTC()
"""
    name: LAZIOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LAZIOBUSD(NamedTuple):
    """
        name: LAZIOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LAZIOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOBUSD"

    def __str__(self):
        return "LAZIOBUSD"

    def __call__(self):
        return "LAZIOBUSD"


LAZIOBUSD = LAZIOBUSD()
"""
    name: LAZIOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LAZIOEUR(NamedTuple):
    """
        name: LAZIOEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LAZIOEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOEUR"

    def __str__(self):
        return "LAZIOEUR"

    def __call__(self):
        return "LAZIOEUR"


LAZIOEUR = LAZIOEUR()
"""
    name: LAZIOEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LAZIOTRY(NamedTuple):
    """
        name: LAZIOTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LAZIOTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOTRY"

    def __str__(self):
        return "LAZIOTRY"

    def __call__(self):
        return "LAZIOTRY"


LAZIOTRY = LAZIOTRY()
"""
    name: LAZIOTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LAZIOUSDT(NamedTuple):
    """
        name: LAZIOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LAZIOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAZIOUSDT"

    def __str__(self):
        return "LAZIOUSDT"

    def __call__(self):
        return "LAZIOUSDT"


LAZIOUSDT = LAZIOUSDT()
"""
    name: LAZIOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LDOBTC(NamedTuple):
    """
        name: LDOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LDOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDOBTC"

    def __str__(self):
        return "LDOBTC"

    def __call__(self):
        return "LDOBTC"


LDOBTC = LDOBTC()
"""
    name: LDOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LDOBUSD(NamedTuple):
    """
        name: LDOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LDOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDOBUSD"

    def __str__(self):
        return "LDOBUSD"

    def __call__(self):
        return "LDOBUSD"


LDOBUSD = LDOBUSD()
"""
    name: LDOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LDOTUSD(NamedTuple):
    """
        name: LDOTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LDOTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDOTUSD"

    def __str__(self):
        return "LDOTUSD"

    def __call__(self):
        return "LDOTUSD"


LDOTUSD = LDOTUSD()
"""
    name: LDOTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LDOUSDT(NamedTuple):
    """
        name: LDOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LDOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDOUSDT"

    def __str__(self):
        return "LDOUSDT"

    def __call__(self):
        return "LDOUSDT"


LDOUSDT = LDOUSDT()
"""
    name: LDOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LENDBKRW(NamedTuple):
    """
        name: LENDBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDBKRW"

    def __str__(self):
        return "LENDBKRW"

    def __call__(self):
        return "LENDBKRW"


LENDBKRW = LENDBKRW()
"""
    name: LENDBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LENDBTC(NamedTuple):
    """
        name: LENDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDBTC"

    def __str__(self):
        return "LENDBTC"

    def __call__(self):
        return "LENDBTC"


LENDBTC = LENDBTC()
"""
    name: LENDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LENDBUSD(NamedTuple):
    """
        name: LENDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDBUSD"

    def __str__(self):
        return "LENDBUSD"

    def __call__(self):
        return "LENDBUSD"


LENDBUSD = LENDBUSD()
"""
    name: LENDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LENDETH(NamedTuple):
    """
        name: LENDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDETH"

    def __str__(self):
        return "LENDETH"

    def __call__(self):
        return "LENDETH"


LENDETH = LENDETH()
"""
    name: LENDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LENDUSDT(NamedTuple):
    """
        name: LENDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LENDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LENDUSDT"

    def __str__(self):
        return "LENDUSDT"

    def __call__(self):
        return "LENDUSDT"


LENDUSDT = LENDUSDT()
"""
    name: LENDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LEVERBUSD(NamedTuple):
    """
        name: LEVERBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LEVERBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LEVERBUSD"

    def __str__(self):
        return "LEVERBUSD"

    def __call__(self):
        return "LEVERBUSD"


LEVERBUSD = LEVERBUSD()
"""
    name: LEVERBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LEVERUSDT(NamedTuple):
    """
        name: LEVERUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LEVERUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LEVERUSDT"

    def __str__(self):
        return "LEVERUSDT"

    def __call__(self):
        return "LEVERUSDT"


LEVERUSDT = LEVERUSDT()
"""
    name: LEVERUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINABNB(NamedTuple):
    """
        name: LINABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINABNB"

    def __str__(self):
        return "LINABNB"

    def __call__(self):
        return "LINABNB"


LINABNB = LINABNB()
"""
    name: LINABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINABTC(NamedTuple):
    """
        name: LINABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINABTC"

    def __str__(self):
        return "LINABTC"

    def __call__(self):
        return "LINABTC"


LINABTC = LINABTC()
"""
    name: LINABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINABUSD(NamedTuple):
    """
        name: LINABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINABUSD"

    def __str__(self):
        return "LINABUSD"

    def __call__(self):
        return "LINABUSD"


LINABUSD = LINABUSD()
"""
    name: LINABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINAUSDT(NamedTuple):
    """
        name: LINAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINAUSDT"

    def __str__(self):
        return "LINAUSDT"

    def __call__(self):
        return "LINAUSDT"


LINAUSDT = LINAUSDT()
"""
    name: LINAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINKAUD(NamedTuple):
    """
        name: LINKAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKAUD"

    def __str__(self):
        return "LINKAUD"

    def __call__(self):
        return "LINKAUD"


LINKAUD = LINKAUD()
"""
    name: LINKAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKBKRW(NamedTuple):
    """
        name: LINKBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBKRW"

    def __str__(self):
        return "LINKBKRW"

    def __call__(self):
        return "LINKBKRW"


LINKBKRW = LINKBKRW()
"""
    name: LINKBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKBNB(NamedTuple):
    """
        name: LINKBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBNB"

    def __str__(self):
        return "LINKBNB"

    def __call__(self):
        return "LINKBNB"


LINKBNB = LINKBNB()
"""
    name: LINKBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKBRL(NamedTuple):
    """
        name: LINKBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBRL"

    def __str__(self):
        return "LINKBRL"

    def __call__(self):
        return "LINKBRL"


LINKBRL = LINKBRL()
"""
    name: LINKBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKBTC(NamedTuple):
    """
        name: LINKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBTC"

    def __str__(self):
        return "LINKBTC"

    def __call__(self):
        return "LINKBTC"


LINKBTC = LINKBTC()
"""
    name: LINKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINKBUSD(NamedTuple):
    """
        name: LINKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKBUSD"

    def __str__(self):
        return "LINKBUSD"

    def __call__(self):
        return "LINKBUSD"


LINKBUSD = LINKBUSD()
"""
    name: LINKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINKDOWNUSDT(NamedTuple):
    """
        name: LINKDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKDOWNUSDT"

    def __str__(self):
        return "LINKDOWNUSDT"

    def __call__(self):
        return "LINKDOWNUSDT"


LINKDOWNUSDT = LINKDOWNUSDT()
"""
    name: LINKDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKETH(NamedTuple):
    """
        name: LINKETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINKETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKETH"

    def __str__(self):
        return "LINKETH"

    def __call__(self):
        return "LINKETH"


LINKETH = LINKETH()
"""
    name: LINKETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LINKEUR(NamedTuple):
    """
        name: LINKEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKEUR"

    def __str__(self):
        return "LINKEUR"

    def __call__(self):
        return "LINKEUR"


LINKEUR = LINKEUR()
"""
    name: LINKEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKGBP(NamedTuple):
    """
        name: LINKGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKGBP"

    def __str__(self):
        return "LINKGBP"

    def __call__(self):
        return "LINKGBP"


LINKGBP = LINKGBP()
"""
    name: LINKGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKNGN(NamedTuple):
    """
        name: LINKNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKNGN"

    def __str__(self):
        return "LINKNGN"

    def __call__(self):
        return "LINKNGN"


LINKNGN = LINKNGN()
"""
    name: LINKNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKPAX(NamedTuple):
    """
        name: LINKPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKPAX"

    def __str__(self):
        return "LINKPAX"

    def __call__(self):
        return "LINKPAX"


LINKPAX = LINKPAX()
"""
    name: LINKPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKTRY(NamedTuple):
    """
        name: LINKTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKTRY"

    def __str__(self):
        return "LINKTRY"

    def __call__(self):
        return "LINKTRY"


LINKTRY = LINKTRY()
"""
    name: LINKTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKTUSD(NamedTuple):
    """
        name: LINKTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKTUSD"

    def __str__(self):
        return "LINKTUSD"

    def __call__(self):
        return "LINKTUSD"


LINKTUSD = LINKTUSD()
"""
    name: LINKTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKUPUSDT(NamedTuple):
    """
        name: LINKUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKUPUSDT"

    def __str__(self):
        return "LINKUPUSDT"

    def __call__(self):
        return "LINKUPUSDT"


LINKUPUSDT = LINKUPUSDT()
"""
    name: LINKUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKUSDC(NamedTuple):
    """
        name: LINKUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LINKUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKUSDC"

    def __str__(self):
        return "LINKUSDC"

    def __call__(self):
        return "LINKUSDC"


LINKUSDC = LINKUSDC()
"""
    name: LINKUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LINKUSDT(NamedTuple):
    """
        name: LINKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LINKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINKUSDT"

    def __str__(self):
        return "LINKUSDT"

    def __call__(self):
        return "LINKUSDT"


LINKUSDT = LINKUSDT()
"""
    name: LINKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LITBTC(NamedTuple):
    """
        name: LITBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LITBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITBTC"

    def __str__(self):
        return "LITBTC"

    def __call__(self):
        return "LITBTC"


LITBTC = LITBTC()
"""
    name: LITBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LITBUSD(NamedTuple):
    """
        name: LITBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LITBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITBUSD"

    def __str__(self):
        return "LITBUSD"

    def __call__(self):
        return "LITBUSD"


LITBUSD = LITBUSD()
"""
    name: LITBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LITETH(NamedTuple):
    """
        name: LITETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LITETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITETH"

    def __str__(self):
        return "LITETH"

    def __call__(self):
        return "LITETH"


LITETH = LITETH()
"""
    name: LITETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LITUSDT(NamedTuple):
    """
        name: LITUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LITUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITUSDT"

    def __str__(self):
        return "LITUSDT"

    def __call__(self):
        return "LITUSDT"


LITUSDT = LITUSDT()
"""
    name: LITUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LOKABNB(NamedTuple):
    """
        name: LOKABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOKABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKABNB"

    def __str__(self):
        return "LOKABNB"

    def __call__(self):
        return "LOKABNB"


LOKABNB = LOKABNB()
"""
    name: LOKABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOKABTC(NamedTuple):
    """
        name: LOKABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOKABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKABTC"

    def __str__(self):
        return "LOKABTC"

    def __call__(self):
        return "LOKABTC"


LOKABTC = LOKABTC()
"""
    name: LOKABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOKABUSD(NamedTuple):
    """
        name: LOKABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOKABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKABUSD"

    def __str__(self):
        return "LOKABUSD"

    def __call__(self):
        return "LOKABUSD"


LOKABUSD = LOKABUSD()
"""
    name: LOKABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOKAUSDT(NamedTuple):
    """
        name: LOKAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOKAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKAUSDT"

    def __str__(self):
        return "LOKAUSDT"

    def __call__(self):
        return "LOKAUSDT"


LOKAUSDT = LOKAUSDT()
"""
    name: LOKAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMBNB(NamedTuple):
    """
        name: LOOMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMBNB"

    def __str__(self):
        return "LOOMBNB"

    def __call__(self):
        return "LOOMBNB"


LOOMBNB = LOOMBNB()
"""
    name: LOOMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMBTC(NamedTuple):
    """
        name: LOOMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMBTC"

    def __str__(self):
        return "LOOMBTC"

    def __call__(self):
        return "LOOMBTC"


LOOMBTC = LOOMBTC()
"""
    name: LOOMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMBUSD(NamedTuple):
    """
        name: LOOMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMBUSD"

    def __str__(self):
        return "LOOMBUSD"

    def __call__(self):
        return "LOOMBUSD"


LOOMBUSD = LOOMBUSD()
"""
    name: LOOMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMETH(NamedTuple):
    """
        name: LOOMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMETH"

    def __str__(self):
        return "LOOMETH"

    def __call__(self):
        return "LOOMETH"


LOOMETH = LOOMETH()
"""
    name: LOOMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LOOMUSDT(NamedTuple):
    """
        name: LOOMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LOOMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOMUSDT"

    def __str__(self):
        return "LOOMUSDT"

    def __call__(self):
        return "LOOMUSDT"


LOOMUSDT = LOOMUSDT()
"""
    name: LOOMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LPTBNB(NamedTuple):
    """
        name: LPTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LPTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPTBNB"

    def __str__(self):
        return "LPTBNB"

    def __call__(self):
        return "LPTBNB"


LPTBNB = LPTBNB()
"""
    name: LPTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LPTBTC(NamedTuple):
    """
        name: LPTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LPTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPTBTC"

    def __str__(self):
        return "LPTBTC"

    def __call__(self):
        return "LPTBTC"


LPTBTC = LPTBTC()
"""
    name: LPTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LPTBUSD(NamedTuple):
    """
        name: LPTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LPTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPTBUSD"

    def __str__(self):
        return "LPTBUSD"

    def __call__(self):
        return "LPTBUSD"


LPTBUSD = LPTBUSD()
"""
    name: LPTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LPTUSDT(NamedTuple):
    """
        name: LPTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LPTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPTUSDT"

    def __str__(self):
        return "LPTUSDT"

    def __call__(self):
        return "LPTUSDT"


LPTUSDT = LPTUSDT()
"""
    name: LPTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LQTYBTC(NamedTuple):
    """
        name: LQTYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LQTYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LQTYBTC"

    def __str__(self):
        return "LQTYBTC"

    def __call__(self):
        return "LQTYBTC"


LQTYBTC = LQTYBTC()
"""
    name: LQTYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LQTYUSDT(NamedTuple):
    """
        name: LQTYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LQTYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LQTYUSDT"

    def __str__(self):
        return "LQTYUSDT"

    def __call__(self):
        return "LQTYUSDT"


LQTYUSDT = LQTYUSDT()
"""
    name: LQTYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LRCBNB(NamedTuple):
    """
        name: LRCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LRCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCBNB"

    def __str__(self):
        return "LRCBNB"

    def __call__(self):
        return "LRCBNB"


LRCBNB = LRCBNB()
"""
    name: LRCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LRCBTC(NamedTuple):
    """
        name: LRCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LRCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCBTC"

    def __str__(self):
        return "LRCBTC"

    def __call__(self):
        return "LRCBTC"


LRCBTC = LRCBTC()
"""
    name: LRCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LRCBUSD(NamedTuple):
    """
        name: LRCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LRCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCBUSD"

    def __str__(self):
        return "LRCBUSD"

    def __call__(self):
        return "LRCBUSD"


LRCBUSD = LRCBUSD()
"""
    name: LRCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LRCETH(NamedTuple):
    """
        name: LRCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LRCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCETH"

    def __str__(self):
        return "LRCETH"

    def __call__(self):
        return "LRCETH"


LRCETH = LRCETH()
"""
    name: LRCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LRCTRY(NamedTuple):
    """
        name: LRCTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LRCTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCTRY"

    def __str__(self):
        return "LRCTRY"

    def __call__(self):
        return "LRCTRY"


LRCTRY = LRCTRY()
"""
    name: LRCTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LRCUSDT(NamedTuple):
    """
        name: LRCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LRCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRCUSDT"

    def __str__(self):
        return "LRCUSDT"

    def __call__(self):
        return "LRCUSDT"


LRCUSDT = LRCUSDT()
"""
    name: LRCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LSKBNB(NamedTuple):
    """
        name: LSKBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKBNB"

    def __str__(self):
        return "LSKBNB"

    def __call__(self):
        return "LSKBNB"


LSKBNB = LSKBNB()
"""
    name: LSKBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LSKBTC(NamedTuple):
    """
        name: LSKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKBTC"

    def __str__(self):
        return "LSKBTC"

    def __call__(self):
        return "LSKBTC"


LSKBTC = LSKBTC()
"""
    name: LSKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LSKBUSD(NamedTuple):
    """
        name: LSKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKBUSD"

    def __str__(self):
        return "LSKBUSD"

    def __call__(self):
        return "LSKBUSD"


LSKBUSD = LSKBUSD()
"""
    name: LSKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LSKETH(NamedTuple):
    """
        name: LSKETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKETH"

    def __str__(self):
        return "LSKETH"

    def __call__(self):
        return "LSKETH"


LSKETH = LSKETH()
"""
    name: LSKETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LSKUSDT(NamedTuple):
    """
        name: LSKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LSKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSKUSDT"

    def __str__(self):
        return "LSKUSDT"

    def __call__(self):
        return "LSKUSDT"


LSKUSDT = LSKUSDT()
"""
    name: LSKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCBNB(NamedTuple):
    """
        name: LTCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCBNB"

    def __str__(self):
        return "LTCBNB"

    def __call__(self):
        return "LTCBNB"


LTCBNB = LTCBNB()
"""
    name: LTCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCBRL(NamedTuple):
    """
        name: LTCBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCBRL"

    def __str__(self):
        return "LTCBRL"

    def __call__(self):
        return "LTCBRL"


LTCBRL = LTCBRL()
"""
    name: LTCBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCBTC(NamedTuple):
    """
        name: LTCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCBTC"

    def __str__(self):
        return "LTCBTC"

    def __call__(self):
        return "LTCBTC"


LTCBTC = LTCBTC()
"""
    name: LTCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTCBUSD(NamedTuple):
    """
        name: LTCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCBUSD"

    def __str__(self):
        return "LTCBUSD"

    def __call__(self):
        return "LTCBUSD"


LTCBUSD = LTCBUSD()
"""
    name: LTCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTCDOWNUSDT(NamedTuple):
    """
        name: LTCDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCDOWNUSDT"

    def __str__(self):
        return "LTCDOWNUSDT"

    def __call__(self):
        return "LTCDOWNUSDT"


LTCDOWNUSDT = LTCDOWNUSDT()
"""
    name: LTCDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCETH(NamedTuple):
    """
        name: LTCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCETH"

    def __str__(self):
        return "LTCETH"

    def __call__(self):
        return "LTCETH"


LTCETH = LTCETH()
"""
    name: LTCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTCEUR(NamedTuple):
    """
        name: LTCEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCEUR"

    def __str__(self):
        return "LTCEUR"

    def __call__(self):
        return "LTCEUR"


LTCEUR = LTCEUR()
"""
    name: LTCEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCGBP(NamedTuple):
    """
        name: LTCGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCGBP"

    def __str__(self):
        return "LTCGBP"

    def __call__(self):
        return "LTCGBP"


LTCGBP = LTCGBP()
"""
    name: LTCGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCNGN(NamedTuple):
    """
        name: LTCNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCNGN"

    def __str__(self):
        return "LTCNGN"

    def __call__(self):
        return "LTCNGN"


LTCNGN = LTCNGN()
"""
    name: LTCNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCPAX(NamedTuple):
    """
        name: LTCPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCPAX"

    def __str__(self):
        return "LTCPAX"

    def __call__(self):
        return "LTCPAX"


LTCPAX = LTCPAX()
"""
    name: LTCPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCRUB(NamedTuple):
    """
        name: LTCRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCRUB"

    def __str__(self):
        return "LTCRUB"

    def __call__(self):
        return "LTCRUB"


LTCRUB = LTCRUB()
"""
    name: LTCRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCTUSD(NamedTuple):
    """
        name: LTCTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCTUSD"

    def __str__(self):
        return "LTCTUSD"

    def __call__(self):
        return "LTCTUSD"


LTCTUSD = LTCTUSD()
"""
    name: LTCTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCUAH(NamedTuple):
    """
        name: LTCUAH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCUAH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCUAH"

    def __str__(self):
        return "LTCUAH"

    def __call__(self):
        return "LTCUAH"


LTCUAH = LTCUAH()
"""
    name: LTCUAH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCUPUSDT(NamedTuple):
    """
        name: LTCUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCUPUSDT"

    def __str__(self):
        return "LTCUPUSDT"

    def __call__(self):
        return "LTCUPUSDT"


LTCUPUSDT = LTCUPUSDT()
"""
    name: LTCUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCUSDC(NamedTuple):
    """
        name: LTCUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTCUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCUSDC"

    def __str__(self):
        return "LTCUSDC"

    def __call__(self):
        return "LTCUSDC"


LTCUSDC = LTCUSDC()
"""
    name: LTCUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTCUSDT(NamedTuple):
    """
        name: LTCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTCUSDT"

    def __str__(self):
        return "LTCUSDT"

    def __call__(self):
        return "LTCUSDT"


LTCUSDT = LTCUSDT()
"""
    name: LTCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTOBNB(NamedTuple):
    """
        name: LTOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTOBNB"

    def __str__(self):
        return "LTOBNB"

    def __call__(self):
        return "LTOBNB"


LTOBNB = LTOBNB()
"""
    name: LTOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTOBTC(NamedTuple):
    """
        name: LTOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTOBTC"

    def __str__(self):
        return "LTOBTC"

    def __call__(self):
        return "LTOBTC"


LTOBTC = LTOBTC()
"""
    name: LTOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LTOBUSD(NamedTuple):
    """
        name: LTOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LTOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTOBUSD"

    def __str__(self):
        return "LTOBUSD"

    def __call__(self):
        return "LTOBUSD"


LTOBUSD = LTOBUSD()
"""
    name: LTOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LTOUSDT(NamedTuple):
    """
        name: LTOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LTOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTOUSDT"

    def __str__(self):
        return "LTOUSDT"

    def __call__(self):
        return "LTOUSDT"


LTOUSDT = LTOUSDT()
"""
    name: LTOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNAAUD(NamedTuple):
    """
        name: LUNAAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAAUD"

    def __str__(self):
        return "LUNAAUD"

    def __call__(self):
        return "LUNAAUD"


LUNAAUD = LUNAAUD()
"""
    name: LUNAAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNABIDR(NamedTuple):
    """
        name: LUNABIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "LUNABIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABIDR"

    def __str__(self):
        return "LUNABIDR"

    def __call__(self):
        return "LUNABIDR"


LUNABIDR = LUNABIDR()
"""
    name: LUNABIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class LUNABNB(NamedTuple):
    """
        name: LUNABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABNB"

    def __str__(self):
        return "LUNABNB"

    def __call__(self):
        return "LUNABNB"


LUNABNB = LUNABNB()
"""
    name: LUNABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNABRL(NamedTuple):
    """
        name: LUNABRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNABRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABRL"

    def __str__(self):
        return "LUNABRL"

    def __call__(self):
        return "LUNABRL"


LUNABRL = LUNABRL()
"""
    name: LUNABRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNABTC(NamedTuple):
    """
        name: LUNABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABTC"

    def __str__(self):
        return "LUNABTC"

    def __call__(self):
        return "LUNABTC"


LUNABTC = LUNABTC()
"""
    name: LUNABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNABUSD(NamedTuple):
    """
        name: LUNABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNABUSD"

    def __str__(self):
        return "LUNABUSD"

    def __call__(self):
        return "LUNABUSD"


LUNABUSD = LUNABUSD()
"""
    name: LUNABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNAETH(NamedTuple):
    """
        name: LUNAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAETH"

    def __str__(self):
        return "LUNAETH"

    def __call__(self):
        return "LUNAETH"


LUNAETH = LUNAETH()
"""
    name: LUNAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNAEUR(NamedTuple):
    """
        name: LUNAEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAEUR"

    def __str__(self):
        return "LUNAEUR"

    def __call__(self):
        return "LUNAEUR"


LUNAEUR = LUNAEUR()
"""
    name: LUNAEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNAGBP(NamedTuple):
    """
        name: LUNAGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAGBP"

    def __str__(self):
        return "LUNAGBP"

    def __call__(self):
        return "LUNAGBP"


LUNAGBP = LUNAGBP()
"""
    name: LUNAGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNATRY(NamedTuple):
    """
        name: LUNATRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNATRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNATRY"

    def __str__(self):
        return "LUNATRY"

    def __call__(self):
        return "LUNATRY"


LUNATRY = LUNATRY()
"""
    name: LUNATRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNAUSDT(NamedTuple):
    """
        name: LUNAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAUSDT"

    def __str__(self):
        return "LUNAUSDT"

    def __call__(self):
        return "LUNAUSDT"


LUNAUSDT = LUNAUSDT()
"""
    name: LUNAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNAUST(NamedTuple):
    """
        name: LUNAUST
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNAUST"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNAUST"

    def __str__(self):
        return "LUNAUST"

    def __call__(self):
        return "LUNAUST"


LUNAUST = LUNAUST()
"""
    name: LUNAUST
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNBTC(NamedTuple):
    """
        name: LUNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNBTC"

    def __str__(self):
        return "LUNBTC"

    def __call__(self):
        return "LUNBTC"


LUNBTC = LUNBTC()
"""
    name: LUNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class LUNCBUSD(NamedTuple):
    """
        name: LUNCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNCBUSD"

    def __str__(self):
        return "LUNCBUSD"

    def __call__(self):
        return "LUNCBUSD"


LUNCBUSD = LUNCBUSD()
"""
    name: LUNCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNCUSDT(NamedTuple):
    """
        name: LUNCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "LUNCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNCUSDT"

    def __str__(self):
        return "LUNCUSDT"

    def __call__(self):
        return "LUNCUSDT"


LUNCUSDT = LUNCUSDT()
"""
    name: LUNCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class LUNETH(NamedTuple):
    """
        name: LUNETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "LUNETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNETH"

    def __str__(self):
        return "LUNETH"

    def __call__(self):
        return "LUNETH"


LUNETH = LUNETH()
"""
    name: LUNETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MAGICBTC(NamedTuple):
    """
        name: MAGICBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MAGICBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGICBTC"

    def __str__(self):
        return "MAGICBTC"

    def __call__(self):
        return "MAGICBTC"


MAGICBTC = MAGICBTC()
"""
    name: MAGICBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MAGICBUSD(NamedTuple):
    """
        name: MAGICBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MAGICBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGICBUSD"

    def __str__(self):
        return "MAGICBUSD"

    def __call__(self):
        return "MAGICBUSD"


MAGICBUSD = MAGICBUSD()
"""
    name: MAGICBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MAGICTRY(NamedTuple):
    """
        name: MAGICTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MAGICTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGICTRY"

    def __str__(self):
        return "MAGICTRY"

    def __call__(self):
        return "MAGICTRY"


MAGICTRY = MAGICTRY()
"""
    name: MAGICTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MAGICUSDT(NamedTuple):
    """
        name: MAGICUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MAGICUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGICUSDT"

    def __str__(self):
        return "MAGICUSDT"

    def __call__(self):
        return "MAGICUSDT"


MAGICUSDT = MAGICUSDT()
"""
    name: MAGICUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MANABIDR(NamedTuple):
    """
        name: MANABIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "MANABIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABIDR"

    def __str__(self):
        return "MANABIDR"

    def __call__(self):
        return "MANABIDR"


MANABIDR = MANABIDR()
"""
    name: MANABIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class MANABNB(NamedTuple):
    """
        name: MANABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MANABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABNB"

    def __str__(self):
        return "MANABNB"

    def __call__(self):
        return "MANABNB"


MANABNB = MANABNB()
"""
    name: MANABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MANABRL(NamedTuple):
    """
        name: MANABRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MANABRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABRL"

    def __str__(self):
        return "MANABRL"

    def __call__(self):
        return "MANABRL"


MANABRL = MANABRL()
"""
    name: MANABRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MANABTC(NamedTuple):
    """
        name: MANABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MANABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABTC"

    def __str__(self):
        return "MANABTC"

    def __call__(self):
        return "MANABTC"


MANABTC = MANABTC()
"""
    name: MANABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MANABUSD(NamedTuple):
    """
        name: MANABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MANABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANABUSD"

    def __str__(self):
        return "MANABUSD"

    def __call__(self):
        return "MANABUSD"


MANABUSD = MANABUSD()
"""
    name: MANABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MANAETH(NamedTuple):
    """
        name: MANAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MANAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANAETH"

    def __str__(self):
        return "MANAETH"

    def __call__(self):
        return "MANAETH"


MANAETH = MANAETH()
"""
    name: MANAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MANATRY(NamedTuple):
    """
        name: MANATRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MANATRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANATRY"

    def __str__(self):
        return "MANATRY"

    def __call__(self):
        return "MANATRY"


MANATRY = MANATRY()
"""
    name: MANATRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MANAUSDT(NamedTuple):
    """
        name: MANAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MANAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANAUSDT"

    def __str__(self):
        return "MANAUSDT"

    def __call__(self):
        return "MANAUSDT"


MANAUSDT = MANAUSDT()
"""
    name: MANAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MASKBNB(NamedTuple):
    """
        name: MASKBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MASKBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASKBNB"

    def __str__(self):
        return "MASKBNB"

    def __call__(self):
        return "MASKBNB"


MASKBNB = MASKBNB()
"""
    name: MASKBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MASKBUSD(NamedTuple):
    """
        name: MASKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MASKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASKBUSD"

    def __str__(self):
        return "MASKBUSD"

    def __call__(self):
        return "MASKBUSD"


MASKBUSD = MASKBUSD()
"""
    name: MASKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MASKUSDT(NamedTuple):
    """
        name: MASKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MASKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASKUSDT"

    def __str__(self):
        return "MASKUSDT"

    def __call__(self):
        return "MASKUSDT"


MASKUSDT = MASKUSDT()
"""
    name: MASKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MATICAUD(NamedTuple):
    """
        name: MATICAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICAUD"

    def __str__(self):
        return "MATICAUD"

    def __call__(self):
        return "MATICAUD"


MATICAUD = MATICAUD()
"""
    name: MATICAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICBIDR(NamedTuple):
    """
        name: MATICBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "MATICBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBIDR"

    def __str__(self):
        return "MATICBIDR"

    def __call__(self):
        return "MATICBIDR"


MATICBIDR = MATICBIDR()
"""
    name: MATICBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class MATICBNB(NamedTuple):
    """
        name: MATICBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBNB"

    def __str__(self):
        return "MATICBNB"

    def __call__(self):
        return "MATICBNB"


MATICBNB = MATICBNB()
"""
    name: MATICBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICBRL(NamedTuple):
    """
        name: MATICBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBRL"

    def __str__(self):
        return "MATICBRL"

    def __call__(self):
        return "MATICBRL"


MATICBRL = MATICBRL()
"""
    name: MATICBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICBTC(NamedTuple):
    """
        name: MATICBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MATICBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBTC"

    def __str__(self):
        return "MATICBTC"

    def __call__(self):
        return "MATICBTC"


MATICBTC = MATICBTC()
"""
    name: MATICBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MATICBUSD(NamedTuple):
    """
        name: MATICBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MATICBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICBUSD"

    def __str__(self):
        return "MATICBUSD"

    def __call__(self):
        return "MATICBUSD"


MATICBUSD = MATICBUSD()
"""
    name: MATICBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MATICETH(NamedTuple):
    """
        name: MATICETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICETH"

    def __str__(self):
        return "MATICETH"

    def __call__(self):
        return "MATICETH"


MATICETH = MATICETH()
"""
    name: MATICETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICEUR(NamedTuple):
    """
        name: MATICEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICEUR"

    def __str__(self):
        return "MATICEUR"

    def __call__(self):
        return "MATICEUR"


MATICEUR = MATICEUR()
"""
    name: MATICEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICGBP(NamedTuple):
    """
        name: MATICGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICGBP"

    def __str__(self):
        return "MATICGBP"

    def __call__(self):
        return "MATICGBP"


MATICGBP = MATICGBP()
"""
    name: MATICGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICRUB(NamedTuple):
    """
        name: MATICRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICRUB"

    def __str__(self):
        return "MATICRUB"

    def __call__(self):
        return "MATICRUB"


MATICRUB = MATICRUB()
"""
    name: MATICRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICTRY(NamedTuple):
    """
        name: MATICTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICTRY"

    def __str__(self):
        return "MATICTRY"

    def __call__(self):
        return "MATICTRY"


MATICTRY = MATICTRY()
"""
    name: MATICTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICTUSD(NamedTuple):
    """
        name: MATICTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MATICTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICTUSD"

    def __str__(self):
        return "MATICTUSD"

    def __call__(self):
        return "MATICTUSD"


MATICTUSD = MATICTUSD()
"""
    name: MATICTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MATICUSDT(NamedTuple):
    """
        name: MATICUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MATICUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATICUSDT"

    def __str__(self):
        return "MATICUSDT"

    def __call__(self):
        return "MATICUSDT"


MATICUSDT = MATICUSDT()
"""
    name: MATICUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MBLBNB(NamedTuple):
    """
        name: MBLBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBLBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBLBNB"

    def __str__(self):
        return "MBLBNB"

    def __call__(self):
        return "MBLBNB"


MBLBNB = MBLBNB()
"""
    name: MBLBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBLBTC(NamedTuple):
    """
        name: MBLBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBLBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBLBTC"

    def __str__(self):
        return "MBLBTC"

    def __call__(self):
        return "MBLBTC"


MBLBTC = MBLBTC()
"""
    name: MBLBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBLBUSD(NamedTuple):
    """
        name: MBLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MBLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBLBUSD"

    def __str__(self):
        return "MBLBUSD"

    def __call__(self):
        return "MBLBUSD"


MBLBUSD = MBLBUSD()
"""
    name: MBLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MBLUSDT(NamedTuple):
    """
        name: MBLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MBLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBLUSDT"

    def __str__(self):
        return "MBLUSDT"

    def __call__(self):
        return "MBLUSDT"


MBLUSDT = MBLUSDT()
"""
    name: MBLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MBOXBNB(NamedTuple):
    """
        name: MBOXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXBNB"

    def __str__(self):
        return "MBOXBNB"

    def __call__(self):
        return "MBOXBNB"


MBOXBNB = MBOXBNB()
"""
    name: MBOXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBOXBTC(NamedTuple):
    """
        name: MBOXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXBTC"

    def __str__(self):
        return "MBOXBTC"

    def __call__(self):
        return "MBOXBTC"


MBOXBTC = MBOXBTC()
"""
    name: MBOXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBOXBUSD(NamedTuple):
    """
        name: MBOXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXBUSD"

    def __str__(self):
        return "MBOXBUSD"

    def __call__(self):
        return "MBOXBUSD"


MBOXBUSD = MBOXBUSD()
"""
    name: MBOXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBOXTRY(NamedTuple):
    """
        name: MBOXTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXTRY"

    def __str__(self):
        return "MBOXTRY"

    def __call__(self):
        return "MBOXTRY"


MBOXTRY = MBOXTRY()
"""
    name: MBOXTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MBOXUSDT(NamedTuple):
    """
        name: MBOXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MBOXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBOXUSDT"

    def __str__(self):
        return "MBOXUSDT"

    def __call__(self):
        return "MBOXUSDT"


MBOXUSDT = MBOXUSDT()
"""
    name: MBOXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCBNB(NamedTuple):
    """
        name: MCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCBNB"

    def __str__(self):
        return "MCBNB"

    def __call__(self):
        return "MCBNB"


MCBNB = MCBNB()
"""
    name: MCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCBTC(NamedTuple):
    """
        name: MCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCBTC"

    def __str__(self):
        return "MCBTC"

    def __call__(self):
        return "MCBTC"


MCBTC = MCBTC()
"""
    name: MCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCBUSD(NamedTuple):
    """
        name: MCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCBUSD"

    def __str__(self):
        return "MCBUSD"

    def __call__(self):
        return "MCBUSD"


MCBUSD = MCBUSD()
"""
    name: MCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCOBNB(NamedTuple):
    """
        name: MCOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCOBNB"

    def __str__(self):
        return "MCOBNB"

    def __call__(self):
        return "MCOBNB"


MCOBNB = MCOBNB()
"""
    name: MCOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCOBTC(NamedTuple):
    """
        name: MCOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCOBTC"

    def __str__(self):
        return "MCOBTC"

    def __call__(self):
        return "MCOBTC"


MCOBTC = MCOBTC()
"""
    name: MCOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCOETH(NamedTuple):
    """
        name: MCOETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCOETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCOETH"

    def __str__(self):
        return "MCOETH"

    def __call__(self):
        return "MCOETH"


MCOETH = MCOETH()
"""
    name: MCOETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCOUSDT(NamedTuple):
    """
        name: MCOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MCOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCOUSDT"

    def __str__(self):
        return "MCOUSDT"

    def __call__(self):
        return "MCOUSDT"


MCOUSDT = MCOUSDT()
"""
    name: MCOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MCUSDT(NamedTuple):
    """
        name: MCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MCUSDT"

    def __str__(self):
        return "MCUSDT"

    def __call__(self):
        return "MCUSDT"


MCUSDT = MCUSDT()
"""
    name: MCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MDABTC(NamedTuple):
    """
        name: MDABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDABTC"

    def __str__(self):
        return "MDABTC"

    def __call__(self):
        return "MDABTC"


MDABTC = MDABTC()
"""
    name: MDABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDAETH(NamedTuple):
    """
        name: MDAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDAETH"

    def __str__(self):
        return "MDAETH"

    def __call__(self):
        return "MDAETH"


MDAETH = MDAETH()
"""
    name: MDAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDTBNB(NamedTuple):
    """
        name: MDTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDTBNB"

    def __str__(self):
        return "MDTBNB"

    def __call__(self):
        return "MDTBNB"


MDTBNB = MDTBNB()
"""
    name: MDTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDTBTC(NamedTuple):
    """
        name: MDTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDTBTC"

    def __str__(self):
        return "MDTBTC"

    def __call__(self):
        return "MDTBTC"


MDTBTC = MDTBTC()
"""
    name: MDTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDTBUSD(NamedTuple):
    """
        name: MDTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDTBUSD"

    def __str__(self):
        return "MDTBUSD"

    def __call__(self):
        return "MDTBUSD"


MDTBUSD = MDTBUSD()
"""
    name: MDTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDTUSDT(NamedTuple):
    """
        name: MDTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MDTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDTUSDT"

    def __str__(self):
        return "MDTUSDT"

    def __call__(self):
        return "MDTUSDT"


MDTUSDT = MDTUSDT()
"""
    name: MDTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MDXBNB(NamedTuple):
    """
        name: MDXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MDXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDXBNB"

    def __str__(self):
        return "MDXBNB"

    def __call__(self):
        return "MDXBNB"


MDXBNB = MDXBNB()
"""
    name: MDXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MDXBTC(NamedTuple):
    """
        name: MDXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MDXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDXBTC"

    def __str__(self):
        return "MDXBTC"

    def __call__(self):
        return "MDXBTC"


MDXBTC = MDXBTC()
"""
    name: MDXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MDXBUSD(NamedTuple):
    """
        name: MDXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MDXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDXBUSD"

    def __str__(self):
        return "MDXBUSD"

    def __call__(self):
        return "MDXBUSD"


MDXBUSD = MDXBUSD()
"""
    name: MDXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MDXUSDT(NamedTuple):
    """
        name: MDXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MDXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MDXUSDT"

    def __str__(self):
        return "MDXUSDT"

    def __call__(self):
        return "MDXUSDT"


MDXUSDT = MDXUSDT()
"""
    name: MDXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MFTBNB(NamedTuple):
    """
        name: MFTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MFTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFTBNB"

    def __str__(self):
        return "MFTBNB"

    def __call__(self):
        return "MFTBNB"


MFTBNB = MFTBNB()
"""
    name: MFTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MFTBTC(NamedTuple):
    """
        name: MFTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MFTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFTBTC"

    def __str__(self):
        return "MFTBTC"

    def __call__(self):
        return "MFTBTC"


MFTBTC = MFTBTC()
"""
    name: MFTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MFTETH(NamedTuple):
    """
        name: MFTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MFTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFTETH"

    def __str__(self):
        return "MFTETH"

    def __call__(self):
        return "MFTETH"


MFTETH = MFTETH()
"""
    name: MFTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MFTUSDT(NamedTuple):
    """
        name: MFTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MFTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFTUSDT"

    def __str__(self):
        return "MFTUSDT"

    def __call__(self):
        return "MFTUSDT"


MFTUSDT = MFTUSDT()
"""
    name: MFTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MINABNB(NamedTuple):
    """
        name: MINABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MINABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINABNB"

    def __str__(self):
        return "MINABNB"

    def __call__(self):
        return "MINABNB"


MINABNB = MINABNB()
"""
    name: MINABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MINABTC(NamedTuple):
    """
        name: MINABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MINABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINABTC"

    def __str__(self):
        return "MINABTC"

    def __call__(self):
        return "MINABTC"


MINABTC = MINABTC()
"""
    name: MINABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MINABUSD(NamedTuple):
    """
        name: MINABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MINABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINABUSD"

    def __str__(self):
        return "MINABUSD"

    def __call__(self):
        return "MINABUSD"


MINABUSD = MINABUSD()
"""
    name: MINABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MINATRY(NamedTuple):
    """
        name: MINATRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MINATRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINATRY"

    def __str__(self):
        return "MINATRY"

    def __call__(self):
        return "MINATRY"


MINATRY = MINATRY()
"""
    name: MINATRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MINAUSDT(NamedTuple):
    """
        name: MINAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MINAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINAUSDT"

    def __str__(self):
        return "MINAUSDT"

    def __call__(self):
        return "MINAUSDT"


MINAUSDT = MINAUSDT()
"""
    name: MINAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MIRBTC(NamedTuple):
    """
        name: MIRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MIRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIRBTC"

    def __str__(self):
        return "MIRBTC"

    def __call__(self):
        return "MIRBTC"


MIRBTC = MIRBTC()
"""
    name: MIRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MIRBUSD(NamedTuple):
    """
        name: MIRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MIRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIRBUSD"

    def __str__(self):
        return "MIRBUSD"

    def __call__(self):
        return "MIRBUSD"


MIRBUSD = MIRBUSD()
"""
    name: MIRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MIRUSDT(NamedTuple):
    """
        name: MIRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MIRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIRUSDT"

    def __str__(self):
        return "MIRUSDT"

    def __call__(self):
        return "MIRUSDT"


MIRUSDT = MIRUSDT()
"""
    name: MIRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MITHBNB(NamedTuple):
    """
        name: MITHBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MITHBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITHBNB"

    def __str__(self):
        return "MITHBNB"

    def __call__(self):
        return "MITHBNB"


MITHBNB = MITHBNB()
"""
    name: MITHBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MITHBTC(NamedTuple):
    """
        name: MITHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MITHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITHBTC"

    def __str__(self):
        return "MITHBTC"

    def __call__(self):
        return "MITHBTC"


MITHBTC = MITHBTC()
"""
    name: MITHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MITHUSDT(NamedTuple):
    """
        name: MITHUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MITHUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITHUSDT"

    def __str__(self):
        return "MITHUSDT"

    def __call__(self):
        return "MITHUSDT"


MITHUSDT = MITHUSDT()
"""
    name: MITHUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MKRBNB(NamedTuple):
    """
        name: MKRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MKRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKRBNB"

    def __str__(self):
        return "MKRBNB"

    def __call__(self):
        return "MKRBNB"


MKRBNB = MKRBNB()
"""
    name: MKRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MKRBTC(NamedTuple):
    """
        name: MKRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MKRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKRBTC"

    def __str__(self):
        return "MKRBTC"

    def __call__(self):
        return "MKRBTC"


MKRBTC = MKRBTC()
"""
    name: MKRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MKRBUSD(NamedTuple):
    """
        name: MKRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MKRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKRBUSD"

    def __str__(self):
        return "MKRBUSD"

    def __call__(self):
        return "MKRBUSD"


MKRBUSD = MKRBUSD()
"""
    name: MKRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MKRUSDT(NamedTuple):
    """
        name: MKRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MKRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKRUSDT"

    def __str__(self):
        return "MKRUSDT"

    def __call__(self):
        return "MKRUSDT"


MKRUSDT = MKRUSDT()
"""
    name: MKRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MLNBNB(NamedTuple):
    """
        name: MLNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MLNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLNBNB"

    def __str__(self):
        return "MLNBNB"

    def __call__(self):
        return "MLNBNB"


MLNBNB = MLNBNB()
"""
    name: MLNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MLNBTC(NamedTuple):
    """
        name: MLNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MLNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLNBTC"

    def __str__(self):
        return "MLNBTC"

    def __call__(self):
        return "MLNBTC"


MLNBTC = MLNBTC()
"""
    name: MLNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MLNBUSD(NamedTuple):
    """
        name: MLNBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MLNBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLNBUSD"

    def __str__(self):
        return "MLNBUSD"

    def __call__(self):
        return "MLNBUSD"


MLNBUSD = MLNBUSD()
"""
    name: MLNBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MLNUSDT(NamedTuple):
    """
        name: MLNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MLNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLNUSDT"

    def __str__(self):
        return "MLNUSDT"

    def __call__(self):
        return "MLNUSDT"


MLNUSDT = MLNUSDT()
"""
    name: MLNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOBBTC(NamedTuple):
    """
        name: MOBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOBBTC"

    def __str__(self):
        return "MOBBTC"

    def __call__(self):
        return "MOBBTC"


MOBBTC = MOBBTC()
"""
    name: MOBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOBBUSD(NamedTuple):
    """
        name: MOBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOBBUSD"

    def __str__(self):
        return "MOBBUSD"

    def __call__(self):
        return "MOBBUSD"


MOBBUSD = MOBBUSD()
"""
    name: MOBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOBUSDT(NamedTuple):
    """
        name: MOBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOBUSDT"

    def __str__(self):
        return "MOBUSDT"

    def __call__(self):
        return "MOBUSDT"


MOBUSDT = MOBUSDT()
"""
    name: MOBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MODBTC(NamedTuple):
    """
        name: MODBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MODBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MODBTC"

    def __str__(self):
        return "MODBTC"

    def __call__(self):
        return "MODBTC"


MODBTC = MODBTC()
"""
    name: MODBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MODETH(NamedTuple):
    """
        name: MODETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MODETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MODETH"

    def __str__(self):
        return "MODETH"

    def __call__(self):
        return "MODETH"


MODETH = MODETH()
"""
    name: MODETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOVRBNB(NamedTuple):
    """
        name: MOVRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOVRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVRBNB"

    def __str__(self):
        return "MOVRBNB"

    def __call__(self):
        return "MOVRBNB"


MOVRBNB = MOVRBNB()
"""
    name: MOVRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOVRBTC(NamedTuple):
    """
        name: MOVRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOVRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVRBTC"

    def __str__(self):
        return "MOVRBTC"

    def __call__(self):
        return "MOVRBTC"


MOVRBTC = MOVRBTC()
"""
    name: MOVRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOVRBUSD(NamedTuple):
    """
        name: MOVRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOVRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVRBUSD"

    def __str__(self):
        return "MOVRBUSD"

    def __call__(self):
        return "MOVRBUSD"


MOVRBUSD = MOVRBUSD()
"""
    name: MOVRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MOVRUSDT(NamedTuple):
    """
        name: MOVRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MOVRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVRUSDT"

    def __str__(self):
        return "MOVRUSDT"

    def __call__(self):
        return "MOVRUSDT"


MOVRUSDT = MOVRUSDT()
"""
    name: MOVRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MTHBTC(NamedTuple):
    """
        name: MTHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MTHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTHBTC"

    def __str__(self):
        return "MTHBTC"

    def __call__(self):
        return "MTHBTC"


MTHBTC = MTHBTC()
"""
    name: MTHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MTHETH(NamedTuple):
    """
        name: MTHETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MTHETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTHETH"

    def __str__(self):
        return "MTHETH"

    def __call__(self):
        return "MTHETH"


MTHETH = MTHETH()
"""
    name: MTHETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MTLBTC(NamedTuple):
    """
        name: MTLBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MTLBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTLBTC"

    def __str__(self):
        return "MTLBTC"

    def __call__(self):
        return "MTLBTC"


MTLBTC = MTLBTC()
"""
    name: MTLBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MTLBUSD(NamedTuple):
    """
        name: MTLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MTLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTLBUSD"

    def __str__(self):
        return "MTLBUSD"

    def __call__(self):
        return "MTLBUSD"


MTLBUSD = MTLBUSD()
"""
    name: MTLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MTLETH(NamedTuple):
    """
        name: MTLETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MTLETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTLETH"

    def __str__(self):
        return "MTLETH"

    def __call__(self):
        return "MTLETH"


MTLETH = MTLETH()
"""
    name: MTLETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MTLUSDT(NamedTuple):
    """
        name: MTLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "MTLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTLUSDT"

    def __str__(self):
        return "MTLUSDT"

    def __call__(self):
        return "MTLUSDT"


MTLUSDT = MTLUSDT()
"""
    name: MTLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class MULTIBTC(NamedTuple):
    """
        name: MULTIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MULTIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MULTIBTC"

    def __str__(self):
        return "MULTIBTC"

    def __call__(self):
        return "MULTIBTC"


MULTIBTC = MULTIBTC()
"""
    name: MULTIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MULTIBUSD(NamedTuple):
    """
        name: MULTIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MULTIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MULTIBUSD"

    def __str__(self):
        return "MULTIBUSD"

    def __call__(self):
        return "MULTIBUSD"


MULTIBUSD = MULTIBUSD()
"""
    name: MULTIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class MULTIUSDT(NamedTuple):
    """
        name: MULTIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "MULTIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MULTIUSDT"

    def __str__(self):
        return "MULTIUSDT"

    def __call__(self):
        return "MULTIUSDT"


MULTIUSDT = MULTIUSDT()
"""
    name: MULTIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOBNB(NamedTuple):
    """
        name: NANOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOBNB"

    def __str__(self):
        return "NANOBNB"

    def __call__(self):
        return "NANOBNB"


NANOBNB = NANOBNB()
"""
    name: NANOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOBTC(NamedTuple):
    """
        name: NANOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOBTC"

    def __str__(self):
        return "NANOBTC"

    def __call__(self):
        return "NANOBTC"


NANOBTC = NANOBTC()
"""
    name: NANOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOBUSD(NamedTuple):
    """
        name: NANOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOBUSD"

    def __str__(self):
        return "NANOBUSD"

    def __call__(self):
        return "NANOBUSD"


NANOBUSD = NANOBUSD()
"""
    name: NANOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOETH(NamedTuple):
    """
        name: NANOETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOETH"

    def __str__(self):
        return "NANOETH"

    def __call__(self):
        return "NANOETH"


NANOETH = NANOETH()
"""
    name: NANOETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NANOUSDT(NamedTuple):
    """
        name: NANOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NANOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NANOUSDT"

    def __str__(self):
        return "NANOUSDT"

    def __call__(self):
        return "NANOUSDT"


NANOUSDT = NANOUSDT()
"""
    name: NANOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NASBNB(NamedTuple):
    """
        name: NASBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NASBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NASBNB"

    def __str__(self):
        return "NASBNB"

    def __call__(self):
        return "NASBNB"


NASBNB = NASBNB()
"""
    name: NASBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NASBTC(NamedTuple):
    """
        name: NASBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NASBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NASBTC"

    def __str__(self):
        return "NASBTC"

    def __call__(self):
        return "NASBTC"


NASBTC = NASBTC()
"""
    name: NASBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NASETH(NamedTuple):
    """
        name: NASETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NASETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NASETH"

    def __str__(self):
        return "NASETH"

    def __call__(self):
        return "NASETH"


NASETH = NASETH()
"""
    name: NASETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NAVBNB(NamedTuple):
    """
        name: NAVBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NAVBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAVBNB"

    def __str__(self):
        return "NAVBNB"

    def __call__(self):
        return "NAVBNB"


NAVBNB = NAVBNB()
"""
    name: NAVBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NAVBTC(NamedTuple):
    """
        name: NAVBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NAVBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAVBTC"

    def __str__(self):
        return "NAVBTC"

    def __call__(self):
        return "NAVBTC"


NAVBTC = NAVBTC()
"""
    name: NAVBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NAVETH(NamedTuple):
    """
        name: NAVETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NAVETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAVETH"

    def __str__(self):
        return "NAVETH"

    def __call__(self):
        return "NAVETH"


NAVETH = NAVETH()
"""
    name: NAVETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NBSBTC(NamedTuple):
    """
        name: NBSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NBSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NBSBTC"

    def __str__(self):
        return "NBSBTC"

    def __call__(self):
        return "NBSBTC"


NBSBTC = NBSBTC()
"""
    name: NBSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NBSUSDT(NamedTuple):
    """
        name: NBSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NBSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NBSUSDT"

    def __str__(self):
        return "NBSUSDT"

    def __call__(self):
        return "NBSUSDT"


NBSUSDT = NBSUSDT()
"""
    name: NBSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NCASHBNB(NamedTuple):
    """
        name: NCASHBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NCASHBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NCASHBNB"

    def __str__(self):
        return "NCASHBNB"

    def __call__(self):
        return "NCASHBNB"


NCASHBNB = NCASHBNB()
"""
    name: NCASHBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NCASHBTC(NamedTuple):
    """
        name: NCASHBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NCASHBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NCASHBTC"

    def __str__(self):
        return "NCASHBTC"

    def __call__(self):
        return "NCASHBTC"


NCASHBTC = NCASHBTC()
"""
    name: NCASHBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NCASHETH(NamedTuple):
    """
        name: NCASHETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NCASHETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NCASHETH"

    def __str__(self):
        return "NCASHETH"

    def __call__(self):
        return "NCASHETH"


NCASHETH = NCASHETH()
"""
    name: NCASHETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARBNB(NamedTuple):
    """
        name: NEARBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEARBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARBNB"

    def __str__(self):
        return "NEARBNB"

    def __call__(self):
        return "NEARBNB"


NEARBNB = NEARBNB()
"""
    name: NEARBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARBTC(NamedTuple):
    """
        name: NEARBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEARBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARBTC"

    def __str__(self):
        return "NEARBTC"

    def __call__(self):
        return "NEARBTC"


NEARBTC = NEARBTC()
"""
    name: NEARBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEARBUSD(NamedTuple):
    """
        name: NEARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARBUSD"

    def __str__(self):
        return "NEARBUSD"

    def __call__(self):
        return "NEARBUSD"


NEARBUSD = NEARBUSD()
"""
    name: NEARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEARETH(NamedTuple):
    """
        name: NEARETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEARETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARETH"

    def __str__(self):
        return "NEARETH"

    def __call__(self):
        return "NEARETH"


NEARETH = NEARETH()
"""
    name: NEARETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEAREUR(NamedTuple):
    """
        name: NEAREUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEAREUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAREUR"

    def __str__(self):
        return "NEAREUR"

    def __call__(self):
        return "NEAREUR"


NEAREUR = NEAREUR()
"""
    name: NEAREUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARRUB(NamedTuple):
    """
        name: NEARRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEARRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARRUB"

    def __str__(self):
        return "NEARRUB"

    def __call__(self):
        return "NEARRUB"


NEARRUB = NEARRUB()
"""
    name: NEARRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARTRY(NamedTuple):
    """
        name: NEARTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEARTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARTRY"

    def __str__(self):
        return "NEARTRY"

    def __call__(self):
        return "NEARTRY"


NEARTRY = NEARTRY()
"""
    name: NEARTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEARUSDT(NamedTuple):
    """
        name: NEARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEARUSDT"

    def __str__(self):
        return "NEARUSDT"

    def __call__(self):
        return "NEARUSDT"


NEARUSDT = NEARUSDT()
"""
    name: NEARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEBLBNB(NamedTuple):
    """
        name: NEBLBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEBLBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEBLBNB"

    def __str__(self):
        return "NEBLBNB"

    def __call__(self):
        return "NEBLBNB"


NEBLBNB = NEBLBNB()
"""
    name: NEBLBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEBLBTC(NamedTuple):
    """
        name: NEBLBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEBLBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEBLBTC"

    def __str__(self):
        return "NEBLBTC"

    def __call__(self):
        return "NEBLBTC"


NEBLBTC = NEBLBTC()
"""
    name: NEBLBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEBLBUSD(NamedTuple):
    """
        name: NEBLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEBLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEBLBUSD"

    def __str__(self):
        return "NEBLBUSD"

    def __call__(self):
        return "NEBLBUSD"


NEBLBUSD = NEBLBUSD()
"""
    name: NEBLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEBLUSDT(NamedTuple):
    """
        name: NEBLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEBLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEBLUSDT"

    def __str__(self):
        return "NEBLUSDT"

    def __call__(self):
        return "NEBLUSDT"


NEBLUSDT = NEBLUSDT()
"""
    name: NEBLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOBNB(NamedTuple):
    """
        name: NEOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOBNB"

    def __str__(self):
        return "NEOBNB"

    def __call__(self):
        return "NEOBNB"


NEOBNB = NEOBNB()
"""
    name: NEOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOBTC(NamedTuple):
    """
        name: NEOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOBTC"

    def __str__(self):
        return "NEOBTC"

    def __call__(self):
        return "NEOBTC"


NEOBTC = NEOBTC()
"""
    name: NEOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEOBUSD(NamedTuple):
    """
        name: NEOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOBUSD"

    def __str__(self):
        return "NEOBUSD"

    def __call__(self):
        return "NEOBUSD"


NEOBUSD = NEOBUSD()
"""
    name: NEOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEOETH(NamedTuple):
    """
        name: NEOETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOETH"

    def __str__(self):
        return "NEOETH"

    def __call__(self):
        return "NEOETH"


NEOETH = NEOETH()
"""
    name: NEOETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOPAX(NamedTuple):
    """
        name: NEOPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOPAX"

    def __str__(self):
        return "NEOPAX"

    def __call__(self):
        return "NEOPAX"


NEOPAX = NEOPAX()
"""
    name: NEOPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEORUB(NamedTuple):
    """
        name: NEORUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEORUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEORUB"

    def __str__(self):
        return "NEORUB"

    def __call__(self):
        return "NEORUB"


NEORUB = NEORUB()
"""
    name: NEORUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOTRY(NamedTuple):
    """
        name: NEOTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOTRY"

    def __str__(self):
        return "NEOTRY"

    def __call__(self):
        return "NEOTRY"


NEOTRY = NEOTRY()
"""
    name: NEOTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOTUSD(NamedTuple):
    """
        name: NEOTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOTUSD"

    def __str__(self):
        return "NEOTUSD"

    def __call__(self):
        return "NEOTUSD"


NEOTUSD = NEOTUSD()
"""
    name: NEOTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOUSDC(NamedTuple):
    """
        name: NEOUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEOUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOUSDC"

    def __str__(self):
        return "NEOUSDC"

    def __call__(self):
        return "NEOUSDC"


NEOUSDC = NEOUSDC()
"""
    name: NEOUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEOUSDT(NamedTuple):
    """
        name: NEOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NEOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEOUSDT"

    def __str__(self):
        return "NEOUSDT"

    def __call__(self):
        return "NEOUSDT"


NEOUSDT = NEOUSDT()
"""
    name: NEOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NEXOBTC(NamedTuple):
    """
        name: NEXOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEXOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEXOBTC"

    def __str__(self):
        return "NEXOBTC"

    def __call__(self):
        return "NEXOBTC"


NEXOBTC = NEXOBTC()
"""
    name: NEXOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEXOBUSD(NamedTuple):
    """
        name: NEXOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEXOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEXOBUSD"

    def __str__(self):
        return "NEXOBUSD"

    def __call__(self):
        return "NEXOBUSD"


NEXOBUSD = NEXOBUSD()
"""
    name: NEXOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NEXOUSDT(NamedTuple):
    """
        name: NEXOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NEXOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEXOUSDT"

    def __str__(self):
        return "NEXOUSDT"

    def __call__(self):
        return "NEXOUSDT"


NEXOUSDT = NEXOUSDT()
"""
    name: NEXOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NKNBNB(NamedTuple):
    """
        name: NKNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NKNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKNBNB"

    def __str__(self):
        return "NKNBNB"

    def __call__(self):
        return "NKNBNB"


NKNBNB = NKNBNB()
"""
    name: NKNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NKNBTC(NamedTuple):
    """
        name: NKNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NKNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKNBTC"

    def __str__(self):
        return "NKNBTC"

    def __call__(self):
        return "NKNBTC"


NKNBTC = NKNBTC()
"""
    name: NKNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NKNBUSD(NamedTuple):
    """
        name: NKNBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NKNBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKNBUSD"

    def __str__(self):
        return "NKNBUSD"

    def __call__(self):
        return "NKNBUSD"


NKNBUSD = NKNBUSD()
"""
    name: NKNBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NKNUSDT(NamedTuple):
    """
        name: NKNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NKNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKNUSDT"

    def __str__(self):
        return "NKNUSDT"

    def __call__(self):
        return "NKNUSDT"


NKNUSDT = NKNUSDT()
"""
    name: NKNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NMRBTC(NamedTuple):
    """
        name: NMRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NMRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMRBTC"

    def __str__(self):
        return "NMRBTC"

    def __call__(self):
        return "NMRBTC"


NMRBTC = NMRBTC()
"""
    name: NMRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NMRBUSD(NamedTuple):
    """
        name: NMRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NMRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMRBUSD"

    def __str__(self):
        return "NMRBUSD"

    def __call__(self):
        return "NMRBUSD"


NMRBUSD = NMRBUSD()
"""
    name: NMRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NMRUSDT(NamedTuple):
    """
        name: NMRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NMRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMRUSDT"

    def __str__(self):
        return "NMRUSDT"

    def __call__(self):
        return "NMRUSDT"


NMRUSDT = NMRUSDT()
"""
    name: NMRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NPXSBTC(NamedTuple):
    """
        name: NPXSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NPXSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NPXSBTC"

    def __str__(self):
        return "NPXSBTC"

    def __call__(self):
        return "NPXSBTC"


NPXSBTC = NPXSBTC()
"""
    name: NPXSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NPXSETH(NamedTuple):
    """
        name: NPXSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NPXSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NPXSETH"

    def __str__(self):
        return "NPXSETH"

    def __call__(self):
        return "NPXSETH"


NPXSETH = NPXSETH()
"""
    name: NPXSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NPXSUSDC(NamedTuple):
    """
        name: NPXSUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NPXSUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NPXSUSDC"

    def __str__(self):
        return "NPXSUSDC"

    def __call__(self):
        return "NPXSUSDC"


NPXSUSDC = NPXSUSDC()
"""
    name: NPXSUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NPXSUSDT(NamedTuple):
    """
        name: NPXSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NPXSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NPXSUSDT"

    def __str__(self):
        return "NPXSUSDT"

    def __call__(self):
        return "NPXSUSDT"


NPXSUSDT = NPXSUSDT()
"""
    name: NPXSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NUAUD(NamedTuple):
    """
        name: NUAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUAUD"

    def __str__(self):
        return "NUAUD"

    def __call__(self):
        return "NUAUD"


NUAUD = NUAUD()
"""
    name: NUAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NUBNB(NamedTuple):
    """
        name: NUBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUBNB"

    def __str__(self):
        return "NUBNB"

    def __call__(self):
        return "NUBNB"


NUBNB = NUBNB()
"""
    name: NUBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NUBTC(NamedTuple):
    """
        name: NUBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUBTC"

    def __str__(self):
        return "NUBTC"

    def __call__(self):
        return "NUBTC"


NUBTC = NUBTC()
"""
    name: NUBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NUBUSD(NamedTuple):
    """
        name: NUBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUBUSD"

    def __str__(self):
        return "NUBUSD"

    def __call__(self):
        return "NUBUSD"


NUBUSD = NUBUSD()
"""
    name: NUBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NULSBNB(NamedTuple):
    """
        name: NULSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NULSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSBNB"

    def __str__(self):
        return "NULSBNB"

    def __call__(self):
        return "NULSBNB"


NULSBNB = NULSBNB()
"""
    name: NULSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NULSBTC(NamedTuple):
    """
        name: NULSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NULSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSBTC"

    def __str__(self):
        return "NULSBTC"

    def __call__(self):
        return "NULSBTC"


NULSBTC = NULSBTC()
"""
    name: NULSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NULSBUSD(NamedTuple):
    """
        name: NULSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NULSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSBUSD"

    def __str__(self):
        return "NULSBUSD"

    def __call__(self):
        return "NULSBUSD"


NULSBUSD = NULSBUSD()
"""
    name: NULSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NULSETH(NamedTuple):
    """
        name: NULSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NULSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSETH"

    def __str__(self):
        return "NULSETH"

    def __call__(self):
        return "NULSETH"


NULSETH = NULSETH()
"""
    name: NULSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NULSUSDT(NamedTuple):
    """
        name: NULSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "NULSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULSUSDT"

    def __str__(self):
        return "NULSUSDT"

    def __call__(self):
        return "NULSUSDT"


NULSUSDT = NULSUSDT()
"""
    name: NULSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class NURUB(NamedTuple):
    """
        name: NURUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NURUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NURUB"

    def __str__(self):
        return "NURUB"

    def __call__(self):
        return "NURUB"


NURUB = NURUB()
"""
    name: NURUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class NUUSDT(NamedTuple):
    """
        name: NUUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NUUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUUSDT"

    def __str__(self):
        return "NUUSDT"

    def __call__(self):
        return "NUUSDT"


NUUSDT = NUUSDT()
"""
    name: NUUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NXSBNB(NamedTuple):
    """
        name: NXSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NXSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NXSBNB"

    def __str__(self):
        return "NXSBNB"

    def __call__(self):
        return "NXSBNB"


NXSBNB = NXSBNB()
"""
    name: NXSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NXSBTC(NamedTuple):
    """
        name: NXSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NXSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NXSBTC"

    def __str__(self):
        return "NXSBTC"

    def __call__(self):
        return "NXSBTC"


NXSBTC = NXSBTC()
"""
    name: NXSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class NXSETH(NamedTuple):
    """
        name: NXSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "NXSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NXSETH"

    def __str__(self):
        return "NXSETH"

    def __call__(self):
        return "NXSETH"


NXSETH = NXSETH()
"""
    name: NXSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OAXBTC(NamedTuple):
    """
        name: OAXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OAXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OAXBTC"

    def __str__(self):
        return "OAXBTC"

    def __call__(self):
        return "OAXBTC"


OAXBTC = OAXBTC()
"""
    name: OAXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OAXETH(NamedTuple):
    """
        name: OAXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OAXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OAXETH"

    def __str__(self):
        return "OAXETH"

    def __call__(self):
        return "OAXETH"


OAXETH = OAXETH()
"""
    name: OAXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OAXUSDT(NamedTuple):
    """
        name: OAXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OAXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OAXUSDT"

    def __str__(self):
        return "OAXUSDT"

    def __call__(self):
        return "OAXUSDT"


OAXUSDT = OAXUSDT()
"""
    name: OAXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OCEANBNB(NamedTuple):
    """
        name: OCEANBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OCEANBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEANBNB"

    def __str__(self):
        return "OCEANBNB"

    def __call__(self):
        return "OCEANBNB"


OCEANBNB = OCEANBNB()
"""
    name: OCEANBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OCEANBTC(NamedTuple):
    """
        name: OCEANBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OCEANBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEANBTC"

    def __str__(self):
        return "OCEANBTC"

    def __call__(self):
        return "OCEANBTC"


OCEANBTC = OCEANBTC()
"""
    name: OCEANBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OCEANBUSD(NamedTuple):
    """
        name: OCEANBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OCEANBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEANBUSD"

    def __str__(self):
        return "OCEANBUSD"

    def __call__(self):
        return "OCEANBUSD"


OCEANBUSD = OCEANBUSD()
"""
    name: OCEANBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OCEANUSDT(NamedTuple):
    """
        name: OCEANUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OCEANUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEANUSDT"

    def __str__(self):
        return "OCEANUSDT"

    def __call__(self):
        return "OCEANUSDT"


OCEANUSDT = OCEANUSDT()
"""
    name: OCEANUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OGBTC(NamedTuple):
    """
        name: OGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGBTC"

    def __str__(self):
        return "OGBTC"

    def __call__(self):
        return "OGBTC"


OGBTC = OGBTC()
"""
    name: OGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OGBUSD(NamedTuple):
    """
        name: OGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGBUSD"

    def __str__(self):
        return "OGBUSD"

    def __call__(self):
        return "OGBUSD"


OGBUSD = OGBUSD()
"""
    name: OGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OGNBNB(NamedTuple):
    """
        name: OGNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OGNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGNBNB"

    def __str__(self):
        return "OGNBNB"

    def __call__(self):
        return "OGNBNB"


OGNBNB = OGNBNB()
"""
    name: OGNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OGNBTC(NamedTuple):
    """
        name: OGNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OGNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGNBTC"

    def __str__(self):
        return "OGNBTC"

    def __call__(self):
        return "OGNBTC"


OGNBTC = OGNBTC()
"""
    name: OGNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OGNBUSD(NamedTuple):
    """
        name: OGNBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OGNBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGNBUSD"

    def __str__(self):
        return "OGNBUSD"

    def __call__(self):
        return "OGNBUSD"


OGNBUSD = OGNBUSD()
"""
    name: OGNBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OGNUSDT(NamedTuple):
    """
        name: OGNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OGNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGNUSDT"

    def __str__(self):
        return "OGNUSDT"

    def __call__(self):
        return "OGNUSDT"


OGNUSDT = OGNUSDT()
"""
    name: OGNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OGUSDT(NamedTuple):
    """
        name: OGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGUSDT"

    def __str__(self):
        return "OGUSDT"

    def __call__(self):
        return "OGUSDT"


OGUSDT = OGUSDT()
"""
    name: OGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMBTC(NamedTuple):
    """
        name: OMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMBTC"

    def __str__(self):
        return "OMBTC"

    def __call__(self):
        return "OMBTC"


OMBTC = OMBTC()
"""
    name: OMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OMBUSD(NamedTuple):
    """
        name: OMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMBUSD"

    def __str__(self):
        return "OMBUSD"

    def __call__(self):
        return "OMBUSD"


OMBUSD = OMBUSD()
"""
    name: OMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OMGBNB(NamedTuple):
    """
        name: OMGBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGBNB"

    def __str__(self):
        return "OMGBNB"

    def __call__(self):
        return "OMGBNB"


OMGBNB = OMGBNB()
"""
    name: OMGBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMGBTC(NamedTuple):
    """
        name: OMGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGBTC"

    def __str__(self):
        return "OMGBTC"

    def __call__(self):
        return "OMGBTC"


OMGBTC = OMGBTC()
"""
    name: OMGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMGBUSD(NamedTuple):
    """
        name: OMGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGBUSD"

    def __str__(self):
        return "OMGBUSD"

    def __call__(self):
        return "OMGBUSD"


OMGBUSD = OMGBUSD()
"""
    name: OMGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMGETH(NamedTuple):
    """
        name: OMGETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGETH"

    def __str__(self):
        return "OMGETH"

    def __call__(self):
        return "OMGETH"


OMGETH = OMGETH()
"""
    name: OMGETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMGUSDT(NamedTuple):
    """
        name: OMGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OMGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMGUSDT"

    def __str__(self):
        return "OMGUSDT"

    def __call__(self):
        return "OMGUSDT"


OMGUSDT = OMGUSDT()
"""
    name: OMGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OMUSDT(NamedTuple):
    """
        name: OMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMUSDT"

    def __str__(self):
        return "OMUSDT"

    def __call__(self):
        return "OMUSDT"


OMUSDT = OMUSDT()
"""
    name: OMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONEBIDR(NamedTuple):
    """
        name: ONEBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ONEBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEBIDR"

    def __str__(self):
        return "ONEBIDR"

    def __call__(self):
        return "ONEBIDR"


ONEBIDR = ONEBIDR()
"""
    name: ONEBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ONEBNB(NamedTuple):
    """
        name: ONEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEBNB"

    def __str__(self):
        return "ONEBNB"

    def __call__(self):
        return "ONEBNB"


ONEBNB = ONEBNB()
"""
    name: ONEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEBTC(NamedTuple):
    """
        name: ONEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEBTC"

    def __str__(self):
        return "ONEBTC"

    def __call__(self):
        return "ONEBTC"


ONEBTC = ONEBTC()
"""
    name: ONEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONEBUSD(NamedTuple):
    """
        name: ONEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEBUSD"

    def __str__(self):
        return "ONEBUSD"

    def __call__(self):
        return "ONEBUSD"


ONEBUSD = ONEBUSD()
"""
    name: ONEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONEETH(NamedTuple):
    """
        name: ONEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEETH"

    def __str__(self):
        return "ONEETH"

    def __call__(self):
        return "ONEETH"


ONEETH = ONEETH()
"""
    name: ONEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEPAX(NamedTuple):
    """
        name: ONEPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONEPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEPAX"

    def __str__(self):
        return "ONEPAX"

    def __call__(self):
        return "ONEPAX"


ONEPAX = ONEPAX()
"""
    name: ONEPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONETRY(NamedTuple):
    """
        name: ONETRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONETRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONETRY"

    def __str__(self):
        return "ONETRY"

    def __call__(self):
        return "ONETRY"


ONETRY = ONETRY()
"""
    name: ONETRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONETUSD(NamedTuple):
    """
        name: ONETUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONETUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONETUSD"

    def __str__(self):
        return "ONETUSD"

    def __call__(self):
        return "ONETUSD"


ONETUSD = ONETUSD()
"""
    name: ONETUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEUSDC(NamedTuple):
    """
        name: ONEUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONEUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEUSDC"

    def __str__(self):
        return "ONEUSDC"

    def __call__(self):
        return "ONEUSDC"


ONEUSDC = ONEUSDC()
"""
    name: ONEUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONEUSDT(NamedTuple):
    """
        name: ONEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONEUSDT"

    def __str__(self):
        return "ONEUSDT"

    def __call__(self):
        return "ONEUSDT"


ONEUSDT = ONEUSDT()
"""
    name: ONEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONGBNB(NamedTuple):
    """
        name: ONGBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONGBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONGBNB"

    def __str__(self):
        return "ONGBNB"

    def __call__(self):
        return "ONGBNB"


ONGBNB = ONGBNB()
"""
    name: ONGBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONGBTC(NamedTuple):
    """
        name: ONGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONGBTC"

    def __str__(self):
        return "ONGBTC"

    def __call__(self):
        return "ONGBTC"


ONGBTC = ONGBTC()
"""
    name: ONGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONGUSDT(NamedTuple):
    """
        name: ONGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONGUSDT"

    def __str__(self):
        return "ONGUSDT"

    def __call__(self):
        return "ONGUSDT"


ONGUSDT = ONGUSDT()
"""
    name: ONGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTBNB(NamedTuple):
    """
        name: ONTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTBNB"

    def __str__(self):
        return "ONTBNB"

    def __call__(self):
        return "ONTBNB"


ONTBNB = ONTBNB()
"""
    name: ONTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTBTC(NamedTuple):
    """
        name: ONTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTBTC"

    def __str__(self):
        return "ONTBTC"

    def __call__(self):
        return "ONTBTC"


ONTBTC = ONTBTC()
"""
    name: ONTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONTBUSD(NamedTuple):
    """
        name: ONTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTBUSD"

    def __str__(self):
        return "ONTBUSD"

    def __call__(self):
        return "ONTBUSD"


ONTBUSD = ONTBUSD()
"""
    name: ONTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ONTETH(NamedTuple):
    """
        name: ONTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTETH"

    def __str__(self):
        return "ONTETH"

    def __call__(self):
        return "ONTETH"


ONTETH = ONTETH()
"""
    name: ONTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTPAX(NamedTuple):
    """
        name: ONTPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTPAX"

    def __str__(self):
        return "ONTPAX"

    def __call__(self):
        return "ONTPAX"


ONTPAX = ONTPAX()
"""
    name: ONTPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTTRY(NamedTuple):
    """
        name: ONTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTTRY"

    def __str__(self):
        return "ONTTRY"

    def __call__(self):
        return "ONTTRY"


ONTTRY = ONTTRY()
"""
    name: ONTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTUSDC(NamedTuple):
    """
        name: ONTUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ONTUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTUSDC"

    def __str__(self):
        return "ONTUSDC"

    def __call__(self):
        return "ONTUSDC"


ONTUSDC = ONTUSDC()
"""
    name: ONTUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ONTUSDT(NamedTuple):
    """
        name: ONTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ONTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONTUSDT"

    def __str__(self):
        return "ONTUSDT"

    def __call__(self):
        return "ONTUSDT"


ONTUSDT = ONTUSDT()
"""
    name: ONTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OOKIBNB(NamedTuple):
    """
        name: OOKIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OOKIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOKIBNB"

    def __str__(self):
        return "OOKIBNB"

    def __call__(self):
        return "OOKIBNB"


OOKIBNB = OOKIBNB()
"""
    name: OOKIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OOKIBUSD(NamedTuple):
    """
        name: OOKIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OOKIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOKIBUSD"

    def __str__(self):
        return "OOKIBUSD"

    def __call__(self):
        return "OOKIBUSD"


OOKIBUSD = OOKIBUSD()
"""
    name: OOKIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OOKIETH(NamedTuple):
    """
        name: OOKIETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OOKIETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOKIETH"

    def __str__(self):
        return "OOKIETH"

    def __call__(self):
        return "OOKIETH"


OOKIETH = OOKIETH()
"""
    name: OOKIETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OOKIUSDT(NamedTuple):
    """
        name: OOKIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OOKIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOKIUSDT"

    def __str__(self):
        return "OOKIUSDT"

    def __call__(self):
        return "OOKIUSDT"


OOKIUSDT = OOKIUSDT()
"""
    name: OOKIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPBNB(NamedTuple):
    """
        name: OPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPBNB"

    def __str__(self):
        return "OPBNB"

    def __call__(self):
        return "OPBNB"


OPBNB = OPBNB()
"""
    name: OPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPBTC(NamedTuple):
    """
        name: OPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPBTC"

    def __str__(self):
        return "OPBTC"

    def __call__(self):
        return "OPBTC"


OPBTC = OPBTC()
"""
    name: OPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPBUSD(NamedTuple):
    """
        name: OPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPBUSD"

    def __str__(self):
        return "OPBUSD"

    def __call__(self):
        return "OPBUSD"


OPBUSD = OPBUSD()
"""
    name: OPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OPETH(NamedTuple):
    """
        name: OPETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPETH"

    def __str__(self):
        return "OPETH"

    def __call__(self):
        return "OPETH"


OPETH = OPETH()
"""
    name: OPETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPEUR(NamedTuple):
    """
        name: OPEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPEUR"

    def __str__(self):
        return "OPEUR"

    def __call__(self):
        return "OPEUR"


OPEUR = OPEUR()
"""
    name: OPEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPTUSD(NamedTuple):
    """
        name: OPTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OPTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPTUSD"

    def __str__(self):
        return "OPTUSD"

    def __call__(self):
        return "OPTUSD"


OPTUSD = OPTUSD()
"""
    name: OPTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OPUSDT(NamedTuple):
    """
        name: OPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPUSDT"

    def __str__(self):
        return "OPUSDT"

    def __call__(self):
        return "OPUSDT"


OPUSDT = OPUSDT()
"""
    name: OPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ORNBTC(NamedTuple):
    """
        name: ORNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ORNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORNBTC"

    def __str__(self):
        return "ORNBTC"

    def __call__(self):
        return "ORNBTC"


ORNBTC = ORNBTC()
"""
    name: ORNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ORNBUSD(NamedTuple):
    """
        name: ORNBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ORNBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORNBUSD"

    def __str__(self):
        return "ORNBUSD"

    def __call__(self):
        return "ORNBUSD"


ORNBUSD = ORNBUSD()
"""
    name: ORNBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ORNUSDT(NamedTuple):
    """
        name: ORNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ORNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORNUSDT"

    def __str__(self):
        return "ORNUSDT"

    def __call__(self):
        return "ORNUSDT"


ORNUSDT = ORNUSDT()
"""
    name: ORNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OSMOBTC(NamedTuple):
    """
        name: OSMOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OSMOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSMOBTC"

    def __str__(self):
        return "OSMOBTC"

    def __call__(self):
        return "OSMOBTC"


OSMOBTC = OSMOBTC()
"""
    name: OSMOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OSMOBUSD(NamedTuple):
    """
        name: OSMOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OSMOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSMOBUSD"

    def __str__(self):
        return "OSMOBUSD"

    def __call__(self):
        return "OSMOBUSD"


OSMOBUSD = OSMOBUSD()
"""
    name: OSMOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OSMOUSDT(NamedTuple):
    """
        name: OSMOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OSMOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSMOUSDT"

    def __str__(self):
        return "OSMOUSDT"

    def __call__(self):
        return "OSMOUSDT"


OSMOUSDT = OSMOUSDT()
"""
    name: OSMOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OSTBNB(NamedTuple):
    """
        name: OSTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OSTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSTBNB"

    def __str__(self):
        return "OSTBNB"

    def __call__(self):
        return "OSTBNB"


OSTBNB = OSTBNB()
"""
    name: OSTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OSTBTC(NamedTuple):
    """
        name: OSTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OSTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSTBTC"

    def __str__(self):
        return "OSTBTC"

    def __call__(self):
        return "OSTBTC"


OSTBTC = OSTBTC()
"""
    name: OSTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OSTETH(NamedTuple):
    """
        name: OSTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OSTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSTETH"

    def __str__(self):
        return "OSTETH"

    def __call__(self):
        return "OSTETH"


OSTETH = OSTETH()
"""
    name: OSTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OXTBTC(NamedTuple):
    """
        name: OXTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OXTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXTBTC"

    def __str__(self):
        return "OXTBTC"

    def __call__(self):
        return "OXTBTC"


OXTBTC = OXTBTC()
"""
    name: OXTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class OXTBUSD(NamedTuple):
    """
        name: OXTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "OXTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXTBUSD"

    def __str__(self):
        return "OXTBUSD"

    def __call__(self):
        return "OXTBUSD"


OXTBUSD = OXTBUSD()
"""
    name: OXTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class OXTUSDT(NamedTuple):
    """
        name: OXTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "OXTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXTUSDT"

    def __str__(self):
        return "OXTUSDT"

    def __call__(self):
        return "OXTUSDT"


OXTUSDT = OXTUSDT()
"""
    name: OXTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PAXBNB(NamedTuple):
    """
        name: PAXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXBNB"

    def __str__(self):
        return "PAXBNB"

    def __call__(self):
        return "PAXBNB"


PAXBNB = PAXBNB()
"""
    name: PAXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXBTC(NamedTuple):
    """
        name: PAXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXBTC"

    def __str__(self):
        return "PAXBTC"

    def __call__(self):
        return "PAXBTC"


PAXBTC = PAXBTC()
"""
    name: PAXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXBUSD(NamedTuple):
    """
        name: PAXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXBUSD"

    def __str__(self):
        return "PAXBUSD"

    def __call__(self):
        return "PAXBUSD"


PAXBUSD = PAXBUSD()
"""
    name: PAXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXETH(NamedTuple):
    """
        name: PAXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXETH"

    def __str__(self):
        return "PAXETH"

    def __call__(self):
        return "PAXETH"


PAXETH = PAXETH()
"""
    name: PAXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXGBNB(NamedTuple):
    """
        name: PAXGBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXGBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXGBNB"

    def __str__(self):
        return "PAXGBNB"

    def __call__(self):
        return "PAXGBNB"


PAXGBNB = PAXGBNB()
"""
    name: PAXGBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXGBTC(NamedTuple):
    """
        name: PAXGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXGBTC"

    def __str__(self):
        return "PAXGBTC"

    def __call__(self):
        return "PAXGBTC"


PAXGBTC = PAXGBTC()
"""
    name: PAXGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXGBUSD(NamedTuple):
    """
        name: PAXGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PAXGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXGBUSD"

    def __str__(self):
        return "PAXGBUSD"

    def __call__(self):
        return "PAXGBUSD"


PAXGBUSD = PAXGBUSD()
"""
    name: PAXGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PAXGUSDT(NamedTuple):
    """
        name: PAXGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PAXGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXGUSDT"

    def __str__(self):
        return "PAXGUSDT"

    def __call__(self):
        return "PAXGUSDT"


PAXGUSDT = PAXGUSDT()
"""
    name: PAXGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PAXTUSD(NamedTuple):
    """
        name: PAXTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXTUSD"

    def __str__(self):
        return "PAXTUSD"

    def __call__(self):
        return "PAXTUSD"


PAXTUSD = PAXTUSD()
"""
    name: PAXTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PAXUSDT(NamedTuple):
    """
        name: PAXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PAXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXUSDT"

    def __str__(self):
        return "PAXUSDT"

    def __call__(self):
        return "PAXUSDT"


PAXUSDT = PAXUSDT()
"""
    name: PAXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PEOPLEBNB(NamedTuple):
    """
        name: PEOPLEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PEOPLEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEBNB"

    def __str__(self):
        return "PEOPLEBNB"

    def __call__(self):
        return "PEOPLEBNB"


PEOPLEBNB = PEOPLEBNB()
"""
    name: PEOPLEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PEOPLEBTC(NamedTuple):
    """
        name: PEOPLEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PEOPLEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEBTC"

    def __str__(self):
        return "PEOPLEBTC"

    def __call__(self):
        return "PEOPLEBTC"


PEOPLEBTC = PEOPLEBTC()
"""
    name: PEOPLEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PEOPLEBUSD(NamedTuple):
    """
        name: PEOPLEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PEOPLEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEBUSD"

    def __str__(self):
        return "PEOPLEBUSD"

    def __call__(self):
        return "PEOPLEBUSD"


PEOPLEBUSD = PEOPLEBUSD()
"""
    name: PEOPLEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PEOPLEETH(NamedTuple):
    """
        name: PEOPLEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PEOPLEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEETH"

    def __str__(self):
        return "PEOPLEETH"

    def __call__(self):
        return "PEOPLEETH"


PEOPLEETH = PEOPLEETH()
"""
    name: PEOPLEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PEOPLEUSDT(NamedTuple):
    """
        name: PEOPLEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PEOPLEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLEUSDT"

    def __str__(self):
        return "PEOPLEUSDT"

    def __call__(self):
        return "PEOPLEUSDT"


PEOPLEUSDT = PEOPLEUSDT()
"""
    name: PEOPLEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PERLBNB(NamedTuple):
    """
        name: PERLBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERLBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERLBNB"

    def __str__(self):
        return "PERLBNB"

    def __call__(self):
        return "PERLBNB"


PERLBNB = PERLBNB()
"""
    name: PERLBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERLBTC(NamedTuple):
    """
        name: PERLBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERLBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERLBTC"

    def __str__(self):
        return "PERLBTC"

    def __call__(self):
        return "PERLBTC"


PERLBTC = PERLBTC()
"""
    name: PERLBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERLUSDC(NamedTuple):
    """
        name: PERLUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERLUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERLUSDC"

    def __str__(self):
        return "PERLUSDC"

    def __call__(self):
        return "PERLUSDC"


PERLUSDC = PERLUSDC()
"""
    name: PERLUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERLUSDT(NamedTuple):
    """
        name: PERLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERLUSDT"

    def __str__(self):
        return "PERLUSDT"

    def __call__(self):
        return "PERLUSDT"


PERLUSDT = PERLUSDT()
"""
    name: PERLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERPBTC(NamedTuple):
    """
        name: PERPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERPBTC"

    def __str__(self):
        return "PERPBTC"

    def __call__(self):
        return "PERPBTC"


PERPBTC = PERPBTC()
"""
    name: PERPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERPBUSD(NamedTuple):
    """
        name: PERPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PERPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERPBUSD"

    def __str__(self):
        return "PERPBUSD"

    def __call__(self):
        return "PERPBUSD"


PERPBUSD = PERPBUSD()
"""
    name: PERPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PERPUSDT(NamedTuple):
    """
        name: PERPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PERPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERPUSDT"

    def __str__(self):
        return "PERPUSDT"

    def __call__(self):
        return "PERPUSDT"


PERPUSDT = PERPUSDT()
"""
    name: PERPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHABTC(NamedTuple):
    """
        name: PHABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHABTC"

    def __str__(self):
        return "PHABTC"

    def __call__(self):
        return "PHABTC"


PHABTC = PHABTC()
"""
    name: PHABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHABUSD(NamedTuple):
    """
        name: PHABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PHABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHABUSD"

    def __str__(self):
        return "PHABUSD"

    def __call__(self):
        return "PHABUSD"


PHABUSD = PHABUSD()
"""
    name: PHABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHAUSDT(NamedTuple):
    """
        name: PHAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PHAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHAUSDT"

    def __str__(self):
        return "PHAUSDT"

    def __call__(self):
        return "PHAUSDT"


PHAUSDT = PHAUSDT()
"""
    name: PHAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHBBNB(NamedTuple):
    """
        name: PHBBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBBNB"

    def __str__(self):
        return "PHBBNB"

    def __call__(self):
        return "PHBBNB"


PHBBNB = PHBBNB()
"""
    name: PHBBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBBTC(NamedTuple):
    """
        name: PHBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBBTC"

    def __str__(self):
        return "PHBBTC"

    def __call__(self):
        return "PHBBTC"


PHBBTC = PHBBTC()
"""
    name: PHBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBBUSD(NamedTuple):
    """
        name: PHBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PHBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBBUSD"

    def __str__(self):
        return "PHBBUSD"

    def __call__(self):
        return "PHBBUSD"


PHBBUSD = PHBBUSD()
"""
    name: PHBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHBPAX(NamedTuple):
    """
        name: PHBPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBPAX"

    def __str__(self):
        return "PHBPAX"

    def __call__(self):
        return "PHBPAX"


PHBPAX = PHBPAX()
"""
    name: PHBPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBTUSD(NamedTuple):
    """
        name: PHBTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBTUSD"

    def __str__(self):
        return "PHBTUSD"

    def __call__(self):
        return "PHBTUSD"


PHBTUSD = PHBTUSD()
"""
    name: PHBTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBUSDC(NamedTuple):
    """
        name: PHBUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHBUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBUSDC"

    def __str__(self):
        return "PHBUSDC"

    def __call__(self):
        return "PHBUSDC"


PHBUSDC = PHBUSDC()
"""
    name: PHBUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHBUSDT(NamedTuple):
    """
        name: PHBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PHBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHBUSDT"

    def __str__(self):
        return "PHBUSDT"

    def __call__(self):
        return "PHBUSDT"


PHBUSDT = PHBUSDT()
"""
    name: PHBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PHXBNB(NamedTuple):
    """
        name: PHXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHXBNB"

    def __str__(self):
        return "PHXBNB"

    def __call__(self):
        return "PHXBNB"


PHXBNB = PHXBNB()
"""
    name: PHXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHXBTC(NamedTuple):
    """
        name: PHXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHXBTC"

    def __str__(self):
        return "PHXBTC"

    def __call__(self):
        return "PHXBTC"


PHXBTC = PHXBTC()
"""
    name: PHXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PHXETH(NamedTuple):
    """
        name: PHXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PHXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHXETH"

    def __str__(self):
        return "PHXETH"

    def __call__(self):
        return "PHXETH"


PHXETH = PHXETH()
"""
    name: PHXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PIVXBNB(NamedTuple):
    """
        name: PIVXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PIVXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PIVXBNB"

    def __str__(self):
        return "PIVXBNB"

    def __call__(self):
        return "PIVXBNB"


PIVXBNB = PIVXBNB()
"""
    name: PIVXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PIVXBTC(NamedTuple):
    """
        name: PIVXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PIVXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PIVXBTC"

    def __str__(self):
        return "PIVXBTC"

    def __call__(self):
        return "PIVXBTC"


PIVXBTC = PIVXBTC()
"""
    name: PIVXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PLABNB(NamedTuple):
    """
        name: PLABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PLABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLABNB"

    def __str__(self):
        return "PLABNB"

    def __call__(self):
        return "PLABNB"


PLABNB = PLABNB()
"""
    name: PLABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PLABTC(NamedTuple):
    """
        name: PLABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PLABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLABTC"

    def __str__(self):
        return "PLABTC"

    def __call__(self):
        return "PLABTC"


PLABTC = PLABTC()
"""
    name: PLABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PLABUSD(NamedTuple):
    """
        name: PLABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PLABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLABUSD"

    def __str__(self):
        return "PLABUSD"

    def __call__(self):
        return "PLABUSD"


PLABUSD = PLABUSD()
"""
    name: PLABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PLAUSDT(NamedTuple):
    """
        name: PLAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PLAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLAUSDT"

    def __str__(self):
        return "PLAUSDT"

    def __call__(self):
        return "PLAUSDT"


PLAUSDT = PLAUSDT()
"""
    name: PLAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PNTBTC(NamedTuple):
    """
        name: PNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PNTBTC"

    def __str__(self):
        return "PNTBTC"

    def __call__(self):
        return "PNTBTC"


PNTBTC = PNTBTC()
"""
    name: PNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PNTUSDT(NamedTuple):
    """
        name: PNTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PNTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PNTUSDT"

    def __str__(self):
        return "PNTUSDT"

    def __call__(self):
        return "PNTUSDT"


PNTUSDT = PNTUSDT()
"""
    name: PNTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POABNB(NamedTuple):
    """
        name: POABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POABNB"

    def __str__(self):
        return "POABNB"

    def __call__(self):
        return "POABNB"


POABNB = POABNB()
"""
    name: POABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POABTC(NamedTuple):
    """
        name: POABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POABTC"

    def __str__(self):
        return "POABTC"

    def __call__(self):
        return "POABTC"


POABTC = POABTC()
"""
    name: POABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POAETH(NamedTuple):
    """
        name: POAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POAETH"

    def __str__(self):
        return "POAETH"

    def __call__(self):
        return "POAETH"


POAETH = POAETH()
"""
    name: POAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POEBTC(NamedTuple):
    """
        name: POEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POEBTC"

    def __str__(self):
        return "POEBTC"

    def __call__(self):
        return "POEBTC"


POEBTC = POEBTC()
"""
    name: POEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POEETH(NamedTuple):
    """
        name: POEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POEETH"

    def __str__(self):
        return "POEETH"

    def __call__(self):
        return "POEETH"


POEETH = POEETH()
"""
    name: POEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLSBNB(NamedTuple):
    """
        name: POLSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLSBNB"

    def __str__(self):
        return "POLSBNB"

    def __call__(self):
        return "POLSBNB"


POLSBNB = POLSBNB()
"""
    name: POLSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLSBTC(NamedTuple):
    """
        name: POLSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLSBTC"

    def __str__(self):
        return "POLSBTC"

    def __call__(self):
        return "POLSBTC"


POLSBTC = POLSBTC()
"""
    name: POLSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLSBUSD(NamedTuple):
    """
        name: POLSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLSBUSD"

    def __str__(self):
        return "POLSBUSD"

    def __call__(self):
        return "POLSBUSD"


POLSBUSD = POLSBUSD()
"""
    name: POLSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLSUSDT(NamedTuple):
    """
        name: POLSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLSUSDT"

    def __str__(self):
        return "POLSUSDT"

    def __call__(self):
        return "POLSUSDT"


POLSUSDT = POLSUSDT()
"""
    name: POLSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYBNB(NamedTuple):
    """
        name: POLYBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYBNB"

    def __str__(self):
        return "POLYBNB"

    def __call__(self):
        return "POLYBNB"


POLYBNB = POLYBNB()
"""
    name: POLYBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYBTC(NamedTuple):
    """
        name: POLYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYBTC"

    def __str__(self):
        return "POLYBTC"

    def __call__(self):
        return "POLYBTC"


POLYBTC = POLYBTC()
"""
    name: POLYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYBUSD(NamedTuple):
    """
        name: POLYBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYBUSD"

    def __str__(self):
        return "POLYBUSD"

    def __call__(self):
        return "POLYBUSD"


POLYBUSD = POLYBUSD()
"""
    name: POLYBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYUSDT(NamedTuple):
    """
        name: POLYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYUSDT"

    def __str__(self):
        return "POLYUSDT"

    def __call__(self):
        return "POLYUSDT"


POLYUSDT = POLYUSDT()
"""
    name: POLYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYXBTC(NamedTuple):
    """
        name: POLYXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POLYXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYXBTC"

    def __str__(self):
        return "POLYXBTC"

    def __call__(self):
        return "POLYXBTC"


POLYXBTC = POLYXBTC()
"""
    name: POLYXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POLYXBUSD(NamedTuple):
    """
        name: POLYXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "POLYXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYXBUSD"

    def __str__(self):
        return "POLYXBUSD"

    def __call__(self):
        return "POLYXBUSD"


POLYXBUSD = POLYXBUSD()
"""
    name: POLYXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class POLYXUSDT(NamedTuple):
    """
        name: POLYXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "POLYXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLYXUSDT"

    def __str__(self):
        return "POLYXUSDT"

    def __call__(self):
        return "POLYXUSDT"


POLYXUSDT = POLYXUSDT()
"""
    name: POLYXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PONDBTC(NamedTuple):
    """
        name: PONDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PONDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PONDBTC"

    def __str__(self):
        return "PONDBTC"

    def __call__(self):
        return "PONDBTC"


PONDBTC = PONDBTC()
"""
    name: PONDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PONDBUSD(NamedTuple):
    """
        name: PONDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PONDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PONDBUSD"

    def __str__(self):
        return "PONDBUSD"

    def __call__(self):
        return "PONDBUSD"


PONDBUSD = PONDBUSD()
"""
    name: PONDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PONDUSDT(NamedTuple):
    """
        name: PONDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PONDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PONDUSDT"

    def __str__(self):
        return "PONDUSDT"

    def __call__(self):
        return "PONDUSDT"


PONDUSDT = PONDUSDT()
"""
    name: PONDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PORTOBTC(NamedTuple):
    """
        name: PORTOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PORTOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOBTC"

    def __str__(self):
        return "PORTOBTC"

    def __call__(self):
        return "PORTOBTC"


PORTOBTC = PORTOBTC()
"""
    name: PORTOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PORTOBUSD(NamedTuple):
    """
        name: PORTOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PORTOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOBUSD"

    def __str__(self):
        return "PORTOBUSD"

    def __call__(self):
        return "PORTOBUSD"


PORTOBUSD = PORTOBUSD()
"""
    name: PORTOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PORTOEUR(NamedTuple):
    """
        name: PORTOEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PORTOEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOEUR"

    def __str__(self):
        return "PORTOEUR"

    def __call__(self):
        return "PORTOEUR"


PORTOEUR = PORTOEUR()
"""
    name: PORTOEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PORTOTRY(NamedTuple):
    """
        name: PORTOTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PORTOTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOTRY"

    def __str__(self):
        return "PORTOTRY"

    def __call__(self):
        return "PORTOTRY"


PORTOTRY = PORTOTRY()
"""
    name: PORTOTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PORTOUSDT(NamedTuple):
    """
        name: PORTOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PORTOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PORTOUSDT"

    def __str__(self):
        return "PORTOUSDT"

    def __call__(self):
        return "PORTOUSDT"


PORTOUSDT = PORTOUSDT()
"""
    name: PORTOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class POWRBNB(NamedTuple):
    """
        name: POWRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRBNB"

    def __str__(self):
        return "POWRBNB"

    def __call__(self):
        return "POWRBNB"


POWRBNB = POWRBNB()
"""
    name: POWRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POWRBTC(NamedTuple):
    """
        name: POWRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRBTC"

    def __str__(self):
        return "POWRBTC"

    def __call__(self):
        return "POWRBTC"


POWRBTC = POWRBTC()
"""
    name: POWRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POWRBUSD(NamedTuple):
    """
        name: POWRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRBUSD"

    def __str__(self):
        return "POWRBUSD"

    def __call__(self):
        return "POWRBUSD"


POWRBUSD = POWRBUSD()
"""
    name: POWRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POWRETH(NamedTuple):
    """
        name: POWRETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRETH"

    def __str__(self):
        return "POWRETH"

    def __call__(self):
        return "POWRETH"


POWRETH = POWRETH()
"""
    name: POWRETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class POWRUSDT(NamedTuple):
    """
        name: POWRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "POWRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POWRUSDT"

    def __str__(self):
        return "POWRUSDT"

    def __call__(self):
        return "POWRUSDT"


POWRUSDT = POWRUSDT()
"""
    name: POWRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PPTBTC(NamedTuple):
    """
        name: PPTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PPTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PPTBTC"

    def __str__(self):
        return "PPTBTC"

    def __call__(self):
        return "PPTBTC"


PPTBTC = PPTBTC()
"""
    name: PPTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PPTETH(NamedTuple):
    """
        name: PPTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PPTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PPTETH"

    def __str__(self):
        return "PPTETH"

    def __call__(self):
        return "PPTETH"


PPTETH = PPTETH()
"""
    name: PPTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROMBNB(NamedTuple):
    """
        name: PROMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROMBNB"

    def __str__(self):
        return "PROMBNB"

    def __call__(self):
        return "PROMBNB"


PROMBNB = PROMBNB()
"""
    name: PROMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROMBTC(NamedTuple):
    """
        name: PROMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROMBTC"

    def __str__(self):
        return "PROMBTC"

    def __call__(self):
        return "PROMBTC"


PROMBTC = PROMBTC()
"""
    name: PROMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROMBUSD(NamedTuple):
    """
        name: PROMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROMBUSD"

    def __str__(self):
        return "PROMBUSD"

    def __call__(self):
        return "PROMBUSD"


PROMBUSD = PROMBUSD()
"""
    name: PROMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROMUSDT(NamedTuple):
    """
        name: PROMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROMUSDT"

    def __str__(self):
        return "PROMUSDT"

    def __call__(self):
        return "PROMUSDT"


PROMUSDT = PROMUSDT()
"""
    name: PROMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROSBUSD(NamedTuple):
    """
        name: PROSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROSBUSD"

    def __str__(self):
        return "PROSBUSD"

    def __call__(self):
        return "PROSBUSD"


PROSBUSD = PROSBUSD()
"""
    name: PROSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROSETH(NamedTuple):
    """
        name: PROSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROSETH"

    def __str__(self):
        return "PROSETH"

    def __call__(self):
        return "PROSETH"


PROSETH = PROSETH()
"""
    name: PROSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PROSUSDT(NamedTuple):
    """
        name: PROSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PROSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROSUSDT"

    def __str__(self):
        return "PROSUSDT"

    def __call__(self):
        return "PROSUSDT"


PROSUSDT = PROSUSDT()
"""
    name: PROSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PSGBTC(NamedTuple):
    """
        name: PSGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PSGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSGBTC"

    def __str__(self):
        return "PSGBTC"

    def __call__(self):
        return "PSGBTC"


PSGBTC = PSGBTC()
"""
    name: PSGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PSGBUSD(NamedTuple):
    """
        name: PSGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PSGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSGBUSD"

    def __str__(self):
        return "PSGBUSD"

    def __call__(self):
        return "PSGBUSD"


PSGBUSD = PSGBUSD()
"""
    name: PSGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PSGUSDT(NamedTuple):
    """
        name: PSGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PSGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSGUSDT"

    def __str__(self):
        return "PSGUSDT"

    def __call__(self):
        return "PSGUSDT"


PSGUSDT = PSGUSDT()
"""
    name: PSGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PUNDIXBUSD(NamedTuple):
    """
        name: PUNDIXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PUNDIXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIXBUSD"

    def __str__(self):
        return "PUNDIXBUSD"

    def __call__(self):
        return "PUNDIXBUSD"


PUNDIXBUSD = PUNDIXBUSD()
"""
    name: PUNDIXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PUNDIXETH(NamedTuple):
    """
        name: PUNDIXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "PUNDIXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIXETH"

    def __str__(self):
        return "PUNDIXETH"

    def __call__(self):
        return "PUNDIXETH"


PUNDIXETH = PUNDIXETH()
"""
    name: PUNDIXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class PUNDIXUSDT(NamedTuple):
    """
        name: PUNDIXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PUNDIXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIXUSDT"

    def __str__(self):
        return "PUNDIXUSDT"

    def __call__(self):
        return "PUNDIXUSDT"


PUNDIXUSDT = PUNDIXUSDT()
"""
    name: PUNDIXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PYRBTC(NamedTuple):
    """
        name: PYRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PYRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYRBTC"

    def __str__(self):
        return "PYRBTC"

    def __call__(self):
        return "PYRBTC"


PYRBTC = PYRBTC()
"""
    name: PYRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PYRBUSD(NamedTuple):
    """
        name: PYRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PYRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYRBUSD"

    def __str__(self):
        return "PYRBUSD"

    def __call__(self):
        return "PYRBUSD"


PYRBUSD = PYRBUSD()
"""
    name: PYRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class PYRUSDT(NamedTuple):
    """
        name: PYRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "PYRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYRUSDT"

    def __str__(self):
        return "PYRUSDT"

    def __call__(self):
        return "PYRUSDT"


PYRUSDT = PYRUSDT()
"""
    name: PYRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QIBNB(NamedTuple):
    """
        name: QIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QIBNB"

    def __str__(self):
        return "QIBNB"

    def __call__(self):
        return "QIBNB"


QIBNB = QIBNB()
"""
    name: QIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QIBTC(NamedTuple):
    """
        name: QIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QIBTC"

    def __str__(self):
        return "QIBTC"

    def __call__(self):
        return "QIBTC"


QIBTC = QIBTC()
"""
    name: QIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QIBUSD(NamedTuple):
    """
        name: QIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QIBUSD"

    def __str__(self):
        return "QIBUSD"

    def __call__(self):
        return "QIBUSD"


QIBUSD = QIBUSD()
"""
    name: QIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QIUSDT(NamedTuple):
    """
        name: QIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QIUSDT"

    def __str__(self):
        return "QIUSDT"

    def __call__(self):
        return "QIUSDT"


QIUSDT = QIUSDT()
"""
    name: QIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QKCBTC(NamedTuple):
    """
        name: QKCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QKCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKCBTC"

    def __str__(self):
        return "QKCBTC"

    def __call__(self):
        return "QKCBTC"


QKCBTC = QKCBTC()
"""
    name: QKCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QKCBUSD(NamedTuple):
    """
        name: QKCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QKCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKCBUSD"

    def __str__(self):
        return "QKCBUSD"

    def __call__(self):
        return "QKCBUSD"


QKCBUSD = QKCBUSD()
"""
    name: QKCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QKCETH(NamedTuple):
    """
        name: QKCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QKCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKCETH"

    def __str__(self):
        return "QKCETH"

    def __call__(self):
        return "QKCETH"


QKCETH = QKCETH()
"""
    name: QKCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QKCUSDT(NamedTuple):
    """
        name: QKCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QKCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKCUSDT"

    def __str__(self):
        return "QKCUSDT"

    def __call__(self):
        return "QKCUSDT"


QKCUSDT = QKCUSDT()
"""
    name: QKCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QLCBNB(NamedTuple):
    """
        name: QLCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QLCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QLCBNB"

    def __str__(self):
        return "QLCBNB"

    def __call__(self):
        return "QLCBNB"


QLCBNB = QLCBNB()
"""
    name: QLCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QLCBTC(NamedTuple):
    """
        name: QLCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QLCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QLCBTC"

    def __str__(self):
        return "QLCBTC"

    def __call__(self):
        return "QLCBTC"


QLCBTC = QLCBTC()
"""
    name: QLCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QLCETH(NamedTuple):
    """
        name: QLCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QLCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QLCETH"

    def __str__(self):
        return "QLCETH"

    def __call__(self):
        return "QLCETH"


QLCETH = QLCETH()
"""
    name: QLCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QNTBNB(NamedTuple):
    """
        name: QNTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QNTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNTBNB"

    def __str__(self):
        return "QNTBNB"

    def __call__(self):
        return "QNTBNB"


QNTBNB = QNTBNB()
"""
    name: QNTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QNTBTC(NamedTuple):
    """
        name: QNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNTBTC"

    def __str__(self):
        return "QNTBTC"

    def __call__(self):
        return "QNTBTC"


QNTBTC = QNTBTC()
"""
    name: QNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QNTBUSD(NamedTuple):
    """
        name: QNTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QNTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNTBUSD"

    def __str__(self):
        return "QNTBUSD"

    def __call__(self):
        return "QNTBUSD"


QNTBUSD = QNTBUSD()
"""
    name: QNTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QNTUSDT(NamedTuple):
    """
        name: QNTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QNTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNTUSDT"

    def __str__(self):
        return "QNTUSDT"

    def __call__(self):
        return "QNTUSDT"


QNTUSDT = QNTUSDT()
"""
    name: QNTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QSPBNB(NamedTuple):
    """
        name: QSPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QSPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QSPBNB"

    def __str__(self):
        return "QSPBNB"

    def __call__(self):
        return "QSPBNB"


QSPBNB = QSPBNB()
"""
    name: QSPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QSPBTC(NamedTuple):
    """
        name: QSPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QSPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QSPBTC"

    def __str__(self):
        return "QSPBTC"

    def __call__(self):
        return "QSPBTC"


QSPBTC = QSPBTC()
"""
    name: QSPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QSPETH(NamedTuple):
    """
        name: QSPETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QSPETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QSPETH"

    def __str__(self):
        return "QSPETH"

    def __call__(self):
        return "QSPETH"


QSPETH = QSPETH()
"""
    name: QSPETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QTUMBNB(NamedTuple):
    """
        name: QTUMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QTUMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMBNB"

    def __str__(self):
        return "QTUMBNB"

    def __call__(self):
        return "QTUMBNB"


QTUMBNB = QTUMBNB()
"""
    name: QTUMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QTUMBTC(NamedTuple):
    """
        name: QTUMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QTUMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMBTC"

    def __str__(self):
        return "QTUMBTC"

    def __call__(self):
        return "QTUMBTC"


QTUMBTC = QTUMBTC()
"""
    name: QTUMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QTUMBUSD(NamedTuple):
    """
        name: QTUMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QTUMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMBUSD"

    def __str__(self):
        return "QTUMBUSD"

    def __call__(self):
        return "QTUMBUSD"


QTUMBUSD = QTUMBUSD()
"""
    name: QTUMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QTUMETH(NamedTuple):
    """
        name: QTUMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QTUMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMETH"

    def __str__(self):
        return "QTUMETH"

    def __call__(self):
        return "QTUMETH"


QTUMETH = QTUMETH()
"""
    name: QTUMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QTUMUSDT(NamedTuple):
    """
        name: QTUMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QTUMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUMUSDT"

    def __str__(self):
        return "QTUMUSDT"

    def __call__(self):
        return "QTUMUSDT"


QTUMUSDT = QTUMUSDT()
"""
    name: QTUMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class QUICKBNB(NamedTuple):
    """
        name: QUICKBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QUICKBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICKBNB"

    def __str__(self):
        return "QUICKBNB"

    def __call__(self):
        return "QUICKBNB"


QUICKBNB = QUICKBNB()
"""
    name: QUICKBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QUICKBTC(NamedTuple):
    """
        name: QUICKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QUICKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICKBTC"

    def __str__(self):
        return "QUICKBTC"

    def __call__(self):
        return "QUICKBTC"


QUICKBTC = QUICKBTC()
"""
    name: QUICKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QUICKBUSD(NamedTuple):
    """
        name: QUICKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "QUICKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICKBUSD"

    def __str__(self):
        return "QUICKBUSD"

    def __call__(self):
        return "QUICKBUSD"


QUICKBUSD = QUICKBUSD()
"""
    name: QUICKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class QUICKUSDT(NamedTuple):
    """
        name: QUICKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "QUICKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICKUSDT"

    def __str__(self):
        return "QUICKUSDT"

    def __call__(self):
        return "QUICKUSDT"


QUICKUSDT = QUICKUSDT()
"""
    name: QUICKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RADBNB(NamedTuple):
    """
        name: RADBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RADBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RADBNB"

    def __str__(self):
        return "RADBNB"

    def __call__(self):
        return "RADBNB"


RADBNB = RADBNB()
"""
    name: RADBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RADBTC(NamedTuple):
    """
        name: RADBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RADBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RADBTC"

    def __str__(self):
        return "RADBTC"

    def __call__(self):
        return "RADBTC"


RADBTC = RADBTC()
"""
    name: RADBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RADBUSD(NamedTuple):
    """
        name: RADBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RADBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RADBUSD"

    def __str__(self):
        return "RADBUSD"

    def __call__(self):
        return "RADBUSD"


RADBUSD = RADBUSD()
"""
    name: RADBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RADUSDT(NamedTuple):
    """
        name: RADUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RADUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RADUSDT"

    def __str__(self):
        return "RADUSDT"

    def __call__(self):
        return "RADUSDT"


RADUSDT = RADUSDT()
"""
    name: RADUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RAMPBTC(NamedTuple):
    """
        name: RAMPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAMPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAMPBTC"

    def __str__(self):
        return "RAMPBTC"

    def __call__(self):
        return "RAMPBTC"


RAMPBTC = RAMPBTC()
"""
    name: RAMPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAMPBUSD(NamedTuple):
    """
        name: RAMPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAMPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAMPBUSD"

    def __str__(self):
        return "RAMPBUSD"

    def __call__(self):
        return "RAMPBUSD"


RAMPBUSD = RAMPBUSD()
"""
    name: RAMPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAMPUSDT(NamedTuple):
    """
        name: RAMPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAMPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAMPUSDT"

    def __str__(self):
        return "RAMPUSDT"

    def __call__(self):
        return "RAMPUSDT"


RAMPUSDT = RAMPUSDT()
"""
    name: RAMPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAREBNB(NamedTuple):
    """
        name: RAREBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAREBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAREBNB"

    def __str__(self):
        return "RAREBNB"

    def __call__(self):
        return "RAREBNB"


RAREBNB = RAREBNB()
"""
    name: RAREBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAREBTC(NamedTuple):
    """
        name: RAREBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAREBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAREBTC"

    def __str__(self):
        return "RAREBTC"

    def __call__(self):
        return "RAREBTC"


RAREBTC = RAREBTC()
"""
    name: RAREBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAREBUSD(NamedTuple):
    """
        name: RAREBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAREBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAREBUSD"

    def __str__(self):
        return "RAREBUSD"

    def __call__(self):
        return "RAREBUSD"


RAREBUSD = RAREBUSD()
"""
    name: RAREBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAREUSDT(NamedTuple):
    """
        name: RAREUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAREUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAREUSDT"

    def __str__(self):
        return "RAREUSDT"

    def __call__(self):
        return "RAREUSDT"


RAREUSDT = RAREUSDT()
"""
    name: RAREUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAYBNB(NamedTuple):
    """
        name: RAYBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAYBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAYBNB"

    def __str__(self):
        return "RAYBNB"

    def __call__(self):
        return "RAYBNB"


RAYBNB = RAYBNB()
"""
    name: RAYBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAYBUSD(NamedTuple):
    """
        name: RAYBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAYBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAYBUSD"

    def __str__(self):
        return "RAYBUSD"

    def __call__(self):
        return "RAYBUSD"


RAYBUSD = RAYBUSD()
"""
    name: RAYBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RAYUSDT(NamedTuple):
    """
        name: RAYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RAYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RAYUSDT"

    def __str__(self):
        return "RAYUSDT"

    def __call__(self):
        return "RAYUSDT"


RAYUSDT = RAYUSDT()
"""
    name: RAYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RCNBNB(NamedTuple):
    """
        name: RCNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RCNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RCNBNB"

    def __str__(self):
        return "RCNBNB"

    def __call__(self):
        return "RCNBNB"


RCNBNB = RCNBNB()
"""
    name: RCNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RCNBTC(NamedTuple):
    """
        name: RCNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RCNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RCNBTC"

    def __str__(self):
        return "RCNBTC"

    def __call__(self):
        return "RCNBTC"


RCNBTC = RCNBTC()
"""
    name: RCNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RCNETH(NamedTuple):
    """
        name: RCNETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RCNETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RCNETH"

    def __str__(self):
        return "RCNETH"

    def __call__(self):
        return "RCNETH"


RCNETH = RCNETH()
"""
    name: RCNETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNBNB(NamedTuple):
    """
        name: RDNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNBNB"

    def __str__(self):
        return "RDNBNB"

    def __call__(self):
        return "RDNBNB"


RDNBNB = RDNBNB()
"""
    name: RDNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNBTC(NamedTuple):
    """
        name: RDNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNBTC"

    def __str__(self):
        return "RDNBTC"

    def __call__(self):
        return "RDNBTC"


RDNBTC = RDNBTC()
"""
    name: RDNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNETH(NamedTuple):
    """
        name: RDNETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNETH"

    def __str__(self):
        return "RDNETH"

    def __call__(self):
        return "RDNETH"


RDNETH = RDNETH()
"""
    name: RDNETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNTBTC(NamedTuple):
    """
        name: RDNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNTBTC"

    def __str__(self):
        return "RDNTBTC"

    def __call__(self):
        return "RDNTBTC"


RDNTBTC = RDNTBTC()
"""
    name: RDNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNTTUSD(NamedTuple):
    """
        name: RDNTTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RDNTTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNTTUSD"

    def __str__(self):
        return "RDNTTUSD"

    def __call__(self):
        return "RDNTTUSD"


RDNTTUSD = RDNTTUSD()
"""
    name: RDNTTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RDNTUSDT(NamedTuple):
    """
        name: RDNTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RDNTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNTUSDT"

    def __str__(self):
        return "RDNTUSDT"

    def __call__(self):
        return "RDNTUSDT"


RDNTUSDT = RDNTUSDT()
"""
    name: RDNTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REEFBIDR(NamedTuple):
    """
        name: REEFBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "REEFBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFBIDR"

    def __str__(self):
        return "REEFBIDR"

    def __call__(self):
        return "REEFBIDR"


REEFBIDR = REEFBIDR()
"""
    name: REEFBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class REEFBTC(NamedTuple):
    """
        name: REEFBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REEFBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFBTC"

    def __str__(self):
        return "REEFBTC"

    def __call__(self):
        return "REEFBTC"


REEFBTC = REEFBTC()
"""
    name: REEFBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REEFBUSD(NamedTuple):
    """
        name: REEFBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REEFBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFBUSD"

    def __str__(self):
        return "REEFBUSD"

    def __call__(self):
        return "REEFBUSD"


REEFBUSD = REEFBUSD()
"""
    name: REEFBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REEFTRY(NamedTuple):
    """
        name: REEFTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REEFTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFTRY"

    def __str__(self):
        return "REEFTRY"

    def __call__(self):
        return "REEFTRY"


REEFTRY = REEFTRY()
"""
    name: REEFTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REEFUSDT(NamedTuple):
    """
        name: REEFUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REEFUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEFUSDT"

    def __str__(self):
        return "REEFUSDT"

    def __call__(self):
        return "REEFUSDT"


REEFUSDT = REEFUSDT()
"""
    name: REEFUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REIBNB(NamedTuple):
    """
        name: REIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REIBNB"

    def __str__(self):
        return "REIBNB"

    def __call__(self):
        return "REIBNB"


REIBNB = REIBNB()
"""
    name: REIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REIBUSD(NamedTuple):
    """
        name: REIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REIBUSD"

    def __str__(self):
        return "REIBUSD"

    def __call__(self):
        return "REIBUSD"


REIBUSD = REIBUSD()
"""
    name: REIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REIETH(NamedTuple):
    """
        name: REIETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REIETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REIETH"

    def __str__(self):
        return "REIETH"

    def __call__(self):
        return "REIETH"


REIETH = REIETH()
"""
    name: REIETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REIUSDT(NamedTuple):
    """
        name: REIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REIUSDT"

    def __str__(self):
        return "REIUSDT"

    def __call__(self):
        return "REIUSDT"


REIUSDT = REIUSDT()
"""
    name: REIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RENBNB(NamedTuple):
    """
        name: RENBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBNB"

    def __str__(self):
        return "RENBNB"

    def __call__(self):
        return "RENBNB"


RENBNB = RENBNB()
"""
    name: RENBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENBTC(NamedTuple):
    """
        name: RENBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBTC"

    def __str__(self):
        return "RENBTC"

    def __call__(self):
        return "RENBTC"


RENBTC = RENBTC()
"""
    name: RENBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENBTCBTC(NamedTuple):
    """
        name: RENBTCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBTCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBTCBTC"

    def __str__(self):
        return "RENBTCBTC"

    def __call__(self):
        return "RENBTCBTC"


RENBTCBTC = RENBTCBTC()
"""
    name: RENBTCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENBTCETH(NamedTuple):
    """
        name: RENBTCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBTCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBTCETH"

    def __str__(self):
        return "RENBTCETH"

    def __call__(self):
        return "RENBTCETH"


RENBTCETH = RENBTCETH()
"""
    name: RENBTCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENBUSD(NamedTuple):
    """
        name: RENBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENBUSD"

    def __str__(self):
        return "RENBUSD"

    def __call__(self):
        return "RENBUSD"


RENBUSD = RENBUSD()
"""
    name: RENBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RENUSDT(NamedTuple):
    """
        name: RENUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RENUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RENUSDT"

    def __str__(self):
        return "RENUSDT"

    def __call__(self):
        return "RENUSDT"


RENUSDT = RENUSDT()
"""
    name: RENUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REPBNB(NamedTuple):
    """
        name: REPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REPBNB"

    def __str__(self):
        return "REPBNB"

    def __call__(self):
        return "REPBNB"


REPBNB = REPBNB()
"""
    name: REPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REPBTC(NamedTuple):
    """
        name: REPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REPBTC"

    def __str__(self):
        return "REPBTC"

    def __call__(self):
        return "REPBTC"


REPBTC = REPBTC()
"""
    name: REPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REPBUSD(NamedTuple):
    """
        name: REPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REPBUSD"

    def __str__(self):
        return "REPBUSD"

    def __call__(self):
        return "REPBUSD"


REPBUSD = REPBUSD()
"""
    name: REPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REPUSDT(NamedTuple):
    """
        name: REPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REPUSDT"

    def __str__(self):
        return "REPUSDT"

    def __call__(self):
        return "REPUSDT"


REPUSDT = REPUSDT()
"""
    name: REPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REQBTC(NamedTuple):
    """
        name: REQBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REQBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQBTC"

    def __str__(self):
        return "REQBTC"

    def __call__(self):
        return "REQBTC"


REQBTC = REQBTC()
"""
    name: REQBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REQBUSD(NamedTuple):
    """
        name: REQBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REQBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQBUSD"

    def __str__(self):
        return "REQBUSD"

    def __call__(self):
        return "REQBUSD"


REQBUSD = REQBUSD()
"""
    name: REQBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class REQETH(NamedTuple):
    """
        name: REQETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "REQETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQETH"

    def __str__(self):
        return "REQETH"

    def __call__(self):
        return "REQETH"


REQETH = REQETH()
"""
    name: REQETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class REQUSDT(NamedTuple):
    """
        name: REQUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "REQUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQUSDT"

    def __str__(self):
        return "REQUSDT"

    def __call__(self):
        return "REQUSDT"


REQUSDT = REQUSDT()
"""
    name: REQUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RGTBNB(NamedTuple):
    """
        name: RGTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RGTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RGTBNB"

    def __str__(self):
        return "RGTBNB"

    def __call__(self):
        return "RGTBNB"


RGTBNB = RGTBNB()
"""
    name: RGTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RGTBTC(NamedTuple):
    """
        name: RGTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RGTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RGTBTC"

    def __str__(self):
        return "RGTBTC"

    def __call__(self):
        return "RGTBTC"


RGTBTC = RGTBTC()
"""
    name: RGTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RGTBUSD(NamedTuple):
    """
        name: RGTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RGTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RGTBUSD"

    def __str__(self):
        return "RGTBUSD"

    def __call__(self):
        return "RGTBUSD"


RGTBUSD = RGTBUSD()
"""
    name: RGTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RGTUSDT(NamedTuple):
    """
        name: RGTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RGTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RGTUSDT"

    def __str__(self):
        return "RGTUSDT"

    def __call__(self):
        return "RGTUSDT"


RGTUSDT = RGTUSDT()
"""
    name: RGTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RIFBTC(NamedTuple):
    """
        name: RIFBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RIFBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RIFBTC"

    def __str__(self):
        return "RIFBTC"

    def __call__(self):
        return "RIFBTC"


RIFBTC = RIFBTC()
"""
    name: RIFBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RIFUSDT(NamedTuple):
    """
        name: RIFUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RIFUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RIFUSDT"

    def __str__(self):
        return "RIFUSDT"

    def __call__(self):
        return "RIFUSDT"


RIFUSDT = RIFUSDT()
"""
    name: RIFUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RLCBNB(NamedTuple):
    """
        name: RLCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RLCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCBNB"

    def __str__(self):
        return "RLCBNB"

    def __call__(self):
        return "RLCBNB"


RLCBNB = RLCBNB()
"""
    name: RLCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RLCBTC(NamedTuple):
    """
        name: RLCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RLCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCBTC"

    def __str__(self):
        return "RLCBTC"

    def __call__(self):
        return "RLCBTC"


RLCBTC = RLCBTC()
"""
    name: RLCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RLCBUSD(NamedTuple):
    """
        name: RLCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RLCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCBUSD"

    def __str__(self):
        return "RLCBUSD"

    def __call__(self):
        return "RLCBUSD"


RLCBUSD = RLCBUSD()
"""
    name: RLCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RLCETH(NamedTuple):
    """
        name: RLCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RLCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCETH"

    def __str__(self):
        return "RLCETH"

    def __call__(self):
        return "RLCETH"


RLCETH = RLCETH()
"""
    name: RLCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RLCUSDT(NamedTuple):
    """
        name: RLCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RLCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLCUSDT"

    def __str__(self):
        return "RLCUSDT"

    def __call__(self):
        return "RLCUSDT"


RLCUSDT = RLCUSDT()
"""
    name: RLCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RNDRBTC(NamedTuple):
    """
        name: RNDRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RNDRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRBTC"

    def __str__(self):
        return "RNDRBTC"

    def __call__(self):
        return "RNDRBTC"


RNDRBTC = RNDRBTC()
"""
    name: RNDRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RNDRBUSD(NamedTuple):
    """
        name: RNDRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RNDRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRBUSD"

    def __str__(self):
        return "RNDRBUSD"

    def __call__(self):
        return "RNDRBUSD"


RNDRBUSD = RNDRBUSD()
"""
    name: RNDRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RNDRUSDT(NamedTuple):
    """
        name: RNDRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RNDRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRUSDT"

    def __str__(self):
        return "RNDRUSDT"

    def __call__(self):
        return "RNDRUSDT"


RNDRUSDT = RNDRUSDT()
"""
    name: RNDRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ROSEBNB(NamedTuple):
    """
        name: ROSEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ROSEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEBNB"

    def __str__(self):
        return "ROSEBNB"

    def __call__(self):
        return "ROSEBNB"


ROSEBNB = ROSEBNB()
"""
    name: ROSEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ROSEBTC(NamedTuple):
    """
        name: ROSEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ROSEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEBTC"

    def __str__(self):
        return "ROSEBTC"

    def __call__(self):
        return "ROSEBTC"


ROSEBTC = ROSEBTC()
"""
    name: ROSEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ROSEBUSD(NamedTuple):
    """
        name: ROSEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ROSEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEBUSD"

    def __str__(self):
        return "ROSEBUSD"

    def __call__(self):
        return "ROSEBUSD"


ROSEBUSD = ROSEBUSD()
"""
    name: ROSEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ROSEETH(NamedTuple):
    """
        name: ROSEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ROSEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEETH"

    def __str__(self):
        return "ROSEETH"

    def __call__(self):
        return "ROSEETH"


ROSEETH = ROSEETH()
"""
    name: ROSEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ROSETRY(NamedTuple):
    """
        name: ROSETRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ROSETRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSETRY"

    def __str__(self):
        return "ROSETRY"

    def __call__(self):
        return "ROSETRY"


ROSETRY = ROSETRY()
"""
    name: ROSETRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ROSEUSDT(NamedTuple):
    """
        name: ROSEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ROSEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSEUSDT"

    def __str__(self):
        return "ROSEUSDT"

    def __call__(self):
        return "ROSEUSDT"


ROSEUSDT = ROSEUSDT()
"""
    name: ROSEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RPLBTC(NamedTuple):
    """
        name: RPLBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPLBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPLBTC"

    def __str__(self):
        return "RPLBTC"

    def __call__(self):
        return "RPLBTC"


RPLBTC = RPLBTC()
"""
    name: RPLBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPLBUSD(NamedTuple):
    """
        name: RPLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPLBUSD"

    def __str__(self):
        return "RPLBUSD"

    def __call__(self):
        return "RPLBUSD"


RPLBUSD = RPLBUSD()
"""
    name: RPLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPLUSDT(NamedTuple):
    """
        name: RPLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPLUSDT"

    def __str__(self):
        return "RPLUSDT"

    def __call__(self):
        return "RPLUSDT"


RPLUSDT = RPLUSDT()
"""
    name: RPLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPXBNB(NamedTuple):
    """
        name: RPXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPXBNB"

    def __str__(self):
        return "RPXBNB"

    def __call__(self):
        return "RPXBNB"


RPXBNB = RPXBNB()
"""
    name: RPXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPXBTC(NamedTuple):
    """
        name: RPXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPXBTC"

    def __str__(self):
        return "RPXBTC"

    def __call__(self):
        return "RPXBTC"


RPXBTC = RPXBTC()
"""
    name: RPXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RPXETH(NamedTuple):
    """
        name: RPXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RPXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPXETH"

    def __str__(self):
        return "RPXETH"

    def __call__(self):
        return "RPXETH"


RPXETH = RPXETH()
"""
    name: RPXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RSRBNB(NamedTuple):
    """
        name: RSRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RSRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSRBNB"

    def __str__(self):
        return "RSRBNB"

    def __call__(self):
        return "RSRBNB"


RSRBNB = RSRBNB()
"""
    name: RSRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RSRBTC(NamedTuple):
    """
        name: RSRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RSRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSRBTC"

    def __str__(self):
        return "RSRBTC"

    def __call__(self):
        return "RSRBTC"


RSRBTC = RSRBTC()
"""
    name: RSRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RSRBUSD(NamedTuple):
    """
        name: RSRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RSRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSRBUSD"

    def __str__(self):
        return "RSRBUSD"

    def __call__(self):
        return "RSRBUSD"


RSRBUSD = RSRBUSD()
"""
    name: RSRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RSRUSDT(NamedTuple):
    """
        name: RSRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RSRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSRUSDT"

    def __str__(self):
        return "RSRUSDT"

    def __call__(self):
        return "RSRUSDT"


RSRUSDT = RSRUSDT()
"""
    name: RSRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RUNEAUD(NamedTuple):
    """
        name: RUNEAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEAUD"

    def __str__(self):
        return "RUNEAUD"

    def __call__(self):
        return "RUNEAUD"


RUNEAUD = RUNEAUD()
"""
    name: RUNEAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEBNB(NamedTuple):
    """
        name: RUNEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEBNB"

    def __str__(self):
        return "RUNEBNB"

    def __call__(self):
        return "RUNEBNB"


RUNEBNB = RUNEBNB()
"""
    name: RUNEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEBTC(NamedTuple):
    """
        name: RUNEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RUNEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEBTC"

    def __str__(self):
        return "RUNEBTC"

    def __call__(self):
        return "RUNEBTC"


RUNEBTC = RUNEBTC()
"""
    name: RUNEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RUNEBUSD(NamedTuple):
    """
        name: RUNEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RUNEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEBUSD"

    def __str__(self):
        return "RUNEBUSD"

    def __call__(self):
        return "RUNEBUSD"


RUNEBUSD = RUNEBUSD()
"""
    name: RUNEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RUNEETH(NamedTuple):
    """
        name: RUNEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEETH"

    def __str__(self):
        return "RUNEETH"

    def __call__(self):
        return "RUNEETH"


RUNEETH = RUNEETH()
"""
    name: RUNEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEEUR(NamedTuple):
    """
        name: RUNEEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEEUR"

    def __str__(self):
        return "RUNEEUR"

    def __call__(self):
        return "RUNEEUR"


RUNEEUR = RUNEEUR()
"""
    name: RUNEEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEGBP(NamedTuple):
    """
        name: RUNEGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNEGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEGBP"

    def __str__(self):
        return "RUNEGBP"

    def __call__(self):
        return "RUNEGBP"


RUNEGBP = RUNEGBP()
"""
    name: RUNEGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNETRY(NamedTuple):
    """
        name: RUNETRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RUNETRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNETRY"

    def __str__(self):
        return "RUNETRY"

    def __call__(self):
        return "RUNETRY"


RUNETRY = RUNETRY()
"""
    name: RUNETRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RUNEUSDT(NamedTuple):
    """
        name: RUNEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RUNEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNEUSDT"

    def __str__(self):
        return "RUNEUSDT"

    def __call__(self):
        return "RUNEUSDT"


RUNEUSDT = RUNEUSDT()
"""
    name: RUNEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RVNBTC(NamedTuple):
    """
        name: RVNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RVNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVNBTC"

    def __str__(self):
        return "RVNBTC"

    def __call__(self):
        return "RVNBTC"


RVNBTC = RVNBTC()
"""
    name: RVNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class RVNBUSD(NamedTuple):
    """
        name: RVNBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RVNBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVNBUSD"

    def __str__(self):
        return "RVNBUSD"

    def __call__(self):
        return "RVNBUSD"


RVNBUSD = RVNBUSD()
"""
    name: RVNBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RVNTRY(NamedTuple):
    """
        name: RVNTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "RVNTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVNTRY"

    def __str__(self):
        return "RVNTRY"

    def __call__(self):
        return "RVNTRY"


RVNTRY = RVNTRY()
"""
    name: RVNTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class RVNUSDT(NamedTuple):
    """
        name: RVNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "RVNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVNUSDT"

    def __str__(self):
        return "RVNUSDT"

    def __call__(self):
        return "RVNUSDT"


RVNUSDT = RVNUSDT()
"""
    name: RVNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SALTBTC(NamedTuple):
    """
        name: SALTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SALTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SALTBTC"

    def __str__(self):
        return "SALTBTC"

    def __call__(self):
        return "SALTBTC"


SALTBTC = SALTBTC()
"""
    name: SALTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SALTETH(NamedTuple):
    """
        name: SALTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SALTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SALTETH"

    def __str__(self):
        return "SALTETH"

    def __call__(self):
        return "SALTETH"


SALTETH = SALTETH()
"""
    name: SALTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDAUD(NamedTuple):
    """
        name: SANDAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDAUD"

    def __str__(self):
        return "SANDAUD"

    def __call__(self):
        return "SANDAUD"


SANDAUD = SANDAUD()
"""
    name: SANDAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDBIDR(NamedTuple):
    """
        name: SANDBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SANDBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBIDR"

    def __str__(self):
        return "SANDBIDR"

    def __call__(self):
        return "SANDBIDR"


SANDBIDR = SANDBIDR()
"""
    name: SANDBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SANDBNB(NamedTuple):
    """
        name: SANDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBNB"

    def __str__(self):
        return "SANDBNB"

    def __call__(self):
        return "SANDBNB"


SANDBNB = SANDBNB()
"""
    name: SANDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDBRL(NamedTuple):
    """
        name: SANDBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBRL"

    def __str__(self):
        return "SANDBRL"

    def __call__(self):
        return "SANDBRL"


SANDBRL = SANDBRL()
"""
    name: SANDBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDBTC(NamedTuple):
    """
        name: SANDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBTC"

    def __str__(self):
        return "SANDBTC"

    def __call__(self):
        return "SANDBTC"


SANDBTC = SANDBTC()
"""
    name: SANDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SANDBUSD(NamedTuple):
    """
        name: SANDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDBUSD"

    def __str__(self):
        return "SANDBUSD"

    def __call__(self):
        return "SANDBUSD"


SANDBUSD = SANDBUSD()
"""
    name: SANDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SANDETH(NamedTuple):
    """
        name: SANDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDETH"

    def __str__(self):
        return "SANDETH"

    def __call__(self):
        return "SANDETH"


SANDETH = SANDETH()
"""
    name: SANDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDTRY(NamedTuple):
    """
        name: SANDTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANDTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDTRY"

    def __str__(self):
        return "SANDTRY"

    def __call__(self):
        return "SANDTRY"


SANDTRY = SANDTRY()
"""
    name: SANDTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANDUSDT(NamedTuple):
    """
        name: SANDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANDUSDT"

    def __str__(self):
        return "SANDUSDT"

    def __call__(self):
        return "SANDUSDT"


SANDUSDT = SANDUSDT()
"""
    name: SANDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SANTOSBRL(NamedTuple):
    """
        name: SANTOSBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANTOSBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSBRL"

    def __str__(self):
        return "SANTOSBRL"

    def __call__(self):
        return "SANTOSBRL"


SANTOSBRL = SANTOSBRL()
"""
    name: SANTOSBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANTOSBTC(NamedTuple):
    """
        name: SANTOSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANTOSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSBTC"

    def __str__(self):
        return "SANTOSBTC"

    def __call__(self):
        return "SANTOSBTC"


SANTOSBTC = SANTOSBTC()
"""
    name: SANTOSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANTOSBUSD(NamedTuple):
    """
        name: SANTOSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANTOSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSBUSD"

    def __str__(self):
        return "SANTOSBUSD"

    def __call__(self):
        return "SANTOSBUSD"


SANTOSBUSD = SANTOSBUSD()
"""
    name: SANTOSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SANTOSTRY(NamedTuple):
    """
        name: SANTOSTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SANTOSTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSTRY"

    def __str__(self):
        return "SANTOSTRY"

    def __call__(self):
        return "SANTOSTRY"


SANTOSTRY = SANTOSTRY()
"""
    name: SANTOSTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SANTOSUSDT(NamedTuple):
    """
        name: SANTOSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SANTOSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SANTOSUSDT"

    def __str__(self):
        return "SANTOSUSDT"

    def __call__(self):
        return "SANTOSUSDT"


SANTOSUSDT = SANTOSUSDT()
"""
    name: SANTOSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SCBTC(NamedTuple):
    """
        name: SCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCBTC"

    def __str__(self):
        return "SCBTC"

    def __call__(self):
        return "SCBTC"


SCBTC = SCBTC()
"""
    name: SCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCBUSD(NamedTuple):
    """
        name: SCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCBUSD"

    def __str__(self):
        return "SCBUSD"

    def __call__(self):
        return "SCBUSD"


SCBUSD = SCBUSD()
"""
    name: SCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SCETH(NamedTuple):
    """
        name: SCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCETH"

    def __str__(self):
        return "SCETH"

    def __call__(self):
        return "SCETH"


SCETH = SCETH()
"""
    name: SCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCRTBTC(NamedTuple):
    """
        name: SCRTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCRTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRTBTC"

    def __str__(self):
        return "SCRTBTC"

    def __call__(self):
        return "SCRTBTC"


SCRTBTC = SCRTBTC()
"""
    name: SCRTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCRTBUSD(NamedTuple):
    """
        name: SCRTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCRTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRTBUSD"

    def __str__(self):
        return "SCRTBUSD"

    def __call__(self):
        return "SCRTBUSD"


SCRTBUSD = SCRTBUSD()
"""
    name: SCRTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCRTETH(NamedTuple):
    """
        name: SCRTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCRTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRTETH"

    def __str__(self):
        return "SCRTETH"

    def __call__(self):
        return "SCRTETH"


SCRTETH = SCRTETH()
"""
    name: SCRTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCRTUSDT(NamedTuple):
    """
        name: SCRTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SCRTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRTUSDT"

    def __str__(self):
        return "SCRTUSDT"

    def __call__(self):
        return "SCRTUSDT"


SCRTUSDT = SCRTUSDT()
"""
    name: SCRTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SCUSDT(NamedTuple):
    """
        name: SCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCUSDT"

    def __str__(self):
        return "SCUSDT"

    def __call__(self):
        return "SCUSDT"


SCUSDT = SCUSDT()
"""
    name: SCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SFPBTC(NamedTuple):
    """
        name: SFPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SFPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFPBTC"

    def __str__(self):
        return "SFPBTC"

    def __call__(self):
        return "SFPBTC"


SFPBTC = SFPBTC()
"""
    name: SFPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SFPBUSD(NamedTuple):
    """
        name: SFPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SFPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFPBUSD"

    def __str__(self):
        return "SFPBUSD"

    def __call__(self):
        return "SFPBUSD"


SFPBUSD = SFPBUSD()
"""
    name: SFPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SFPUSDT(NamedTuple):
    """
        name: SFPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SFPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFPUSDT"

    def __str__(self):
        return "SFPUSDT"

    def __call__(self):
        return "SFPUSDT"


SFPUSDT = SFPUSDT()
"""
    name: SFPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SHIBAUD(NamedTuple):
    """
        name: SHIBAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBAUD"

    def __str__(self):
        return "SHIBAUD"

    def __call__(self):
        return "SHIBAUD"


SHIBAUD = SHIBAUD()
"""
    name: SHIBAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBBRL(NamedTuple):
    """
        name: SHIBBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBBRL"

    def __str__(self):
        return "SHIBBRL"

    def __call__(self):
        return "SHIBBRL"


SHIBBRL = SHIBBRL()
"""
    name: SHIBBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBBUSD(NamedTuple):
    """
        name: SHIBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SHIBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBBUSD"

    def __str__(self):
        return "SHIBBUSD"

    def __call__(self):
        return "SHIBBUSD"


SHIBBUSD = SHIBBUSD()
"""
    name: SHIBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SHIBDOGE(NamedTuple):
    """
        name: SHIBDOGE
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 30.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SHIBDOGE"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 30.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBDOGE"

    def __str__(self):
        return "SHIBDOGE"

    def __call__(self):
        return "SHIBDOGE"


SHIBDOGE = SHIBDOGE()
"""
    name: SHIBDOGE
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 30.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SHIBEUR(NamedTuple):
    """
        name: SHIBEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBEUR"

    def __str__(self):
        return "SHIBEUR"

    def __call__(self):
        return "SHIBEUR"


SHIBEUR = SHIBEUR()
"""
    name: SHIBEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBGBP(NamedTuple):
    """
        name: SHIBGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBGBP"

    def __str__(self):
        return "SHIBGBP"

    def __call__(self):
        return "SHIBGBP"


SHIBGBP = SHIBGBP()
"""
    name: SHIBGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBRUB(NamedTuple):
    """
        name: SHIBRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBRUB"

    def __str__(self):
        return "SHIBRUB"

    def __call__(self):
        return "SHIBRUB"


SHIBRUB = SHIBRUB()
"""
    name: SHIBRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBTRY(NamedTuple):
    """
        name: SHIBTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBTRY"

    def __str__(self):
        return "SHIBTRY"

    def __call__(self):
        return "SHIBTRY"


SHIBTRY = SHIBTRY()
"""
    name: SHIBTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBUAH(NamedTuple):
    """
        name: SHIBUAH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SHIBUAH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBUAH"

    def __str__(self):
        return "SHIBUAH"

    def __call__(self):
        return "SHIBUAH"


SHIBUAH = SHIBUAH()
"""
    name: SHIBUAH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SHIBUSDT(NamedTuple):
    """
        name: SHIBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SHIBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIBUSDT"

    def __str__(self):
        return "SHIBUSDT"

    def __call__(self):
        return "SHIBUSDT"


SHIBUSDT = SHIBUSDT()
"""
    name: SHIBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SKLBTC(NamedTuple):
    """
        name: SKLBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SKLBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKLBTC"

    def __str__(self):
        return "SKLBTC"

    def __call__(self):
        return "SKLBTC"


SKLBTC = SKLBTC()
"""
    name: SKLBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SKLBUSD(NamedTuple):
    """
        name: SKLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SKLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKLBUSD"

    def __str__(self):
        return "SKLBUSD"

    def __call__(self):
        return "SKLBUSD"


SKLBUSD = SKLBUSD()
"""
    name: SKLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SKLUSDT(NamedTuple):
    """
        name: SKLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SKLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKLUSDT"

    def __str__(self):
        return "SKLUSDT"

    def __call__(self):
        return "SKLUSDT"


SKLUSDT = SKLUSDT()
"""
    name: SKLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SKYBNB(NamedTuple):
    """
        name: SKYBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SKYBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKYBNB"

    def __str__(self):
        return "SKYBNB"

    def __call__(self):
        return "SKYBNB"


SKYBNB = SKYBNB()
"""
    name: SKYBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SKYBTC(NamedTuple):
    """
        name: SKYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SKYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKYBTC"

    def __str__(self):
        return "SKYBTC"

    def __call__(self):
        return "SKYBTC"


SKYBTC = SKYBTC()
"""
    name: SKYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SKYETH(NamedTuple):
    """
        name: SKYETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SKYETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKYETH"

    def __str__(self):
        return "SKYETH"

    def __call__(self):
        return "SKYETH"


SKYETH = SKYETH()
"""
    name: SKYETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SLPBIDR(NamedTuple):
    """
        name: SLPBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SLPBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPBIDR"

    def __str__(self):
        return "SLPBIDR"

    def __call__(self):
        return "SLPBIDR"


SLPBIDR = SLPBIDR()
"""
    name: SLPBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SLPBNB(NamedTuple):
    """
        name: SLPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SLPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPBNB"

    def __str__(self):
        return "SLPBNB"

    def __call__(self):
        return "SLPBNB"


SLPBNB = SLPBNB()
"""
    name: SLPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SLPBUSD(NamedTuple):
    """
        name: SLPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SLPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPBUSD"

    def __str__(self):
        return "SLPBUSD"

    def __call__(self):
        return "SLPBUSD"


SLPBUSD = SLPBUSD()
"""
    name: SLPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SLPETH(NamedTuple):
    """
        name: SLPETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SLPETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPETH"

    def __str__(self):
        return "SLPETH"

    def __call__(self):
        return "SLPETH"


SLPETH = SLPETH()
"""
    name: SLPETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SLPTRY(NamedTuple):
    """
        name: SLPTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SLPTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPTRY"

    def __str__(self):
        return "SLPTRY"

    def __call__(self):
        return "SLPTRY"


SLPTRY = SLPTRY()
"""
    name: SLPTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SLPUSDT(NamedTuple):
    """
        name: SLPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SLPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLPUSDT"

    def __str__(self):
        return "SLPUSDT"

    def __call__(self):
        return "SLPUSDT"


SLPUSDT = SLPUSDT()
"""
    name: SLPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SNGLSBTC(NamedTuple):
    """
        name: SNGLSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNGLSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNGLSBTC"

    def __str__(self):
        return "SNGLSBTC"

    def __call__(self):
        return "SNGLSBTC"


SNGLSBTC = SNGLSBTC()
"""
    name: SNGLSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNGLSETH(NamedTuple):
    """
        name: SNGLSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNGLSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNGLSETH"

    def __str__(self):
        return "SNGLSETH"

    def __call__(self):
        return "SNGLSETH"


SNGLSETH = SNGLSETH()
"""
    name: SNGLSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNMBTC(NamedTuple):
    """
        name: SNMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNMBTC"

    def __str__(self):
        return "SNMBTC"

    def __call__(self):
        return "SNMBTC"


SNMBTC = SNMBTC()
"""
    name: SNMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNMBUSD(NamedTuple):
    """
        name: SNMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNMBUSD"

    def __str__(self):
        return "SNMBUSD"

    def __call__(self):
        return "SNMBUSD"


SNMBUSD = SNMBUSD()
"""
    name: SNMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNMETH(NamedTuple):
    """
        name: SNMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNMETH"

    def __str__(self):
        return "SNMETH"

    def __call__(self):
        return "SNMETH"


SNMETH = SNMETH()
"""
    name: SNMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNTBTC(NamedTuple):
    """
        name: SNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNTBTC"

    def __str__(self):
        return "SNTBTC"

    def __call__(self):
        return "SNTBTC"


SNTBTC = SNTBTC()
"""
    name: SNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNTBUSD(NamedTuple):
    """
        name: SNTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNTBUSD"

    def __str__(self):
        return "SNTBUSD"

    def __call__(self):
        return "SNTBUSD"


SNTBUSD = SNTBUSD()
"""
    name: SNTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNTETH(NamedTuple):
    """
        name: SNTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNTETH"

    def __str__(self):
        return "SNTETH"

    def __call__(self):
        return "SNTETH"


SNTETH = SNTETH()
"""
    name: SNTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNXBNB(NamedTuple):
    """
        name: SNXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXBNB"

    def __str__(self):
        return "SNXBNB"

    def __call__(self):
        return "SNXBNB"


SNXBNB = SNXBNB()
"""
    name: SNXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNXBTC(NamedTuple):
    """
        name: SNXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SNXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXBTC"

    def __str__(self):
        return "SNXBTC"

    def __call__(self):
        return "SNXBTC"


SNXBTC = SNXBTC()
"""
    name: SNXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SNXBUSD(NamedTuple):
    """
        name: SNXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXBUSD"

    def __str__(self):
        return "SNXBUSD"

    def __call__(self):
        return "SNXBUSD"


SNXBUSD = SNXBUSD()
"""
    name: SNXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNXETH(NamedTuple):
    """
        name: SNXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SNXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXETH"

    def __str__(self):
        return "SNXETH"

    def __call__(self):
        return "SNXETH"


SNXETH = SNXETH()
"""
    name: SNXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SNXUSDT(NamedTuple):
    """
        name: SNXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SNXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNXUSDT"

    def __str__(self):
        return "SNXUSDT"

    def __call__(self):
        return "SNXUSDT"


SNXUSDT = SNXUSDT()
"""
    name: SNXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SOLAUD(NamedTuple):
    """
        name: SOLAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLAUD"

    def __str__(self):
        return "SOLAUD"

    def __call__(self):
        return "SOLAUD"


SOLAUD = SOLAUD()
"""
    name: SOLAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLBIDR(NamedTuple):
    """
        name: SOLBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SOLBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBIDR"

    def __str__(self):
        return "SOLBIDR"

    def __call__(self):
        return "SOLBIDR"


SOLBIDR = SOLBIDR()
"""
    name: SOLBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SOLBNB(NamedTuple):
    """
        name: SOLBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBNB"

    def __str__(self):
        return "SOLBNB"

    def __call__(self):
        return "SOLBNB"


SOLBNB = SOLBNB()
"""
    name: SOLBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLBRL(NamedTuple):
    """
        name: SOLBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBRL"

    def __str__(self):
        return "SOLBRL"

    def __call__(self):
        return "SOLBRL"


SOLBRL = SOLBRL()
"""
    name: SOLBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLBTC(NamedTuple):
    """
        name: SOLBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SOLBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBTC"

    def __str__(self):
        return "SOLBTC"

    def __call__(self):
        return "SOLBTC"


SOLBTC = SOLBTC()
"""
    name: SOLBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SOLBUSD(NamedTuple):
    """
        name: SOLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SOLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLBUSD"

    def __str__(self):
        return "SOLBUSD"

    def __call__(self):
        return "SOLBUSD"


SOLBUSD = SOLBUSD()
"""
    name: SOLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SOLETH(NamedTuple):
    """
        name: SOLETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLETH"

    def __str__(self):
        return "SOLETH"

    def __call__(self):
        return "SOLETH"


SOLETH = SOLETH()
"""
    name: SOLETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLEUR(NamedTuple):
    """
        name: SOLEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLEUR"

    def __str__(self):
        return "SOLEUR"

    def __call__(self):
        return "SOLEUR"


SOLEUR = SOLEUR()
"""
    name: SOLEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLGBP(NamedTuple):
    """
        name: SOLGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLGBP"

    def __str__(self):
        return "SOLGBP"

    def __call__(self):
        return "SOLGBP"


SOLGBP = SOLGBP()
"""
    name: SOLGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLRUB(NamedTuple):
    """
        name: SOLRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLRUB"

    def __str__(self):
        return "SOLRUB"

    def __call__(self):
        return "SOLRUB"


SOLRUB = SOLRUB()
"""
    name: SOLRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLTRY(NamedTuple):
    """
        name: SOLTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLTRY"

    def __str__(self):
        return "SOLTRY"

    def __call__(self):
        return "SOLTRY"


SOLTRY = SOLTRY()
"""
    name: SOLTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLTUSD(NamedTuple):
    """
        name: SOLTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLTUSD"

    def __str__(self):
        return "SOLTUSD"

    def __call__(self):
        return "SOLTUSD"


SOLTUSD = SOLTUSD()
"""
    name: SOLTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLUSDC(NamedTuple):
    """
        name: SOLUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SOLUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLUSDC"

    def __str__(self):
        return "SOLUSDC"

    def __call__(self):
        return "SOLUSDC"


SOLUSDC = SOLUSDC()
"""
    name: SOLUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SOLUSDT(NamedTuple):
    """
        name: SOLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SOLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLUSDT"

    def __str__(self):
        return "SOLUSDT"

    def __call__(self):
        return "SOLUSDT"


SOLUSDT = SOLUSDT()
"""
    name: SOLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SPARTABNB(NamedTuple):
    """
        name: SPARTABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SPARTABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPARTABNB"

    def __str__(self):
        return "SPARTABNB"

    def __call__(self):
        return "SPARTABNB"


SPARTABNB = SPARTABNB()
"""
    name: SPARTABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SPELLBNB(NamedTuple):
    """
        name: SPELLBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SPELLBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLBNB"

    def __str__(self):
        return "SPELLBNB"

    def __call__(self):
        return "SPELLBNB"


SPELLBNB = SPELLBNB()
"""
    name: SPELLBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SPELLBTC(NamedTuple):
    """
        name: SPELLBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SPELLBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLBTC"

    def __str__(self):
        return "SPELLBTC"

    def __call__(self):
        return "SPELLBTC"


SPELLBTC = SPELLBTC()
"""
    name: SPELLBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SPELLBUSD(NamedTuple):
    """
        name: SPELLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SPELLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLBUSD"

    def __str__(self):
        return "SPELLBUSD"

    def __call__(self):
        return "SPELLBUSD"


SPELLBUSD = SPELLBUSD()
"""
    name: SPELLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SPELLTRY(NamedTuple):
    """
        name: SPELLTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SPELLTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLTRY"

    def __str__(self):
        return "SPELLTRY"

    def __call__(self):
        return "SPELLTRY"


SPELLTRY = SPELLTRY()
"""
    name: SPELLTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SPELLUSDT(NamedTuple):
    """
        name: SPELLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SPELLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPELLUSDT"

    def __str__(self):
        return "SPELLUSDT"

    def __call__(self):
        return "SPELLUSDT"


SPELLUSDT = SPELLUSDT()
"""
    name: SPELLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SRMBIDR(NamedTuple):
    """
        name: SRMBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SRMBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMBIDR"

    def __str__(self):
        return "SRMBIDR"

    def __call__(self):
        return "SRMBIDR"


SRMBIDR = SRMBIDR()
"""
    name: SRMBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SRMBNB(NamedTuple):
    """
        name: SRMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SRMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMBNB"

    def __str__(self):
        return "SRMBNB"

    def __call__(self):
        return "SRMBNB"


SRMBNB = SRMBNB()
"""
    name: SRMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SRMBTC(NamedTuple):
    """
        name: SRMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SRMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMBTC"

    def __str__(self):
        return "SRMBTC"

    def __call__(self):
        return "SRMBTC"


SRMBTC = SRMBTC()
"""
    name: SRMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SRMBUSD(NamedTuple):
    """
        name: SRMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SRMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMBUSD"

    def __str__(self):
        return "SRMBUSD"

    def __call__(self):
        return "SRMBUSD"


SRMBUSD = SRMBUSD()
"""
    name: SRMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SRMUSDT(NamedTuple):
    """
        name: SRMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SRMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRMUSDT"

    def __str__(self):
        return "SRMUSDT"

    def __call__(self):
        return "SRMUSDT"


SRMUSDT = SRMUSDT()
"""
    name: SRMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVBTC(NamedTuple):
    """
        name: SSVBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SSVBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVBTC"

    def __str__(self):
        return "SSVBTC"

    def __call__(self):
        return "SSVBTC"


SSVBTC = SSVBTC()
"""
    name: SSVBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVBUSD(NamedTuple):
    """
        name: SSVBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SSVBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVBUSD"

    def __str__(self):
        return "SSVBUSD"

    def __call__(self):
        return "SSVBUSD"


SSVBUSD = SSVBUSD()
"""
    name: SSVBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVETH(NamedTuple):
    """
        name: SSVETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SSVETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVETH"

    def __str__(self):
        return "SSVETH"

    def __call__(self):
        return "SSVETH"


SSVETH = SSVETH()
"""
    name: SSVETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVTUSD(NamedTuple):
    """
        name: SSVTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SSVTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVTUSD"

    def __str__(self):
        return "SSVTUSD"

    def __call__(self):
        return "SSVTUSD"


SSVTUSD = SSVTUSD()
"""
    name: SSVTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SSVUSDT(NamedTuple):
    """
        name: SSVUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SSVUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSVUSDT"

    def __str__(self):
        return "SSVUSDT"

    def __call__(self):
        return "SSVUSDT"


SSVUSDT = SSVUSDT()
"""
    name: SSVUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STEEMBNB(NamedTuple):
    """
        name: STEEMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMBNB"

    def __str__(self):
        return "STEEMBNB"

    def __call__(self):
        return "STEEMBNB"


STEEMBNB = STEEMBNB()
"""
    name: STEEMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STEEMBTC(NamedTuple):
    """
        name: STEEMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMBTC"

    def __str__(self):
        return "STEEMBTC"

    def __call__(self):
        return "STEEMBTC"


STEEMBTC = STEEMBTC()
"""
    name: STEEMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STEEMBUSD(NamedTuple):
    """
        name: STEEMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMBUSD"

    def __str__(self):
        return "STEEMBUSD"

    def __call__(self):
        return "STEEMBUSD"


STEEMBUSD = STEEMBUSD()
"""
    name: STEEMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STEEMETH(NamedTuple):
    """
        name: STEEMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMETH"

    def __str__(self):
        return "STEEMETH"

    def __call__(self):
        return "STEEMETH"


STEEMETH = STEEMETH()
"""
    name: STEEMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STEEMUSDT(NamedTuple):
    """
        name: STEEMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STEEMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEEMUSDT"

    def __str__(self):
        return "STEEMUSDT"

    def __call__(self):
        return "STEEMUSDT"


STEEMUSDT = STEEMUSDT()
"""
    name: STEEMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STGBTC(NamedTuple):
    """
        name: STGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STGBTC"

    def __str__(self):
        return "STGBTC"

    def __call__(self):
        return "STGBTC"


STGBTC = STGBTC()
"""
    name: STGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STGBUSD(NamedTuple):
    """
        name: STGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STGBUSD"

    def __str__(self):
        return "STGBUSD"

    def __call__(self):
        return "STGBUSD"


STGBUSD = STGBUSD()
"""
    name: STGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STGUSDT(NamedTuple):
    """
        name: STGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STGUSDT"

    def __str__(self):
        return "STGUSDT"

    def __call__(self):
        return "STGUSDT"


STGUSDT = STGUSDT()
"""
    name: STGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STMXBTC(NamedTuple):
    """
        name: STMXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STMXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STMXBTC"

    def __str__(self):
        return "STMXBTC"

    def __call__(self):
        return "STMXBTC"


STMXBTC = STMXBTC()
"""
    name: STMXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STMXBUSD(NamedTuple):
    """
        name: STMXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STMXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STMXBUSD"

    def __str__(self):
        return "STMXBUSD"

    def __call__(self):
        return "STMXBUSD"


STMXBUSD = STMXBUSD()
"""
    name: STMXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STMXETH(NamedTuple):
    """
        name: STMXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STMXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STMXETH"

    def __str__(self):
        return "STMXETH"

    def __call__(self):
        return "STMXETH"


STMXETH = STMXETH()
"""
    name: STMXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STMXUSDT(NamedTuple):
    """
        name: STMXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STMXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STMXUSDT"

    def __str__(self):
        return "STMXUSDT"

    def __call__(self):
        return "STMXUSDT"


STMXUSDT = STMXUSDT()
"""
    name: STMXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STORJBTC(NamedTuple):
    """
        name: STORJBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STORJBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJBTC"

    def __str__(self):
        return "STORJBTC"

    def __call__(self):
        return "STORJBTC"


STORJBTC = STORJBTC()
"""
    name: STORJBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STORJBUSD(NamedTuple):
    """
        name: STORJBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORJBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJBUSD"

    def __str__(self):
        return "STORJBUSD"

    def __call__(self):
        return "STORJBUSD"


STORJBUSD = STORJBUSD()
"""
    name: STORJBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORJETH(NamedTuple):
    """
        name: STORJETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORJETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJETH"

    def __str__(self):
        return "STORJETH"

    def __call__(self):
        return "STORJETH"


STORJETH = STORJETH()
"""
    name: STORJETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORJTRY(NamedTuple):
    """
        name: STORJTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORJTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJTRY"

    def __str__(self):
        return "STORJTRY"

    def __call__(self):
        return "STORJTRY"


STORJTRY = STORJTRY()
"""
    name: STORJTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORJUSDT(NamedTuple):
    """
        name: STORJUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STORJUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJUSDT"

    def __str__(self):
        return "STORJUSDT"

    def __call__(self):
        return "STORJUSDT"


STORJUSDT = STORJUSDT()
"""
    name: STORJUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STORMBNB(NamedTuple):
    """
        name: STORMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORMBNB"

    def __str__(self):
        return "STORMBNB"

    def __call__(self):
        return "STORMBNB"


STORMBNB = STORMBNB()
"""
    name: STORMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORMBTC(NamedTuple):
    """
        name: STORMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORMBTC"

    def __str__(self):
        return "STORMBTC"

    def __call__(self):
        return "STORMBTC"


STORMBTC = STORMBTC()
"""
    name: STORMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORMETH(NamedTuple):
    """
        name: STORMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORMETH"

    def __str__(self):
        return "STORMETH"

    def __call__(self):
        return "STORMETH"


STORMETH = STORMETH()
"""
    name: STORMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STORMUSDT(NamedTuple):
    """
        name: STORMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STORMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORMUSDT"

    def __str__(self):
        return "STORMUSDT"

    def __call__(self):
        return "STORMUSDT"


STORMUSDT = STORMUSDT()
"""
    name: STORMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STPTBNB(NamedTuple):
    """
        name: STPTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STPTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STPTBNB"

    def __str__(self):
        return "STPTBNB"

    def __call__(self):
        return "STPTBNB"


STPTBNB = STPTBNB()
"""
    name: STPTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STPTBTC(NamedTuple):
    """
        name: STPTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STPTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STPTBTC"

    def __str__(self):
        return "STPTBTC"

    def __call__(self):
        return "STPTBTC"


STPTBTC = STPTBTC()
"""
    name: STPTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STPTBUSD(NamedTuple):
    """
        name: STPTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STPTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STPTBUSD"

    def __str__(self):
        return "STPTBUSD"

    def __call__(self):
        return "STPTBUSD"


STPTBUSD = STPTBUSD()
"""
    name: STPTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STPTUSDT(NamedTuple):
    """
        name: STPTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STPTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STPTUSDT"

    def __str__(self):
        return "STPTUSDT"

    def __call__(self):
        return "STPTUSDT"


STPTUSDT = STPTUSDT()
"""
    name: STPTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STRATBNB(NamedTuple):
    """
        name: STRATBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATBNB"

    def __str__(self):
        return "STRATBNB"

    def __call__(self):
        return "STRATBNB"


STRATBNB = STRATBNB()
"""
    name: STRATBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRATBTC(NamedTuple):
    """
        name: STRATBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATBTC"

    def __str__(self):
        return "STRATBTC"

    def __call__(self):
        return "STRATBTC"


STRATBTC = STRATBTC()
"""
    name: STRATBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRATBUSD(NamedTuple):
    """
        name: STRATBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATBUSD"

    def __str__(self):
        return "STRATBUSD"

    def __call__(self):
        return "STRATBUSD"


STRATBUSD = STRATBUSD()
"""
    name: STRATBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRATETH(NamedTuple):
    """
        name: STRATETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATETH"

    def __str__(self):
        return "STRATETH"

    def __call__(self):
        return "STRATETH"


STRATETH = STRATETH()
"""
    name: STRATETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRATUSDT(NamedTuple):
    """
        name: STRATUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRATUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRATUSDT"

    def __str__(self):
        return "STRATUSDT"

    def __call__(self):
        return "STRATUSDT"


STRATUSDT = STRATUSDT()
"""
    name: STRATUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRAXBTC(NamedTuple):
    """
        name: STRAXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRAXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAXBTC"

    def __str__(self):
        return "STRAXBTC"

    def __call__(self):
        return "STRAXBTC"


STRAXBTC = STRAXBTC()
"""
    name: STRAXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRAXBUSD(NamedTuple):
    """
        name: STRAXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRAXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAXBUSD"

    def __str__(self):
        return "STRAXBUSD"

    def __call__(self):
        return "STRAXBUSD"


STRAXBUSD = STRAXBUSD()
"""
    name: STRAXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRAXETH(NamedTuple):
    """
        name: STRAXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRAXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAXETH"

    def __str__(self):
        return "STRAXETH"

    def __call__(self):
        return "STRAXETH"


STRAXETH = STRAXETH()
"""
    name: STRAXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STRAXUSDT(NamedTuple):
    """
        name: STRAXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STRAXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAXUSDT"

    def __str__(self):
        return "STRAXUSDT"

    def __call__(self):
        return "STRAXUSDT"


STRAXUSDT = STRAXUSDT()
"""
    name: STRAXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STXBNB(NamedTuple):
    """
        name: STXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXBNB"

    def __str__(self):
        return "STXBNB"

    def __call__(self):
        return "STXBNB"


STXBNB = STXBNB()
"""
    name: STXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STXBTC(NamedTuple):
    """
        name: STXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXBTC"

    def __str__(self):
        return "STXBTC"

    def __call__(self):
        return "STXBTC"


STXBTC = STXBTC()
"""
    name: STXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STXBUSD(NamedTuple):
    """
        name: STXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXBUSD"

    def __str__(self):
        return "STXBUSD"

    def __call__(self):
        return "STXBUSD"


STXBUSD = STXBUSD()
"""
    name: STXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class STXTRY(NamedTuple):
    """
        name: STXTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "STXTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXTRY"

    def __str__(self):
        return "STXTRY"

    def __call__(self):
        return "STXTRY"


STXTRY = STXTRY()
"""
    name: STXTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class STXUSDT(NamedTuple):
    """
        name: STXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "STXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXUSDT"

    def __str__(self):
        return "STXUSDT"

    def __call__(self):
        return "STXUSDT"


STXUSDT = STXUSDT()
"""
    name: STXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUBBTC(NamedTuple):
    """
        name: SUBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUBBTC"

    def __str__(self):
        return "SUBBTC"

    def __call__(self):
        return "SUBBTC"


SUBBTC = SUBBTC()
"""
    name: SUBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUBETH(NamedTuple):
    """
        name: SUBETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUBETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUBETH"

    def __str__(self):
        return "SUBETH"

    def __call__(self):
        return "SUBETH"


SUBETH = SUBETH()
"""
    name: SUBETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUNBTC(NamedTuple):
    """
        name: SUNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUNBTC"

    def __str__(self):
        return "SUNBTC"

    def __call__(self):
        return "SUNBTC"


SUNBTC = SUNBTC()
"""
    name: SUNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUNBUSD(NamedTuple):
    """
        name: SUNBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUNBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUNBUSD"

    def __str__(self):
        return "SUNBUSD"

    def __call__(self):
        return "SUNBUSD"


SUNBUSD = SUNBUSD()
"""
    name: SUNBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUNUSDT(NamedTuple):
    """
        name: SUNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUNUSDT"

    def __str__(self):
        return "SUNUSDT"

    def __call__(self):
        return "SUNUSDT"


SUNUSDT = SUNUSDT()
"""
    name: SUNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUPERBTC(NamedTuple):
    """
        name: SUPERBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUPERBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPERBTC"

    def __str__(self):
        return "SUPERBTC"

    def __call__(self):
        return "SUPERBTC"


SUPERBTC = SUPERBTC()
"""
    name: SUPERBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUPERBUSD(NamedTuple):
    """
        name: SUPERBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUPERBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPERBUSD"

    def __str__(self):
        return "SUPERBUSD"

    def __call__(self):
        return "SUPERBUSD"


SUPERBUSD = SUPERBUSD()
"""
    name: SUPERBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUPERUSDT(NamedTuple):
    """
        name: SUPERUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUPERUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPERUSDT"

    def __str__(self):
        return "SUPERUSDT"

    def __call__(self):
        return "SUPERUSDT"


SUPERUSDT = SUPERUSDT()
"""
    name: SUPERUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUSDBTC(NamedTuple):
    """
        name: SUSDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSDBTC"

    def __str__(self):
        return "SUSDBTC"

    def __call__(self):
        return "SUSDBTC"


SUSDBTC = SUSDBTC()
"""
    name: SUSDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSDETH(NamedTuple):
    """
        name: SUSDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSDETH"

    def __str__(self):
        return "SUSDETH"

    def __call__(self):
        return "SUSDETH"


SUSDETH = SUSDETH()
"""
    name: SUSDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSDUSDT(NamedTuple):
    """
        name: SUSDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSDUSDT"

    def __str__(self):
        return "SUSDUSDT"

    def __call__(self):
        return "SUSDUSDT"


SUSDUSDT = SUSDUSDT()
"""
    name: SUSDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIBNB(NamedTuple):
    """
        name: SUSHIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSHIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIBNB"

    def __str__(self):
        return "SUSHIBNB"

    def __call__(self):
        return "SUSHIBNB"


SUSHIBNB = SUSHIBNB()
"""
    name: SUSHIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIBTC(NamedTuple):
    """
        name: SUSHIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUSHIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIBTC"

    def __str__(self):
        return "SUSHIBTC"

    def __call__(self):
        return "SUSHIBTC"


SUSHIBTC = SUSHIBTC()
"""
    name: SUSHIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SUSHIBUSD(NamedTuple):
    """
        name: SUSHIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSHIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIBUSD"

    def __str__(self):
        return "SUSHIBUSD"

    def __call__(self):
        return "SUSHIBUSD"


SUSHIBUSD = SUSHIBUSD()
"""
    name: SUSHIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIDOWNUSDT(NamedTuple):
    """
        name: SUSHIDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSHIDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIDOWNUSDT"

    def __str__(self):
        return "SUSHIDOWNUSDT"

    def __call__(self):
        return "SUSHIDOWNUSDT"


SUSHIDOWNUSDT = SUSHIDOWNUSDT()
"""
    name: SUSHIDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIUPUSDT(NamedTuple):
    """
        name: SUSHIUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SUSHIUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIUPUSDT"

    def __str__(self):
        return "SUSHIUPUSDT"

    def __call__(self):
        return "SUSHIUPUSDT"


SUSHIUPUSDT = SUSHIUPUSDT()
"""
    name: SUSHIUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SUSHIUSDT(NamedTuple):
    """
        name: SUSHIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SUSHIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHIUSDT"

    def __str__(self):
        return "SUSHIUSDT"

    def __call__(self):
        return "SUSHIUSDT"


SUSHIUSDT = SUSHIUSDT()
"""
    name: SUSHIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SWRVBNB(NamedTuple):
    """
        name: SWRVBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SWRVBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWRVBNB"

    def __str__(self):
        return "SWRVBNB"

    def __call__(self):
        return "SWRVBNB"


SWRVBNB = SWRVBNB()
"""
    name: SWRVBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SWRVBUSD(NamedTuple):
    """
        name: SWRVBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SWRVBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWRVBUSD"

    def __str__(self):
        return "SWRVBUSD"

    def __call__(self):
        return "SWRVBUSD"


SWRVBUSD = SWRVBUSD()
"""
    name: SWRVBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPAUD(NamedTuple):
    """
        name: SXPAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPAUD"

    def __str__(self):
        return "SXPAUD"

    def __call__(self):
        return "SXPAUD"


SXPAUD = SXPAUD()
"""
    name: SXPAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPBIDR(NamedTuple):
    """
        name: SXPBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "SXPBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPBIDR"

    def __str__(self):
        return "SXPBIDR"

    def __call__(self):
        return "SXPBIDR"


SXPBIDR = SXPBIDR()
"""
    name: SXPBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class SXPBNB(NamedTuple):
    """
        name: SXPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SXPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPBNB"

    def __str__(self):
        return "SXPBNB"

    def __call__(self):
        return "SXPBNB"


SXPBNB = SXPBNB()
"""
    name: SXPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SXPBTC(NamedTuple):
    """
        name: SXPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SXPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPBTC"

    def __str__(self):
        return "SXPBTC"

    def __call__(self):
        return "SXPBTC"


SXPBTC = SXPBTC()
"""
    name: SXPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SXPBUSD(NamedTuple):
    """
        name: SXPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPBUSD"

    def __str__(self):
        return "SXPBUSD"

    def __call__(self):
        return "SXPBUSD"


SXPBUSD = SXPBUSD()
"""
    name: SXPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPDOWNUSDT(NamedTuple):
    """
        name: SXPDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPDOWNUSDT"

    def __str__(self):
        return "SXPDOWNUSDT"

    def __call__(self):
        return "SXPDOWNUSDT"


SXPDOWNUSDT = SXPDOWNUSDT()
"""
    name: SXPDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPEUR(NamedTuple):
    """
        name: SXPEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPEUR"

    def __str__(self):
        return "SXPEUR"

    def __call__(self):
        return "SXPEUR"


SXPEUR = SXPEUR()
"""
    name: SXPEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPGBP(NamedTuple):
    """
        name: SXPGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPGBP"

    def __str__(self):
        return "SXPGBP"

    def __call__(self):
        return "SXPGBP"


SXPGBP = SXPGBP()
"""
    name: SXPGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPTRY(NamedTuple):
    """
        name: SXPTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPTRY"

    def __str__(self):
        return "SXPTRY"

    def __call__(self):
        return "SXPTRY"


SXPTRY = SXPTRY()
"""
    name: SXPTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPUPUSDT(NamedTuple):
    """
        name: SXPUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SXPUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPUPUSDT"

    def __str__(self):
        return "SXPUPUSDT"

    def __call__(self):
        return "SXPUPUSDT"


SXPUPUSDT = SXPUPUSDT()
"""
    name: SXPUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SXPUSDT(NamedTuple):
    """
        name: SXPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SXPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPUSDT"

    def __str__(self):
        return "SXPUSDT"

    def __call__(self):
        return "SXPUSDT"


SXPUSDT = SXPUSDT()
"""
    name: SXPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SYNBTC(NamedTuple):
    """
        name: SYNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYNBTC"

    def __str__(self):
        return "SYNBTC"

    def __call__(self):
        return "SYNBTC"


SYNBTC = SYNBTC()
"""
    name: SYNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYNUSDT(NamedTuple):
    """
        name: SYNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "SYNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYNUSDT"

    def __str__(self):
        return "SYNUSDT"

    def __call__(self):
        return "SYNUSDT"


SYNUSDT = SYNUSDT()
"""
    name: SYNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class SYSBNB(NamedTuple):
    """
        name: SYSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSBNB"

    def __str__(self):
        return "SYSBNB"

    def __call__(self):
        return "SYSBNB"


SYSBNB = SYSBNB()
"""
    name: SYSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYSBTC(NamedTuple):
    """
        name: SYSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSBTC"

    def __str__(self):
        return "SYSBTC"

    def __call__(self):
        return "SYSBTC"


SYSBTC = SYSBTC()
"""
    name: SYSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYSBUSD(NamedTuple):
    """
        name: SYSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSBUSD"

    def __str__(self):
        return "SYSBUSD"

    def __call__(self):
        return "SYSBUSD"


SYSBUSD = SYSBUSD()
"""
    name: SYSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYSETH(NamedTuple):
    """
        name: SYSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSETH"

    def __str__(self):
        return "SYSETH"

    def __call__(self):
        return "SYSETH"


SYSETH = SYSETH()
"""
    name: SYSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class SYSUSDT(NamedTuple):
    """
        name: SYSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "SYSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYSUSDT"

    def __str__(self):
        return "SYSUSDT"

    def __call__(self):
        return "SYSUSDT"


SYSUSDT = SYSUSDT()
"""
    name: SYSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TBUSD(NamedTuple):
    """
        name: TBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TBUSD"

    def __str__(self):
        return "TBUSD"

    def __call__(self):
        return "TBUSD"


TBUSD = TBUSD()
"""
    name: TBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TCTBNB(NamedTuple):
    """
        name: TCTBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TCTBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TCTBNB"

    def __str__(self):
        return "TCTBNB"

    def __call__(self):
        return "TCTBNB"


TCTBNB = TCTBNB()
"""
    name: TCTBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TCTBTC(NamedTuple):
    """
        name: TCTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TCTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TCTBTC"

    def __str__(self):
        return "TCTBTC"

    def __call__(self):
        return "TCTBTC"


TCTBTC = TCTBTC()
"""
    name: TCTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TCTUSDT(NamedTuple):
    """
        name: TCTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TCTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TCTUSDT"

    def __str__(self):
        return "TCTUSDT"

    def __call__(self):
        return "TCTUSDT"


TCTUSDT = TCTUSDT()
"""
    name: TCTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELBNB(NamedTuple):
    """
        name: TFUELBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELBNB"

    def __str__(self):
        return "TFUELBNB"

    def __call__(self):
        return "TFUELBNB"


TFUELBNB = TFUELBNB()
"""
    name: TFUELBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELBTC(NamedTuple):
    """
        name: TFUELBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TFUELBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELBTC"

    def __str__(self):
        return "TFUELBTC"

    def __call__(self):
        return "TFUELBTC"


TFUELBTC = TFUELBTC()
"""
    name: TFUELBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TFUELBUSD(NamedTuple):
    """
        name: TFUELBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELBUSD"

    def __str__(self):
        return "TFUELBUSD"

    def __call__(self):
        return "TFUELBUSD"


TFUELBUSD = TFUELBUSD()
"""
    name: TFUELBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELPAX(NamedTuple):
    """
        name: TFUELPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELPAX"

    def __str__(self):
        return "TFUELPAX"

    def __call__(self):
        return "TFUELPAX"


TFUELPAX = TFUELPAX()
"""
    name: TFUELPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELTUSD(NamedTuple):
    """
        name: TFUELTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELTUSD"

    def __str__(self):
        return "TFUELTUSD"

    def __call__(self):
        return "TFUELTUSD"


TFUELTUSD = TFUELTUSD()
"""
    name: TFUELTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELUSDC(NamedTuple):
    """
        name: TFUELUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TFUELUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELUSDC"

    def __str__(self):
        return "TFUELUSDC"

    def __call__(self):
        return "TFUELUSDC"


TFUELUSDC = TFUELUSDC()
"""
    name: TFUELUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TFUELUSDT(NamedTuple):
    """
        name: TFUELUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TFUELUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUELUSDT"

    def __str__(self):
        return "TFUELUSDT"

    def __call__(self):
        return "TFUELUSDT"


TFUELUSDT = TFUELUSDT()
"""
    name: TFUELUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class THETABNB(NamedTuple):
    """
        name: THETABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "THETABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETABNB"

    def __str__(self):
        return "THETABNB"

    def __call__(self):
        return "THETABNB"


THETABNB = THETABNB()
"""
    name: THETABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class THETABTC(NamedTuple):
    """
        name: THETABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "THETABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETABTC"

    def __str__(self):
        return "THETABTC"

    def __call__(self):
        return "THETABTC"


THETABTC = THETABTC()
"""
    name: THETABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class THETABUSD(NamedTuple):
    """
        name: THETABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "THETABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETABUSD"

    def __str__(self):
        return "THETABUSD"

    def __call__(self):
        return "THETABUSD"


THETABUSD = THETABUSD()
"""
    name: THETABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class THETAETH(NamedTuple):
    """
        name: THETAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "THETAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETAETH"

    def __str__(self):
        return "THETAETH"

    def __call__(self):
        return "THETAETH"


THETAETH = THETAETH()
"""
    name: THETAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class THETAEUR(NamedTuple):
    """
        name: THETAEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "THETAEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETAEUR"

    def __str__(self):
        return "THETAEUR"

    def __call__(self):
        return "THETAEUR"


THETAEUR = THETAEUR()
"""
    name: THETAEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class THETAUSDT(NamedTuple):
    """
        name: THETAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "THETAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETAUSDT"

    def __str__(self):
        return "THETAUSDT"

    def __call__(self):
        return "THETAUSDT"


THETAUSDT = THETAUSDT()
"""
    name: THETAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TKOBIDR(NamedTuple):
    """
        name: TKOBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "TKOBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TKOBIDR"

    def __str__(self):
        return "TKOBIDR"

    def __call__(self):
        return "TKOBIDR"


TKOBIDR = TKOBIDR()
"""
    name: TKOBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class TKOBTC(NamedTuple):
    """
        name: TKOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TKOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TKOBTC"

    def __str__(self):
        return "TKOBTC"

    def __call__(self):
        return "TKOBTC"


TKOBTC = TKOBTC()
"""
    name: TKOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TKOBUSD(NamedTuple):
    """
        name: TKOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TKOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TKOBUSD"

    def __str__(self):
        return "TKOBUSD"

    def __call__(self):
        return "TKOBUSD"


TKOBUSD = TKOBUSD()
"""
    name: TKOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TKOUSDT(NamedTuple):
    """
        name: TKOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TKOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TKOUSDT"

    def __str__(self):
        return "TKOUSDT"

    def __call__(self):
        return "TKOUSDT"


TKOUSDT = TKOUSDT()
"""
    name: TKOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TLMBNB(NamedTuple):
    """
        name: TLMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TLMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMBNB"

    def __str__(self):
        return "TLMBNB"

    def __call__(self):
        return "TLMBNB"


TLMBNB = TLMBNB()
"""
    name: TLMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TLMBTC(NamedTuple):
    """
        name: TLMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TLMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMBTC"

    def __str__(self):
        return "TLMBTC"

    def __call__(self):
        return "TLMBTC"


TLMBTC = TLMBTC()
"""
    name: TLMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TLMBUSD(NamedTuple):
    """
        name: TLMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TLMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMBUSD"

    def __str__(self):
        return "TLMBUSD"

    def __call__(self):
        return "TLMBUSD"


TLMBUSD = TLMBUSD()
"""
    name: TLMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TLMTRY(NamedTuple):
    """
        name: TLMTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TLMTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMTRY"

    def __str__(self):
        return "TLMTRY"

    def __call__(self):
        return "TLMTRY"


TLMTRY = TLMTRY()
"""
    name: TLMTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TLMUSDT(NamedTuple):
    """
        name: TLMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TLMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLMUSDT"

    def __str__(self):
        return "TLMUSDT"

    def __call__(self):
        return "TLMUSDT"


TLMUSDT = TLMUSDT()
"""
    name: TLMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TNBBTC(NamedTuple):
    """
        name: TNBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TNBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TNBBTC"

    def __str__(self):
        return "TNBBTC"

    def __call__(self):
        return "TNBBTC"


TNBBTC = TNBBTC()
"""
    name: TNBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TNBETH(NamedTuple):
    """
        name: TNBETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TNBETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TNBETH"

    def __str__(self):
        return "TNBETH"

    def __call__(self):
        return "TNBETH"


TNBETH = TNBETH()
"""
    name: TNBETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TNTBTC(NamedTuple):
    """
        name: TNTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TNTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TNTBTC"

    def __str__(self):
        return "TNTBTC"

    def __call__(self):
        return "TNTBTC"


TNTBTC = TNTBTC()
"""
    name: TNTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TNTETH(NamedTuple):
    """
        name: TNTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TNTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TNTETH"

    def __str__(self):
        return "TNTETH"

    def __call__(self):
        return "TNTETH"


TNTETH = TNTETH()
"""
    name: TNTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOBNB(NamedTuple):
    """
        name: TOMOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TOMOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOBNB"

    def __str__(self):
        return "TOMOBNB"

    def __call__(self):
        return "TOMOBNB"


TOMOBNB = TOMOBNB()
"""
    name: TOMOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOBTC(NamedTuple):
    """
        name: TOMOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TOMOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOBTC"

    def __str__(self):
        return "TOMOBTC"

    def __call__(self):
        return "TOMOBTC"


TOMOBTC = TOMOBTC()
"""
    name: TOMOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TOMOBUSD(NamedTuple):
    """
        name: TOMOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TOMOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOBUSD"

    def __str__(self):
        return "TOMOBUSD"

    def __call__(self):
        return "TOMOBUSD"


TOMOBUSD = TOMOBUSD()
"""
    name: TOMOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOUSDC(NamedTuple):
    """
        name: TOMOUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TOMOUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOUSDC"

    def __str__(self):
        return "TOMOUSDC"

    def __call__(self):
        return "TOMOUSDC"


TOMOUSDC = TOMOUSDC()
"""
    name: TOMOUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TOMOUSDT(NamedTuple):
    """
        name: TOMOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TOMOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOMOUSDT"

    def __str__(self):
        return "TOMOUSDT"

    def __call__(self):
        return "TOMOUSDT"


TOMOUSDT = TOMOUSDT()
"""
    name: TOMOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TORNBNB(NamedTuple):
    """
        name: TORNBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TORNBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TORNBNB"

    def __str__(self):
        return "TORNBNB"

    def __call__(self):
        return "TORNBNB"


TORNBNB = TORNBNB()
"""
    name: TORNBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TORNBTC(NamedTuple):
    """
        name: TORNBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TORNBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TORNBTC"

    def __str__(self):
        return "TORNBTC"

    def __call__(self):
        return "TORNBTC"


TORNBTC = TORNBTC()
"""
    name: TORNBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TORNBUSD(NamedTuple):
    """
        name: TORNBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TORNBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TORNBUSD"

    def __str__(self):
        return "TORNBUSD"

    def __call__(self):
        return "TORNBUSD"


TORNBUSD = TORNBUSD()
"""
    name: TORNBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TORNUSDT(NamedTuple):
    """
        name: TORNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TORNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TORNUSDT"

    def __str__(self):
        return "TORNUSDT"

    def __call__(self):
        return "TORNUSDT"


TORNUSDT = TORNUSDT()
"""
    name: TORNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRBBNB(NamedTuple):
    """
        name: TRBBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRBBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRBBNB"

    def __str__(self):
        return "TRBBNB"

    def __call__(self):
        return "TRBBNB"


TRBBNB = TRBBNB()
"""
    name: TRBBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRBBTC(NamedTuple):
    """
        name: TRBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRBBTC"

    def __str__(self):
        return "TRBBTC"

    def __call__(self):
        return "TRBBTC"


TRBBTC = TRBBTC()
"""
    name: TRBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRBBUSD(NamedTuple):
    """
        name: TRBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRBBUSD"

    def __str__(self):
        return "TRBBUSD"

    def __call__(self):
        return "TRBBUSD"


TRBBUSD = TRBBUSD()
"""
    name: TRBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRBUSDT(NamedTuple):
    """
        name: TRBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRBUSDT"

    def __str__(self):
        return "TRBUSDT"

    def __call__(self):
        return "TRBUSDT"


TRBUSDT = TRBUSDT()
"""
    name: TRBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRIBEBNB(NamedTuple):
    """
        name: TRIBEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIBEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBEBNB"

    def __str__(self):
        return "TRIBEBNB"

    def __call__(self):
        return "TRIBEBNB"


TRIBEBNB = TRIBEBNB()
"""
    name: TRIBEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIBEBTC(NamedTuple):
    """
        name: TRIBEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIBEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBEBTC"

    def __str__(self):
        return "TRIBEBTC"

    def __call__(self):
        return "TRIBEBTC"


TRIBEBTC = TRIBEBTC()
"""
    name: TRIBEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIBEBUSD(NamedTuple):
    """
        name: TRIBEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIBEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBEBUSD"

    def __str__(self):
        return "TRIBEBUSD"

    def __call__(self):
        return "TRIBEBUSD"


TRIBEBUSD = TRIBEBUSD()
"""
    name: TRIBEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIBEUSDT(NamedTuple):
    """
        name: TRIBEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIBEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBEUSDT"

    def __str__(self):
        return "TRIBEUSDT"

    def __call__(self):
        return "TRIBEUSDT"


TRIBEUSDT = TRIBEUSDT()
"""
    name: TRIBEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIGBNB(NamedTuple):
    """
        name: TRIGBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIGBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIGBNB"

    def __str__(self):
        return "TRIGBNB"

    def __call__(self):
        return "TRIGBNB"


TRIGBNB = TRIGBNB()
"""
    name: TRIGBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIGBTC(NamedTuple):
    """
        name: TRIGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIGBTC"

    def __str__(self):
        return "TRIGBTC"

    def __call__(self):
        return "TRIGBTC"


TRIGBTC = TRIGBTC()
"""
    name: TRIGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRIGETH(NamedTuple):
    """
        name: TRIGETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRIGETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIGETH"

    def __str__(self):
        return "TRIGETH"

    def __call__(self):
        return "TRIGETH"


TRIGETH = TRIGETH()
"""
    name: TRIGETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TROYBNB(NamedTuple):
    """
        name: TROYBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TROYBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TROYBNB"

    def __str__(self):
        return "TROYBNB"

    def __call__(self):
        return "TROYBNB"


TROYBNB = TROYBNB()
"""
    name: TROYBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TROYBTC(NamedTuple):
    """
        name: TROYBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TROYBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TROYBTC"

    def __str__(self):
        return "TROYBTC"

    def __call__(self):
        return "TROYBTC"


TROYBTC = TROYBTC()
"""
    name: TROYBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TROYBUSD(NamedTuple):
    """
        name: TROYBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TROYBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TROYBUSD"

    def __str__(self):
        return "TROYBUSD"

    def __call__(self):
        return "TROYBUSD"


TROYBUSD = TROYBUSD()
"""
    name: TROYBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TROYUSDT(NamedTuple):
    """
        name: TROYUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TROYUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TROYUSDT"

    def __str__(self):
        return "TROYUSDT"

    def __call__(self):
        return "TROYUSDT"


TROYUSDT = TROYUSDT()
"""
    name: TROYUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRUBTC(NamedTuple):
    """
        name: TRUBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRUBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRUBTC"

    def __str__(self):
        return "TRUBTC"

    def __call__(self):
        return "TRUBTC"


TRUBTC = TRUBTC()
"""
    name: TRUBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRUBUSD(NamedTuple):
    """
        name: TRUBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRUBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRUBUSD"

    def __str__(self):
        return "TRUBUSD"

    def __call__(self):
        return "TRUBUSD"


TRUBUSD = TRUBUSD()
"""
    name: TRUBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRURUB(NamedTuple):
    """
        name: TRURUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRURUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRURUB"

    def __str__(self):
        return "TRURUB"

    def __call__(self):
        return "TRURUB"


TRURUB = TRURUB()
"""
    name: TRURUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class TRUUSDT(NamedTuple):
    """
        name: TRUUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRUUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRUUSDT"

    def __str__(self):
        return "TRUUSDT"

    def __call__(self):
        return "TRUUSDT"


TRUUSDT = TRUUSDT()
"""
    name: TRUUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXAUD(NamedTuple):
    """
        name: TRXAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXAUD"

    def __str__(self):
        return "TRXAUD"

    def __call__(self):
        return "TRXAUD"


TRXAUD = TRXAUD()
"""
    name: TRXAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXBNB(NamedTuple):
    """
        name: TRXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXBNB"

    def __str__(self):
        return "TRXBNB"

    def __call__(self):
        return "TRXBNB"


TRXBNB = TRXBNB()
"""
    name: TRXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXBTC(NamedTuple):
    """
        name: TRXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXBTC"

    def __str__(self):
        return "TRXBTC"

    def __call__(self):
        return "TRXBTC"


TRXBTC = TRXBTC()
"""
    name: TRXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXBUSD(NamedTuple):
    """
        name: TRXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXBUSD"

    def __str__(self):
        return "TRXBUSD"

    def __call__(self):
        return "TRXBUSD"


TRXBUSD = TRXBUSD()
"""
    name: TRXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXDOWNUSDT(NamedTuple):
    """
        name: TRXDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXDOWNUSDT"

    def __str__(self):
        return "TRXDOWNUSDT"

    def __call__(self):
        return "TRXDOWNUSDT"


TRXDOWNUSDT = TRXDOWNUSDT()
"""
    name: TRXDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXETH(NamedTuple):
    """
        name: TRXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXETH"

    def __str__(self):
        return "TRXETH"

    def __call__(self):
        return "TRXETH"


TRXETH = TRXETH()
"""
    name: TRXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXEUR(NamedTuple):
    """
        name: TRXEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXEUR"

    def __str__(self):
        return "TRXEUR"

    def __call__(self):
        return "TRXEUR"


TRXEUR = TRXEUR()
"""
    name: TRXEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXNGN(NamedTuple):
    """
        name: TRXNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXNGN"

    def __str__(self):
        return "TRXNGN"

    def __call__(self):
        return "TRXNGN"


TRXNGN = TRXNGN()
"""
    name: TRXNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXPAX(NamedTuple):
    """
        name: TRXPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXPAX"

    def __str__(self):
        return "TRXPAX"

    def __call__(self):
        return "TRXPAX"


TRXPAX = TRXPAX()
"""
    name: TRXPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXTRY(NamedTuple):
    """
        name: TRXTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXTRY"

    def __str__(self):
        return "TRXTRY"

    def __call__(self):
        return "TRXTRY"


TRXTRY = TRXTRY()
"""
    name: TRXTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXTUSD(NamedTuple):
    """
        name: TRXTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXTUSD"

    def __str__(self):
        return "TRXTUSD"

    def __call__(self):
        return "TRXTUSD"


TRXTUSD = TRXTUSD()
"""
    name: TRXTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXUPUSDT(NamedTuple):
    """
        name: TRXUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXUPUSDT"

    def __str__(self):
        return "TRXUPUSDT"

    def __call__(self):
        return "TRXUPUSDT"


TRXUPUSDT = TRXUPUSDT()
"""
    name: TRXUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXUSDC(NamedTuple):
    """
        name: TRXUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXUSDC"

    def __str__(self):
        return "TRXUSDC"

    def __call__(self):
        return "TRXUSDC"


TRXUSDC = TRXUSDC()
"""
    name: TRXUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TRXUSDT(NamedTuple):
    """
        name: TRXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TRXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXUSDT"

    def __str__(self):
        return "TRXUSDT"

    def __call__(self):
        return "TRXUSDT"


TRXUSDT = TRXUSDT()
"""
    name: TRXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TRXXRP(NamedTuple):
    """
        name: TRXXRP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TRXXRP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRXXRP"

    def __str__(self):
        return "TRXXRP"

    def __call__(self):
        return "TRXXRP"


TRXXRP = TRXXRP()
"""
    name: TRXXRP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDBNB(NamedTuple):
    """
        name: TUSDBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDBNB"

    def __str__(self):
        return "TUSDBNB"

    def __call__(self):
        return "TUSDBNB"


TUSDBNB = TUSDBNB()
"""
    name: TUSDBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDBTC(NamedTuple):
    """
        name: TUSDBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDBTC"

    def __str__(self):
        return "TUSDBTC"

    def __call__(self):
        return "TUSDBTC"


TUSDBTC = TUSDBTC()
"""
    name: TUSDBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDBTUSD(NamedTuple):
    """
        name: TUSDBTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDBTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDBTUSD"

    def __str__(self):
        return "TUSDBTUSD"

    def __call__(self):
        return "TUSDBTUSD"


TUSDBTUSD = TUSDBTUSD()
"""
    name: TUSDBTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDBUSD(NamedTuple):
    """
        name: TUSDBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDBUSD"

    def __str__(self):
        return "TUSDBUSD"

    def __call__(self):
        return "TUSDBUSD"


TUSDBUSD = TUSDBUSD()
"""
    name: TUSDBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDETH(NamedTuple):
    """
        name: TUSDETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDETH"

    def __str__(self):
        return "TUSDETH"

    def __call__(self):
        return "TUSDETH"


TUSDETH = TUSDETH()
"""
    name: TUSDETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDT(NamedTuple):
    """
        name: TUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDT"

    def __str__(self):
        return "TUSDT"

    def __call__(self):
        return "TUSDT"


TUSDT = TUSDT()
"""
    name: TUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TUSDUSDT(NamedTuple):
    """
        name: TUSDUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TUSDUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TUSDUSDT"

    def __str__(self):
        return "TUSDUSDT"

    def __call__(self):
        return "TUSDUSDT"


TUSDUSDT = TUSDUSDT()
"""
    name: TUSDUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TVKBTC(NamedTuple):
    """
        name: TVKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TVKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVKBTC"

    def __str__(self):
        return "TVKBTC"

    def __call__(self):
        return "TVKBTC"


TVKBTC = TVKBTC()
"""
    name: TVKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TVKBUSD(NamedTuple):
    """
        name: TVKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TVKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVKBUSD"

    def __str__(self):
        return "TVKBUSD"

    def __call__(self):
        return "TVKBUSD"


TVKBUSD = TVKBUSD()
"""
    name: TVKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TVKUSDT(NamedTuple):
    """
        name: TVKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TVKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVKUSDT"

    def __str__(self):
        return "TVKUSDT"

    def __call__(self):
        return "TVKUSDT"


TVKUSDT = TVKUSDT()
"""
    name: TVKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class TWTBTC(NamedTuple):
    """
        name: TWTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TWTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWTBTC"

    def __str__(self):
        return "TWTBTC"

    def __call__(self):
        return "TWTBTC"


TWTBTC = TWTBTC()
"""
    name: TWTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TWTBUSD(NamedTuple):
    """
        name: TWTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TWTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWTBUSD"

    def __str__(self):
        return "TWTBUSD"

    def __call__(self):
        return "TWTBUSD"


TWTBUSD = TWTBUSD()
"""
    name: TWTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TWTTRY(NamedTuple):
    """
        name: TWTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "TWTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWTTRY"

    def __str__(self):
        return "TWTTRY"

    def __call__(self):
        return "TWTTRY"


TWTTRY = TWTTRY()
"""
    name: TWTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class TWTUSDT(NamedTuple):
    """
        name: TWTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "TWTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWTUSDT"

    def __str__(self):
        return "TWTUSDT"

    def __call__(self):
        return "TWTUSDT"


TWTUSDT = TWTUSDT()
"""
    name: TWTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UFTBUSD(NamedTuple):
    """
        name: UFTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UFTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UFTBUSD"

    def __str__(self):
        return "UFTBUSD"

    def __call__(self):
        return "UFTBUSD"


UFTBUSD = UFTBUSD()
"""
    name: UFTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UFTETH(NamedTuple):
    """
        name: UFTETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UFTETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UFTETH"

    def __str__(self):
        return "UFTETH"

    def __call__(self):
        return "UFTETH"


UFTETH = UFTETH()
"""
    name: UFTETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UFTUSDT(NamedTuple):
    """
        name: UFTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UFTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UFTUSDT"

    def __str__(self):
        return "UFTUSDT"

    def __call__(self):
        return "UFTUSDT"


UFTUSDT = UFTUSDT()
"""
    name: UFTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UMABTC(NamedTuple):
    """
        name: UMABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UMABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMABTC"

    def __str__(self):
        return "UMABTC"

    def __call__(self):
        return "UMABTC"


UMABTC = UMABTC()
"""
    name: UMABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UMABUSD(NamedTuple):
    """
        name: UMABUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UMABUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMABUSD"

    def __str__(self):
        return "UMABUSD"

    def __call__(self):
        return "UMABUSD"


UMABUSD = UMABUSD()
"""
    name: UMABUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UMATRY(NamedTuple):
    """
        name: UMATRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UMATRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMATRY"

    def __str__(self):
        return "UMATRY"

    def __call__(self):
        return "UMATRY"


UMATRY = UMATRY()
"""
    name: UMATRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UMAUSDT(NamedTuple):
    """
        name: UMAUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UMAUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMAUSDT"

    def __str__(self):
        return "UMAUSDT"

    def __call__(self):
        return "UMAUSDT"


UMAUSDT = UMAUSDT()
"""
    name: UMAUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UNFIBNB(NamedTuple):
    """
        name: UNFIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNFIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIBNB"

    def __str__(self):
        return "UNFIBNB"

    def __call__(self):
        return "UNFIBNB"


UNFIBNB = UNFIBNB()
"""
    name: UNFIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNFIBTC(NamedTuple):
    """
        name: UNFIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNFIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIBTC"

    def __str__(self):
        return "UNFIBTC"

    def __call__(self):
        return "UNFIBTC"


UNFIBTC = UNFIBTC()
"""
    name: UNFIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNFIBUSD(NamedTuple):
    """
        name: UNFIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNFIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIBUSD"

    def __str__(self):
        return "UNFIBUSD"

    def __call__(self):
        return "UNFIBUSD"


UNFIBUSD = UNFIBUSD()
"""
    name: UNFIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNFIETH(NamedTuple):
    """
        name: UNFIETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNFIETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIETH"

    def __str__(self):
        return "UNFIETH"

    def __call__(self):
        return "UNFIETH"


UNFIETH = UNFIETH()
"""
    name: UNFIETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNFIUSDT(NamedTuple):
    """
        name: UNFIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UNFIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFIUSDT"

    def __str__(self):
        return "UNFIUSDT"

    def __call__(self):
        return "UNFIUSDT"


UNFIUSDT = UNFIUSDT()
"""
    name: UNFIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UNIAUD(NamedTuple):
    """
        name: UNIAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIAUD"

    def __str__(self):
        return "UNIAUD"

    def __call__(self):
        return "UNIAUD"


UNIAUD = UNIAUD()
"""
    name: UNIAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIBNB(NamedTuple):
    """
        name: UNIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIBNB"

    def __str__(self):
        return "UNIBNB"

    def __call__(self):
        return "UNIBNB"


UNIBNB = UNIBNB()
"""
    name: UNIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIBTC(NamedTuple):
    """
        name: UNIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UNIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIBTC"

    def __str__(self):
        return "UNIBTC"

    def __call__(self):
        return "UNIBTC"


UNIBTC = UNIBTC()
"""
    name: UNIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UNIBUSD(NamedTuple):
    """
        name: UNIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UNIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIBUSD"

    def __str__(self):
        return "UNIBUSD"

    def __call__(self):
        return "UNIBUSD"


UNIBUSD = UNIBUSD()
"""
    name: UNIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UNIDOWNUSDT(NamedTuple):
    """
        name: UNIDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIDOWNUSDT"

    def __str__(self):
        return "UNIDOWNUSDT"

    def __call__(self):
        return "UNIDOWNUSDT"


UNIDOWNUSDT = UNIDOWNUSDT()
"""
    name: UNIDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIETH(NamedTuple):
    """
        name: UNIETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIETH"

    def __str__(self):
        return "UNIETH"

    def __call__(self):
        return "UNIETH"


UNIETH = UNIETH()
"""
    name: UNIETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIEUR(NamedTuple):
    """
        name: UNIEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIEUR"

    def __str__(self):
        return "UNIEUR"

    def __call__(self):
        return "UNIEUR"


UNIEUR = UNIEUR()
"""
    name: UNIEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIUPUSDT(NamedTuple):
    """
        name: UNIUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UNIUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIUPUSDT"

    def __str__(self):
        return "UNIUPUSDT"

    def __call__(self):
        return "UNIUPUSDT"


UNIUPUSDT = UNIUPUSDT()
"""
    name: UNIUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UNIUSDT(NamedTuple):
    """
        name: UNIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UNIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIUSDT"

    def __str__(self):
        return "UNIUSDT"

    def __call__(self):
        return "UNIUSDT"


UNIUSDT = UNIUSDT()
"""
    name: UNIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class USDCBNB(NamedTuple):
    """
        name: USDCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCBNB"

    def __str__(self):
        return "USDCBNB"

    def __call__(self):
        return "USDCBNB"


USDCBNB = USDCBNB()
"""
    name: USDCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDCBUSD(NamedTuple):
    """
        name: USDCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCBUSD"

    def __str__(self):
        return "USDCBUSD"

    def __call__(self):
        return "USDCBUSD"


USDCBUSD = USDCBUSD()
"""
    name: USDCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDCPAX(NamedTuple):
    """
        name: USDCPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDCPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCPAX"

    def __str__(self):
        return "USDCPAX"

    def __call__(self):
        return "USDCPAX"


USDCPAX = USDCPAX()
"""
    name: USDCPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDCTUSD(NamedTuple):
    """
        name: USDCTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDCTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCTUSD"

    def __str__(self):
        return "USDCTUSD"

    def __call__(self):
        return "USDCTUSD"


USDCTUSD = USDCTUSD()
"""
    name: USDCTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDCUSDT(NamedTuple):
    """
        name: USDCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "USDCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDCUSDT"

    def __str__(self):
        return "USDCUSDT"

    def __call__(self):
        return "USDCUSDT"


USDCUSDT = USDCUSDT()
"""
    name: USDCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class USDPBUSD(NamedTuple):
    """
        name: USDPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDPBUSD"

    def __str__(self):
        return "USDPBUSD"

    def __call__(self):
        return "USDPBUSD"


USDPBUSD = USDPBUSD()
"""
    name: USDPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDPUSDT(NamedTuple):
    """
        name: USDPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDPUSDT"

    def __str__(self):
        return "USDPUSDT"

    def __call__(self):
        return "USDPUSDT"


USDPUSDT = USDPUSDT()
"""
    name: USDPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSBUSDS(NamedTuple):
    """
        name: USDSBUSDS
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSBUSDS"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSBUSDS"

    def __str__(self):
        return "USDSBUSDS"

    def __call__(self):
        return "USDSBUSDS"


USDSBUSDS = USDSBUSDS()
"""
    name: USDSBUSDS
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSBUSDT(NamedTuple):
    """
        name: USDSBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSBUSDT"

    def __str__(self):
        return "USDSBUSDT"

    def __call__(self):
        return "USDSBUSDT"


USDSBUSDT = USDSBUSDT()
"""
    name: USDSBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSPAX(NamedTuple):
    """
        name: USDSPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSPAX"

    def __str__(self):
        return "USDSPAX"

    def __call__(self):
        return "USDSPAX"


USDSPAX = USDSPAX()
"""
    name: USDSPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSTUSD(NamedTuple):
    """
        name: USDSTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSTUSD"

    def __str__(self):
        return "USDSTUSD"

    def __call__(self):
        return "USDSTUSD"


USDSTUSD = USDSTUSD()
"""
    name: USDSTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSUSDC(NamedTuple):
    """
        name: USDSUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSUSDC"

    def __str__(self):
        return "USDSUSDC"

    def __call__(self):
        return "USDSUSDC"


USDSUSDC = USDSUSDC()
"""
    name: USDSUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDSUSDT(NamedTuple):
    """
        name: USDSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDSUSDT"

    def __str__(self):
        return "USDSUSDT"

    def __call__(self):
        return "USDSUSDT"


USDSUSDT = USDSUSDT()
"""
    name: USDSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTBIDR(NamedTuple):
    """
        name: USDTBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "USDTBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTBIDR"

    def __str__(self):
        return "USDTBIDR"

    def __call__(self):
        return "USDTBIDR"


USDTBIDR = USDTBIDR()
"""
    name: USDTBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class USDTBKRW(NamedTuple):
    """
        name: USDTBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTBKRW"

    def __str__(self):
        return "USDTBKRW"

    def __call__(self):
        return "USDTBKRW"


USDTBKRW = USDTBKRW()
"""
    name: USDTBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTBRL(NamedTuple):
    """
        name: USDTBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTBRL"

    def __str__(self):
        return "USDTBRL"

    def __call__(self):
        return "USDTBRL"


USDTBRL = USDTBRL()
"""
    name: USDTBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTBVND(NamedTuple):
    """
        name: USDTBVND
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 30000.00
        max_order_size: 9000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "USDTBVND"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 30000.00
    max_order_size: float = 9000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTBVND"

    def __str__(self):
        return "USDTBVND"

    def __call__(self):
        return "USDTBVND"


USDTBVND = USDTBVND()
"""
    name: USDTBVND
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 30000.00
    max_order_size: 9000000.00
    has_margin: False
    exchange: binance
"""


class USDTDAI(NamedTuple):
    """
        name: USDTDAI
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTDAI"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTDAI"

    def __str__(self):
        return "USDTDAI"

    def __call__(self):
        return "USDTDAI"


USDTDAI = USDTDAI()
"""
    name: USDTDAI
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTIDRT(NamedTuple):
    """
        name: USDTIDRT
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "USDTIDRT"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTIDRT"

    def __str__(self):
        return "USDTIDRT"

    def __call__(self):
        return "USDTIDRT"


USDTIDRT = USDTIDRT()
"""
    name: USDTIDRT
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class USDTNGN(NamedTuple):
    """
        name: USDTNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTNGN"

    def __str__(self):
        return "USDTNGN"

    def __call__(self):
        return "USDTNGN"


USDTNGN = USDTNGN()
"""
    name: USDTNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTPLN(NamedTuple):
    """
        name: USDTPLN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 50.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTPLN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 50.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTPLN"

    def __str__(self):
        return "USDTPLN"

    def __call__(self):
        return "USDTPLN"


USDTPLN = USDTPLN()
"""
    name: USDTPLN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 50.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTRON(NamedTuple):
    """
        name: USDTRON
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 40.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTRON"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 40.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTRON"

    def __str__(self):
        return "USDTRON"

    def __call__(self):
        return "USDTRON"


USDTRON = USDTRON()
"""
    name: USDTRON
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 40.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTRUB(NamedTuple):
    """
        name: USDTRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTRUB"

    def __str__(self):
        return "USDTRUB"

    def __call__(self):
        return "USDTRUB"


USDTRUB = USDTRUB()
"""
    name: USDTRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTTRY(NamedTuple):
    """
        name: USDTTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTTRY"

    def __str__(self):
        return "USDTTRY"

    def __call__(self):
        return "USDTTRY"


USDTTRY = USDTTRY()
"""
    name: USDTTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTUAH(NamedTuple):
    """
        name: USDTUAH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTUAH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTUAH"

    def __str__(self):
        return "USDTUAH"

    def __call__(self):
        return "USDTUAH"


USDTUAH = USDTUAH()
"""
    name: USDTUAH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class USDTZAR(NamedTuple):
    """
        name: USDTZAR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USDTZAR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDTZAR"

    def __str__(self):
        return "USDTZAR"

    def __call__(self):
        return "USDTZAR"


USDTZAR = USDTZAR()
"""
    name: USDTZAR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USTBTC(NamedTuple):
    """
        name: USTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTBTC"

    def __str__(self):
        return "USTBTC"

    def __call__(self):
        return "USTBTC"


USTBTC = USTBTC()
"""
    name: USTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USTBUSD(NamedTuple):
    """
        name: USTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTBUSD"

    def __str__(self):
        return "USTBUSD"

    def __call__(self):
        return "USTBUSD"


USTBUSD = USTBUSD()
"""
    name: USTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class USTCBUSD(NamedTuple):
    """
        name: USTCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "USTCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTCBUSD"

    def __str__(self):
        return "USTCBUSD"

    def __call__(self):
        return "USTCBUSD"


USTCBUSD = USTCBUSD()
"""
    name: USTCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class USTCUSDT(NamedTuple):
    """
        name: USTCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "USTCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTCUSDT"

    def __str__(self):
        return "USTCUSDT"

    def __call__(self):
        return "USTCUSDT"


USTCUSDT = USTCUSDT()
"""
    name: USTCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class USTUSDT(NamedTuple):
    """
        name: USTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "USTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTUSDT"

    def __str__(self):
        return "USTUSDT"

    def __call__(self):
        return "USTUSDT"


USTUSDT = USTUSDT()
"""
    name: USTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UTKBTC(NamedTuple):
    """
        name: UTKBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UTKBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTKBTC"

    def __str__(self):
        return "UTKBTC"

    def __call__(self):
        return "UTKBTC"


UTKBTC = UTKBTC()
"""
    name: UTKBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class UTKBUSD(NamedTuple):
    """
        name: UTKBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "UTKBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTKBUSD"

    def __str__(self):
        return "UTKBUSD"

    def __call__(self):
        return "UTKBUSD"


UTKBUSD = UTKBUSD()
"""
    name: UTKBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class UTKUSDT(NamedTuple):
    """
        name: UTKUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "UTKUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTKUSDT"

    def __str__(self):
        return "UTKUSDT"

    def __call__(self):
        return "UTKUSDT"


UTKUSDT = UTKUSDT()
"""
    name: UTKUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VENBNB(NamedTuple):
    """
        name: VENBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VENBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VENBNB"

    def __str__(self):
        return "VENBNB"

    def __call__(self):
        return "VENBNB"


VENBNB = VENBNB()
"""
    name: VENBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VENBTC(NamedTuple):
    """
        name: VENBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VENBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VENBTC"

    def __str__(self):
        return "VENBTC"

    def __call__(self):
        return "VENBTC"


VENBTC = VENBTC()
"""
    name: VENBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VENETH(NamedTuple):
    """
        name: VENETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VENETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VENETH"

    def __str__(self):
        return "VENETH"

    def __call__(self):
        return "VENETH"


VENETH = VENETH()
"""
    name: VENETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VENUSDT(NamedTuple):
    """
        name: VENUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VENUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VENUSDT"

    def __str__(self):
        return "VENUSDT"

    def __call__(self):
        return "VENUSDT"


VENUSDT = VENUSDT()
"""
    name: VENUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETBNB(NamedTuple):
    """
        name: VETBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETBNB"

    def __str__(self):
        return "VETBNB"

    def __call__(self):
        return "VETBNB"


VETBNB = VETBNB()
"""
    name: VETBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETBTC(NamedTuple):
    """
        name: VETBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VETBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETBTC"

    def __str__(self):
        return "VETBTC"

    def __call__(self):
        return "VETBTC"


VETBTC = VETBTC()
"""
    name: VETBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VETBUSD(NamedTuple):
    """
        name: VETBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VETBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETBUSD"

    def __str__(self):
        return "VETBUSD"

    def __call__(self):
        return "VETBUSD"


VETBUSD = VETBUSD()
"""
    name: VETBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VETETH(NamedTuple):
    """
        name: VETETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETETH"

    def __str__(self):
        return "VETETH"

    def __call__(self):
        return "VETETH"


VETETH = VETETH()
"""
    name: VETETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETEUR(NamedTuple):
    """
        name: VETEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETEUR"

    def __str__(self):
        return "VETEUR"

    def __call__(self):
        return "VETEUR"


VETEUR = VETEUR()
"""
    name: VETEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETGBP(NamedTuple):
    """
        name: VETGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETGBP"

    def __str__(self):
        return "VETGBP"

    def __call__(self):
        return "VETGBP"


VETGBP = VETGBP()
"""
    name: VETGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETTRY(NamedTuple):
    """
        name: VETTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VETTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETTRY"

    def __str__(self):
        return "VETTRY"

    def __call__(self):
        return "VETTRY"


VETTRY = VETTRY()
"""
    name: VETTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VETUSDT(NamedTuple):
    """
        name: VETUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VETUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VETUSDT"

    def __str__(self):
        return "VETUSDT"

    def __call__(self):
        return "VETUSDT"


VETUSDT = VETUSDT()
"""
    name: VETUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VGXBTC(NamedTuple):
    """
        name: VGXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VGXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VGXBTC"

    def __str__(self):
        return "VGXBTC"

    def __call__(self):
        return "VGXBTC"


VGXBTC = VGXBTC()
"""
    name: VGXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VGXETH(NamedTuple):
    """
        name: VGXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VGXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VGXETH"

    def __str__(self):
        return "VGXETH"

    def __call__(self):
        return "VGXETH"


VGXETH = VGXETH()
"""
    name: VGXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VGXUSDT(NamedTuple):
    """
        name: VGXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VGXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VGXUSDT"

    def __str__(self):
        return "VGXUSDT"

    def __call__(self):
        return "VGXUSDT"


VGXUSDT = VGXUSDT()
"""
    name: VGXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIABNB(NamedTuple):
    """
        name: VIABNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIABNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIABNB"

    def __str__(self):
        return "VIABNB"

    def __call__(self):
        return "VIABNB"


VIABNB = VIABNB()
"""
    name: VIABNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIABTC(NamedTuple):
    """
        name: VIABTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIABTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIABTC"

    def __str__(self):
        return "VIABTC"

    def __call__(self):
        return "VIABTC"


VIABTC = VIABTC()
"""
    name: VIABTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIAETH(NamedTuple):
    """
        name: VIAETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIAETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIAETH"

    def __str__(self):
        return "VIAETH"

    def __call__(self):
        return "VIAETH"


VIAETH = VIAETH()
"""
    name: VIAETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBBTC(NamedTuple):
    """
        name: VIBBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIBBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBBTC"

    def __str__(self):
        return "VIBBTC"

    def __call__(self):
        return "VIBBTC"


VIBBTC = VIBBTC()
"""
    name: VIBBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBBUSD(NamedTuple):
    """
        name: VIBBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VIBBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBBUSD"

    def __str__(self):
        return "VIBBUSD"

    def __call__(self):
        return "VIBBUSD"


VIBBUSD = VIBBUSD()
"""
    name: VIBBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VIBEBTC(NamedTuple):
    """
        name: VIBEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIBEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBEBTC"

    def __str__(self):
        return "VIBEBTC"

    def __call__(self):
        return "VIBEBTC"


VIBEBTC = VIBEBTC()
"""
    name: VIBEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBEETH(NamedTuple):
    """
        name: VIBEETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIBEETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBEETH"

    def __str__(self):
        return "VIBEETH"

    def __call__(self):
        return "VIBEETH"


VIBEETH = VIBEETH()
"""
    name: VIBEETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBETH(NamedTuple):
    """
        name: VIBETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIBETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBETH"

    def __str__(self):
        return "VIBETH"

    def __call__(self):
        return "VIBETH"


VIBETH = VIBETH()
"""
    name: VIBETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIBUSDT(NamedTuple):
    """
        name: VIBUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "VIBUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIBUSDT"

    def __str__(self):
        return "VIBUSDT"

    def __call__(self):
        return "VIBUSDT"


VIBUSDT = VIBUSDT()
"""
    name: VIBUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class VIDTBTC(NamedTuple):
    """
        name: VIDTBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIDTBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIDTBTC"

    def __str__(self):
        return "VIDTBTC"

    def __call__(self):
        return "VIDTBTC"


VIDTBTC = VIDTBTC()
"""
    name: VIDTBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIDTBUSD(NamedTuple):
    """
        name: VIDTBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIDTBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIDTBUSD"

    def __str__(self):
        return "VIDTBUSD"

    def __call__(self):
        return "VIDTBUSD"


VIDTBUSD = VIDTBUSD()
"""
    name: VIDTBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VIDTUSDT(NamedTuple):
    """
        name: VIDTUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VIDTUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIDTUSDT"

    def __str__(self):
        return "VIDTUSDT"

    def __call__(self):
        return "VIDTUSDT"


VIDTUSDT = VIDTUSDT()
"""
    name: VIDTUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VITEBNB(NamedTuple):
    """
        name: VITEBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VITEBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VITEBNB"

    def __str__(self):
        return "VITEBNB"

    def __call__(self):
        return "VITEBNB"


VITEBNB = VITEBNB()
"""
    name: VITEBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VITEBTC(NamedTuple):
    """
        name: VITEBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VITEBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VITEBTC"

    def __str__(self):
        return "VITEBTC"

    def __call__(self):
        return "VITEBTC"


VITEBTC = VITEBTC()
"""
    name: VITEBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VITEBUSD(NamedTuple):
    """
        name: VITEBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VITEBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VITEBUSD"

    def __str__(self):
        return "VITEBUSD"

    def __call__(self):
        return "VITEBUSD"


VITEBUSD = VITEBUSD()
"""
    name: VITEBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VITEUSDT(NamedTuple):
    """
        name: VITEUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VITEUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VITEUSDT"

    def __str__(self):
        return "VITEUSDT"

    def __call__(self):
        return "VITEUSDT"


VITEUSDT = VITEUSDT()
"""
    name: VITEUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELBNB(NamedTuple):
    """
        name: VOXELBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELBNB"

    def __str__(self):
        return "VOXELBNB"

    def __call__(self):
        return "VOXELBNB"


VOXELBNB = VOXELBNB()
"""
    name: VOXELBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELBTC(NamedTuple):
    """
        name: VOXELBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELBTC"

    def __str__(self):
        return "VOXELBTC"

    def __call__(self):
        return "VOXELBTC"


VOXELBTC = VOXELBTC()
"""
    name: VOXELBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELBUSD(NamedTuple):
    """
        name: VOXELBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELBUSD"

    def __str__(self):
        return "VOXELBUSD"

    def __call__(self):
        return "VOXELBUSD"


VOXELBUSD = VOXELBUSD()
"""
    name: VOXELBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELETH(NamedTuple):
    """
        name: VOXELETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELETH"

    def __str__(self):
        return "VOXELETH"

    def __call__(self):
        return "VOXELETH"


VOXELETH = VOXELETH()
"""
    name: VOXELETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VOXELUSDT(NamedTuple):
    """
        name: VOXELUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VOXELUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXELUSDT"

    def __str__(self):
        return "VOXELUSDT"

    def __call__(self):
        return "VOXELUSDT"


VOXELUSDT = VOXELUSDT()
"""
    name: VOXELUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VTHOBNB(NamedTuple):
    """
        name: VTHOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VTHOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VTHOBNB"

    def __str__(self):
        return "VTHOBNB"

    def __call__(self):
        return "VTHOBNB"


VTHOBNB = VTHOBNB()
"""
    name: VTHOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VTHOBUSD(NamedTuple):
    """
        name: VTHOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VTHOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VTHOBUSD"

    def __str__(self):
        return "VTHOBUSD"

    def __call__(self):
        return "VTHOBUSD"


VTHOBUSD = VTHOBUSD()
"""
    name: VTHOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class VTHOUSDT(NamedTuple):
    """
        name: VTHOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "VTHOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VTHOUSDT"

    def __str__(self):
        return "VTHOUSDT"

    def __call__(self):
        return "VTHOUSDT"


VTHOUSDT = VTHOUSDT()
"""
    name: VTHOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WABIBNB(NamedTuple):
    """
        name: WABIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WABIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WABIBNB"

    def __str__(self):
        return "WABIBNB"

    def __call__(self):
        return "WABIBNB"


WABIBNB = WABIBNB()
"""
    name: WABIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WABIBTC(NamedTuple):
    """
        name: WABIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WABIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WABIBTC"

    def __str__(self):
        return "WABIBTC"

    def __call__(self):
        return "WABIBTC"


WABIBTC = WABIBTC()
"""
    name: WABIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WABIETH(NamedTuple):
    """
        name: WABIETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WABIETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WABIETH"

    def __str__(self):
        return "WABIETH"

    def __call__(self):
        return "WABIETH"


WABIETH = WABIETH()
"""
    name: WABIETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WANBNB(NamedTuple):
    """
        name: WANBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WANBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WANBNB"

    def __str__(self):
        return "WANBNB"

    def __call__(self):
        return "WANBNB"


WANBNB = WANBNB()
"""
    name: WANBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WANBTC(NamedTuple):
    """
        name: WANBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WANBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WANBTC"

    def __str__(self):
        return "WANBTC"

    def __call__(self):
        return "WANBTC"


WANBTC = WANBTC()
"""
    name: WANBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WANETH(NamedTuple):
    """
        name: WANETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WANETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WANETH"

    def __str__(self):
        return "WANETH"

    def __call__(self):
        return "WANETH"


WANETH = WANETH()
"""
    name: WANETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WANUSDT(NamedTuple):
    """
        name: WANUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WANUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WANUSDT"

    def __str__(self):
        return "WANUSDT"

    def __call__(self):
        return "WANUSDT"


WANUSDT = WANUSDT()
"""
    name: WANUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESBNB(NamedTuple):
    """
        name: WAVESBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESBNB"

    def __str__(self):
        return "WAVESBNB"

    def __call__(self):
        return "WAVESBNB"


WAVESBNB = WAVESBNB()
"""
    name: WAVESBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESBTC(NamedTuple):
    """
        name: WAVESBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAVESBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESBTC"

    def __str__(self):
        return "WAVESBTC"

    def __call__(self):
        return "WAVESBTC"


WAVESBTC = WAVESBTC()
"""
    name: WAVESBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WAVESBUSD(NamedTuple):
    """
        name: WAVESBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESBUSD"

    def __str__(self):
        return "WAVESBUSD"

    def __call__(self):
        return "WAVESBUSD"


WAVESBUSD = WAVESBUSD()
"""
    name: WAVESBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESETH(NamedTuple):
    """
        name: WAVESETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESETH"

    def __str__(self):
        return "WAVESETH"

    def __call__(self):
        return "WAVESETH"


WAVESETH = WAVESETH()
"""
    name: WAVESETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESEUR(NamedTuple):
    """
        name: WAVESEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESEUR"

    def __str__(self):
        return "WAVESEUR"

    def __call__(self):
        return "WAVESEUR"


WAVESEUR = WAVESEUR()
"""
    name: WAVESEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESPAX(NamedTuple):
    """
        name: WAVESPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESPAX"

    def __str__(self):
        return "WAVESPAX"

    def __call__(self):
        return "WAVESPAX"


WAVESPAX = WAVESPAX()
"""
    name: WAVESPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESRUB(NamedTuple):
    """
        name: WAVESRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESRUB"

    def __str__(self):
        return "WAVESRUB"

    def __call__(self):
        return "WAVESRUB"


WAVESRUB = WAVESRUB()
"""
    name: WAVESRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESTRY(NamedTuple):
    """
        name: WAVESTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESTRY"

    def __str__(self):
        return "WAVESTRY"

    def __call__(self):
        return "WAVESTRY"


WAVESTRY = WAVESTRY()
"""
    name: WAVESTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESTUSD(NamedTuple):
    """
        name: WAVESTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESTUSD"

    def __str__(self):
        return "WAVESTUSD"

    def __call__(self):
        return "WAVESTUSD"


WAVESTUSD = WAVESTUSD()
"""
    name: WAVESTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESUSDC(NamedTuple):
    """
        name: WAVESUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAVESUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESUSDC"

    def __str__(self):
        return "WAVESUSDC"

    def __call__(self):
        return "WAVESUSDC"


WAVESUSDC = WAVESUSDC()
"""
    name: WAVESUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAVESUSDT(NamedTuple):
    """
        name: WAVESUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAVESUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVESUSDT"

    def __str__(self):
        return "WAVESUSDT"

    def __call__(self):
        return "WAVESUSDT"


WAVESUSDT = WAVESUSDT()
"""
    name: WAVESUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WAXPBNB(NamedTuple):
    """
        name: WAXPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WAXPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXPBNB"

    def __str__(self):
        return "WAXPBNB"

    def __call__(self):
        return "WAXPBNB"


WAXPBNB = WAXPBNB()
"""
    name: WAXPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WAXPBTC(NamedTuple):
    """
        name: WAXPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAXPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXPBTC"

    def __str__(self):
        return "WAXPBTC"

    def __call__(self):
        return "WAXPBTC"


WAXPBTC = WAXPBTC()
"""
    name: WAXPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WAXPBUSD(NamedTuple):
    """
        name: WAXPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAXPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXPBUSD"

    def __str__(self):
        return "WAXPBUSD"

    def __call__(self):
        return "WAXPBUSD"


WAXPBUSD = WAXPBUSD()
"""
    name: WAXPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WAXPUSDT(NamedTuple):
    """
        name: WAXPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WAXPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXPUSDT"

    def __str__(self):
        return "WAXPUSDT"

    def __call__(self):
        return "WAXPUSDT"


WAXPUSDT = WAXPUSDT()
"""
    name: WAXPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WBTCBTC(NamedTuple):
    """
        name: WBTCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WBTCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTCBTC"

    def __str__(self):
        return "WBTCBTC"

    def __call__(self):
        return "WBTCBTC"


WBTCBTC = WBTCBTC()
"""
    name: WBTCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WBTCBUSD(NamedTuple):
    """
        name: WBTCBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WBTCBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTCBUSD"

    def __str__(self):
        return "WBTCBUSD"

    def __call__(self):
        return "WBTCBUSD"


WBTCBUSD = WBTCBUSD()
"""
    name: WBTCBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WBTCETH(NamedTuple):
    """
        name: WBTCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WBTCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTCETH"

    def __str__(self):
        return "WBTCETH"

    def __call__(self):
        return "WBTCETH"


WBTCETH = WBTCETH()
"""
    name: WBTCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINBNB(NamedTuple):
    """
        name: WINBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINBNB"

    def __str__(self):
        return "WINBNB"

    def __call__(self):
        return "WINBNB"


WINBNB = WINBNB()
"""
    name: WINBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINBRL(NamedTuple):
    """
        name: WINBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINBRL"

    def __str__(self):
        return "WINBRL"

    def __call__(self):
        return "WINBRL"


WINBRL = WINBRL()
"""
    name: WINBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINBTC(NamedTuple):
    """
        name: WINBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINBTC"

    def __str__(self):
        return "WINBTC"

    def __call__(self):
        return "WINBTC"


WINBTC = WINBTC()
"""
    name: WINBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINBUSD(NamedTuple):
    """
        name: WINBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINBUSD"

    def __str__(self):
        return "WINBUSD"

    def __call__(self):
        return "WINBUSD"


WINBUSD = WINBUSD()
"""
    name: WINBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINEUR(NamedTuple):
    """
        name: WINEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINEUR"

    def __str__(self):
        return "WINEUR"

    def __call__(self):
        return "WINEUR"


WINEUR = WINEUR()
"""
    name: WINEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGBNB(NamedTuple):
    """
        name: WINGBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGBNB"

    def __str__(self):
        return "WINGBNB"

    def __call__(self):
        return "WINGBNB"


WINGBNB = WINGBNB()
"""
    name: WINGBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGBTC(NamedTuple):
    """
        name: WINGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGBTC"

    def __str__(self):
        return "WINGBTC"

    def __call__(self):
        return "WINGBTC"


WINGBTC = WINGBTC()
"""
    name: WINGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGBUSD(NamedTuple):
    """
        name: WINGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WINGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGBUSD"

    def __str__(self):
        return "WINGBUSD"

    def __call__(self):
        return "WINGBUSD"


WINGBUSD = WINGBUSD()
"""
    name: WINGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WINGETH(NamedTuple):
    """
        name: WINGETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGETH"

    def __str__(self):
        return "WINGETH"

    def __call__(self):
        return "WINGETH"


WINGETH = WINGETH()
"""
    name: WINGETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGSBTC(NamedTuple):
    """
        name: WINGSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGSBTC"

    def __str__(self):
        return "WINGSBTC"

    def __call__(self):
        return "WINGSBTC"


WINGSBTC = WINGSBTC()
"""
    name: WINGSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGSETH(NamedTuple):
    """
        name: WINGSETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINGSETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGSETH"

    def __str__(self):
        return "WINGSETH"

    def __call__(self):
        return "WINGSETH"


WINGSETH = WINGSETH()
"""
    name: WINGSETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINGUSDT(NamedTuple):
    """
        name: WINGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WINGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINGUSDT"

    def __str__(self):
        return "WINGUSDT"

    def __call__(self):
        return "WINGUSDT"


WINGUSDT = WINGUSDT()
"""
    name: WINGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WINTRX(NamedTuple):
    """
        name: WINTRX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINTRX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINTRX"

    def __str__(self):
        return "WINTRX"

    def __call__(self):
        return "WINTRX"


WINTRX = WINTRX()
"""
    name: WINTRX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINUSDC(NamedTuple):
    """
        name: WINUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINUSDC"

    def __str__(self):
        return "WINUSDC"

    def __call__(self):
        return "WINUSDC"


WINUSDC = WINUSDC()
"""
    name: WINUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WINUSDT(NamedTuple):
    """
        name: WINUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WINUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WINUSDT"

    def __str__(self):
        return "WINUSDT"

    def __call__(self):
        return "WINUSDT"


WINUSDT = WINUSDT()
"""
    name: WINUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WNXMBNB(NamedTuple):
    """
        name: WNXMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WNXMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WNXMBNB"

    def __str__(self):
        return "WNXMBNB"

    def __call__(self):
        return "WNXMBNB"


WNXMBNB = WNXMBNB()
"""
    name: WNXMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WNXMBTC(NamedTuple):
    """
        name: WNXMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WNXMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WNXMBTC"

    def __str__(self):
        return "WNXMBTC"

    def __call__(self):
        return "WNXMBTC"


WNXMBTC = WNXMBTC()
"""
    name: WNXMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WNXMBUSD(NamedTuple):
    """
        name: WNXMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WNXMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WNXMBUSD"

    def __str__(self):
        return "WNXMBUSD"

    def __call__(self):
        return "WNXMBUSD"


WNXMBUSD = WNXMBUSD()
"""
    name: WNXMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WNXMUSDT(NamedTuple):
    """
        name: WNXMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WNXMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WNXMUSDT"

    def __str__(self):
        return "WNXMUSDT"

    def __call__(self):
        return "WNXMUSDT"


WNXMUSDT = WNXMUSDT()
"""
    name: WNXMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WOOBNB(NamedTuple):
    """
        name: WOOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WOOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOBNB"

    def __str__(self):
        return "WOOBNB"

    def __call__(self):
        return "WOOBNB"


WOOBNB = WOOBNB()
"""
    name: WOOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WOOBTC(NamedTuple):
    """
        name: WOOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WOOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOBTC"

    def __str__(self):
        return "WOOBTC"

    def __call__(self):
        return "WOOBTC"


WOOBTC = WOOBTC()
"""
    name: WOOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WOOBUSD(NamedTuple):
    """
        name: WOOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WOOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOBUSD"

    def __str__(self):
        return "WOOBUSD"

    def __call__(self):
        return "WOOBUSD"


WOOBUSD = WOOBUSD()
"""
    name: WOOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WOOUSDT(NamedTuple):
    """
        name: WOOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "WOOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOUSDT"

    def __str__(self):
        return "WOOUSDT"

    def __call__(self):
        return "WOOUSDT"


WOOUSDT = WOOUSDT()
"""
    name: WOOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class WPRBTC(NamedTuple):
    """
        name: WPRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WPRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WPRBTC"

    def __str__(self):
        return "WPRBTC"

    def __call__(self):
        return "WPRBTC"


WPRBTC = WPRBTC()
"""
    name: WPRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WPRETH(NamedTuple):
    """
        name: WPRETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WPRETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WPRETH"

    def __str__(self):
        return "WPRETH"

    def __call__(self):
        return "WPRETH"


WPRETH = WPRETH()
"""
    name: WPRETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXBNB(NamedTuple):
    """
        name: WRXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXBNB"

    def __str__(self):
        return "WRXBNB"

    def __call__(self):
        return "WRXBNB"


WRXBNB = WRXBNB()
"""
    name: WRXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXBTC(NamedTuple):
    """
        name: WRXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXBTC"

    def __str__(self):
        return "WRXBTC"

    def __call__(self):
        return "WRXBTC"


WRXBTC = WRXBTC()
"""
    name: WRXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXBUSD(NamedTuple):
    """
        name: WRXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXBUSD"

    def __str__(self):
        return "WRXBUSD"

    def __call__(self):
        return "WRXBUSD"


WRXBUSD = WRXBUSD()
"""
    name: WRXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXEUR(NamedTuple):
    """
        name: WRXEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXEUR"

    def __str__(self):
        return "WRXEUR"

    def __call__(self):
        return "WRXEUR"


WRXEUR = WRXEUR()
"""
    name: WRXEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WRXUSDT(NamedTuple):
    """
        name: WRXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WRXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRXUSDT"

    def __str__(self):
        return "WRXUSDT"

    def __call__(self):
        return "WRXUSDT"


WRXUSDT = WRXUSDT()
"""
    name: WRXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WTCBNB(NamedTuple):
    """
        name: WTCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WTCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WTCBNB"

    def __str__(self):
        return "WTCBNB"

    def __call__(self):
        return "WTCBNB"


WTCBNB = WTCBNB()
"""
    name: WTCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WTCBTC(NamedTuple):
    """
        name: WTCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WTCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WTCBTC"

    def __str__(self):
        return "WTCBTC"

    def __call__(self):
        return "WTCBTC"


WTCBTC = WTCBTC()
"""
    name: WTCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WTCETH(NamedTuple):
    """
        name: WTCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WTCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WTCETH"

    def __str__(self):
        return "WTCETH"

    def __call__(self):
        return "WTCETH"


WTCETH = WTCETH()
"""
    name: WTCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class WTCUSDT(NamedTuple):
    """
        name: WTCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "WTCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WTCUSDT"

    def __str__(self):
        return "WTCUSDT"

    def __call__(self):
        return "WTCUSDT"


WTCUSDT = WTCUSDT()
"""
    name: WTCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XECBUSD(NamedTuple):
    """
        name: XECBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XECBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XECBUSD"

    def __str__(self):
        return "XECBUSD"

    def __call__(self):
        return "XECBUSD"


XECBUSD = XECBUSD()
"""
    name: XECBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XECUSDT(NamedTuple):
    """
        name: XECUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XECUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XECUSDT"

    def __str__(self):
        return "XECUSDT"

    def __call__(self):
        return "XECUSDT"


XECUSDT = XECUSDT()
"""
    name: XECUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMBNB(NamedTuple):
    """
        name: XEMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMBNB"

    def __str__(self):
        return "XEMBNB"

    def __call__(self):
        return "XEMBNB"


XEMBNB = XEMBNB()
"""
    name: XEMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMBTC(NamedTuple):
    """
        name: XEMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMBTC"

    def __str__(self):
        return "XEMBTC"

    def __call__(self):
        return "XEMBTC"


XEMBTC = XEMBTC()
"""
    name: XEMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMBUSD(NamedTuple):
    """
        name: XEMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMBUSD"

    def __str__(self):
        return "XEMBUSD"

    def __call__(self):
        return "XEMBUSD"


XEMBUSD = XEMBUSD()
"""
    name: XEMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMETH(NamedTuple):
    """
        name: XEMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMETH"

    def __str__(self):
        return "XEMETH"

    def __call__(self):
        return "XEMETH"


XEMETH = XEMETH()
"""
    name: XEMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XEMUSDT(NamedTuple):
    """
        name: XEMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XEMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEMUSDT"

    def __str__(self):
        return "XEMUSDT"

    def __call__(self):
        return "XEMUSDT"


XEMUSDT = XEMUSDT()
"""
    name: XEMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMBNB(NamedTuple):
    """
        name: XLMBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMBNB"

    def __str__(self):
        return "XLMBNB"

    def __call__(self):
        return "XLMBNB"


XLMBNB = XLMBNB()
"""
    name: XLMBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMBTC(NamedTuple):
    """
        name: XLMBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XLMBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMBTC"

    def __str__(self):
        return "XLMBTC"

    def __call__(self):
        return "XLMBTC"


XLMBTC = XLMBTC()
"""
    name: XLMBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XLMBUSD(NamedTuple):
    """
        name: XLMBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XLMBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMBUSD"

    def __str__(self):
        return "XLMBUSD"

    def __call__(self):
        return "XLMBUSD"


XLMBUSD = XLMBUSD()
"""
    name: XLMBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XLMDOWNUSDT(NamedTuple):
    """
        name: XLMDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMDOWNUSDT"

    def __str__(self):
        return "XLMDOWNUSDT"

    def __call__(self):
        return "XLMDOWNUSDT"


XLMDOWNUSDT = XLMDOWNUSDT()
"""
    name: XLMDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMETH(NamedTuple):
    """
        name: XLMETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMETH"

    def __str__(self):
        return "XLMETH"

    def __call__(self):
        return "XLMETH"


XLMETH = XLMETH()
"""
    name: XLMETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMEUR(NamedTuple):
    """
        name: XLMEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMEUR"

    def __str__(self):
        return "XLMEUR"

    def __call__(self):
        return "XLMEUR"


XLMEUR = XLMEUR()
"""
    name: XLMEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMPAX(NamedTuple):
    """
        name: XLMPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMPAX"

    def __str__(self):
        return "XLMPAX"

    def __call__(self):
        return "XLMPAX"


XLMPAX = XLMPAX()
"""
    name: XLMPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMTRY(NamedTuple):
    """
        name: XLMTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMTRY"

    def __str__(self):
        return "XLMTRY"

    def __call__(self):
        return "XLMTRY"


XLMTRY = XLMTRY()
"""
    name: XLMTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMTUSD(NamedTuple):
    """
        name: XLMTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMTUSD"

    def __str__(self):
        return "XLMTUSD"

    def __call__(self):
        return "XLMTUSD"


XLMTUSD = XLMTUSD()
"""
    name: XLMTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMUPUSDT(NamedTuple):
    """
        name: XLMUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMUPUSDT"

    def __str__(self):
        return "XLMUPUSDT"

    def __call__(self):
        return "XLMUPUSDT"


XLMUPUSDT = XLMUPUSDT()
"""
    name: XLMUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMUSDC(NamedTuple):
    """
        name: XLMUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XLMUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMUSDC"

    def __str__(self):
        return "XLMUSDC"

    def __call__(self):
        return "XLMUSDC"


XLMUSDC = XLMUSDC()
"""
    name: XLMUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XLMUSDT(NamedTuple):
    """
        name: XLMUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XLMUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLMUSDT"

    def __str__(self):
        return "XLMUSDT"

    def __call__(self):
        return "XLMUSDT"


XLMUSDT = XLMUSDT()
"""
    name: XLMUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XMRBNB(NamedTuple):
    """
        name: XMRBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XMRBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRBNB"

    def __str__(self):
        return "XMRBNB"

    def __call__(self):
        return "XMRBNB"


XMRBNB = XMRBNB()
"""
    name: XMRBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XMRBTC(NamedTuple):
    """
        name: XMRBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XMRBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRBTC"

    def __str__(self):
        return "XMRBTC"

    def __call__(self):
        return "XMRBTC"


XMRBTC = XMRBTC()
"""
    name: XMRBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XMRBUSD(NamedTuple):
    """
        name: XMRBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XMRBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRBUSD"

    def __str__(self):
        return "XMRBUSD"

    def __call__(self):
        return "XMRBUSD"


XMRBUSD = XMRBUSD()
"""
    name: XMRBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XMRETH(NamedTuple):
    """
        name: XMRETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XMRETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRETH"

    def __str__(self):
        return "XMRETH"

    def __call__(self):
        return "XMRETH"


XMRETH = XMRETH()
"""
    name: XMRETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XMRUSDT(NamedTuple):
    """
        name: XMRUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XMRUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMRUSDT"

    def __str__(self):
        return "XMRUSDT"

    def __call__(self):
        return "XMRUSDT"


XMRUSDT = XMRUSDT()
"""
    name: XMRUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XNOBTC(NamedTuple):
    """
        name: XNOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XNOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNOBTC"

    def __str__(self):
        return "XNOBTC"

    def __call__(self):
        return "XNOBTC"


XNOBTC = XNOBTC()
"""
    name: XNOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XNOBUSD(NamedTuple):
    """
        name: XNOBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XNOBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNOBUSD"

    def __str__(self):
        return "XNOBUSD"

    def __call__(self):
        return "XNOBUSD"


XNOBUSD = XNOBUSD()
"""
    name: XNOBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XNOETH(NamedTuple):
    """
        name: XNOETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XNOETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNOETH"

    def __str__(self):
        return "XNOETH"

    def __call__(self):
        return "XNOETH"


XNOETH = XNOETH()
"""
    name: XNOETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XNOUSDT(NamedTuple):
    """
        name: XNOUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XNOUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNOUSDT"

    def __str__(self):
        return "XNOUSDT"

    def __call__(self):
        return "XNOUSDT"


XNOUSDT = XNOUSDT()
"""
    name: XNOUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPAUD(NamedTuple):
    """
        name: XRPAUD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPAUD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPAUD"

    def __str__(self):
        return "XRPAUD"

    def __call__(self):
        return "XRPAUD"


XRPAUD = XRPAUD()
"""
    name: XRPAUD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBEARBUSD(NamedTuple):
    """
        name: XRPBEARBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBEARBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBEARBUSD"

    def __str__(self):
        return "XRPBEARBUSD"

    def __call__(self):
        return "XRPBEARBUSD"


XRPBEARBUSD = XRPBEARBUSD()
"""
    name: XRPBEARBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBEARUSDT(NamedTuple):
    """
        name: XRPBEARUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBEARUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBEARUSDT"

    def __str__(self):
        return "XRPBEARUSDT"

    def __call__(self):
        return "XRPBEARUSDT"


XRPBEARUSDT = XRPBEARUSDT()
"""
    name: XRPBEARUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBIDR(NamedTuple):
    """
        name: XRPBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBIDR"

    def __str__(self):
        return "XRPBIDR"

    def __call__(self):
        return "XRPBIDR"


XRPBIDR = XRPBIDR()
"""
    name: XRPBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class XRPBKRW(NamedTuple):
    """
        name: XRPBKRW
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 1000.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBKRW"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1000.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBKRW"

    def __str__(self):
        return "XRPBKRW"

    def __call__(self):
        return "XRPBKRW"


XRPBKRW = XRPBKRW()
"""
    name: XRPBKRW
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 1000.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBNB(NamedTuple):
    """
        name: XRPBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBNB"

    def __str__(self):
        return "XRPBNB"

    def __call__(self):
        return "XRPBNB"


XRPBNB = XRPBNB()
"""
    name: XRPBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBRL(NamedTuple):
    """
        name: XRPBRL
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBRL"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBRL"

    def __str__(self):
        return "XRPBRL"

    def __call__(self):
        return "XRPBRL"


XRPBRL = XRPBRL()
"""
    name: XRPBRL
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBTC(NamedTuple):
    """
        name: XRPBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XRPBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBTC"

    def __str__(self):
        return "XRPBTC"

    def __call__(self):
        return "XRPBTC"


XRPBTC = XRPBTC()
"""
    name: XRPBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XRPBULLBUSD(NamedTuple):
    """
        name: XRPBULLBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBULLBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBULLBUSD"

    def __str__(self):
        return "XRPBULLBUSD"

    def __call__(self):
        return "XRPBULLBUSD"


XRPBULLBUSD = XRPBULLBUSD()
"""
    name: XRPBULLBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBULLUSDT(NamedTuple):
    """
        name: XRPBULLUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPBULLUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBULLUSDT"

    def __str__(self):
        return "XRPBULLUSDT"

    def __call__(self):
        return "XRPBULLUSDT"


XRPBULLUSDT = XRPBULLUSDT()
"""
    name: XRPBULLUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPBUSD(NamedTuple):
    """
        name: XRPBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XRPBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPBUSD"

    def __str__(self):
        return "XRPBUSD"

    def __call__(self):
        return "XRPBUSD"


XRPBUSD = XRPBUSD()
"""
    name: XRPBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XRPDOWNUSDT(NamedTuple):
    """
        name: XRPDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPDOWNUSDT"

    def __str__(self):
        return "XRPDOWNUSDT"

    def __call__(self):
        return "XRPDOWNUSDT"


XRPDOWNUSDT = XRPDOWNUSDT()
"""
    name: XRPDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPETH(NamedTuple):
    """
        name: XRPETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XRPETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPETH"

    def __str__(self):
        return "XRPETH"

    def __call__(self):
        return "XRPETH"


XRPETH = XRPETH()
"""
    name: XRPETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XRPEUR(NamedTuple):
    """
        name: XRPEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPEUR"

    def __str__(self):
        return "XRPEUR"

    def __call__(self):
        return "XRPEUR"


XRPEUR = XRPEUR()
"""
    name: XRPEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPGBP(NamedTuple):
    """
        name: XRPGBP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPGBP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPGBP"

    def __str__(self):
        return "XRPGBP"

    def __call__(self):
        return "XRPGBP"


XRPGBP = XRPGBP()
"""
    name: XRPGBP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPNGN(NamedTuple):
    """
        name: XRPNGN
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 500.00000000
        max_order_size: 900000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPNGN"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 500.00000000
    max_order_size: float = 900000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPNGN"

    def __str__(self):
        return "XRPNGN"

    def __call__(self):
        return "XRPNGN"


XRPNGN = XRPNGN()
"""
    name: XRPNGN
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 500.00000000
    max_order_size: 900000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPPAX(NamedTuple):
    """
        name: XRPPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPPAX"

    def __str__(self):
        return "XRPPAX"

    def __call__(self):
        return "XRPPAX"


XRPPAX = XRPPAX()
"""
    name: XRPPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPRUB(NamedTuple):
    """
        name: XRPRUB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 100.00000000
        max_order_size: 90000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPRUB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 100.00000000
    max_order_size: float = 90000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPRUB"

    def __str__(self):
        return "XRPRUB"

    def __call__(self):
        return "XRPRUB"


XRPRUB = XRPRUB()
"""
    name: XRPRUB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 100.00000000
    max_order_size: 90000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPTRY(NamedTuple):
    """
        name: XRPTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPTRY"

    def __str__(self):
        return "XRPTRY"

    def __call__(self):
        return "XRPTRY"


XRPTRY = XRPTRY()
"""
    name: XRPTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPTUSD(NamedTuple):
    """
        name: XRPTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPTUSD"

    def __str__(self):
        return "XRPTUSD"

    def __call__(self):
        return "XRPTUSD"


XRPTUSD = XRPTUSD()
"""
    name: XRPTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPUPUSDT(NamedTuple):
    """
        name: XRPUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPUPUSDT"

    def __str__(self):
        return "XRPUPUSDT"

    def __call__(self):
        return "XRPUPUSDT"


XRPUPUSDT = XRPUPUSDT()
"""
    name: XRPUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPUSDC(NamedTuple):
    """
        name: XRPUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XRPUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPUSDC"

    def __str__(self):
        return "XRPUSDC"

    def __call__(self):
        return "XRPUSDC"


XRPUSDC = XRPUSDC()
"""
    name: XRPUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XRPUSDT(NamedTuple):
    """
        name: XRPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 5.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XRPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 5.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRPUSDT"

    def __str__(self):
        return "XRPUSDT"

    def __call__(self):
        return "XRPUSDT"


XRPUSDT = XRPUSDT()
"""
    name: XRPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 5.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XTZBNB(NamedTuple):
    """
        name: XTZBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZBNB"

    def __str__(self):
        return "XTZBNB"

    def __call__(self):
        return "XTZBNB"


XTZBNB = XTZBNB()
"""
    name: XTZBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZBTC(NamedTuple):
    """
        name: XTZBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XTZBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZBTC"

    def __str__(self):
        return "XTZBTC"

    def __call__(self):
        return "XTZBTC"


XTZBTC = XTZBTC()
"""
    name: XTZBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XTZBUSD(NamedTuple):
    """
        name: XTZBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XTZBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZBUSD"

    def __str__(self):
        return "XTZBUSD"

    def __call__(self):
        return "XTZBUSD"


XTZBUSD = XTZBUSD()
"""
    name: XTZBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XTZDOWNUSDT(NamedTuple):
    """
        name: XTZDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZDOWNUSDT"

    def __str__(self):
        return "XTZDOWNUSDT"

    def __call__(self):
        return "XTZDOWNUSDT"


XTZDOWNUSDT = XTZDOWNUSDT()
"""
    name: XTZDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZETH(NamedTuple):
    """
        name: XTZETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZETH"

    def __str__(self):
        return "XTZETH"

    def __call__(self):
        return "XTZETH"


XTZETH = XTZETH()
"""
    name: XTZETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZTRY(NamedTuple):
    """
        name: XTZTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZTRY"

    def __str__(self):
        return "XTZTRY"

    def __call__(self):
        return "XTZTRY"


XTZTRY = XTZTRY()
"""
    name: XTZTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZUPUSDT(NamedTuple):
    """
        name: XTZUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XTZUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZUPUSDT"

    def __str__(self):
        return "XTZUPUSDT"

    def __call__(self):
        return "XTZUPUSDT"


XTZUPUSDT = XTZUPUSDT()
"""
    name: XTZUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XTZUSDT(NamedTuple):
    """
        name: XTZUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XTZUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZUSDT"

    def __str__(self):
        return "XTZUSDT"

    def __call__(self):
        return "XTZUSDT"


XTZUSDT = XTZUSDT()
"""
    name: XTZUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XVGBTC(NamedTuple):
    """
        name: XVGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVGBTC"

    def __str__(self):
        return "XVGBTC"

    def __call__(self):
        return "XVGBTC"


XVGBTC = XVGBTC()
"""
    name: XVGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVGBUSD(NamedTuple):
    """
        name: XVGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVGBUSD"

    def __str__(self):
        return "XVGBUSD"

    def __call__(self):
        return "XVGBUSD"


XVGBUSD = XVGBUSD()
"""
    name: XVGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVGETH(NamedTuple):
    """
        name: XVGETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVGETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVGETH"

    def __str__(self):
        return "XVGETH"

    def __call__(self):
        return "XVGETH"


XVGETH = XVGETH()
"""
    name: XVGETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVGUSDT(NamedTuple):
    """
        name: XVGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVGUSDT"

    def __str__(self):
        return "XVGUSDT"

    def __call__(self):
        return "XVGUSDT"


XVGUSDT = XVGUSDT()
"""
    name: XVGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSBNB(NamedTuple):
    """
        name: XVSBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVSBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSBNB"

    def __str__(self):
        return "XVSBNB"

    def __call__(self):
        return "XVSBNB"


XVSBNB = XVSBNB()
"""
    name: XVSBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSBTC(NamedTuple):
    """
        name: XVSBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVSBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSBTC"

    def __str__(self):
        return "XVSBTC"

    def __call__(self):
        return "XVSBTC"


XVSBTC = XVSBTC()
"""
    name: XVSBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSBUSD(NamedTuple):
    """
        name: XVSBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVSBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSBUSD"

    def __str__(self):
        return "XVSBUSD"

    def __call__(self):
        return "XVSBUSD"


XVSBUSD = XVSBUSD()
"""
    name: XVSBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSTRY(NamedTuple):
    """
        name: XVSTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XVSTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSTRY"

    def __str__(self):
        return "XVSTRY"

    def __call__(self):
        return "XVSTRY"


XVSTRY = XVSTRY()
"""
    name: XVSTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XVSUSDT(NamedTuple):
    """
        name: XVSUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "XVSUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XVSUSDT"

    def __str__(self):
        return "XVSUSDT"

    def __call__(self):
        return "XVSUSDT"


XVSUSDT = XVSUSDT()
"""
    name: XVSUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class XZCBNB(NamedTuple):
    """
        name: XZCBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCBNB"

    def __str__(self):
        return "XZCBNB"

    def __call__(self):
        return "XZCBNB"


XZCBNB = XZCBNB()
"""
    name: XZCBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XZCBTC(NamedTuple):
    """
        name: XZCBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCBTC"

    def __str__(self):
        return "XZCBTC"

    def __call__(self):
        return "XZCBTC"


XZCBTC = XZCBTC()
"""
    name: XZCBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XZCETH(NamedTuple):
    """
        name: XZCETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCETH"

    def __str__(self):
        return "XZCETH"

    def __call__(self):
        return "XZCETH"


XZCETH = XZCETH()
"""
    name: XZCETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XZCUSDT(NamedTuple):
    """
        name: XZCUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCUSDT"

    def __str__(self):
        return "XZCUSDT"

    def __call__(self):
        return "XZCUSDT"


XZCUSDT = XZCUSDT()
"""
    name: XZCUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class XZCXRP(NamedTuple):
    """
        name: XZCXRP
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "XZCXRP"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XZCXRP"

    def __str__(self):
        return "XZCXRP"

    def __call__(self):
        return "XZCXRP"


XZCXRP = XZCXRP()
"""
    name: XZCXRP
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIBNB(NamedTuple):
    """
        name: YFIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIBNB"

    def __str__(self):
        return "YFIBNB"

    def __call__(self):
        return "YFIBNB"


YFIBNB = YFIBNB()
"""
    name: YFIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIBTC(NamedTuple):
    """
        name: YFIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIBTC"

    def __str__(self):
        return "YFIBTC"

    def __call__(self):
        return "YFIBTC"


YFIBTC = YFIBTC()
"""
    name: YFIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIBUSD(NamedTuple):
    """
        name: YFIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIBUSD"

    def __str__(self):
        return "YFIBUSD"

    def __call__(self):
        return "YFIBUSD"


YFIBUSD = YFIBUSD()
"""
    name: YFIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIDOWNUSDT(NamedTuple):
    """
        name: YFIDOWNUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIDOWNUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIDOWNUSDT"

    def __str__(self):
        return "YFIDOWNUSDT"

    def __call__(self):
        return "YFIDOWNUSDT"


YFIDOWNUSDT = YFIDOWNUSDT()
"""
    name: YFIDOWNUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIEUR(NamedTuple):
    """
        name: YFIEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIEUR"

    def __str__(self):
        return "YFIEUR"

    def __call__(self):
        return "YFIEUR"


YFIEUR = YFIEUR()
"""
    name: YFIEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIIBNB(NamedTuple):
    """
        name: YFIIBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIIBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIIBNB"

    def __str__(self):
        return "YFIIBNB"

    def __call__(self):
        return "YFIIBNB"


YFIIBNB = YFIIBNB()
"""
    name: YFIIBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIIBTC(NamedTuple):
    """
        name: YFIIBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIIBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIIBTC"

    def __str__(self):
        return "YFIIBTC"

    def __call__(self):
        return "YFIIBTC"


YFIIBTC = YFIIBTC()
"""
    name: YFIIBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIIBUSD(NamedTuple):
    """
        name: YFIIBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIIBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIIBUSD"

    def __str__(self):
        return "YFIIBUSD"

    def __call__(self):
        return "YFIIBUSD"


YFIIBUSD = YFIIBUSD()
"""
    name: YFIIBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIIUSDT(NamedTuple):
    """
        name: YFIIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIIUSDT"

    def __str__(self):
        return "YFIIUSDT"

    def __call__(self):
        return "YFIIUSDT"


YFIIUSDT = YFIIUSDT()
"""
    name: YFIIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIUPUSDT(NamedTuple):
    """
        name: YFIUPUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YFIUPUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIUPUSDT"

    def __str__(self):
        return "YFIUPUSDT"

    def __call__(self):
        return "YFIUPUSDT"


YFIUPUSDT = YFIUPUSDT()
"""
    name: YFIUPUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YFIUSDT(NamedTuple):
    """
        name: YFIUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "YFIUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFIUSDT"

    def __str__(self):
        return "YFIUSDT"

    def __call__(self):
        return "YFIUSDT"


YFIUSDT = YFIUSDT()
"""
    name: YFIUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class YGGBNB(NamedTuple):
    """
        name: YGGBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YGGBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGGBNB"

    def __str__(self):
        return "YGGBNB"

    def __call__(self):
        return "YGGBNB"


YGGBNB = YGGBNB()
"""
    name: YGGBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YGGBTC(NamedTuple):
    """
        name: YGGBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YGGBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGGBTC"

    def __str__(self):
        return "YGGBTC"

    def __call__(self):
        return "YGGBTC"


YGGBTC = YGGBTC()
"""
    name: YGGBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YGGBUSD(NamedTuple):
    """
        name: YGGBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "YGGBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGGBUSD"

    def __str__(self):
        return "YGGBUSD"

    def __call__(self):
        return "YGGBUSD"


YGGBUSD = YGGBUSD()
"""
    name: YGGBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class YGGUSDT(NamedTuple):
    """
        name: YGGUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "YGGUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGGUSDT"

    def __str__(self):
        return "YGGUSDT"

    def __call__(self):
        return "YGGUSDT"


YGGUSDT = YGGUSDT()
"""
    name: YGGUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class YOYOBNB(NamedTuple):
    """
        name: YOYOBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YOYOBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YOYOBNB"

    def __str__(self):
        return "YOYOBNB"

    def __call__(self):
        return "YOYOBNB"


YOYOBNB = YOYOBNB()
"""
    name: YOYOBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YOYOBTC(NamedTuple):
    """
        name: YOYOBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YOYOBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YOYOBTC"

    def __str__(self):
        return "YOYOBTC"

    def __call__(self):
        return "YOYOBTC"


YOYOBTC = YOYOBTC()
"""
    name: YOYOBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class YOYOETH(NamedTuple):
    """
        name: YOYOETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "YOYOETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YOYOETH"

    def __str__(self):
        return "YOYOETH"

    def __call__(self):
        return "YOYOETH"


YOYOETH = YOYOETH()
"""
    name: YOYOETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECBNB(NamedTuple):
    """
        name: ZECBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECBNB"

    def __str__(self):
        return "ZECBNB"

    def __call__(self):
        return "ZECBNB"


ZECBNB = ZECBNB()
"""
    name: ZECBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECBTC(NamedTuple):
    """
        name: ZECBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZECBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECBTC"

    def __str__(self):
        return "ZECBTC"

    def __call__(self):
        return "ZECBTC"


ZECBTC = ZECBTC()
"""
    name: ZECBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZECBUSD(NamedTuple):
    """
        name: ZECBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECBUSD"

    def __str__(self):
        return "ZECBUSD"

    def __call__(self):
        return "ZECBUSD"


ZECBUSD = ZECBUSD()
"""
    name: ZECBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECETH(NamedTuple):
    """
        name: ZECETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECETH"

    def __str__(self):
        return "ZECETH"

    def __call__(self):
        return "ZECETH"


ZECETH = ZECETH()
"""
    name: ZECETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECPAX(NamedTuple):
    """
        name: ZECPAX
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECPAX"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECPAX"

    def __str__(self):
        return "ZECPAX"

    def __call__(self):
        return "ZECPAX"


ZECPAX = ZECPAX()
"""
    name: ZECPAX
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECTUSD(NamedTuple):
    """
        name: ZECTUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECTUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECTUSD"

    def __str__(self):
        return "ZECTUSD"

    def __call__(self):
        return "ZECTUSD"


ZECTUSD = ZECTUSD()
"""
    name: ZECTUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECUSDC(NamedTuple):
    """
        name: ZECUSDC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZECUSDC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECUSDC"

    def __str__(self):
        return "ZECUSDC"

    def __call__(self):
        return "ZECUSDC"


ZECUSDC = ZECUSDC()
"""
    name: ZECUSDC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZECUSDT(NamedTuple):
    """
        name: ZECUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZECUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZECUSDT"

    def __str__(self):
        return "ZECUSDT"

    def __call__(self):
        return "ZECUSDT"


ZECUSDT = ZECUSDT()
"""
    name: ZECUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZENBNB(NamedTuple):
    """
        name: ZENBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZENBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENBNB"

    def __str__(self):
        return "ZENBNB"

    def __call__(self):
        return "ZENBNB"


ZENBNB = ZENBNB()
"""
    name: ZENBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZENBTC(NamedTuple):
    """
        name: ZENBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZENBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENBTC"

    def __str__(self):
        return "ZENBTC"

    def __call__(self):
        return "ZENBTC"


ZENBTC = ZENBTC()
"""
    name: ZENBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZENBUSD(NamedTuple):
    """
        name: ZENBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZENBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENBUSD"

    def __str__(self):
        return "ZENBUSD"

    def __call__(self):
        return "ZENBUSD"


ZENBUSD = ZENBUSD()
"""
    name: ZENBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZENETH(NamedTuple):
    """
        name: ZENETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZENETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENETH"

    def __str__(self):
        return "ZENETH"

    def __call__(self):
        return "ZENETH"


ZENETH = ZENETH()
"""
    name: ZENETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZENUSDT(NamedTuple):
    """
        name: ZENUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZENUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZENUSDT"

    def __str__(self):
        return "ZENUSDT"

    def __call__(self):
        return "ZENUSDT"


ZENUSDT = ZENUSDT()
"""
    name: ZENUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZILBIDR(NamedTuple):
    """
        name: ZILBIDR
        precision: 2
        min_margin: None
        initial_margin: None
        min_order_size: 20000.00
        max_order_size: 9000000000.00
        has_margin: False
        exchange: binance
    """
    name: str = "ZILBIDR"
    precision: int = 2
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 20000.00
    max_order_size: float = 9000000000.00
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILBIDR"

    def __str__(self):
        return "ZILBIDR"

    def __call__(self):
        return "ZILBIDR"


ZILBIDR = ZILBIDR()
"""
    name: ZILBIDR
    precision: 2
    min_margin: None
    initial_margin: None
    min_order_size: 20000.00
    max_order_size: 9000000000.00
    has_margin: False
    exchange: binance
"""


class ZILBNB(NamedTuple):
    """
        name: ZILBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZILBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILBNB"

    def __str__(self):
        return "ZILBNB"

    def __call__(self):
        return "ZILBNB"


ZILBNB = ZILBNB()
"""
    name: ZILBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZILBTC(NamedTuple):
    """
        name: ZILBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZILBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILBTC"

    def __str__(self):
        return "ZILBTC"

    def __call__(self):
        return "ZILBTC"


ZILBTC = ZILBTC()
"""
    name: ZILBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZILBUSD(NamedTuple):
    """
        name: ZILBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZILBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILBUSD"

    def __str__(self):
        return "ZILBUSD"

    def __call__(self):
        return "ZILBUSD"


ZILBUSD = ZILBUSD()
"""
    name: ZILBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZILETH(NamedTuple):
    """
        name: ZILETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZILETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILETH"

    def __str__(self):
        return "ZILETH"

    def __call__(self):
        return "ZILETH"


ZILETH = ZILETH()
"""
    name: ZILETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZILEUR(NamedTuple):
    """
        name: ZILEUR
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZILEUR"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILEUR"

    def __str__(self):
        return "ZILEUR"

    def __call__(self):
        return "ZILEUR"


ZILEUR = ZILEUR()
"""
    name: ZILEUR
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZILTRY(NamedTuple):
    """
        name: ZILTRY
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZILTRY"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILTRY"

    def __str__(self):
        return "ZILTRY"

    def __call__(self):
        return "ZILTRY"


ZILTRY = ZILTRY()
"""
    name: ZILTRY
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZILUSDT(NamedTuple):
    """
        name: ZILUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZILUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZILUSDT"

    def __str__(self):
        return "ZILUSDT"

    def __call__(self):
        return "ZILUSDT"


ZILUSDT = ZILUSDT()
"""
    name: ZILUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZRXBNB(NamedTuple):
    """
        name: ZRXBNB
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.05000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZRXBNB"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.05000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXBNB"

    def __str__(self):
        return "ZRXBNB"

    def __call__(self):
        return "ZRXBNB"


ZRXBNB = ZRXBNB()
"""
    name: ZRXBNB
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.05000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZRXBTC(NamedTuple):
    """
        name: ZRXBTC
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00010000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZRXBTC"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00010000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXBTC"

    def __str__(self):
        return "ZRXBTC"

    def __call__(self):
        return "ZRXBTC"


ZRXBTC = ZRXBTC()
"""
    name: ZRXBTC
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00010000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""


class ZRXBUSD(NamedTuple):
    """
        name: ZRXBUSD
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZRXBUSD"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXBUSD"

    def __str__(self):
        return "ZRXBUSD"

    def __call__(self):
        return "ZRXBUSD"


ZRXBUSD = ZRXBUSD()
"""
    name: ZRXBUSD
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZRXETH(NamedTuple):
    """
        name: ZRXETH
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 0.00500000
        max_order_size: 9000000.00000000
        has_margin: False
        exchange: binance
    """
    name: str = "ZRXETH"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00500000
    max_order_size: float = 9000000.00000000
    has_margin: bool = False
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXETH"

    def __str__(self):
        return "ZRXETH"

    def __call__(self):
        return "ZRXETH"


ZRXETH = ZRXETH()
"""
    name: ZRXETH
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 0.00500000
    max_order_size: 9000000.00000000
    has_margin: False
    exchange: binance
"""


class ZRXUSDT(NamedTuple):
    """
        name: ZRXUSDT
        precision: 8
        min_margin: None
        initial_margin: None
        min_order_size: 10.00000000
        max_order_size: 9000000.00000000
        has_margin: True
        exchange: binance
    """
    name: str = "ZRXUSDT"
    precision: int = 8
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 10.00000000
    max_order_size: float = 9000000.00000000
    has_margin: bool = True
    exchange: str = "binance"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRXUSDT"

    def __str__(self):
        return "ZRXUSDT"

    def __call__(self):
        return "ZRXUSDT"


ZRXUSDT = ZRXUSDT()
"""
    name: ZRXUSDT
    precision: 8
    min_margin: None
    initial_margin: None
    min_order_size: 10.00000000
    max_order_size: 9000000.00000000
    has_margin: True
    exchange: binance
"""
