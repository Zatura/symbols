from ._model import Symbol


class OXEN_BTC(Symbol):
    """
        name: LOKI-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOKI-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKI-BTC"

    def __str__(self):
        return "LOKI-BTC"

    def __call__(self):
        return "LOKI-BTC"


OXEN_BTC = OXEN_BTC(*OXEN_BTC._fields)


class OXEN_ETH(Symbol):
    """
        name: LOKI-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOKI-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKI-ETH"

    def __str__(self):
        return "LOKI-ETH"

    def __call__(self):
        return "LOKI-ETH"


OXEN_ETH = OXEN_ETH(*OXEN_ETH._fields)


class NRG_BTC(Symbol):
    """
        name: NRG-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NRG-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NRG-BTC"

    def __str__(self):
        return "NRG-BTC"

    def __call__(self):
        return "NRG-BTC"


NRG_BTC = NRG_BTC(*NRG_BTC._fields)


class AVA_USDT(Symbol):
    """
        name: AVA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AVA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVA-USDT"

    def __str__(self):
        return "AVA-USDT"

    def __call__(self):
        return "AVA-USDT"


AVA_USDT = AVA_USDT(*AVA_USDT._fields)


class FET_BTC(Symbol):
    """
        name: FET-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FET-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FET-BTC"

    def __str__(self):
        return "FET-BTC"

    def __call__(self):
        return "FET-BTC"


FET_BTC = FET_BTC(*FET_BTC._fields)


class FET_ETH(Symbol):
    """
        name: FET-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FET-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FET-ETH"

    def __str__(self):
        return "FET-ETH"

    def __call__(self):
        return "FET-ETH"


FET_ETH = FET_ETH(*FET_ETH._fields)


class ANKR_BTC(Symbol):
    """
        name: ANKR-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ANKR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKR-BTC"

    def __str__(self):
        return "ANKR-BTC"

    def __call__(self):
        return "ANKR-BTC"


ANKR_BTC = ANKR_BTC(*ANKR_BTC._fields)


class XMR_BTC(Symbol):
    """
        name: XMR-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XMR-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMR-BTC"

    def __str__(self):
        return "XMR-BTC"

    def __call__(self):
        return "XMR-BTC"


XMR_BTC = XMR_BTC(*XMR_BTC._fields)


class XMR_ETH(Symbol):
    """
        name: XMR-ETH
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XMR-ETH"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMR-ETH"

    def __str__(self):
        return "XMR-ETH"

    def __call__(self):
        return "XMR-ETH"


XMR_ETH = XMR_ETH(*XMR_ETH._fields)


class MTV_BTC(Symbol):
    """
        name: MTV-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MTV-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTV-BTC"

    def __str__(self):
        return "MTV-BTC"

    def __call__(self):
        return "MTV-BTC"


MTV_BTC = MTV_BTC(*MTV_BTC._fields)


class MTV_ETH(Symbol):
    """
        name: MTV-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MTV-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTV-ETH"

    def __str__(self):
        return "MTV-ETH"

    def __call__(self):
        return "MTV-ETH"


MTV_ETH = MTV_ETH(*MTV_ETH._fields)


class CRO_BTC(Symbol):
    """
        name: CRO-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CRO-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRO-BTC"

    def __str__(self):
        return "CRO-BTC"

    def __call__(self):
        return "CRO-BTC"


CRO_BTC = CRO_BTC(*CRO_BTC._fields)


class MTV_USDT(Symbol):
    """
        name: MTV-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MTV-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTV-USDT"

    def __str__(self):
        return "MTV-USDT"

    def __call__(self):
        return "MTV-USDT"


MTV_USDT = MTV_USDT(*MTV_USDT._fields)


class KMD_BTC(Symbol):
    """
        name: KMD-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KMD-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMD-BTC"

    def __str__(self):
        return "KMD-BTC"

    def __call__(self):
        return "KMD-BTC"


KMD_BTC = KMD_BTC(*KMD_BTC._fields)


class KMD_USDT(Symbol):
    """
        name: KMD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KMD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMD-USDT"

    def __str__(self):
        return "KMD-USDT"

    def __call__(self):
        return "KMD-USDT"


KMD_USDT = KMD_USDT(*KMD_USDT._fields)


class RFOX_USDT(Symbol):
    """
        name: RFOX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 5
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RFOX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 5
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RFOX-USDT"

    def __str__(self):
        return "RFOX-USDT"

    def __call__(self):
        return "RFOX-USDT"


RFOX_USDT = RFOX_USDT(*RFOX_USDT._fields)


class TEL_USDT(Symbol):
    """
        name: TEL-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TEL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TEL-USDT"

    def __str__(self):
        return "TEL-USDT"

    def __call__(self):
        return "TEL-USDT"


TEL_USDT = TEL_USDT(*TEL_USDT._fields)


class TT_USDT(Symbol):
    """
        name: TT-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TT-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TT-USDT"

    def __str__(self):
        return "TT-USDT"

    def __call__(self):
        return "TT-USDT"


TT_USDT = TT_USDT(*TT_USDT._fields)


class AERGO_USDT(Symbol):
    """
        name: AERGO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AERGO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGO-USDT"

    def __str__(self):
        return "AERGO-USDT"

    def __call__(self):
        return "AERGO-USDT"


AERGO_USDT = AERGO_USDT(*AERGO_USDT._fields)


class XMR_USDT(Symbol):
    """
        name: XMR-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XMR-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMR-USDT"

    def __str__(self):
        return "XMR-USDT"

    def __call__(self):
        return "XMR-USDT"


XMR_USDT = XMR_USDT(*XMR_USDT._fields)


class TRX_KCS(Symbol):
    """
        name: TRX-KCS
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRX-KCS"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-KCS"

    def __str__(self):
        return "TRX-KCS"

    def __call__(self):
        return "TRX-KCS"


TRX_KCS = TRX_KCS(*TRX_KCS._fields)


class ATOM_BTC(Symbol):
    """
        name: ATOM-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ATOM-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-BTC"

    def __str__(self):
        return "ATOM-BTC"

    def __call__(self):
        return "ATOM-BTC"


ATOM_BTC = ATOM_BTC(*ATOM_BTC._fields)


class ATOM_ETH(Symbol):
    """
        name: ATOM-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ATOM-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-ETH"

    def __str__(self):
        return "ATOM-ETH"

    def __call__(self):
        return "ATOM-ETH"


ATOM_ETH = ATOM_ETH(*ATOM_ETH._fields)


class ATOM_USDT(Symbol):
    """
        name: ATOM-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ATOM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-USDT"

    def __str__(self):
        return "ATOM-USDT"

    def __call__(self):
        return "ATOM-USDT"


ATOM_USDT = ATOM_USDT(*ATOM_USDT._fields)


class ATOM_KCS(Symbol):
    """
        name: ATOM-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ATOM-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-KCS"

    def __str__(self):
        return "ATOM-KCS"

    def __call__(self):
        return "ATOM-KCS"


ATOM_KCS = ATOM_KCS(*ATOM_KCS._fields)


class ETN_USDT(Symbol):
    """
        name: ETN-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETN-USDT"

    def __str__(self):
        return "ETN-USDT"

    def __call__(self):
        return "ETN-USDT"


ETN_USDT = ETN_USDT(*ETN_USDT._fields)


class FTM_USDT(Symbol):
    """
        name: FTM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FTM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM-USDT"

    def __str__(self):
        return "FTM-USDT"

    def __call__(self):
        return "FTM-USDT"


FTM_USDT = FTM_USDT(*FTM_USDT._fields)


class VSYS_USDT(Symbol):
    """
        name: VSYS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VSYS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VSYS-USDT"

    def __str__(self):
        return "VSYS-USDT"

    def __call__(self):
        return "VSYS-USDT"


VSYS_USDT = VSYS_USDT(*VSYS_USDT._fields)


class OCEAN_BTC(Symbol):
    """
        name: OCEAN-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OCEAN-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEAN-BTC"

    def __str__(self):
        return "OCEAN-BTC"

    def __call__(self):
        return "OCEAN-BTC"


OCEAN_BTC = OCEAN_BTC(*OCEAN_BTC._fields)


class OCEAN_ETH(Symbol):
    """
        name: OCEAN-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OCEAN-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEAN-ETH"

    def __str__(self):
        return "OCEAN-ETH"

    def __call__(self):
        return "OCEAN-ETH"


OCEAN_ETH = OCEAN_ETH(*OCEAN_ETH._fields)


class CHR_BTC(Symbol):
    """
        name: CHR-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CHR-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHR-BTC"

    def __str__(self):
        return "CHR-BTC"

    def __call__(self):
        return "CHR-BTC"


CHR_BTC = CHR_BTC(*CHR_BTC._fields)


class CHR_USDT(Symbol):
    """
        name: CHR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CHR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHR-USDT"

    def __str__(self):
        return "CHR-USDT"

    def __call__(self):
        return "CHR-USDT"


CHR_USDT = CHR_USDT(*CHR_USDT._fields)


class FX_BTC(Symbol):
    """
        name: FX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FX-BTC"

    def __str__(self):
        return "FX-BTC"

    def __call__(self):
        return "FX-BTC"


FX_BTC = FX_BTC(*FX_BTC._fields)


class FX_ETH(Symbol):
    """
        name: FX-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FX-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FX-ETH"

    def __str__(self):
        return "FX-ETH"

    def __call__(self):
        return "FX-ETH"


FX_ETH = FX_ETH(*FX_ETH._fields)


class NIM_BTC(Symbol):
    """
        name: NIM-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NIM-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NIM-BTC"

    def __str__(self):
        return "NIM-BTC"

    def __call__(self):
        return "NIM-BTC"


NIM_BTC = NIM_BTC(*NIM_BTC._fields)


class NIM_ETH(Symbol):
    """
        name: NIM-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NIM-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NIM-ETH"

    def __str__(self):
        return "NIM-ETH"

    def __call__(self):
        return "NIM-ETH"


NIM_ETH = NIM_ETH(*NIM_ETH._fields)


class COTI_BTC(Symbol):
    """
        name: COTI-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "COTI-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTI-BTC"

    def __str__(self):
        return "COTI-BTC"

    def __call__(self):
        return "COTI-BTC"


COTI_BTC = COTI_BTC(*COTI_BTC._fields)


class COTI_USDT(Symbol):
    """
        name: COTI-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "COTI-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTI-USDT"

    def __str__(self):
        return "COTI-USDT"

    def __call__(self):
        return "COTI-USDT"


COTI_USDT = COTI_USDT(*COTI_USDT._fields)


class NRG_ETH(Symbol):
    """
        name: NRG-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NRG-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NRG-ETH"

    def __str__(self):
        return "NRG-ETH"

    def __call__(self):
        return "NRG-ETH"


NRG_ETH = NRG_ETH(*NRG_ETH._fields)


class BNB_BTC(Symbol):
    """
        name: BNB-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BNB-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB-BTC"

    def __str__(self):
        return "BNB-BTC"

    def __call__(self):
        return "BNB-BTC"


BNB_BTC = BNB_BTC(*BNB_BTC._fields)


class BNB_USDT(Symbol):
    """
        name: BNB-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BNB-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB-USDT"

    def __str__(self):
        return "BNB-USDT"

    def __call__(self):
        return "BNB-USDT"


BNB_USDT = BNB_USDT(*BNB_USDT._fields)


class JAR_BTC(Symbol):
    """
        name: JAR-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "JAR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JAR-BTC"

    def __str__(self):
        return "JAR-BTC"

    def __call__(self):
        return "JAR-BTC"


JAR_BTC = JAR_BTC(*JAR_BTC._fields)


class JAR_USDT(Symbol):
    """
        name: JAR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "JAR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JAR-USDT"

    def __str__(self):
        return "JAR-USDT"

    def __call__(self):
        return "JAR-USDT"


JAR_USDT = JAR_USDT(*JAR_USDT._fields)


class ALGO_BTC(Symbol):
    """
        name: ALGO-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALGO-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-BTC"

    def __str__(self):
        return "ALGO-BTC"

    def __call__(self):
        return "ALGO-BTC"


ALGO_BTC = ALGO_BTC(*ALGO_BTC._fields)


class ALGO_ETH(Symbol):
    """
        name: ALGO-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALGO-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-ETH"

    def __str__(self):
        return "ALGO-ETH"

    def __call__(self):
        return "ALGO-ETH"


ALGO_ETH = ALGO_ETH(*ALGO_ETH._fields)


class ALGO_USDT(Symbol):
    """
        name: ALGO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ALGO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-USDT"

    def __str__(self):
        return "ALGO-USDT"

    def __call__(self):
        return "ALGO-USDT"


ALGO_USDT = ALGO_USDT(*ALGO_USDT._fields)


class XEM_BTC(Symbol):
    """
        name: XEM-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XEM-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEM-BTC"

    def __str__(self):
        return "XEM-BTC"

    def __call__(self):
        return "XEM-BTC"


XEM_BTC = XEM_BTC(*XEM_BTC._fields)


class XEM_USDT(Symbol):
    """
        name: XEM-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XEM-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEM-USDT"

    def __str__(self):
        return "XEM-USDT"

    def __call__(self):
        return "XEM-USDT"


XEM_USDT = XEM_USDT(*XEM_USDT._fields)


class CIX100_USDT(Symbol):
    """
        name: CIX100-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CIX100-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CIX100-USDT"

    def __str__(self):
        return "CIX100-USDT"

    def __call__(self):
        return "CIX100-USDT"


CIX100_USDT = CIX100_USDT(*CIX100_USDT._fields)


class XTZ_BTC(Symbol):
    """
        name: XTZ-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XTZ-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZ-BTC"

    def __str__(self):
        return "XTZ-BTC"

    def __call__(self):
        return "XTZ-BTC"


XTZ_BTC = XTZ_BTC(*XTZ_BTC._fields)


class XTZ_USDT(Symbol):
    """
        name: XTZ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XTZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZ-USDT"

    def __str__(self):
        return "XTZ-USDT"

    def __call__(self):
        return "XTZ-USDT"


XTZ_USDT = XTZ_USDT(*XTZ_USDT._fields)


class ZEC_BTC(Symbol):
    """
        name: ZEC-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ZEC-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEC-BTC"

    def __str__(self):
        return "ZEC-BTC"

    def __call__(self):
        return "ZEC-BTC"


ZEC_BTC = ZEC_BTC(*ZEC_BTC._fields)


class ZEC_USDT(Symbol):
    """
        name: ZEC-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ZEC-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEC-USDT"

    def __str__(self):
        return "ZEC-USDT"

    def __call__(self):
        return "ZEC-USDT"


ZEC_USDT = ZEC_USDT(*ZEC_USDT._fields)


class ADA_BTC(Symbol):
    """
        name: ADA-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ADA-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA-BTC"

    def __str__(self):
        return "ADA-BTC"

    def __call__(self):
        return "ADA-BTC"


ADA_BTC = ADA_BTC(*ADA_BTC._fields)


class ADA_USDT(Symbol):
    """
        name: ADA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ADA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA-USDT"

    def __str__(self):
        return "ADA-USDT"

    def __call__(self):
        return "ADA-USDT"


ADA_USDT = ADA_USDT(*ADA_USDT._fields)


class REV_USDT(Symbol):
    """
        name: R-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "R-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "R-USDT"

    def __str__(self):
        return "R-USDT"

    def __call__(self):
        return "R-USDT"


REV_USDT = REV_USDT(*REV_USDT._fields)


class FORESTPLUS_BTC(Symbol):
    """
        name: FORESTPLUS-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FORESTPLUS-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORESTPLUS-BTC"

    def __str__(self):
        return "FORESTPLUS-BTC"

    def __call__(self):
        return "FORESTPLUS-BTC"


FORESTPLUS_BTC = FORESTPLUS_BTC(*FORESTPLUS_BTC._fields)


class FORESTPLUS_USDT(Symbol):
    """
        name: FORESTPLUS-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FORESTPLUS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORESTPLUS-USDT"

    def __str__(self):
        return "FORESTPLUS-USDT"

    def __call__(self):
        return "FORESTPLUS-USDT"


FORESTPLUS_USDT = FORESTPLUS_USDT(*FORESTPLUS_USDT._fields)


class BOLT_BTC(Symbol):
    """
        name: BOLT-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BOLT-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOLT-BTC"

    def __str__(self):
        return "BOLT-BTC"

    def __call__(self):
        return "BOLT-BTC"


BOLT_BTC = BOLT_BTC(*BOLT_BTC._fields)


class BOLT_USDT(Symbol):
    """
        name: BOLT-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BOLT-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOLT-USDT"

    def __str__(self):
        return "BOLT-USDT"

    def __call__(self):
        return "BOLT-USDT"


BOLT_USDT = BOLT_USDT(*BOLT_USDT._fields)


class ARPA_USDT(Symbol):
    """
        name: ARPA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ARPA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPA-USDT"

    def __str__(self):
        return "ARPA-USDT"

    def __call__(self):
        return "ARPA-USDT"


ARPA_USDT = ARPA_USDT(*ARPA_USDT._fields)


class CHZ_BTC(Symbol):
    """
        name: CHZ-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CHZ-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZ-BTC"

    def __str__(self):
        return "CHZ-BTC"

    def __call__(self):
        return "CHZ-BTC"


CHZ_BTC = CHZ_BTC(*CHZ_BTC._fields)


class CHZ_USDT(Symbol):
    """
        name: CHZ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CHZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZ-USDT"

    def __str__(self):
        return "CHZ-USDT"

    def __call__(self):
        return "CHZ-USDT"


CHZ_USDT = CHZ_USDT(*CHZ_USDT._fields)


class DAPPT_BTC(Symbol):
    """
        name: DAPPT-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DAPPT-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAPPT-BTC"

    def __str__(self):
        return "DAPPT-BTC"

    def __call__(self):
        return "DAPPT-BTC"


DAPPT_BTC = DAPPT_BTC(*DAPPT_BTC._fields)


class DAPPT_USDT(Symbol):
    """
        name: DAPPT-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DAPPT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAPPT-USDT"

    def __str__(self):
        return "DAPPT-USDT"

    def __call__(self):
        return "DAPPT-USDT"


DAPPT_USDT = DAPPT_USDT(*DAPPT_USDT._fields)


class NOIA_BTC(Symbol):
    """
        name: NOIA-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NOIA-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NOIA-BTC"

    def __str__(self):
        return "NOIA-BTC"

    def __call__(self):
        return "NOIA-BTC"


NOIA_BTC = NOIA_BTC(*NOIA_BTC._fields)


class NOIA_USDT(Symbol):
    """
        name: NOIA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NOIA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NOIA-USDT"

    def __str__(self):
        return "NOIA-USDT"

    def __call__(self):
        return "NOIA-USDT"


NOIA_USDT = NOIA_USDT(*NOIA_USDT._fields)


class WIN_BTC(Symbol):
    """
        name: WIN-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WIN-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WIN-BTC"

    def __str__(self):
        return "WIN-BTC"

    def __call__(self):
        return "WIN-BTC"


WIN_BTC = WIN_BTC(*WIN_BTC._fields)


class WIN_USDT(Symbol):
    """
        name: WIN-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "WIN-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WIN-USDT"

    def __str__(self):
        return "WIN-USDT"

    def __call__(self):
        return "WIN-USDT"


WIN_USDT = WIN_USDT(*WIN_USDT._fields)


class DERO_BTC(Symbol):
    """
        name: DERO-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DERO-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DERO-BTC"

    def __str__(self):
        return "DERO-BTC"

    def __call__(self):
        return "DERO-BTC"


DERO_BTC = DERO_BTC(*DERO_BTC._fields)


class DERO_USDT(Symbol):
    """
        name: DERO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DERO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DERO-USDT"

    def __str__(self):
        return "DERO-USDT"

    def __call__(self):
        return "DERO-USDT"


DERO_USDT = DERO_USDT(*DERO_USDT._fields)


class BTT_USDT(Symbol):
    """
        name: BTT-USDT
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BTT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTT-USDT"

    def __str__(self):
        return "BTT-USDT"

    def __call__(self):
        return "BTT-USDT"


BTT_USDT = BTT_USDT(*BTT_USDT._fields)


class EOSC_USDT(Symbol):
    """
        name: EOSC-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EOSC-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSC-USDT"

    def __str__(self):
        return "EOSC-USDT"

    def __call__(self):
        return "EOSC-USDT"


EOSC_USDT = EOSC_USDT(*EOSC_USDT._fields)


class ENQ_BTC(Symbol):
    """
        name: ENQ-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ENQ-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENQ-BTC"

    def __str__(self):
        return "ENQ-BTC"

    def __call__(self):
        return "ENQ-BTC"


ENQ_BTC = ENQ_BTC(*ENQ_BTC._fields)


class ENQ_USDT(Symbol):
    """
        name: ENQ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ENQ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENQ-USDT"

    def __str__(self):
        return "ENQ-USDT"

    def __call__(self):
        return "ENQ-USDT"


ENQ_USDT = ENQ_USDT(*ENQ_USDT._fields)


class ONE_BTC(Symbol):
    """
        name: ONE-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ONE-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONE-BTC"

    def __str__(self):
        return "ONE-BTC"

    def __call__(self):
        return "ONE-BTC"


ONE_BTC = ONE_BTC(*ONE_BTC._fields)


class ONE_USDT(Symbol):
    """
        name: ONE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ONE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONE-USDT"

    def __str__(self):
        return "ONE-USDT"

    def __call__(self):
        return "ONE-USDT"


ONE_USDT = ONE_USDT(*ONE_USDT._fields)


class TOKO_BTC(Symbol):
    """
        name: TOKO-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TOKO-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOKO-BTC"

    def __str__(self):
        return "TOKO-BTC"

    def __call__(self):
        return "TOKO-BTC"


TOKO_BTC = TOKO_BTC(*TOKO_BTC._fields)


class TOKO_USDT(Symbol):
    """
        name: TOKO-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TOKO-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOKO-USDT"

    def __str__(self):
        return "TOKO-USDT"

    def __call__(self):
        return "TOKO-USDT"


TOKO_USDT = TOKO_USDT(*TOKO_USDT._fields)


class VID_BTC(Symbol):
    """
        name: VID-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VID-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VID-BTC"

    def __str__(self):
        return "VID-BTC"

    def __call__(self):
        return "VID-BTC"


VID_BTC = VID_BTC(*VID_BTC._fields)


class VID_USDT(Symbol):
    """
        name: VID-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VID-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VID-USDT"

    def __str__(self):
        return "VID-USDT"

    def __call__(self):
        return "VID-USDT"


VID_USDT = VID_USDT(*VID_USDT._fields)


class LUNA_USDT(Symbol):
    """
        name: LUNA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LUNA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNA-USDT"

    def __str__(self):
        return "LUNA-USDT"

    def __call__(self):
        return "LUNA-USDT"


LUNA_USDT = LUNA_USDT(*LUNA_USDT._fields)


class SXP_BTC(Symbol):
    """
        name: SXP-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SXP-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXP-BTC"

    def __str__(self):
        return "SXP-BTC"

    def __call__(self):
        return "SXP-BTC"


SXP_BTC = SXP_BTC(*SXP_BTC._fields)


class SXP_USDT(Symbol):
    """
        name: SXP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SXP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXP-USDT"

    def __str__(self):
        return "SXP-USDT"

    def __call__(self):
        return "SXP-USDT"


SXP_USDT = SXP_USDT(*SXP_USDT._fields)


class AKRO_BTC(Symbol):
    """
        name: AKRO-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AKRO-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKRO-BTC"

    def __str__(self):
        return "AKRO-BTC"

    def __call__(self):
        return "AKRO-BTC"


AKRO_BTC = AKRO_BTC(*AKRO_BTC._fields)


class AKRO_USDT(Symbol):
    """
        name: AKRO-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AKRO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKRO-USDT"

    def __str__(self):
        return "AKRO-USDT"

    def __call__(self):
        return "AKRO-USDT"


AKRO_USDT = AKRO_USDT(*AKRO_USDT._fields)


class ROOBEE_BTC(Symbol):
    """
        name: ROOBEE-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ROOBEE-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROOBEE-BTC"

    def __str__(self):
        return "ROOBEE-BTC"

    def __call__(self):
        return "ROOBEE-BTC"


ROOBEE_BTC = ROOBEE_BTC(*ROOBEE_BTC._fields)


class WIN_TRX(Symbol):
    """
        name: WIN-TRX
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 10
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WIN-TRX"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 10
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WIN-TRX"

    def __str__(self):
        return "WIN-TRX"

    def __call__(self):
        return "WIN-TRX"


WIN_TRX = WIN_TRX(*WIN_TRX._fields)


class MAP_BTC(Symbol):
    """
        name: MAP-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 20
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAP-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 20
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAP-BTC"

    def __str__(self):
        return "MAP-BTC"

    def __call__(self):
        return "MAP-BTC"


MAP_BTC = MAP_BTC(*MAP_BTC._fields)


class MAP_USDT(Symbol):
    """
        name: MAP-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 20
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAP-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 20
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAP-USDT"

    def __str__(self):
        return "MAP-USDT"

    def __call__(self):
        return "MAP-USDT"


MAP_USDT = MAP_USDT(*MAP_USDT._fields)


class AMPL_BTC(Symbol):
    """
        name: AMPL-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AMPL-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPL-BTC"

    def __str__(self):
        return "AMPL-BTC"

    def __call__(self):
        return "AMPL-BTC"


AMPL_BTC = AMPL_BTC(*AMPL_BTC._fields)


class AMPL_USDT(Symbol):
    """
        name: AMPL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AMPL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPL-USDT"

    def __str__(self):
        return "AMPL-USDT"

    def __call__(self):
        return "AMPL-USDT"


AMPL_USDT = AMPL_USDT(*AMPL_USDT._fields)


class DAG_USDT(Symbol):
    """
        name: DAG-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DAG-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAG-USDT"

    def __str__(self):
        return "DAG-USDT"

    def __call__(self):
        return "DAG-USDT"


DAG_USDT = DAG_USDT(*DAG_USDT._fields)


class POL_USDT(Symbol):
    """
        name: POL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POL-USDT"

    def __str__(self):
        return "POL-USDT"

    def __call__(self):
        return "POL-USDT"


POL_USDT = POL_USDT(*POL_USDT._fields)


class ARX_USDT(Symbol):
    """
        name: ARX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ARX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARX-USDT"

    def __str__(self):
        return "ARX-USDT"

    def __call__(self):
        return "ARX-USDT"


ARX_USDT = ARX_USDT(*ARX_USDT._fields)


class NWC_BTC(Symbol):
    """
        name: NWC-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NWC-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NWC-BTC"

    def __str__(self):
        return "NWC-BTC"

    def __call__(self):
        return "NWC-BTC"


NWC_BTC = NWC_BTC(*NWC_BTC._fields)


class NWC_USDT(Symbol):
    """
        name: NWC-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NWC-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NWC-USDT"

    def __str__(self):
        return "NWC-USDT"

    def __call__(self):
        return "NWC-USDT"


NWC_USDT = NWC_USDT(*NWC_USDT._fields)


class BEPRO_BTC(Symbol):
    """
        name: BEPRO-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BEPRO-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEPRO-BTC"

    def __str__(self):
        return "BEPRO-BTC"

    def __call__(self):
        return "BEPRO-BTC"


BEPRO_BTC = BEPRO_BTC(*BEPRO_BTC._fields)


class BEPRO_USDT(Symbol):
    """
        name: BEPRO-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BEPRO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEPRO-USDT"

    def __str__(self):
        return "BEPRO-USDT"

    def __call__(self):
        return "BEPRO-USDT"


BEPRO_USDT = BEPRO_USDT(*BEPRO_USDT._fields)


class VRA_BTC(Symbol):
    """
        name: VRA-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VRA-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VRA-BTC"

    def __str__(self):
        return "VRA-BTC"

    def __call__(self):
        return "VRA-BTC"


VRA_BTC = VRA_BTC(*VRA_BTC._fields)


class VRA_USDT(Symbol):
    """
        name: VRA-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "VRA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VRA-USDT"

    def __str__(self):
        return "VRA-USDT"

    def __call__(self):
        return "VRA-USDT"


VRA_USDT = VRA_USDT(*VRA_USDT._fields)


class KSM_BTC(Symbol):
    """
        name: KSM-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KSM-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSM-BTC"

    def __str__(self):
        return "KSM-BTC"

    def __call__(self):
        return "KSM-BTC"


KSM_BTC = KSM_BTC(*KSM_BTC._fields)


class KSM_USDT(Symbol):
    """
        name: KSM-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "KSM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSM-USDT"

    def __str__(self):
        return "KSM-USDT"

    def __call__(self):
        return "KSM-USDT"


KSM_USDT = KSM_USDT(*KSM_USDT._fields)


class DASH_USDT(Symbol):
    """
        name: DASH-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DASH-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASH-USDT"

    def __str__(self):
        return "DASH-USDT"

    def __call__(self):
        return "DASH-USDT"


DASH_USDT = DASH_USDT(*DASH_USDT._fields)


class SUTER_USDT(Symbol):
    """
        name: SUTER-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUTER-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUTER-USDT"

    def __str__(self):
        return "SUTER-USDT"

    def __call__(self):
        return "SUTER-USDT"


SUTER_USDT = SUTER_USDT(*SUTER_USDT._fields)


class ACOIN_USDT(Symbol):
    """
        name: ACOIN-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACOIN-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACOIN-USDT"

    def __str__(self):
        return "ACOIN-USDT"

    def __call__(self):
        return "ACOIN-USDT"


ACOIN_USDT = ACOIN_USDT(*ACOIN_USDT._fields)


class SUTER_BTC(Symbol):
    """
        name: SUTER-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUTER-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUTER-BTC"

    def __str__(self):
        return "SUTER-BTC"

    def __call__(self):
        return "SUTER-BTC"


SUTER_BTC = SUTER_BTC(*SUTER_BTC._fields)


class SENSO_USDT(Symbol):
    """
        name: SENSO-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SENSO-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SENSO-USDT"

    def __str__(self):
        return "SENSO-USDT"

    def __call__(self):
        return "SENSO-USDT"


SENSO_USDT = SENSO_USDT(*SENSO_USDT._fields)


class PRE_BTC(Symbol):
    """
        name: PRE-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PRE-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRE-BTC"

    def __str__(self):
        return "PRE-BTC"

    def __call__(self):
        return "PRE-BTC"


PRE_BTC = PRE_BTC(*PRE_BTC._fields)


class XDB_USDT(Symbol):
    """
        name: XDB-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XDB-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDB-USDT"

    def __str__(self):
        return "XDB-USDT"

    def __call__(self):
        return "XDB-USDT"


XDB_USDT = XDB_USDT(*XDB_USDT._fields)


class SYLO_USDT(Symbol):
    """
        name: SYLO-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SYLO-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYLO-USDT"

    def __str__(self):
        return "SYLO-USDT"

    def __call__(self):
        return "SYLO-USDT"


SYLO_USDT = SYLO_USDT(*SYLO_USDT._fields)


class WOM_USDT(Symbol):
    """
        name: WOM-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 20
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WOM-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 20
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOM-USDT"

    def __str__(self):
        return "WOM-USDT"

    def __call__(self):
        return "WOM-USDT"


WOM_USDT = WOM_USDT(*WOM_USDT._fields)


class SENSO_BTC(Symbol):
    """
        name: SENSO-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SENSO-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SENSO-BTC"

    def __str__(self):
        return "SENSO-BTC"

    def __call__(self):
        return "SENSO-BTC"


SENSO_BTC = SENSO_BTC(*SENSO_BTC._fields)


class DGB_USDT(Symbol):
    """
        name: DGB-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DGB-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGB-USDT"

    def __str__(self):
        return "DGB-USDT"

    def __call__(self):
        return "DGB-USDT"


DGB_USDT = DGB_USDT(*DGB_USDT._fields)


class LYXE_USDT(Symbol):
    """
        name: LYXE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LYXE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYXE-USDT"

    def __str__(self):
        return "LYXE-USDT"

    def __call__(self):
        return "LYXE-USDT"


LYXE_USDT = LYXE_USDT(*LYXE_USDT._fields)


class LYXE_ETH(Symbol):
    """
        name: LYXE-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LYXE-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYXE-ETH"

    def __str__(self):
        return "LYXE-ETH"

    def __call__(self):
        return "LYXE-ETH"


LYXE_ETH = LYXE_ETH(*LYXE_ETH._fields)


class XDB_BTC(Symbol):
    """
        name: XDB-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XDB-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDB-BTC"

    def __str__(self):
        return "XDB-BTC"

    def __call__(self):
        return "XDB-BTC"


XDB_BTC = XDB_BTC(*XDB_BTC._fields)


class STX_BTC(Symbol):
    """
        name: STX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STX-BTC"

    def __str__(self):
        return "STX-BTC"

    def __call__(self):
        return "STX-BTC"


STX_BTC = STX_BTC(*STX_BTC._fields)


class STX_USDT(Symbol):
    """
        name: STX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "STX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STX-USDT"

    def __str__(self):
        return "STX-USDT"

    def __call__(self):
        return "STX-USDT"


STX_USDT = STX_USDT(*STX_USDT._fields)


class COMP_USDT(Symbol):
    """
        name: COMP-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "COMP-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMP-USDT"

    def __str__(self):
        return "COMP-USDT"

    def __call__(self):
        return "COMP-USDT"


COMP_USDT = COMP_USDT(*COMP_USDT._fields)


class CRO_USDT(Symbol):
    """
        name: CRO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CRO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRO-USDT"

    def __str__(self):
        return "CRO-USDT"

    def __call__(self):
        return "CRO-USDT"


CRO_USDT = CRO_USDT(*CRO_USDT._fields)


class KAI_USDT(Symbol):
    """
        name: KAI-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KAI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAI-USDT"

    def __str__(self):
        return "KAI-USDT"

    def __call__(self):
        return "KAI-USDT"


KAI_USDT = KAI_USDT(*KAI_USDT._fields)


class KAI_BTC(Symbol):
    """
        name: KAI-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KAI-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAI-BTC"

    def __str__(self):
        return "KAI-BTC"

    def __call__(self):
        return "KAI-BTC"


KAI_BTC = KAI_BTC(*KAI_BTC._fields)


class WEST_BTC(Symbol):
    """
        name: WEST-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WEST-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WEST-BTC"

    def __str__(self):
        return "WEST-BTC"

    def __call__(self):
        return "WEST-BTC"


WEST_BTC = WEST_BTC(*WEST_BTC._fields)


class WEST_USDT(Symbol):
    """
        name: WEST-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WEST-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WEST-USDT"

    def __str__(self):
        return "WEST-USDT"

    def __call__(self):
        return "WEST-USDT"


WEST_USDT = WEST_USDT(*WEST_USDT._fields)


class EWT_BTC(Symbol):
    """
        name: EWT-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EWT-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EWT-BTC"

    def __str__(self):
        return "EWT-BTC"

    def __call__(self):
        return "EWT-BTC"


EWT_BTC = EWT_BTC(*EWT_BTC._fields)


class WAVES_USDT(Symbol):
    """
        name: WAVES-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "WAVES-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVES-USDT"

    def __str__(self):
        return "WAVES-USDT"

    def __call__(self):
        return "WAVES-USDT"


WAVES_USDT = WAVES_USDT(*WAVES_USDT._fields)


class WAVES_BTC(Symbol):
    """
        name: WAVES-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WAVES-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVES-BTC"

    def __str__(self):
        return "WAVES-BTC"

    def __call__(self):
        return "WAVES-BTC"


WAVES_BTC = WAVES_BTC(*WAVES_BTC._fields)


class ORN_USDT(Symbol):
    """
        name: ORN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ORN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORN-USDT"

    def __str__(self):
        return "ORN-USDT"

    def __call__(self):
        return "ORN-USDT"


ORN_USDT = ORN_USDT(*ORN_USDT._fields)


class AMPL_ETH(Symbol):
    """
        name: AMPL-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AMPL-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPL-ETH"

    def __str__(self):
        return "AMPL-ETH"

    def __call__(self):
        return "AMPL-ETH"


AMPL_ETH = AMPL_ETH(*AMPL_ETH._fields)


class BNS_USDT(Symbol):
    """
        name: BNS-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BNS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNS-USDT"

    def __str__(self):
        return "BNS-USDT"

    def __call__(self):
        return "BNS-USDT"


BNS_USDT = BNS_USDT(*BNS_USDT._fields)


class BNS_BTC(Symbol):
    """
        name: BNS-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BNS-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNS-BTC"

    def __str__(self):
        return "BNS-BTC"

    def __call__(self):
        return "BNS-BTC"


BNS_BTC = BNS_BTC(*BNS_BTC._fields)


class MKR_USDT(Symbol):
    """
        name: MKR-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "MKR-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKR-USDT"

    def __str__(self):
        return "MKR-USDT"

    def __call__(self):
        return "MKR-USDT"


MKR_USDT = MKR_USDT(*MKR_USDT._fields)


class SUKU_BTC(Symbol):
    """
        name: SUKU-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUKU-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUKU-BTC"

    def __str__(self):
        return "SUKU-BTC"

    def __call__(self):
        return "SUKU-BTC"


SUKU_BTC = SUKU_BTC(*SUKU_BTC._fields)


class MLK_BTC(Symbol):
    """
        name: MLK-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MLK-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLK-BTC"

    def __str__(self):
        return "MLK-BTC"

    def __call__(self):
        return "MLK-BTC"


MLK_BTC = MLK_BTC(*MLK_BTC._fields)


class MLK_USDT(Symbol):
    """
        name: MLK-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MLK-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLK-USDT"

    def __str__(self):
        return "MLK-USDT"

    def __call__(self):
        return "MLK-USDT"


MLK_USDT = MLK_USDT(*MLK_USDT._fields)


class JST_USDT(Symbol):
    """
        name: JST-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "JST-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JST-USDT"

    def __str__(self):
        return "JST-USDT"

    def __call__(self):
        return "JST-USDT"


JST_USDT = JST_USDT(*JST_USDT._fields)


class KAI_ETH(Symbol):
    """
        name: KAI-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KAI-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAI-ETH"

    def __str__(self):
        return "KAI-ETH"

    def __call__(self):
        return "KAI-ETH"


KAI_ETH = KAI_ETH(*KAI_ETH._fields)


class SUKU_USDT(Symbol):
    """
        name: SUKU-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUKU-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUKU-USDT"

    def __str__(self):
        return "SUKU-USDT"

    def __call__(self):
        return "SUKU-USDT"


SUKU_USDT = SUKU_USDT(*SUKU_USDT._fields)


class DIA_USDT(Symbol):
    """
        name: DIA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DIA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIA-USDT"

    def __str__(self):
        return "DIA-USDT"

    def __call__(self):
        return "DIA-USDT"


DIA_USDT = DIA_USDT(*DIA_USDT._fields)


class DIA_BTC(Symbol):
    """
        name: DIA-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DIA-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIA-BTC"

    def __str__(self):
        return "DIA-BTC"

    def __call__(self):
        return "DIA-BTC"


DIA_BTC = DIA_BTC(*DIA_BTC._fields)


class LINK_BTC(Symbol):
    """
        name: LINK-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LINK-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK-BTC"

    def __str__(self):
        return "LINK-BTC"

    def __call__(self):
        return "LINK-BTC"


LINK_BTC = LINK_BTC(*LINK_BTC._fields)


class LINK_USDT(Symbol):
    """
        name: LINK-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LINK-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK-USDT"

    def __str__(self):
        return "LINK-USDT"

    def __call__(self):
        return "LINK-USDT"


LINK_USDT = LINK_USDT(*LINK_USDT._fields)


class DOT_USDT(Symbol):
    """
        name: DOT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DOT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT-USDT"

    def __str__(self):
        return "DOT-USDT"

    def __call__(self):
        return "DOT-USDT"


DOT_USDT = DOT_USDT(*DOT_USDT._fields)


class DOT_BTC(Symbol):
    """
        name: DOT-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOT-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT-BTC"

    def __str__(self):
        return "DOT-BTC"

    def __call__(self):
        return "DOT-BTC"


DOT_BTC = DOT_BTC(*DOT_BTC._fields)


class SHA_BTC(Symbol):
    """
        name: SHA-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 2000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHA-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 2000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHA-BTC"

    def __str__(self):
        return "SHA-BTC"

    def __call__(self):
        return "SHA-BTC"


SHA_BTC = SHA_BTC(*SHA_BTC._fields)


class SHA_USDT(Symbol):
    """
        name: SHA-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 2000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 2000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHA-USDT"

    def __str__(self):
        return "SHA-USDT"

    def __call__(self):
        return "SHA-USDT"


SHA_USDT = SHA_USDT(*SHA_USDT._fields)


class EWT_USDT(Symbol):
    """
        name: EWT-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EWT-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EWT-USDT"

    def __str__(self):
        return "EWT-USDT"

    def __call__(self):
        return "EWT-USDT"


EWT_USDT = EWT_USDT(*EWT_USDT._fields)


class USDJ_USDT(Symbol):
    """
        name: USDJ-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDJ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDJ-USDT"

    def __str__(self):
        return "USDJ-USDT"

    def __call__(self):
        return "USDJ-USDT"


USDJ_USDT = USDJ_USDT(*USDJ_USDT._fields)


class EFX_BTC(Symbol):
    """
        name: EFX-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EFX-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EFX-BTC"

    def __str__(self):
        return "EFX-BTC"

    def __call__(self):
        return "EFX-BTC"


EFX_BTC = EFX_BTC(*EFX_BTC._fields)


class CKB_BTC(Symbol):
    """
        name: CKB-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CKB-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKB-BTC"

    def __str__(self):
        return "CKB-BTC"

    def __call__(self):
        return "CKB-BTC"


CKB_BTC = CKB_BTC(*CKB_BTC._fields)


class CKB_USDT(Symbol):
    """
        name: CKB-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CKB-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKB-USDT"

    def __str__(self):
        return "CKB-USDT"

    def __call__(self):
        return "CKB-USDT"


CKB_USDT = CKB_USDT(*CKB_USDT._fields)


class UMA_USDT(Symbol):
    """
        name: UMA-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "UMA-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMA-USDT"

    def __str__(self):
        return "UMA-USDT"

    def __call__(self):
        return "UMA-USDT"


UMA_USDT = UMA_USDT(*UMA_USDT._fields)


class ALEPH_USDT(Symbol):
    """
        name: ALEPH-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALEPH-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALEPH-USDT"

    def __str__(self):
        return "ALEPH-USDT"

    def __call__(self):
        return "ALEPH-USDT"


ALEPH_USDT = ALEPH_USDT(*ALEPH_USDT._fields)


class VELO_USDT(Symbol):
    """
        name: VELO-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 5
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "VELO-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 5
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VELO-USDT"

    def __str__(self):
        return "VELO-USDT"

    def __call__(self):
        return "VELO-USDT"


VELO_USDT = VELO_USDT(*VELO_USDT._fields)


class SUN_USDT(Symbol):
    """
        name: SUN-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SUN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUN-USDT"

    def __str__(self):
        return "SUN-USDT"

    def __call__(self):
        return "SUN-USDT"


SUN_USDT = SUN_USDT(*SUN_USDT._fields)


class BUY_USDT(Symbol):
    """
        name: BUY-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BUY-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUY-USDT"

    def __str__(self):
        return "BUY-USDT"

    def __call__(self):
        return "BUY-USDT"


BUY_USDT = BUY_USDT(*BUY_USDT._fields)


class YFI_USDT(Symbol):
    """
        name: YFI-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.000001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "YFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.000001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFI-USDT"

    def __str__(self):
        return "YFI-USDT"

    def __call__(self):
        return "YFI-USDT"


YFI_USDT = YFI_USDT(*YFI_USDT._fields)


class OXEN_USDT(Symbol):
    """
        name: LOKI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOKI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKI-USDT"

    def __str__(self):
        return "LOKI-USDT"

    def __call__(self):
        return "LOKI-USDT"


OXEN_USDT = OXEN_USDT(*OXEN_USDT._fields)


class UNI_USDT(Symbol):
    """
        name: UNI-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "UNI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNI-USDT"

    def __str__(self):
        return "UNI-USDT"

    def __call__(self):
        return "UNI-USDT"


UNI_USDT = UNI_USDT(*UNI_USDT._fields)


class UOS_USDT(Symbol):
    """
        name: UOS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UOS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UOS-USDT"

    def __str__(self):
        return "UOS-USDT"

    def __call__(self):
        return "UOS-USDT"


UOS_USDT = UOS_USDT(*UOS_USDT._fields)


class UOS_BTC(Symbol):
    """
        name: UOS-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UOS-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UOS-BTC"

    def __str__(self):
        return "UOS-BTC"

    def __call__(self):
        return "UOS-BTC"


UOS_BTC = UOS_BTC(*UOS_BTC._fields)


class NIM_USDT(Symbol):
    """
        name: NIM-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NIM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NIM-USDT"

    def __str__(self):
        return "NIM-USDT"

    def __call__(self):
        return "NIM-USDT"


NIM_USDT = NIM_USDT(*NIM_USDT._fields)


class DEGO_USDT(Symbol):
    """
        name: DEGO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DEGO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGO-USDT"

    def __str__(self):
        return "DEGO-USDT"

    def __call__(self):
        return "DEGO-USDT"


DEGO_USDT = DEGO_USDT(*DEGO_USDT._fields)


class DEGO_ETH(Symbol):
    """
        name: DEGO-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DEGO-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGO-ETH"

    def __str__(self):
        return "DEGO-ETH"

    def __call__(self):
        return "DEGO-ETH"


DEGO_ETH = DEGO_ETH(*DEGO_ETH._fields)


class RFUEL_USDT(Symbol):
    """
        name: RFUEL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RFUEL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RFUEL-USDT"

    def __str__(self):
        return "RFUEL-USDT"

    def __call__(self):
        return "RFUEL-USDT"


RFUEL_USDT = RFUEL_USDT(*RFUEL_USDT._fields)


class FIL_USDT(Symbol):
    """
        name: FIL-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FIL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIL-USDT"

    def __str__(self):
        return "FIL-USDT"

    def __call__(self):
        return "FIL-USDT"


FIL_USDT = FIL_USDT(*FIL_USDT._fields)


class UBX_ETH(Symbol):
    """
        name: UBX-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UBX-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UBX-ETH"

    def __str__(self):
        return "UBX-ETH"

    def __call__(self):
        return "UBX-ETH"


UBX_ETH = UBX_ETH(*UBX_ETH._fields)


class REAP_USDT(Symbol):
    """
        name: REAP-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REAP-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REAP-USDT"

    def __str__(self):
        return "REAP-USDT"

    def __call__(self):
        return "REAP-USDT"


REAP_USDT = REAP_USDT(*REAP_USDT._fields)


class AAVE_USDT(Symbol):
    """
        name: AAVE-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "AAVE-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE-USDT"

    def __str__(self):
        return "AAVE-USDT"

    def __call__(self):
        return "AAVE-USDT"


AAVE_USDT = AAVE_USDT(*AAVE_USDT._fields)


class AAVE_BTC(Symbol):
    """
        name: AAVE-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AAVE-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE-BTC"

    def __str__(self):
        return "AAVE-BTC"

    def __call__(self):
        return "AAVE-BTC"


AAVE_BTC = AAVE_BTC(*AAVE_BTC._fields)


class TONE_BTC(Symbol):
    """
        name: TONE-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TONE-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TONE-BTC"

    def __str__(self):
        return "TONE-BTC"

    def __call__(self):
        return "TONE-BTC"


TONE_BTC = TONE_BTC(*TONE_BTC._fields)


class TONE_ETH(Symbol):
    """
        name: TONE-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TONE-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TONE-ETH"

    def __str__(self):
        return "TONE-ETH"

    def __call__(self):
        return "TONE-ETH"


TONE_ETH = TONE_ETH(*TONE_ETH._fields)


class ELF_ETH(Symbol):
    """
        name: ELF-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ELF-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELF-ETH"

    def __str__(self):
        return "ELF-ETH"

    def __call__(self):
        return "ELF-ETH"


ELF_ETH = ELF_ETH(*ELF_ETH._fields)


class AERGO_BTC(Symbol):
    """
        name: AERGO-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AERGO-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGO-BTC"

    def __str__(self):
        return "AERGO-BTC"

    def __call__(self):
        return "AERGO-BTC"


AERGO_BTC = AERGO_BTC(*AERGO_BTC._fields)


class IOST_ETH(Symbol):
    """
        name: IOST-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IOST-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOST-ETH"

    def __str__(self):
        return "IOST-ETH"

    def __call__(self):
        return "IOST-ETH"


IOST_ETH = IOST_ETH(*IOST_ETH._fields)


class KCS_USDT(Symbol):
    """
        name: KCS-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "KCS-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KCS-USDT"

    def __str__(self):
        return "KCS-USDT"

    def __call__(self):
        return "KCS-USDT"


KCS_USDT = KCS_USDT(*KCS_USDT._fields)


class SNX_ETH(Symbol):
    """
        name: SNX-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SNX-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNX-ETH"

    def __str__(self):
        return "SNX-ETH"

    def __call__(self):
        return "SNX-ETH"


SNX_ETH = SNX_ETH(*SNX_ETH._fields)


class KCS_ETH(Symbol):
    """
        name: KCS-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KCS-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KCS-ETH"

    def __str__(self):
        return "KCS-ETH"

    def __call__(self):
        return "KCS-ETH"


KCS_ETH = KCS_ETH(*KCS_ETH._fields)


class WAN_ETH(Symbol):
    """
        name: WAN-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WAN-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAN-ETH"

    def __str__(self):
        return "WAN-ETH"

    def __call__(self):
        return "WAN-ETH"


WAN_ETH = WAN_ETH(*WAN_ETH._fields)


class NULS_ETH(Symbol):
    """
        name: NULS-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NULS-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULS-ETH"

    def __str__(self):
        return "NULS-ETH"

    def __call__(self):
        return "NULS-ETH"


NULS_ETH = NULS_ETH(*NULS_ETH._fields)


class QTUM_BTC(Symbol):
    """
        name: QTUM-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QTUM-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUM-BTC"

    def __str__(self):
        return "QTUM-BTC"

    def __call__(self):
        return "QTUM-BTC"


QTUM_BTC = QTUM_BTC(*QTUM_BTC._fields)


class MANA_BTC(Symbol):
    """
        name: MANA-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MANA-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA-BTC"

    def __str__(self):
        return "MANA-BTC"

    def __call__(self):
        return "MANA-BTC"


MANA_BTC = MANA_BTC(*MANA_BTC._fields)


class TEL_BTC(Symbol):
    """
        name: TEL-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TEL-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TEL-BTC"

    def __str__(self):
        return "TEL-BTC"

    def __call__(self):
        return "TEL-BTC"


TEL_BTC = TEL_BTC(*TEL_BTC._fields)


class XYO_ETH(Symbol):
    """
        name: XYO-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XYO-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYO-ETH"

    def __str__(self):
        return "XYO-ETH"

    def __call__(self):
        return "XYO-ETH"


XYO_ETH = XYO_ETH(*XYO_ETH._fields)


class ETN_BTC(Symbol):
    """
        name: ETN-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETN-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETN-BTC"

    def __str__(self):
        return "ETN-BTC"

    def __call__(self):
        return "ETN-BTC"


ETN_BTC = ETN_BTC(*ETN_BTC._fields)


class COV_ETH(Symbol):
    """
        name: COV-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "COV-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COV-ETH"

    def __str__(self):
        return "COV-ETH"

    def __call__(self):
        return "COV-ETH"


COV_ETH = COV_ETH(*COV_ETH._fields)


class VET_BTC(Symbol):
    """
        name: VET-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "VET-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET-BTC"

    def __str__(self):
        return "VET-BTC"

    def __call__(self):
        return "VET-BTC"


VET_BTC = VET_BTC(*VET_BTC._fields)


class KCS_BTC(Symbol):
    """
        name: KCS-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KCS-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KCS-BTC"

    def __str__(self):
        return "KCS-BTC"

    def __call__(self):
        return "KCS-BTC"


KCS_BTC = KCS_BTC(*KCS_BTC._fields)


class CAPP_ETH(Symbol):
    """
        name: CAPP-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CAPP-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAPP-ETH"

    def __str__(self):
        return "CAPP-ETH"

    def __call__(self):
        return "CAPP-ETH"


CAPP_ETH = CAPP_ETH(*CAPP_ETH._fields)


class ONT_BTC(Symbol):
    """
        name: ONT-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ONT-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONT-BTC"

    def __str__(self):
        return "ONT-BTC"

    def __call__(self):
        return "ONT-BTC"


ONT_BTC = ONT_BTC(*ONT_BTC._fields)


class DAG_ETH(Symbol):
    """
        name: DAG-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DAG-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAG-ETH"

    def __str__(self):
        return "DAG-ETH"

    def __call__(self):
        return "DAG-ETH"


DAG_ETH = DAG_ETH(*DAG_ETH._fields)


class WAN_BTC(Symbol):
    """
        name: WAN-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WAN-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAN-BTC"

    def __str__(self):
        return "WAN-BTC"

    def __call__(self):
        return "WAN-BTC"


WAN_BTC = WAN_BTC(*WAN_BTC._fields)


class KNC_ETH(Symbol):
    """
        name: KNC-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KNC-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNC-ETH"

    def __str__(self):
        return "KNC-ETH"

    def __call__(self):
        return "KNC-ETH"


KNC_ETH = KNC_ETH(*KNC_ETH._fields)


class CRPT_ETH(Symbol):
    """
        name: CRPT-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CRPT-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRPT-ETH"

    def __str__(self):
        return "CRPT-ETH"

    def __call__(self):
        return "CRPT-ETH"


CRPT_ETH = CRPT_ETH(*CRPT_ETH._fields)


class LTC_USDT(Symbol):
    """
        name: LTC-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LTC-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-USDT"

    def __str__(self):
        return "LTC-USDT"

    def __call__(self):
        return "LTC-USDT"


LTC_USDT = LTC_USDT(*LTC_USDT._fields)


class BAX_ETH(Symbol):
    """
        name: BAX-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BAX-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAX-ETH"

    def __str__(self):
        return "BAX-ETH"

    def __call__(self):
        return "BAX-ETH"


BAX_ETH = BAX_ETH(*BAX_ETH._fields)


class BSV_USDT(Symbol):
    """
        name: BCHSV-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BCHSV-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-USDT"

    def __str__(self):
        return "BCHSV-USDT"

    def __call__(self):
        return "BCHSV-USDT"


BSV_USDT = BSV_USDT(*BSV_USDT._fields)


class DENT_ETH(Symbol):
    """
        name: DENT-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DENT-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENT-ETH"

    def __str__(self):
        return "DENT-ETH"

    def __call__(self):
        return "DENT-ETH"


DENT_ETH = DENT_ETH(*DENT_ETH._fields)


class LYM_ETH(Symbol):
    """
        name: LYM-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LYM-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYM-ETH"

    def __str__(self):
        return "LYM-ETH"

    def __call__(self):
        return "LYM-ETH"


LYM_ETH = LYM_ETH(*LYM_ETH._fields)


class TRAC_ETH(Symbol):
    """
        name: TRAC-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRAC-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRAC-ETH"

    def __str__(self):
        return "TRAC-ETH"

    def __call__(self):
        return "TRAC-ETH"


TRAC_ETH = TRAC_ETH(*TRAC_ETH._fields)


class ENJ_BTC(Symbol):
    """
        name: ENJ-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ENJ-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJ-BTC"

    def __str__(self):
        return "ENJ-BTC"

    def __call__(self):
        return "ENJ-BTC"


ENJ_BTC = ENJ_BTC(*ENJ_BTC._fields)


class WAXP_BTC(Symbol):
    """
        name: WAX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WAX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAX-BTC"

    def __str__(self):
        return "WAX-BTC"

    def __call__(self):
        return "WAX-BTC"


WAXP_BTC = WAXP_BTC(*WAXP_BTC._fields)


class DGB_BTC(Symbol):
    """
        name: DGB-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DGB-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGB-BTC"

    def __str__(self):
        return "DGB-BTC"

    def __call__(self):
        return "DGB-BTC"


DGB_BTC = DGB_BTC(*DGB_BTC._fields)


class ELA_BTC(Symbol):
    """
        name: ELA-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ELA-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELA-BTC"

    def __str__(self):
        return "ELA-BTC"

    def __call__(self):
        return "ELA-BTC"


ELA_BTC = ELA_BTC(*ELA_BTC._fields)


class ZIL_BTC(Symbol):
    """
        name: ZIL-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ZIL-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZIL-BTC"

    def __str__(self):
        return "ZIL-BTC"

    def __call__(self):
        return "ZIL-BTC"


ZIL_BTC = ZIL_BTC(*ZIL_BTC._fields)


class BSV_BTC(Symbol):
    """
        name: BCHSV-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BCHSV-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-BTC"

    def __str__(self):
        return "BCHSV-BTC"

    def __call__(self):
        return "BCHSV-BTC"


BSV_BTC = BSV_BTC(*BSV_BTC._fields)


class XLM_USDT(Symbol):
    """
        name: XLM-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XLM-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLM-USDT"

    def __str__(self):
        return "XLM-USDT"

    def __call__(self):
        return "XLM-USDT"


XLM_USDT = XLM_USDT(*XLM_USDT._fields)


class IOTX_ETH(Symbol):
    """
        name: IOTX-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IOTX-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTX-ETH"

    def __str__(self):
        return "IOTX-ETH"

    def __call__(self):
        return "IOTX-ETH"


IOTX_ETH = IOTX_ETH(*IOTX_ETH._fields)


class SOUL_BTC(Symbol):
    """
        name: SOUL-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SOUL-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOUL-BTC"

    def __str__(self):
        return "SOUL-BTC"

    def __call__(self):
        return "SOUL-BTC"


SOUL_BTC = SOUL_BTC(*SOUL_BTC._fields)


class DOCK_BTC(Symbol):
    """
        name: DOCK-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOCK-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCK-BTC"

    def __str__(self):
        return "DOCK-BTC"

    def __call__(self):
        return "DOCK-BTC"


DOCK_BTC = DOCK_BTC(*DOCK_BTC._fields)


class AMB_ETH(Symbol):
    """
        name: AMB-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AMB-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMB-ETH"

    def __str__(self):
        return "AMB-ETH"

    def __call__(self):
        return "AMB-ETH"


AMB_ETH = AMB_ETH(*AMB_ETH._fields)


class TRX_BTC(Symbol):
    """
        name: TRX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "TRX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-BTC"

    def __str__(self):
        return "TRX-BTC"

    def __call__(self):
        return "TRX-BTC"


TRX_BTC = TRX_BTC(*TRX_BTC._fields)


class XRP_TUSD(Symbol):
    """
        name: XRP-TUSD
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XRP-TUSD"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-TUSD"

    def __str__(self):
        return "XRP-TUSD"

    def __call__(self):
        return "XRP-TUSD"


XRP_TUSD = XRP_TUSD(*XRP_TUSD._fields)


class NULS_BTC(Symbol):
    """
        name: NULS-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NULS-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULS-BTC"

    def __str__(self):
        return "NULS-BTC"

    def __call__(self):
        return "NULS-BTC"


NULS_BTC = NULS_BTC(*NULS_BTC._fields)


class ETH_DAI(Symbol):
    """
        name: ETH-DAI
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETH-DAI"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-DAI"

    def __str__(self):
        return "ETH-DAI"

    def __call__(self):
        return "ETH-DAI"


ETH_DAI = ETH_DAI(*ETH_DAI._fields)


class LSK_BTC(Symbol):
    """
        name: LSK-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LSK-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSK-BTC"

    def __str__(self):
        return "LSK-BTC"

    def __call__(self):
        return "LSK-BTC"


LSK_BTC = LSK_BTC(*LSK_BTC._fields)


class GMB_ETH(Symbol):
    """
        name: GMB-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMB-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMB-ETH"

    def __str__(self):
        return "GMB-ETH"

    def __call__(self):
        return "GMB-ETH"


GMB_ETH = GMB_ETH(*GMB_ETH._fields)


class GMB_BTC(Symbol):
    """
        name: GMB-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMB-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMB-BTC"

    def __str__(self):
        return "GMB-BTC"

    def __call__(self):
        return "GMB-BTC"


GMB_BTC = GMB_BTC(*GMB_BTC._fields)


class NEO_ETH(Symbol):
    """
        name: NEO-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NEO-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEO-ETH"

    def __str__(self):
        return "NEO-ETH"

    def __call__(self):
        return "NEO-ETH"


NEO_ETH = NEO_ETH(*NEO_ETH._fields)


class OMG_ETH(Symbol):
    """
        name: OMG-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OMG-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMG-ETH"

    def __str__(self):
        return "OMG-ETH"

    def __call__(self):
        return "OMG-ETH"


OMG_ETH = OMG_ETH(*OMG_ETH._fields)


class BTC_TUSD(Symbol):
    """
        name: BTC-TUSD
        significant_digits: None
        tick_size: 0.1
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.00001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTC-TUSD"
    significant_digits: int = None
    tick_size: int = 0.1
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.00001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-TUSD"

    def __str__(self):
        return "BTC-TUSD"

    def __call__(self):
        return "BTC-TUSD"


BTC_TUSD = BTC_TUSD(*BTC_TUSD._fields)


class KAT_USDT(Symbol):
    """
        name: KAT-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KAT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAT-USDT"

    def __str__(self):
        return "KAT-USDT"

    def __call__(self):
        return "KAT-USDT"


KAT_USDT = KAT_USDT(*KAT_USDT._fields)


class KNC_BTC(Symbol):
    """
        name: KNC-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KNC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNC-BTC"

    def __str__(self):
        return "KNC-BTC"

    def __call__(self):
        return "KNC-BTC"


KNC_BTC = KNC_BTC(*KNC_BTC._fields)


class ELF_BTC(Symbol):
    """
        name: ELF-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ELF-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELF-BTC"

    def __str__(self):
        return "ELF-BTC"

    def __call__(self):
        return "ELF-BTC"


ELF_BTC = ELF_BTC(*ELF_BTC._fields)


class MANA_ETH(Symbol):
    """
        name: MANA-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MANA-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA-ETH"

    def __str__(self):
        return "MANA-ETH"

    def __call__(self):
        return "MANA-ETH"


MANA_ETH = MANA_ETH(*MANA_ETH._fields)


class ETC_USDT(Symbol):
    """
        name: ETC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ETC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETC-USDT"

    def __str__(self):
        return "ETC-USDT"

    def __call__(self):
        return "ETC-USDT"


ETC_USDT = ETC_USDT(*ETC_USDT._fields)


class ONT_ETH(Symbol):
    """
        name: ONT-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ONT-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONT-ETH"

    def __str__(self):
        return "ONT-ETH"

    def __call__(self):
        return "ONT-ETH"


ONT_ETH = ONT_ETH(*ONT_ETH._fields)


class MKR_BTC(Symbol):
    """
        name: MKR-BTC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MKR-BTC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKR-BTC"

    def __str__(self):
        return "MKR-BTC"

    def __call__(self):
        return "MKR-BTC"


MKR_BTC = MKR_BTC(*MKR_BTC._fields)


class KAT_BTC(Symbol):
    """
        name: KAT-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KAT-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAT-BTC"

    def __str__(self):
        return "KAT-BTC"

    def __call__(self):
        return "KAT-BTC"


KAT_BTC = KAT_BTC(*KAT_BTC._fields)


class XRP_USDC(Symbol):
    """
        name: XRP-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XRP-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-USDC"

    def __str__(self):
        return "XRP-USDC"

    def __call__(self):
        return "XRP-USDC"


XRP_USDC = XRP_USDC(*XRP_USDC._fields)


class XYO_BTC(Symbol):
    """
        name: XYO-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XYO-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYO-BTC"

    def __str__(self):
        return "XYO-BTC"

    def __call__(self):
        return "XYO-BTC"


XYO_BTC = XYO_BTC(*XYO_BTC._fields)


class ZRX_BTC(Symbol):
    """
        name: ZRX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZRX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRX-BTC"

    def __str__(self):
        return "ZRX-BTC"

    def __call__(self):
        return "ZRX-BTC"


ZRX_BTC = ZRX_BTC(*ZRX_BTC._fields)


class LOOM_ETH(Symbol):
    """
        name: LOOM-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOOM-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOM-ETH"

    def __str__(self):
        return "LOOM-ETH"

    def __call__(self):
        return "LOOM-ETH"


LOOM_ETH = LOOM_ETH(*LOOM_ETH._fields)


class OLT_ETH(Symbol):
    """
        name: OLT-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OLT-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OLT-ETH"

    def __str__(self):
        return "OLT-ETH"

    def __call__(self):
        return "OLT-ETH"


OLT_ETH = OLT_ETH(*OLT_ETH._fields)


class OLT_BTC(Symbol):
    """
        name: OLT-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OLT-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OLT-BTC"

    def __str__(self):
        return "OLT-BTC"

    def __call__(self):
        return "OLT-BTC"


OLT_BTC = OLT_BTC(*OLT_BTC._fields)


class TRAC_BTC(Symbol):
    """
        name: TRAC-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRAC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRAC-BTC"

    def __str__(self):
        return "TRAC-BTC"

    def __call__(self):
        return "TRAC-BTC"


TRAC_BTC = TRAC_BTC(*TRAC_BTC._fields)


class XLM_ETH(Symbol):
    """
        name: XLM-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XLM-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLM-ETH"

    def __str__(self):
        return "XLM-ETH"

    def __call__(self):
        return "XLM-ETH"


XLM_ETH = XLM_ETH(*XLM_ETH._fields)


class ETH_USDT(Symbol):
    """
        name: ETH-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ETH-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-USDT"

    def __str__(self):
        return "ETH-USDT"

    def __call__(self):
        return "ETH-USDT"


ETH_USDT = ETH_USDT(*ETH_USDT._fields)


class BSV_ETH(Symbol):
    """
        name: BCHSV-ETH
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BCHSV-ETH"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-ETH"

    def __str__(self):
        return "BCHSV-ETH"

    def __call__(self):
        return "BCHSV-ETH"


BSV_ETH = BSV_ETH(*BSV_ETH._fields)


class TRX_ETH(Symbol):
    """
        name: TRX-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "TRX-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-ETH"

    def __str__(self):
        return "TRX-ETH"

    def __call__(self):
        return "TRX-ETH"


TRX_ETH = TRX_ETH(*TRX_ETH._fields)


class ETN_ETH(Symbol):
    """
        name: ETN-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETN-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETN-ETH"

    def __str__(self):
        return "ETN-ETH"

    def __call__(self):
        return "ETN-ETH"


ETN_ETH = ETN_ETH(*ETN_ETH._fields)


class AOA_USDT(Symbol):
    """
        name: AOA-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AOA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AOA-USDT"

    def __str__(self):
        return "AOA-USDT"

    def __call__(self):
        return "AOA-USDT"


AOA_USDT = AOA_USDT(*AOA_USDT._fields)


class DENT_BTC(Symbol):
    """
        name: DENT-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DENT-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENT-BTC"

    def __str__(self):
        return "DENT-BTC"

    def __call__(self):
        return "DENT-BTC"


DENT_BTC = DENT_BTC(*DENT_BTC._fields)


class DOCK_ETH(Symbol):
    """
        name: DOCK-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOCK-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCK-ETH"

    def __str__(self):
        return "DOCK-ETH"

    def __call__(self):
        return "DOCK-ETH"


DOCK_ETH = DOCK_ETH(*DOCK_ETH._fields)


class KEY_BTC(Symbol):
    """
        name: KEY-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KEY-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEY-BTC"

    def __str__(self):
        return "KEY-BTC"

    def __call__(self):
        return "KEY-BTC"


KEY_BTC = KEY_BTC(*KEY_BTC._fields)


class EOS_KCS(Symbol):
    """
        name: EOS-KCS
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EOS-KCS"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-KCS"

    def __str__(self):
        return "EOS-KCS"

    def __call__(self):
        return "EOS-KCS"


EOS_KCS = EOS_KCS(*EOS_KCS._fields)


class XLM_BTC(Symbol):
    """
        name: XLM-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XLM-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLM-BTC"

    def __str__(self):
        return "XLM-BTC"

    def __call__(self):
        return "XLM-BTC"


XLM_BTC = XLM_BTC(*XLM_BTC._fields)


class TIME_ETH(Symbol):
    """
        name: TIME-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TIME-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TIME-ETH"

    def __str__(self):
        return "TIME-ETH"

    def __call__(self):
        return "TIME-ETH"


TIME_ETH = TIME_ETH(*TIME_ETH._fields)


class CVC_BTC(Symbol):
    """
        name: CVC-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CVC-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVC-BTC"

    def __str__(self):
        return "CVC-BTC"

    def __call__(self):
        return "CVC-BTC"


CVC_BTC = CVC_BTC(*CVC_BTC._fields)


class LSK_ETH(Symbol):
    """
        name: LSK-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LSK-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSK-ETH"

    def __str__(self):
        return "LSK-ETH"

    def __call__(self):
        return "LSK-ETH"


LSK_ETH = LSK_ETH(*LSK_ETH._fields)


class QKC_BTC(Symbol):
    """
        name: QKC-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QKC-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKC-BTC"

    def __str__(self):
        return "QKC-BTC"

    def __call__(self):
        return "QKC-BTC"


QKC_BTC = QKC_BTC(*QKC_BTC._fields)


class AMB_BTC(Symbol):
    """
        name: AMB-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AMB-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMB-BTC"

    def __str__(self):
        return "AMB-BTC"

    def __call__(self):
        return "AMB-BTC"


AMB_BTC = AMB_BTC(*AMB_BTC._fields)


class USDT_TUSD(Symbol):
    """
        name: USDT-TUSD
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDT-TUSD"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-TUSD"

    def __str__(self):
        return "USDT-TUSD"

    def __call__(self):
        return "USDT-TUSD"


USDT_TUSD = USDT_TUSD(*USDT_TUSD._fields)


class ETC_ETH(Symbol):
    """
        name: ETC-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETC-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETC-ETH"

    def __str__(self):
        return "ETC-ETH"

    def __call__(self):
        return "ETC-ETH"


ETC_ETH = ETC_ETH(*ETC_ETH._fields)


class XRP_BTC(Symbol):
    """
        name: XRP-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XRP-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-BTC"

    def __str__(self):
        return "XRP-BTC"

    def __call__(self):
        return "XRP-BTC"


XRP_BTC = XRP_BTC(*XRP_BTC._fields)


class NEO_KCS(Symbol):
    """
        name: NEO-KCS
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NEO-KCS"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEO-KCS"

    def __str__(self):
        return "NEO-KCS"

    def __call__(self):
        return "NEO-KCS"


NEO_KCS = NEO_KCS(*NEO_KCS._fields)


class SNX_USDT(Symbol):
    """
        name: SNX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SNX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNX-USDT"

    def __str__(self):
        return "SNX-USDT"

    def __call__(self):
        return "SNX-USDT"


SNX_USDT = SNX_USDT(*SNX_USDT._fields)


class CRPT_BTC(Symbol):
    """
        name: CRPT-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CRPT-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRPT-BTC"

    def __str__(self):
        return "CRPT-BTC"

    def __call__(self):
        return "CRPT-BTC"


CRPT_BTC = CRPT_BTC(*CRPT_BTC._fields)


class IOTX_BTC(Symbol):
    """
        name: IOTX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IOTX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTX-BTC"

    def __str__(self):
        return "IOTX-BTC"

    def __call__(self):
        return "IOTX-BTC"


IOTX_BTC = IOTX_BTC(*IOTX_BTC._fields)


class LTC_ETH(Symbol):
    """
        name: LTC-ETH
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LTC-ETH"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-ETH"

    def __str__(self):
        return "LTC-ETH"

    def __call__(self):
        return "LTC-ETH"


LTC_ETH = LTC_ETH(*LTC_ETH._fields)


class XRP_KCS(Symbol):
    """
        name: XRP-KCS
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XRP-KCS"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-KCS"

    def __str__(self):
        return "XRP-KCS"

    def __call__(self):
        return "XRP-KCS"


XRP_KCS = XRP_KCS(*XRP_KCS._fields)


class LTC_KCS(Symbol):
    """
        name: LTC-KCS
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LTC-KCS"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-KCS"

    def __str__(self):
        return "LTC-KCS"

    def __call__(self):
        return "LTC-KCS"


LTC_KCS = LTC_KCS(*LTC_KCS._fields)


class TEL_ETH(Symbol):
    """
        name: TEL-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TEL-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TEL-ETH"

    def __str__(self):
        return "TEL-ETH"

    def __call__(self):
        return "TEL-ETH"


TEL_ETH = TEL_ETH(*TEL_ETH._fields)


class DCR_ETH(Symbol):
    """
        name: DCR-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DCR-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCR-ETH"

    def __str__(self):
        return "DCR-ETH"

    def __call__(self):
        return "DCR-ETH"


DCR_ETH = DCR_ETH(*DCR_ETH._fields)


class LYM_USDT(Symbol):
    """
        name: LYM-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LYM-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYM-USDT"

    def __str__(self):
        return "LYM-USDT"

    def __call__(self):
        return "LYM-USDT"


LYM_USDT = LYM_USDT(*LYM_USDT._fields)


class USDT_USDC(Symbol):
    """
        name: USDT-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDT-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-USDC"

    def __str__(self):
        return "USDT-USDC"

    def __call__(self):
        return "USDT-USDC"


USDT_USDC = USDT_USDC(*USDT_USDC._fields)


class ETH_USDC(Symbol):
    """
        name: ETH-USDC
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ETH-USDC"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-USDC"

    def __str__(self):
        return "ETH-USDC"

    def __call__(self):
        return "ETH-USDC"


ETH_USDC = ETH_USDC(*ETH_USDC._fields)


class DAG_BTC(Symbol):
    """
        name: DAG-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DAG-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAG-BTC"

    def __str__(self):
        return "DAG-BTC"

    def __call__(self):
        return "DAG-BTC"


DAG_BTC = DAG_BTC(*DAG_BTC._fields)


class AVA_BTC(Symbol):
    """
        name: AVA-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AVA-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVA-BTC"

    def __str__(self):
        return "AVA-BTC"

    def __call__(self):
        return "AVA-BTC"


AVA_BTC = AVA_BTC(*AVA_BTC._fields)


class BTC_USDT(Symbol):
    """
        name: BTC-USDT
        significant_digits: None
        tick_size: 0.1
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.00001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BTC-USDT"
    significant_digits: int = None
    tick_size: int = 0.1
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.00001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-USDT"

    def __str__(self):
        return "BTC-USDT"

    def __call__(self):
        return "BTC-USDT"


BTC_USDT = BTC_USDT(*BTC_USDT._fields)


class WAXP_ETH(Symbol):
    """
        name: WAX-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WAX-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAX-ETH"

    def __str__(self):
        return "WAX-ETH"

    def __call__(self):
        return "WAX-ETH"


WAXP_ETH = WAXP_ETH(*WAXP_ETH._fields)


class XRP_USDT(Symbol):
    """
        name: XRP-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XRP-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-USDT"

    def __str__(self):
        return "XRP-USDT"

    def __call__(self):
        return "XRP-USDT"


XRP_USDT = XRP_USDT(*XRP_USDT._fields)


class KEY_ETH(Symbol):
    """
        name: KEY-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KEY-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEY-ETH"

    def __str__(self):
        return "KEY-ETH"

    def __call__(self):
        return "KEY-ETH"


KEY_ETH = KEY_ETH(*KEY_ETH._fields)


class VET_ETH(Symbol):
    """
        name: VET-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VET-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET-ETH"

    def __str__(self):
        return "VET-ETH"

    def __call__(self):
        return "VET-ETH"


VET_ETH = VET_ETH(*VET_ETH._fields)


class FTM_BTC(Symbol):
    """
        name: FTM-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FTM-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM-BTC"

    def __str__(self):
        return "FTM-BTC"

    def __call__(self):
        return "FTM-BTC"


FTM_BTC = FTM_BTC(*FTM_BTC._fields)


class USDT_DAI(Symbol):
    """
        name: USDT-DAI
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDT-DAI"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-DAI"

    def __str__(self):
        return "USDT-DAI"

    def __call__(self):
        return "USDT-DAI"


USDT_DAI = USDT_DAI(*USDT_DAI._fields)


class QKC_ETH(Symbol):
    """
        name: QKC-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QKC-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKC-ETH"

    def __str__(self):
        return "QKC-ETH"

    def __call__(self):
        return "QKC-ETH"


QKC_ETH = QKC_ETH(*QKC_ETH._fields)


class ETH_BTC(Symbol):
    """
        name: ETH-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ETH-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-BTC"

    def __str__(self):
        return "ETH-BTC"

    def __call__(self):
        return "ETH-BTC"


ETH_BTC = ETH_BTC(*ETH_BTC._fields)


class MAN_BTC(Symbol):
    """
        name: MAN-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAN-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAN-BTC"

    def __str__(self):
        return "MAN-BTC"

    def __call__(self):
        return "MAN-BTC"


MAN_BTC = MAN_BTC(*MAN_BTC._fields)


class CPC_ETH(Symbol):
    """
        name: CPC-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 120
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CPC-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 120
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CPC-ETH"

    def __str__(self):
        return "CPC-ETH"

    def __call__(self):
        return "CPC-ETH"


CPC_ETH = CPC_ETH(*CPC_ETH._fields)


class TRX_USDT(Symbol):
    """
        name: TRX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "TRX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-USDT"

    def __str__(self):
        return "TRX-USDT"

    def __call__(self):
        return "TRX-USDT"


TRX_USDT = TRX_USDT(*TRX_USDT._fields)


class BTC_DAI(Symbol):
    """
        name: BTC-DAI
        significant_digits: None
        tick_size: 0.1
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.00001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTC-DAI"
    significant_digits: int = None
    tick_size: int = 0.1
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.00001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-DAI"

    def __str__(self):
        return "BTC-DAI"

    def __call__(self):
        return "BTC-DAI"


BTC_DAI = BTC_DAI(*BTC_DAI._fields)


class ONT_USDT(Symbol):
    """
        name: ONT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ONT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONT-USDT"

    def __str__(self):
        return "ONT-USDT"

    def __call__(self):
        return "ONT-USDT"


ONT_USDT = ONT_USDT(*ONT_USDT._fields)


class DASH_ETH(Symbol):
    """
        name: DASH-ETH
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DASH-ETH"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASH-ETH"

    def __str__(self):
        return "DASH-ETH"

    def __call__(self):
        return "DASH-ETH"


DASH_ETH = DASH_ETH(*DASH_ETH._fields)


class BAX_BTC(Symbol):
    """
        name: BAX-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BAX-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAX-BTC"

    def __str__(self):
        return "BAX-BTC"

    def __call__(self):
        return "BAX-BTC"


BAX_BTC = BAX_BTC(*BAX_BTC._fields)


class AVA_ETH(Symbol):
    """
        name: AVA-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AVA-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVA-ETH"

    def __str__(self):
        return "AVA-ETH"

    def __call__(self):
        return "AVA-ETH"


AVA_ETH = AVA_ETH(*AVA_ETH._fields)


class LOOM_BTC(Symbol):
    """
        name: LOOM-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOOM-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOM-BTC"

    def __str__(self):
        return "LOOM-BTC"

    def __call__(self):
        return "LOOM-BTC"


LOOM_BTC = LOOM_BTC(*LOOM_BTC._fields)


class MKR_ETH(Symbol):
    """
        name: MKR-ETH
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MKR-ETH"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKR-ETH"

    def __str__(self):
        return "MKR-ETH"

    def __call__(self):
        return "MKR-ETH"


MKR_ETH = MKR_ETH(*MKR_ETH._fields)


class COV_BTC(Symbol):
    """
        name: COV-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "COV-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COV-BTC"

    def __str__(self):
        return "COV-BTC"

    def __call__(self):
        return "COV-BTC"


COV_BTC = COV_BTC(*COV_BTC._fields)


class CPC_BTC(Symbol):
    """
        name: CPC-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 120
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CPC-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 120
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CPC-BTC"

    def __str__(self):
        return "CPC-BTC"

    def __call__(self):
        return "CPC-BTC"


CPC_BTC = CPC_BTC(*CPC_BTC._fields)


class REQ_ETH(Symbol):
    """
        name: REQ-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REQ-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQ-ETH"

    def __str__(self):
        return "REQ-ETH"

    def __call__(self):
        return "REQ-ETH"


REQ_ETH = REQ_ETH(*REQ_ETH._fields)


class EOS_BTC(Symbol):
    """
        name: EOS-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "EOS-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-BTC"

    def __str__(self):
        return "EOS-BTC"

    def __call__(self):
        return "EOS-BTC"


EOS_BTC = EOS_BTC(*EOS_BTC._fields)


class LTC_BTC(Symbol):
    """
        name: LTC-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LTC-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-BTC"

    def __str__(self):
        return "LTC-BTC"

    def __call__(self):
        return "LTC-BTC"


LTC_BTC = LTC_BTC(*LTC_BTC._fields)


class XRP_ETH(Symbol):
    """
        name: XRP-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XRP-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-ETH"

    def __str__(self):
        return "XRP-ETH"

    def __call__(self):
        return "XRP-ETH"


XRP_ETH = XRP_ETH(*XRP_ETH._fields)


class CAPP_BTC(Symbol):
    """
        name: CAPP-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CAPP-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAPP-BTC"

    def __str__(self):
        return "CAPP-BTC"

    def __call__(self):
        return "CAPP-BTC"


CAPP_BTC = CAPP_BTC(*CAPP_BTC._fields)


class FTM_ETH(Symbol):
    """
        name: FTM-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FTM-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM-ETH"

    def __str__(self):
        return "FTM-ETH"

    def __call__(self):
        return "FTM-ETH"


FTM_ETH = FTM_ETH(*FTM_ETH._fields)


class ZRX_ETH(Symbol):
    """
        name: ZRX-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZRX-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRX-ETH"

    def __str__(self):
        return "ZRX-ETH"

    def __call__(self):
        return "ZRX-ETH"


ZRX_ETH = ZRX_ETH(*ZRX_ETH._fields)


class DGB_ETH(Symbol):
    """
        name: DGB-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DGB-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGB-ETH"

    def __str__(self):
        return "DGB-ETH"

    def __call__(self):
        return "DGB-ETH"


DGB_ETH = DGB_ETH(*DGB_ETH._fields)


class VET_USDT(Symbol):
    """
        name: VET-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "VET-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET-USDT"

    def __str__(self):
        return "VET-USDT"

    def __call__(self):
        return "VET-USDT"


VET_USDT = VET_USDT(*VET_USDT._fields)


class REQ_BTC(Symbol):
    """
        name: REQ-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REQ-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQ-BTC"

    def __str__(self):
        return "REQ-BTC"

    def __call__(self):
        return "REQ-BTC"


REQ_BTC = REQ_BTC(*REQ_BTC._fields)


class UTK_BTC(Symbol):
    """
        name: UTK-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UTK-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTK-BTC"

    def __str__(self):
        return "UTK-BTC"

    def __call__(self):
        return "UTK-BTC"


UTK_BTC = UTK_BTC(*UTK_BTC._fields)


class PLAY_BTC(Symbol):
    """
        name: PLAY-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PLAY-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLAY-BTC"

    def __str__(self):
        return "PLAY-BTC"

    def __call__(self):
        return "PLAY-BTC"


PLAY_BTC = PLAY_BTC(*PLAY_BTC._fields)


class UTK_ETH(Symbol):
    """
        name: UTK-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UTK-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTK-ETH"

    def __str__(self):
        return "UTK-ETH"

    def __call__(self):
        return "UTK-ETH"


UTK_ETH = UTK_ETH(*UTK_ETH._fields)


class SNX_BTC(Symbol):
    """
        name: SNX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SNX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNX-BTC"

    def __str__(self):
        return "SNX-BTC"

    def __call__(self):
        return "SNX-BTC"


SNX_BTC = SNX_BTC(*SNX_BTC._fields)


class NEO_BTC(Symbol):
    """
        name: NEO-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 100000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NEO-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 100000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEO-BTC"

    def __str__(self):
        return "NEO-BTC"

    def __call__(self):
        return "NEO-BTC"


NEO_BTC = NEO_BTC(*NEO_BTC._fields)


class SOUL_ETH(Symbol):
    """
        name: SOUL-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SOUL-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOUL-ETH"

    def __str__(self):
        return "SOUL-ETH"

    def __call__(self):
        return "SOUL-ETH"


SOUL_ETH = SOUL_ETH(*SOUL_ETH._fields)


class NEO_USDT(Symbol):
    """
        name: NEO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "NEO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEO-USDT"

    def __str__(self):
        return "NEO-USDT"

    def __call__(self):
        return "NEO-USDT"


NEO_USDT = NEO_USDT(*NEO_USDT._fields)


class ELA_ETH(Symbol):
    """
        name: ELA-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ELA-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELA-ETH"

    def __str__(self):
        return "ELA-ETH"

    def __call__(self):
        return "ELA-ETH"


ELA_ETH = ELA_ETH(*ELA_ETH._fields)


class OMG_BTC(Symbol):
    """
        name: OMG-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "OMG-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMG-BTC"

    def __str__(self):
        return "OMG-BTC"

    def __call__(self):
        return "OMG-BTC"


OMG_BTC = OMG_BTC(*OMG_BTC._fields)


class TIME_BTC(Symbol):
    """
        name: TIME-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TIME-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TIME-BTC"

    def __str__(self):
        return "TIME-BTC"

    def __call__(self):
        return "TIME-BTC"


TIME_BTC = TIME_BTC(*TIME_BTC._fields)


class AOA_BTC(Symbol):
    """
        name: AOA-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AOA-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AOA-BTC"

    def __str__(self):
        return "AOA-BTC"

    def __call__(self):
        return "AOA-BTC"


AOA_BTC = AOA_BTC(*AOA_BTC._fields)


class ETC_BTC(Symbol):
    """
        name: ETC-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETC-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETC-BTC"

    def __str__(self):
        return "ETC-BTC"

    def __call__(self):
        return "ETC-BTC"


ETC_BTC = ETC_BTC(*ETC_BTC._fields)


class DCR_BTC(Symbol):
    """
        name: DCR-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DCR-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCR-BTC"

    def __str__(self):
        return "DCR-BTC"

    def __call__(self):
        return "DCR-BTC"


DCR_BTC = DCR_BTC(*DCR_BTC._fields)


class BTC_USDC(Symbol):
    """
        name: BTC-USDC
        significant_digits: None
        tick_size: 0.1
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.00001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BTC-USDC"
    significant_digits: int = None
    tick_size: int = 0.1
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.00001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-USDC"

    def __str__(self):
        return "BTC-USDC"

    def __call__(self):
        return "BTC-USDC"


BTC_USDC = BTC_USDC(*BTC_USDC._fields)


class ENJ_ETH(Symbol):
    """
        name: ENJ-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ENJ-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJ-ETH"

    def __str__(self):
        return "ENJ-ETH"

    def __call__(self):
        return "ENJ-ETH"


ENJ_ETH = ENJ_ETH(*ENJ_ETH._fields)


class IOST_BTC(Symbol):
    """
        name: IOST-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "IOST-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOST-BTC"

    def __str__(self):
        return "IOST-BTC"

    def __call__(self):
        return "IOST-BTC"


IOST_BTC = IOST_BTC(*IOST_BTC._fields)


class DASH_BTC(Symbol):
    """
        name: DASH-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DASH-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASH-BTC"

    def __str__(self):
        return "DASH-BTC"

    def __call__(self):
        return "DASH-BTC"


DASH_BTC = DASH_BTC(*DASH_BTC._fields)


class EOS_USDT(Symbol):
    """
        name: EOS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "EOS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-USDT"

    def __str__(self):
        return "EOS-USDT"

    def __call__(self):
        return "EOS-USDT"


EOS_USDT = EOS_USDT(*EOS_USDT._fields)


class EOS_ETH(Symbol):
    """
        name: EOS-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "EOS-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-ETH"

    def __str__(self):
        return "EOS-ETH"

    def __call__(self):
        return "EOS-ETH"


EOS_ETH = EOS_ETH(*EOS_ETH._fields)


class ZIL_ETH(Symbol):
    """
        name: ZIL-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZIL-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZIL-ETH"

    def __str__(self):
        return "ZIL-ETH"

    def __call__(self):
        return "ZIL-ETH"


ZIL_ETH = ZIL_ETH(*ZIL_ETH._fields)


class ETH_TUSD(Symbol):
    """
        name: ETH-TUSD
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETH-TUSD"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-TUSD"

    def __str__(self):
        return "ETH-TUSD"

    def __call__(self):
        return "ETH-TUSD"


ETH_TUSD = ETH_TUSD(*ETH_TUSD._fields)


class GAS_BTC(Symbol):
    """
        name: GAS-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GAS-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GAS-BTC"

    def __str__(self):
        return "GAS-BTC"

    def __call__(self):
        return "GAS-BTC"


GAS_BTC = GAS_BTC(*GAS_BTC._fields)


class LYM_BTC(Symbol):
    """
        name: LYM-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LYM-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYM-BTC"

    def __str__(self):
        return "LYM-BTC"

    def __call__(self):
        return "LYM-BTC"


LYM_BTC = LYM_BTC(*LYM_BTC._fields)


class BCH_BTC(Symbol):
    """
        name: BCH-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BCH-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH-BTC"

    def __str__(self):
        return "BCH-BTC"

    def __call__(self):
        return "BCH-BTC"


BCH_BTC = BCH_BTC(*BCH_BTC._fields)


class VSYS_BTC(Symbol):
    """
        name: VSYS-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VSYS-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VSYS-BTC"

    def __str__(self):
        return "VSYS-BTC"

    def __call__(self):
        return "VSYS-BTC"


VSYS_BTC = VSYS_BTC(*VSYS_BTC._fields)


class BCH_USDT(Symbol):
    """
        name: BCH-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BCH-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH-USDT"

    def __str__(self):
        return "BCH-USDT"

    def __call__(self):
        return "BCH-USDT"


BCH_USDT = BCH_USDT(*BCH_USDT._fields)


class MKR_DAI(Symbol):
    """
        name: MKR-DAI
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MKR-DAI"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKR-DAI"

    def __str__(self):
        return "MKR-DAI"

    def __call__(self):
        return "MKR-DAI"


MKR_DAI = MKR_DAI(*MKR_DAI._fields)


class SOLVE_BTC(Symbol):
    """
        name: SOLVE-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SOLVE-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLVE-BTC"

    def __str__(self):
        return "SOLVE-BTC"

    def __call__(self):
        return "SOLVE-BTC"


SOLVE_BTC = SOLVE_BTC(*SOLVE_BTC._fields)


class UQC_BTC(Symbol):
    """
        name: UQC-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UQC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UQC-BTC"

    def __str__(self):
        return "UQC-BTC"

    def __call__(self):
        return "UQC-BTC"


UQC_BTC = UQC_BTC(*UQC_BTC._fields)


class UQC_ETH(Symbol):
    """
        name: UQC-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UQC-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UQC-ETH"

    def __str__(self):
        return "UQC-ETH"

    def __call__(self):
        return "UQC-ETH"


UQC_ETH = UQC_ETH(*UQC_ETH._fields)


class OPCT_BTC(Symbol):
    """
        name: OPCT-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OPCT-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPCT-BTC"

    def __str__(self):
        return "OPCT-BTC"

    def __call__(self):
        return "OPCT-BTC"


OPCT_BTC = OPCT_BTC(*OPCT_BTC._fields)


class OPCT_ETH(Symbol):
    """
        name: OPCT-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OPCT-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPCT-ETH"

    def __str__(self):
        return "OPCT-ETH"

    def __call__(self):
        return "OPCT-ETH"


OPCT_ETH = OPCT_ETH(*OPCT_ETH._fields)


class PRE_USDT(Symbol):
    """
        name: PRE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PRE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRE-USDT"

    def __str__(self):
        return "PRE-USDT"

    def __call__(self):
        return "PRE-USDT"


PRE_USDT = PRE_USDT(*PRE_USDT._fields)


class SHR_BTC(Symbol):
    """
        name: SHR-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHR-BTC"

    def __str__(self):
        return "SHR-BTC"

    def __call__(self):
        return "SHR-BTC"


SHR_BTC = SHR_BTC(*SHR_BTC._fields)


class SHR_USDT(Symbol):
    """
        name: SHR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHR-USDT"

    def __str__(self):
        return "SHR-USDT"

    def __call__(self):
        return "SHR-USDT"


SHR_USDT = SHR_USDT(*SHR_USDT._fields)


class VIDT_USDT(Symbol):
    """
        name: VIDT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VIDT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIDT-USDT"

    def __str__(self):
        return "VIDT-USDT"

    def __call__(self):
        return "VIDT-USDT"


VIDT_USDT = VIDT_USDT(*VIDT_USDT._fields)


class ROSE_USDT(Symbol):
    """
        name: ROSE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ROSE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSE-USDT"

    def __str__(self):
        return "ROSE-USDT"

    def __call__(self):
        return "ROSE-USDT"


ROSE_USDT = ROSE_USDT(*ROSE_USDT._fields)


class USDC_USDT(Symbol):
    """
        name: USDC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "USDC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDC-USDT"

    def __str__(self):
        return "USDC-USDT"

    def __call__(self):
        return "USDC-USDT"


USDC_USDT = USDC_USDT(*USDC_USDT._fields)


class CTI_USDT(Symbol):
    """
        name: CTI-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CTI-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTI-USDT"

    def __str__(self):
        return "CTI-USDT"

    def __call__(self):
        return "CTI-USDT"


CTI_USDT = CTI_USDT(*CTI_USDT._fields)


class CTI_ETH(Symbol):
    """
        name: CTI-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CTI-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTI-ETH"

    def __str__(self):
        return "CTI-ETH"

    def __call__(self):
        return "CTI-ETH"


CTI_ETH = CTI_ETH(*CTI_ETH._fields)


class ETH2_ETH(Symbol):
    """
        name: ETH2-ETH
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETH2-ETH"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH2-ETH"

    def __str__(self):
        return "ETH2-ETH"

    def __call__(self):
        return "ETH2-ETH"


ETH2_ETH = ETH2_ETH(*ETH2_ETH._fields)


class BUX_BTC(Symbol):
    """
        name: BUX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BUX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUX-BTC"

    def __str__(self):
        return "BUX-BTC"

    def __call__(self):
        return "BUX-BTC"


BUX_BTC = BUX_BTC(*BUX_BTC._fields)


class XHV_USDT(Symbol):
    """
        name: XHV-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XHV-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XHV-USDT"

    def __str__(self):
        return "XHV-USDT"

    def __call__(self):
        return "XHV-USDT"


XHV_USDT = XHV_USDT(*XHV_USDT._fields)


class PLU_USDT(Symbol):
    """
        name: PLU-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PLU-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLU-USDT"

    def __str__(self):
        return "PLU-USDT"

    def __call__(self):
        return "PLU-USDT"


PLU_USDT = PLU_USDT(*PLU_USDT._fields)


class GRT_USDT(Symbol):
    """
        name: GRT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "GRT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRT-USDT"

    def __str__(self):
        return "GRT-USDT"

    def __call__(self):
        return "GRT-USDT"


GRT_USDT = GRT_USDT(*GRT_USDT._fields)


class CAS_BTC(Symbol):
    """
        name: CAS-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 50
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CAS-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 50
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAS-BTC"

    def __str__(self):
        return "CAS-BTC"

    def __call__(self):
        return "CAS-BTC"


CAS_BTC = CAS_BTC(*CAS_BTC._fields)


class CAS_USDT(Symbol):
    """
        name: CAS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 50
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CAS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 50
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAS-USDT"

    def __str__(self):
        return "CAS-USDT"

    def __call__(self):
        return "CAS-USDT"


CAS_USDT = CAS_USDT(*CAS_USDT._fields)


class MSWAP_BTC(Symbol):
    """
        name: MSWAP-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MSWAP-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MSWAP-BTC"

    def __str__(self):
        return "MSWAP-BTC"

    def __call__(self):
        return "MSWAP-BTC"


MSWAP_BTC = MSWAP_BTC(*MSWAP_BTC._fields)


class MSWAP_USDT(Symbol):
    """
        name: MSWAP-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MSWAP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MSWAP-USDT"

    def __str__(self):
        return "MSWAP-USDT"

    def __call__(self):
        return "MSWAP-USDT"


MSWAP_USDT = MSWAP_USDT(*MSWAP_USDT._fields)


class REVV_BTC(Symbol):
    """
        name: REVV-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REVV-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REVV-BTC"

    def __str__(self):
        return "REVV-BTC"

    def __call__(self):
        return "REVV-BTC"


REVV_BTC = REVV_BTC(*REVV_BTC._fields)


class REVV_USDT(Symbol):
    """
        name: REVV-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REVV-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REVV-USDT"

    def __str__(self):
        return "REVV-USDT"

    def __call__(self):
        return "REVV-USDT"


REVV_USDT = REVV_USDT(*REVV_USDT._fields)


class ONEINCH_USDT(Symbol):
    """
        name: 1INCH-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "1INCH-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCH-USDT"

    def __str__(self):
        return "1INCH-USDT"

    def __call__(self):
        return "1INCH-USDT"


ONEINCH_USDT = ONEINCH_USDT(*ONEINCH_USDT._fields)


class LOC_USDT(Symbol):
    """
        name: LOC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOC-USDT"

    def __str__(self):
        return "LOC-USDT"

    def __call__(self):
        return "LOC-USDT"


LOC_USDT = LOC_USDT(*LOC_USDT._fields)


class API3_USDT(Symbol):
    """
        name: API3-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "API3-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3-USDT"

    def __str__(self):
        return "API3-USDT"

    def __call__(self):
        return "API3-USDT"


API3_USDT = API3_USDT(*API3_USDT._fields)


class UNFI_USDT(Symbol):
    """
        name: UNFI-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UNFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFI-USDT"

    def __str__(self):
        return "UNFI-USDT"

    def __call__(self):
        return "UNFI-USDT"


UNFI_USDT = UNFI_USDT(*UNFI_USDT._fields)


class HTR_USDT(Symbol):
    """
        name: HTR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HTR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HTR-USDT"

    def __str__(self):
        return "HTR-USDT"

    def __call__(self):
        return "HTR-USDT"


HTR_USDT = HTR_USDT(*HTR_USDT._fields)


class FRONT_USDT(Symbol):
    """
        name: FRONT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FRONT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONT-USDT"

    def __str__(self):
        return "FRONT-USDT"

    def __call__(self):
        return "FRONT-USDT"


FRONT_USDT = FRONT_USDT(*FRONT_USDT._fields)


class FRONT_BTC(Symbol):
    """
        name: FRONT-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FRONT-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONT-BTC"

    def __str__(self):
        return "FRONT-BTC"

    def __call__(self):
        return "FRONT-BTC"


FRONT_BTC = FRONT_BTC(*FRONT_BTC._fields)


class WBTC_BTC(Symbol):
    """
        name: WBTC-BTC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WBTC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTC-BTC"

    def __str__(self):
        return "WBTC-BTC"

    def __call__(self):
        return "WBTC-BTC"


WBTC_BTC = WBTC_BTC(*WBTC_BTC._fields)


class WBTC_ETH(Symbol):
    """
        name: WBTC-ETH
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WBTC-ETH"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTC-ETH"

    def __str__(self):
        return "WBTC-ETH"

    def __call__(self):
        return "WBTC-ETH"


WBTC_ETH = WBTC_ETH(*WBTC_ETH._fields)


class MIR_USDT(Symbol):
    """
        name: MIR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MIR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIR-USDT"

    def __str__(self):
        return "MIR-USDT"

    def __call__(self):
        return "MIR-USDT"


MIR_USDT = MIR_USDT(*MIR_USDT._fields)


class LTC_USDC(Symbol):
    """
        name: LTC-USDC
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LTC-USDC"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-USDC"

    def __str__(self):
        return "LTC-USDC"

    def __call__(self):
        return "LTC-USDC"


LTC_USDC = LTC_USDC(*LTC_USDC._fields)


class BCH_USDC(Symbol):
    """
        name: BCH-USDC
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BCH-USDC"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH-USDC"

    def __str__(self):
        return "BCH-USDC"

    def __call__(self):
        return "BCH-USDC"


BCH_USDC = BCH_USDC(*BCH_USDC._fields)


class HYDRA_USDT(Symbol):
    """
        name: HYDRA-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HYDRA-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HYDRA-USDT"

    def __str__(self):
        return "HYDRA-USDT"

    def __call__(self):
        return "HYDRA-USDT"


HYDRA_USDT = HYDRA_USDT(*HYDRA_USDT._fields)


class DFI_USDT(Symbol):
    """
        name: DFI-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFI-USDT"

    def __str__(self):
        return "DFI-USDT"

    def __call__(self):
        return "DFI-USDT"


DFI_USDT = DFI_USDT(*DFI_USDT._fields)


class DFI_BTC(Symbol):
    """
        name: DFI-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DFI-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFI-BTC"

    def __str__(self):
        return "DFI-BTC"

    def __call__(self):
        return "DFI-BTC"


DFI_BTC = DFI_BTC(*DFI_BTC._fields)


class CRV_USDT(Symbol):
    """
        name: CRV-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CRV-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRV-USDT"

    def __str__(self):
        return "CRV-USDT"

    def __call__(self):
        return "CRV-USDT"


CRV_USDT = CRV_USDT(*CRV_USDT._fields)


class SUSHI_USDT(Symbol):
    """
        name: SUSHI-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SUSHI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHI-USDT"

    def __str__(self):
        return "SUSHI-USDT"

    def __call__(self):
        return "SUSHI-USDT"


SUSHI_USDT = SUSHI_USDT(*SUSHI_USDT._fields)


class FRM_USDT(Symbol):
    """
        name: FRM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 25
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FRM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 25
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRM-USDT"

    def __str__(self):
        return "FRM-USDT"

    def __call__(self):
        return "FRM-USDT"


FRM_USDT = FRM_USDT(*FRM_USDT._fields)


class EOS_USDC(Symbol):
    """
        name: EOS-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "EOS-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-USDC"

    def __str__(self):
        return "EOS-USDC"

    def __call__(self):
        return "EOS-USDC"


EOS_USDC = EOS_USDC(*EOS_USDC._fields)


class BSV_USDC(Symbol):
    """
        name: BCHSV-USDC
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BCHSV-USDC"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-USDC"

    def __str__(self):
        return "BCHSV-USDC"

    def __call__(self):
        return "BCHSV-USDC"


BSV_USDC = BSV_USDC(*BSV_USDC._fields)


class ZEN_USDT(Symbol):
    """
        name: ZEN-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZEN-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEN-USDT"

    def __str__(self):
        return "ZEN-USDT"

    def __call__(self):
        return "ZEN-USDT"


ZEN_USDT = ZEN_USDT(*ZEN_USDT._fields)


class CUDOS_USDT(Symbol):
    """
        name: CUDOS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CUDOS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CUDOS-USDT"

    def __str__(self):
        return "CUDOS-USDT"

    def __call__(self):
        return "CUDOS-USDT"


CUDOS_USDT = CUDOS_USDT(*CUDOS_USDT._fields)


class ADA_USDC(Symbol):
    """
        name: ADA-USDC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ADA-USDC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA-USDC"

    def __str__(self):
        return "ADA-USDC"

    def __call__(self):
        return "ADA-USDC"


ADA_USDC = ADA_USDC(*ADA_USDC._fields)


class REN_USDT(Symbol):
    """
        name: REN-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "REN-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REN-USDT"

    def __str__(self):
        return "REN-USDT"

    def __call__(self):
        return "REN-USDT"


REN_USDT = REN_USDT(*REN_USDT._fields)


class LRC_USDT(Symbol):
    """
        name: LRC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LRC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRC-USDT"

    def __str__(self):
        return "LRC-USDT"

    def __call__(self):
        return "LRC-USDT"


LRC_USDT = LRC_USDT(*LRC_USDT._fields)


class LINK_USDC(Symbol):
    """
        name: LINK-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LINK-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK-USDC"

    def __str__(self):
        return "LINK-USDC"

    def __call__(self):
        return "LINK-USDC"


LINK_USDC = LINK_USDC(*LINK_USDC._fields)


class KLV_USDT(Symbol):
    """
        name: KLV-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KLV-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLV-USDT"

    def __str__(self):
        return "KLV-USDT"

    def __call__(self):
        return "KLV-USDT"


KLV_USDT = KLV_USDT(*KLV_USDT._fields)


class KLV_BTC(Symbol):
    """
        name: KLV-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KLV-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLV-BTC"

    def __str__(self):
        return "KLV-BTC"

    def __call__(self):
        return "KLV-BTC"


KLV_BTC = KLV_BTC(*KLV_BTC._fields)


class BOA_USDT(Symbol):
    """
        name: BOA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BOA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOA-USDT"

    def __str__(self):
        return "BOA-USDT"

    def __call__(self):
        return "BOA-USDT"


BOA_USDT = BOA_USDT(*BOA_USDT._fields)


class THETA_USDT(Symbol):
    """
        name: THETA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "THETA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETA-USDT"

    def __str__(self):
        return "THETA-USDT"

    def __call__(self):
        return "THETA-USDT"


THETA_USDT = THETA_USDT(*THETA_USDT._fields)


class QNT_USDT(Symbol):
    """
        name: QNT-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "QNT-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNT-USDT"

    def __str__(self):
        return "QNT-USDT"

    def __call__(self):
        return "QNT-USDT"


QNT_USDT = QNT_USDT(*QNT_USDT._fields)


class BAT_USDT(Symbol):
    """
        name: BAT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BAT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAT-USDT"

    def __str__(self):
        return "BAT-USDT"

    def __call__(self):
        return "BAT-USDT"


BAT_USDT = BAT_USDT(*BAT_USDT._fields)


class DOGE_USDT(Symbol):
    """
        name: DOGE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DOGE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE-USDT"

    def __str__(self):
        return "DOGE-USDT"

    def __call__(self):
        return "DOGE-USDT"


DOGE_USDT = DOGE_USDT(*DOGE_USDT._fields)


class DOGE_USDC(Symbol):
    """
        name: DOGE-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DOGE-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE-USDC"

    def __str__(self):
        return "DOGE-USDC"

    def __call__(self):
        return "DOGE-USDC"


DOGE_USDC = DOGE_USDC(*DOGE_USDC._fields)


class DAO_USDT(Symbol):
    """
        name: DAO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DAO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAO-USDT"

    def __str__(self):
        return "DAO-USDT"

    def __call__(self):
        return "DAO-USDT"


DAO_USDT = DAO_USDT(*DAO_USDT._fields)


class STRONG_USDT(Symbol):
    """
        name: STRONG-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STRONG-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRONG-USDT"

    def __str__(self):
        return "STRONG-USDT"

    def __call__(self):
        return "STRONG-USDT"


STRONG_USDT = STRONG_USDT(*STRONG_USDT._fields)


class TRIAS_USDT(Symbol):
    """
        name: TRIAS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRIAS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIAS-USDT"

    def __str__(self):
        return "TRIAS-USDT"

    def __call__(self):
        return "TRIAS-USDT"


TRIAS_USDT = TRIAS_USDT(*TRIAS_USDT._fields)


class TRIAS_BTC(Symbol):
    """
        name: TRIAS-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRIAS-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIAS-BTC"

    def __str__(self):
        return "TRIAS-BTC"

    def __call__(self):
        return "TRIAS-BTC"


TRIAS_BTC = TRIAS_BTC(*TRIAS_BTC._fields)


class DOGE_BTC(Symbol):
    """
        name: DOGE-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOGE-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE-BTC"

    def __str__(self):
        return "DOGE-BTC"

    def __call__(self):
        return "DOGE-BTC"


DOGE_BTC = DOGE_BTC(*DOGE_BTC._fields)


class MITX_BTC(Symbol):
    """
        name: MITX-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MITX-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITX-BTC"

    def __str__(self):
        return "MITX-BTC"

    def __call__(self):
        return "MITX-BTC"


MITX_BTC = MITX_BTC(*MITX_BTC._fields)


class MITX_USDT(Symbol):
    """
        name: MITX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MITX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITX-USDT"

    def __str__(self):
        return "MITX-USDT"

    def __call__(self):
        return "MITX-USDT"


MITX_USDT = MITX_USDT(*MITX_USDT._fields)


class CAKE_USDT(Symbol):
    """
        name: CAKE-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CAKE-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKE-USDT"

    def __str__(self):
        return "CAKE-USDT"

    def __call__(self):
        return "CAKE-USDT"


CAKE_USDT = CAKE_USDT(*CAKE_USDT._fields)


class ORAI_USDT(Symbol):
    """
        name: ORAI-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ORAI-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORAI-USDT"

    def __str__(self):
        return "ORAI-USDT"

    def __call__(self):
        return "ORAI-USDT"


ORAI_USDT = ORAI_USDT(*ORAI_USDT._fields)


class ZEE_USDT(Symbol):
    """
        name: ZEE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZEE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEE-USDT"

    def __str__(self):
        return "ZEE-USDT"

    def __call__(self):
        return "ZEE-USDT"


ZEE_USDT = ZEE_USDT(*ZEE_USDT._fields)


class LTX_USDT(Symbol):
    """
        name: LTX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LTX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTX-USDT"

    def __str__(self):
        return "LTX-USDT"

    def __call__(self):
        return "LTX-USDT"


LTX_USDT = LTX_USDT(*LTX_USDT._fields)


class LTX_BTC(Symbol):
    """
        name: LTX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LTX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTX-BTC"

    def __str__(self):
        return "LTX-BTC"

    def __call__(self):
        return "LTX-BTC"


LTX_BTC = LTX_BTC(*LTX_BTC._fields)


class MASK_USDT(Symbol):
    """
        name: MASK-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "MASK-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASK-USDT"

    def __str__(self):
        return "MASK-USDT"

    def __call__(self):
        return "MASK-USDT"


MASK_USDT = MASK_USDT(*MASK_USDT._fields)


class KLV_TRX(Symbol):
    """
        name: KLV-TRX
        significant_digits: None
        tick_size: 0.00001
        min_margin: 10
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KLV-TRX"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 10
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLV-TRX"

    def __str__(self):
        return "KLV-TRX"

    def __call__(self):
        return "KLV-TRX"


KLV_TRX = KLV_TRX(*KLV_TRX._fields)


class IDEA_USDT(Symbol):
    """
        name: IDEA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IDEA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEA-USDT"

    def __str__(self):
        return "IDEA-USDT"

    def __call__(self):
        return "IDEA-USDT"


IDEA_USDT = IDEA_USDT(*IDEA_USDT._fields)


class PHA_USDT(Symbol):
    """
        name: PHA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PHA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHA-USDT"

    def __str__(self):
        return "PHA-USDT"

    def __call__(self):
        return "PHA-USDT"


PHA_USDT = PHA_USDT(*PHA_USDT._fields)


class PHA_ETH(Symbol):
    """
        name: PHA-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PHA-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHA-ETH"

    def __str__(self):
        return "PHA-ETH"

    def __call__(self):
        return "PHA-ETH"


PHA_ETH = PHA_ETH(*PHA_ETH._fields)


class BCH_KCS(Symbol):
    """
        name: BCH-KCS
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BCH-KCS"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH-KCS"

    def __str__(self):
        return "BCH-KCS"

    def __call__(self):
        return "BCH-KCS"


BCH_KCS = BCH_KCS(*BCH_KCS._fields)


class SRK_USDT(Symbol):
    """
        name: SRK-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SRK-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRK-USDT"

    def __str__(self):
        return "SRK-USDT"

    def __call__(self):
        return "SRK-USDT"


SRK_USDT = SRK_USDT(*SRK_USDT._fields)


class SRK_BTC(Symbol):
    """
        name: SRK-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SRK-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRK-BTC"

    def __str__(self):
        return "SRK-BTC"

    def __call__(self):
        return "SRK-BTC"


SRK_BTC = SRK_BTC(*SRK_BTC._fields)


class ADA_KCS(Symbol):
    """
        name: ADA-KCS
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ADA-KCS"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA-KCS"

    def __str__(self):
        return "ADA-KCS"

    def __call__(self):
        return "ADA-KCS"


ADA_KCS = ADA_KCS(*ADA_KCS._fields)


class HTR_BTC(Symbol):
    """
        name: HTR-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HTR-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HTR-BTC"

    def __str__(self):
        return "HTR-BTC"

    def __call__(self):
        return "HTR-BTC"


HTR_BTC = HTR_BTC(*HTR_BTC._fields)


class BSV_KCS(Symbol):
    """
        name: BCHSV-KCS
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BCHSV-KCS"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-KCS"

    def __str__(self):
        return "BCHSV-KCS"

    def __call__(self):
        return "BCHSV-KCS"


BSV_KCS = BSV_KCS(*BSV_KCS._fields)


class DOT_KCS(Symbol):
    """
        name: DOT-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOT-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT-KCS"

    def __str__(self):
        return "DOT-KCS"

    def __call__(self):
        return "DOT-KCS"


DOT_KCS = DOT_KCS(*DOT_KCS._fields)


class LINK_KCS(Symbol):
    """
        name: LINK-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LINK-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK-KCS"

    def __str__(self):
        return "LINK-KCS"

    def __call__(self):
        return "LINK-KCS"


LINK_KCS = LINK_KCS(*LINK_KCS._fields)


class MIR_KCS(Symbol):
    """
        name: MIR-KCS
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MIR-KCS"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIR-KCS"

    def __str__(self):
        return "MIR-KCS"

    def __call__(self):
        return "MIR-KCS"


MIR_KCS = MIR_KCS(*MIR_KCS._fields)


class BNB_KCS(Symbol):
    """
        name: BNB-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BNB-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB-KCS"

    def __str__(self):
        return "BNB-KCS"

    def __call__(self):
        return "BNB-KCS"


BNB_KCS = BNB_KCS(*BNB_KCS._fields)


class XLM_KCS(Symbol):
    """
        name: XLM-KCS
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XLM-KCS"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLM-KCS"

    def __str__(self):
        return "XLM-KCS"

    def __call__(self):
        return "XLM-KCS"


XLM_KCS = XLM_KCS(*XLM_KCS._fields)


class VET_KCS(Symbol):
    """
        name: VET-KCS
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VET-KCS"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET-KCS"

    def __str__(self):
        return "VET-KCS"

    def __call__(self):
        return "VET-KCS"


VET_KCS = VET_KCS(*VET_KCS._fields)


class SWINGBY_USDT(Symbol):
    """
        name: SWINGBY-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SWINGBY-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWINGBY-USDT"

    def __str__(self):
        return "SWINGBY-USDT"

    def __call__(self):
        return "SWINGBY-USDT"


SWINGBY_USDT = SWINGBY_USDT(*SWINGBY_USDT._fields)


class SWINGBY_BTC(Symbol):
    """
        name: SWINGBY-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SWINGBY-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWINGBY-BTC"

    def __str__(self):
        return "SWINGBY-BTC"

    def __call__(self):
        return "SWINGBY-BTC"


SWINGBY_BTC = SWINGBY_BTC(*SWINGBY_BTC._fields)


class XHV_BTC(Symbol):
    """
        name: XHV-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XHV-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XHV-BTC"

    def __str__(self):
        return "XHV-BTC"

    def __call__(self):
        return "XHV-BTC"


XHV_BTC = XHV_BTC(*XHV_BTC._fields)


class DASH_KCS(Symbol):
    """
        name: DASH-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DASH-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASH-KCS"

    def __str__(self):
        return "DASH-KCS"

    def __call__(self):
        return "DASH-KCS"


DASH_KCS = DASH_KCS(*DASH_KCS._fields)


class UNI_KCS(Symbol):
    """
        name: UNI-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UNI-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNI-KCS"

    def __str__(self):
        return "UNI-KCS"

    def __call__(self):
        return "UNI-KCS"


UNI_KCS = UNI_KCS(*UNI_KCS._fields)


class AAVE_KCS(Symbol):
    """
        name: AAVE-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AAVE-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE-KCS"

    def __str__(self):
        return "AAVE-KCS"

    def __call__(self):
        return "AAVE-KCS"


AAVE_KCS = AAVE_KCS(*AAVE_KCS._fields)


class DOGE_KCS(Symbol):
    """
        name: DOGE-KCS
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOGE-KCS"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE-KCS"

    def __str__(self):
        return "DOGE-KCS"

    def __call__(self):
        return "DOGE-KCS"


DOGE_KCS = DOGE_KCS(*DOGE_KCS._fields)


class ZEC_KCS(Symbol):
    """
        name: ZEC-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZEC-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEC-KCS"

    def __str__(self):
        return "ZEC-KCS"

    def __call__(self):
        return "ZEC-KCS"


ZEC_KCS = ZEC_KCS(*ZEC_KCS._fields)


class XTZ_KCS(Symbol):
    """
        name: XTZ-KCS
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XTZ-KCS"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZ-KCS"

    def __str__(self):
        return "XTZ-KCS"

    def __call__(self):
        return "XTZ-KCS"


XTZ_KCS = XTZ_KCS(*XTZ_KCS._fields)


class GRT_KCS(Symbol):
    """
        name: GRT-KCS
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GRT-KCS"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRT-KCS"

    def __str__(self):
        return "GRT-KCS"

    def __call__(self):
        return "GRT-KCS"


GRT_KCS = GRT_KCS(*GRT_KCS._fields)


class ALGO_KCS(Symbol):
    """
        name: ALGO-KCS
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALGO-KCS"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-KCS"

    def __str__(self):
        return "ALGO-KCS"

    def __call__(self):
        return "ALGO-KCS"


ALGO_KCS = ALGO_KCS(*ALGO_KCS._fields)


class EWT_KCS(Symbol):
    """
        name: EWT-KCS
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EWT-KCS"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EWT-KCS"

    def __str__(self):
        return "EWT-KCS"

    def __call__(self):
        return "EWT-KCS"


EWT_KCS = EWT_KCS(*EWT_KCS._fields)


class GAS_USDT(Symbol):
    """
        name: GAS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GAS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GAS-USDT"

    def __str__(self):
        return "GAS-USDT"

    def __call__(self):
        return "GAS-USDT"


GAS_USDT = GAS_USDT(*GAS_USDT._fields)


class AVAX_USDT(Symbol):
    """
        name: AVAX-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "AVAX-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX-USDT"

    def __str__(self):
        return "AVAX-USDT"

    def __call__(self):
        return "AVAX-USDT"


AVAX_USDT = AVAX_USDT(*AVAX_USDT._fields)


class AVAX_BTC(Symbol):
    """
        name: AVAX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AVAX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX-BTC"

    def __str__(self):
        return "AVAX-BTC"

    def __call__(self):
        return "AVAX-BTC"


AVAX_BTC = AVAX_BTC(*AVAX_BTC._fields)


class KRL_BTC(Symbol):
    """
        name: KRL-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KRL-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KRL-BTC"

    def __str__(self):
        return "KRL-BTC"

    def __call__(self):
        return "KRL-BTC"


KRL_BTC = KRL_BTC(*KRL_BTC._fields)


class KRL_USDT(Symbol):
    """
        name: KRL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KRL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KRL-USDT"

    def __str__(self):
        return "KRL-USDT"

    def __call__(self):
        return "KRL-USDT"


KRL_USDT = KRL_USDT(*KRL_USDT._fields)


class POLK_USDT(Symbol):
    """
        name: POLK-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POLK-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLK-USDT"

    def __str__(self):
        return "POLK-USDT"

    def __call__(self):
        return "POLK-USDT"


POLK_USDT = POLK_USDT(*POLK_USDT._fields)


class POLK_BTC(Symbol):
    """
        name: POLK-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POLK-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLK-BTC"

    def __str__(self):
        return "POLK-BTC"

    def __call__(self):
        return "POLK-BTC"


POLK_BTC = POLK_BTC(*POLK_BTC._fields)


class ENJ_USDT(Symbol):
    """
        name: ENJ-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ENJ-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJ-USDT"

    def __str__(self):
        return "ENJ-USDT"

    def __call__(self):
        return "ENJ-USDT"


ENJ_USDT = ENJ_USDT(*ENJ_USDT._fields)


class MANA_USDT(Symbol):
    """
        name: MANA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "MANA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA-USDT"

    def __str__(self):
        return "MANA-USDT"

    def __call__(self):
        return "MANA-USDT"


MANA_USDT = MANA_USDT(*MANA_USDT._fields)


class RNDR_USDT(Symbol):
    """
        name: RNDR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.5
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "RNDR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.5
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDR-USDT"

    def __str__(self):
        return "RNDR-USDT"

    def __call__(self):
        return "RNDR-USDT"


RNDR_USDT = RNDR_USDT(*RNDR_USDT._fields)


class RNDR_BTC(Symbol):
    """
        name: RNDR-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.5
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RNDR-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.5
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDR-BTC"

    def __str__(self):
        return "RNDR-BTC"

    def __call__(self):
        return "RNDR-BTC"


RNDR_BTC = RNDR_BTC(*RNDR_BTC._fields)


class RLY_USDT(Symbol):
    """
        name: RLY-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 100000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RLY-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 100000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLY-USDT"

    def __str__(self):
        return "RLY-USDT"

    def __call__(self):
        return "RLY-USDT"


RLY_USDT = RLY_USDT(*RLY_USDT._fields)


class ANC_USDT(Symbol):
    """
        name: ANC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ANC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANC-USDT"

    def __str__(self):
        return "ANC-USDT"

    def __call__(self):
        return "ANC-USDT"


ANC_USDT = ANC_USDT(*ANC_USDT._fields)


class SKEY_USDT(Symbol):
    """
        name: SKEY-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SKEY-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKEY-USDT"

    def __str__(self):
        return "SKEY-USDT"

    def __call__(self):
        return "SKEY-USDT"


SKEY_USDT = SKEY_USDT(*SKEY_USDT._fields)


class LAYER_USDT(Symbol):
    """
        name: LAYER-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LAYER-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAYER-USDT"

    def __str__(self):
        return "LAYER-USDT"

    def __call__(self):
        return "LAYER-USDT"


LAYER_USDT = LAYER_USDT(*LAYER_USDT._fields)


class TARA_USDT(Symbol):
    """
        name: TARA-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TARA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TARA-USDT"

    def __str__(self):
        return "TARA-USDT"

    def __call__(self):
        return "TARA-USDT"


TARA_USDT = TARA_USDT(*TARA_USDT._fields)


class TARA_ETH(Symbol):
    """
        name: TARA-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TARA-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TARA-ETH"

    def __str__(self):
        return "TARA-ETH"

    def __call__(self):
        return "TARA-ETH"


TARA_ETH = TARA_ETH(*TARA_ETH._fields)


class IOST_USDT(Symbol):
    """
        name: IOST-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "IOST-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOST-USDT"

    def __str__(self):
        return "IOST-USDT"

    def __call__(self):
        return "IOST-USDT"


IOST_USDT = IOST_USDT(*IOST_USDT._fields)


class DYP_USDT(Symbol):
    """
        name: DYP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DYP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYP-USDT"

    def __str__(self):
        return "DYP-USDT"

    def __call__(self):
        return "DYP-USDT"


DYP_USDT = DYP_USDT(*DYP_USDT._fields)


class DYP_ETH(Symbol):
    """
        name: DYP-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DYP-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYP-ETH"

    def __str__(self):
        return "DYP-ETH"

    def __call__(self):
        return "DYP-ETH"


DYP_ETH = DYP_ETH(*DYP_ETH._fields)


class XYM_USDT(Symbol):
    """
        name: XYM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XYM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYM-USDT"

    def __str__(self):
        return "XYM-USDT"

    def __call__(self):
        return "XYM-USDT"


XYM_USDT = XYM_USDT(*XYM_USDT._fields)


class XYM_BTC(Symbol):
    """
        name: XYM-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XYM-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYM-BTC"

    def __str__(self):
        return "XYM-BTC"

    def __call__(self):
        return "XYM-BTC"


XYM_BTC = XYM_BTC(*XYM_BTC._fields)


class PCX_USDT(Symbol):
    """
        name: PCX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PCX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PCX-USDT"

    def __str__(self):
        return "PCX-USDT"

    def __call__(self):
        return "PCX-USDT"


PCX_USDT = PCX_USDT(*PCX_USDT._fields)


class PCX_BTC(Symbol):
    """
        name: PCX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PCX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PCX-BTC"

    def __str__(self):
        return "PCX-BTC"

    def __call__(self):
        return "PCX-BTC"


PCX_BTC = PCX_BTC(*PCX_BTC._fields)


class ORBS_USDT(Symbol):
    """
        name: ORBS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ORBS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORBS-USDT"

    def __str__(self):
        return "ORBS-USDT"

    def __call__(self):
        return "ORBS-USDT"


ORBS_USDT = ORBS_USDT(*ORBS_USDT._fields)


class ORBS_BTC(Symbol):
    """
        name: ORBS-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ORBS-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORBS-BTC"

    def __str__(self):
        return "ORBS-BTC"

    def __call__(self):
        return "ORBS-BTC"


ORBS_BTC = ORBS_BTC(*ORBS_BTC._fields)


class BTC3L_USDT(Symbol):
    """
        name: BTC3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTC3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC3L-USDT"

    def __str__(self):
        return "BTC3L-USDT"

    def __call__(self):
        return "BTC3L-USDT"


BTC3L_USDT = BTC3L_USDT(*BTC3L_USDT._fields)


class BTC3S_USDT(Symbol):
    """
        name: BTC3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTC3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC3S-USDT"

    def __str__(self):
        return "BTC3S-USDT"

    def __call__(self):
        return "BTC3S-USDT"


BTC3S_USDT = BTC3S_USDT(*BTC3S_USDT._fields)


class ETH3L_USDT(Symbol):
    """
        name: ETH3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETH3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH3L-USDT"

    def __str__(self):
        return "ETH3L-USDT"

    def __call__(self):
        return "ETH3L-USDT"


ETH3L_USDT = ETH3L_USDT(*ETH3L_USDT._fields)


class ETH3S_USDT(Symbol):
    """
        name: ETH3S-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETH3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH3S-USDT"

    def __str__(self):
        return "ETH3S-USDT"

    def __call__(self):
        return "ETH3S-USDT"


ETH3S_USDT = ETH3S_USDT(*ETH3S_USDT._fields)


class ANKR_USDT(Symbol):
    """
        name: ANKR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ANKR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKR-USDT"

    def __str__(self):
        return "ANKR-USDT"

    def __call__(self):
        return "ANKR-USDT"


ANKR_USDT = ANKR_USDT(*ANKR_USDT._fields)


class DSLA_USDT(Symbol):
    """
        name: DSLA-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DSLA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DSLA-USDT"

    def __str__(self):
        return "DSLA-USDT"

    def __call__(self):
        return "DSLA-USDT"


DSLA_USDT = DSLA_USDT(*DSLA_USDT._fields)


class DSLA_BTC(Symbol):
    """
        name: DSLA-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DSLA-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DSLA-BTC"

    def __str__(self):
        return "DSLA-BTC"

    def __call__(self):
        return "DSLA-BTC"


DSLA_BTC = DSLA_BTC(*DSLA_BTC._fields)


class SAND_USDT(Symbol):
    """
        name: SAND-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SAND-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SAND-USDT"

    def __str__(self):
        return "SAND-USDT"

    def __call__(self):
        return "SAND-USDT"


SAND_USDT = SAND_USDT(*SAND_USDT._fields)


class VAI_USDT(Symbol):
    """
        name: VAI-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VAI-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VAI-USDT"

    def __str__(self):
        return "VAI-USDT"

    def __call__(self):
        return "VAI-USDT"


VAI_USDT = VAI_USDT(*VAI_USDT._fields)


class XCUR_USDT(Symbol):
    """
        name: XCUR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XCUR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCUR-USDT"

    def __str__(self):
        return "XCUR-USDT"

    def __call__(self):
        return "XCUR-USDT"


XCUR_USDT = XCUR_USDT(*XCUR_USDT._fields)


class XCUR_BTC(Symbol):
    """
        name: XCUR-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XCUR-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCUR-BTC"

    def __str__(self):
        return "XCUR-BTC"

    def __call__(self):
        return "XCUR-BTC"


XCUR_BTC = XCUR_BTC(*XCUR_BTC._fields)


class FLUX_USDT(Symbol):
    """
        name: FLUX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FLUX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUX-USDT"

    def __str__(self):
        return "FLUX-USDT"

    def __call__(self):
        return "FLUX-USDT"


FLUX_USDT = FLUX_USDT(*FLUX_USDT._fields)


class OMG_USDT(Symbol):
    """
        name: OMG-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "OMG-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMG-USDT"

    def __str__(self):
        return "OMG-USDT"

    def __call__(self):
        return "OMG-USDT"


OMG_USDT = OMG_USDT(*OMG_USDT._fields)


class ZIL_USDT(Symbol):
    """
        name: ZIL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ZIL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZIL-USDT"

    def __str__(self):
        return "ZIL-USDT"

    def __call__(self):
        return "ZIL-USDT"


ZIL_USDT = ZIL_USDT(*ZIL_USDT._fields)


class DODO_USDT(Symbol):
    """
        name: DODO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DODO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DODO-USDT"

    def __str__(self):
        return "DODO-USDT"

    def __call__(self):
        return "DODO-USDT"


DODO_USDT = DODO_USDT(*DODO_USDT._fields)


class MAN_USDT(Symbol):
    """
        name: MAN-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAN-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAN-USDT"

    def __str__(self):
        return "MAN-USDT"

    def __call__(self):
        return "MAN-USDT"


MAN_USDT = MAN_USDT(*MAN_USDT._fields)


class BAX_USDT(Symbol):
    """
        name: BAX-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BAX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAX-USDT"

    def __str__(self):
        return "BAX-USDT"

    def __call__(self):
        return "BAX-USDT"


BAX_USDT = BAX_USDT(*BAX_USDT._fields)


class BOSON_USDT(Symbol):
    """
        name: BOSON-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BOSON-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOSON-USDT"

    def __str__(self):
        return "BOSON-USDT"

    def __call__(self):
        return "BOSON-USDT"


BOSON_USDT = BOSON_USDT(*BOSON_USDT._fields)


class BOSON_ETH(Symbol):
    """
        name: BOSON-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BOSON-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOSON-ETH"

    def __str__(self):
        return "BOSON-ETH"

    def __call__(self):
        return "BOSON-ETH"


BOSON_ETH = BOSON_ETH(*BOSON_ETH._fields)


class PUNDIX_USDT(Symbol):
    """
        name: PUNDIX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PUNDIX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIX-USDT"

    def __str__(self):
        return "PUNDIX-USDT"

    def __call__(self):
        return "PUNDIX-USDT"


PUNDIX_USDT = PUNDIX_USDT(*PUNDIX_USDT._fields)


class PUNDIX_BTC(Symbol):
    """
        name: PUNDIX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PUNDIX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIX-BTC"

    def __str__(self):
        return "PUNDIX-BTC"

    def __call__(self):
        return "PUNDIX-BTC"


PUNDIX_BTC = PUNDIX_BTC(*PUNDIX_BTC._fields)


class WAXP_USDT(Symbol):
    """
        name: WAX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "WAX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAX-USDT"

    def __str__(self):
        return "WAX-USDT"

    def __call__(self):
        return "WAX-USDT"


WAXP_USDT = WAXP_USDT(*WAXP_USDT._fields)


class HT_USDT(Symbol):
    """
        name: HT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HT-USDT"

    def __str__(self):
        return "HT-USDT"

    def __call__(self):
        return "HT-USDT"


HT_USDT = HT_USDT(*HT_USDT._fields)


class PDEX_USDT(Symbol):
    """
        name: PDEX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PDEX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PDEX-USDT"

    def __str__(self):
        return "PDEX-USDT"

    def __call__(self):
        return "PDEX-USDT"


PDEX_USDT = PDEX_USDT(*PDEX_USDT._fields)


class LABS_USDT(Symbol):
    """
        name: LABS-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LABS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LABS-USDT"

    def __str__(self):
        return "LABS-USDT"

    def __call__(self):
        return "LABS-USDT"


LABS_USDT = LABS_USDT(*LABS_USDT._fields)


class LABS_ETH(Symbol):
    """
        name: LABS-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LABS-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LABS-ETH"

    def __str__(self):
        return "LABS-ETH"

    def __call__(self):
        return "LABS-ETH"


LABS_ETH = LABS_ETH(*LABS_ETH._fields)


class GMB_USDT(Symbol):
    """
        name: GMB-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMB-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMB-USDT"

    def __str__(self):
        return "GMB-USDT"

    def __call__(self):
        return "GMB-USDT"


GMB_USDT = GMB_USDT(*GMB_USDT._fields)


class PHNX_USDT(Symbol):
    """
        name: PHNX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PHNX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHNX-USDT"

    def __str__(self):
        return "PHNX-USDT"

    def __call__(self):
        return "PHNX-USDT"


PHNX_USDT = PHNX_USDT(*PHNX_USDT._fields)


class PHNX_BTC(Symbol):
    """
        name: PHNX-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PHNX-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHNX-BTC"

    def __str__(self):
        return "PHNX-BTC"

    def __call__(self):
        return "PHNX-BTC"


PHNX_BTC = PHNX_BTC(*PHNX_BTC._fields)


class HAI_USDT(Symbol):
    """
        name: HAI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HAI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAI-USDT"

    def __str__(self):
        return "HAI-USDT"

    def __call__(self):
        return "HAI-USDT"


HAI_USDT = HAI_USDT(*HAI_USDT._fields)


class EQZ_USDT(Symbol):
    """
        name: EQZ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EQZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EQZ-USDT"

    def __str__(self):
        return "EQZ-USDT"

    def __call__(self):
        return "EQZ-USDT"


EQZ_USDT = EQZ_USDT(*EQZ_USDT._fields)


class FORTH_USDT(Symbol):
    """
        name: FORTH-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FORTH-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORTH-USDT"

    def __str__(self):
        return "FORTH-USDT"

    def __call__(self):
        return "FORTH-USDT"


FORTH_USDT = FORTH_USDT(*FORTH_USDT._fields)


class CGG_USDT(Symbol):
    """
        name: CGG-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CGG-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CGG-USDT"

    def __str__(self):
        return "CGG-USDT"

    def __call__(self):
        return "CGG-USDT"


CGG_USDT = CGG_USDT(*CGG_USDT._fields)


class UBX_USDT(Symbol):
    """
        name: UBX-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UBX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UBX-USDT"

    def __str__(self):
        return "UBX-USDT"

    def __call__(self):
        return "UBX-USDT"


UBX_USDT = UBX_USDT(*UBX_USDT._fields)


class GHX_USDT(Symbol):
    """
        name: GHX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GHX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GHX-USDT"

    def __str__(self):
        return "GHX-USDT"

    def __call__(self):
        return "GHX-USDT"


GHX_USDT = GHX_USDT(*GHX_USDT._fields)


class STND_USDT(Symbol):
    """
        name: STND-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STND-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STND-USDT"

    def __str__(self):
        return "STND-USDT"

    def __call__(self):
        return "STND-USDT"


STND_USDT = STND_USDT(*STND_USDT._fields)


class STND_ETH(Symbol):
    """
        name: STND-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STND-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STND-ETH"

    def __str__(self):
        return "STND-ETH"

    def __call__(self):
        return "STND-ETH"


STND_ETH = STND_ETH(*STND_ETH._fields)


class TOWER_USDT(Symbol):
    """
        name: TOWER-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TOWER-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOWER-USDT"

    def __str__(self):
        return "TOWER-USDT"

    def __call__(self):
        return "TOWER-USDT"


TOWER_USDT = TOWER_USDT(*TOWER_USDT._fields)


class TOWER_BTC(Symbol):
    """
        name: TOWER-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TOWER-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOWER-BTC"

    def __str__(self):
        return "TOWER-BTC"

    def __call__(self):
        return "TOWER-BTC"


TOWER_BTC = TOWER_BTC(*TOWER_BTC._fields)


class ACE_USDT(Symbol):
    """
        name: ACE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACE-USDT"

    def __str__(self):
        return "ACE-USDT"

    def __call__(self):
        return "ACE-USDT"


ACE_USDT = ACE_USDT(*ACE_USDT._fields)


class LOCG_USDT(Symbol):
    """
        name: LOCG-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOCG-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOCG-USDT"

    def __str__(self):
        return "LOCG-USDT"

    def __call__(self):
        return "LOCG-USDT"


LOCG_USDT = LOCG_USDT(*LOCG_USDT._fields)


class CARD_USDT(Symbol):
    """
        name: CARD-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CARD-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CARD-USDT"

    def __str__(self):
        return "CARD-USDT"

    def __call__(self):
        return "CARD-USDT"


CARD_USDT = CARD_USDT(*CARD_USDT._fields)


class FLY_USDT(Symbol):
    """
        name: FLY-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FLY-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLY-USDT"

    def __str__(self):
        return "FLY-USDT"

    def __call__(self):
        return "FLY-USDT"


FLY_USDT = FLY_USDT(*FLY_USDT._fields)


class CWS_USDT(Symbol):
    """
        name: CWS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CWS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CWS-USDT"

    def __str__(self):
        return "CWS-USDT"

    def __call__(self):
        return "CWS-USDT"


CWS_USDT = CWS_USDT(*CWS_USDT._fields)


class XDC_USDT(Symbol):
    """
        name: XDC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XDC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDC-USDT"

    def __str__(self):
        return "XDC-USDT"

    def __call__(self):
        return "XDC-USDT"


XDC_USDT = XDC_USDT(*XDC_USDT._fields)


class XDC_ETH(Symbol):
    """
        name: XDC-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XDC-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDC-ETH"

    def __str__(self):
        return "XDC-ETH"

    def __call__(self):
        return "XDC-ETH"


XDC_ETH = XDC_ETH(*XDC_ETH._fields)


class STRK_BTC(Symbol):
    """
        name: STRK-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STRK-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRK-BTC"

    def __str__(self):
        return "STRK-BTC"

    def __call__(self):
        return "STRK-BTC"


STRK_BTC = STRK_BTC(*STRK_BTC._fields)


class STRK_ETH(Symbol):
    """
        name: STRK-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STRK-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRK-ETH"

    def __str__(self):
        return "STRK-ETH"

    def __call__(self):
        return "STRK-ETH"


STRK_ETH = STRK_ETH(*STRK_ETH._fields)


class SHIB_USDT(Symbol):
    """
        name: SHIB-USDT
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SHIB-USDT"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIB-USDT"

    def __str__(self):
        return "SHIB-USDT"

    def __call__(self):
        return "SHIB-USDT"


SHIB_USDT = SHIB_USDT(*SHIB_USDT._fields)


class POLX_USDT(Symbol):
    """
        name: POLX-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POLX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLX-USDT"

    def __str__(self):
        return "POLX-USDT"

    def __call__(self):
        return "POLX-USDT"


POLX_USDT = POLX_USDT(*POLX_USDT._fields)


class KDA_USDT(Symbol):
    """
        name: KDA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "KDA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDA-USDT"

    def __str__(self):
        return "KDA-USDT"

    def __call__(self):
        return "KDA-USDT"


KDA_USDT = KDA_USDT(*KDA_USDT._fields)


class KDA_BTC(Symbol):
    """
        name: KDA-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KDA-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDA-BTC"

    def __str__(self):
        return "KDA-BTC"

    def __call__(self):
        return "KDA-BTC"


KDA_BTC = KDA_BTC(*KDA_BTC._fields)


class ICP_USDT(Symbol):
    """
        name: ICP-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ICP-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICP-USDT"

    def __str__(self):
        return "ICP-USDT"

    def __call__(self):
        return "ICP-USDT"


ICP_USDT = ICP_USDT(*ICP_USDT._fields)


class ICP_BTC(Symbol):
    """
        name: ICP-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ICP-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICP-BTC"

    def __str__(self):
        return "ICP-BTC"

    def __call__(self):
        return "ICP-BTC"


ICP_BTC = ICP_BTC(*ICP_BTC._fields)


class STC_USDT(Symbol):
    """
        name: STC-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STC-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STC-USDT"

    def __str__(self):
        return "STC-USDT"

    def __call__(self):
        return "STC-USDT"


STC_USDT = STC_USDT(*STC_USDT._fields)


class STC_BTC(Symbol):
    """
        name: STC-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STC-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STC-BTC"

    def __str__(self):
        return "STC-BTC"

    def __call__(self):
        return "STC-BTC"


STC_BTC = STC_BTC(*STC_BTC._fields)


class GOVI_USDT(Symbol):
    """
        name: GOVI-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GOVI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOVI-USDT"

    def __str__(self):
        return "GOVI-USDT"

    def __call__(self):
        return "GOVI-USDT"


GOVI_USDT = GOVI_USDT(*GOVI_USDT._fields)


class GOVI_BTC(Symbol):
    """
        name: GOVI-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GOVI-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOVI-BTC"

    def __str__(self):
        return "GOVI-BTC"

    def __call__(self):
        return "GOVI-BTC"


GOVI_BTC = GOVI_BTC(*GOVI_BTC._fields)


class FKX_USDT(Symbol):
    """
        name: FKX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FKX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FKX-USDT"

    def __str__(self):
        return "FKX-USDT"

    def __call__(self):
        return "FKX-USDT"


FKX_USDT = FKX_USDT(*FKX_USDT._fields)


class CELO_USDT(Symbol):
    """
        name: CELO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CELO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELO-USDT"

    def __str__(self):
        return "CELO-USDT"

    def __call__(self):
        return "CELO-USDT"


CELO_USDT = CELO_USDT(*CELO_USDT._fields)


class CELO_BTC(Symbol):
    """
        name: CELO-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CELO-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELO-BTC"

    def __str__(self):
        return "CELO-BTC"

    def __call__(self):
        return "CELO-BTC"


CELO_BTC = CELO_BTC(*CELO_BTC._fields)


class CUSD_USDT(Symbol):
    """
        name: CUSD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CUSD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CUSD-USDT"

    def __str__(self):
        return "CUSD-USDT"

    def __call__(self):
        return "CUSD-USDT"


CUSD_USDT = CUSD_USDT(*CUSD_USDT._fields)


class CUSD_BTC(Symbol):
    """
        name: CUSD-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CUSD-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CUSD-BTC"

    def __str__(self):
        return "CUSD-BTC"

    def __call__(self):
        return "CUSD-BTC"


CUSD_BTC = CUSD_BTC(*CUSD_BTC._fields)


class MATIC_USDT(Symbol):
    """
        name: MATIC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "MATIC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC-USDT"

    def __str__(self):
        return "MATIC-USDT"

    def __call__(self):
        return "MATIC-USDT"


MATIC_USDT = MATIC_USDT(*MATIC_USDT._fields)


class MATIC_BTC(Symbol):
    """
        name: MATIC-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MATIC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC-BTC"

    def __str__(self):
        return "MATIC-BTC"

    def __call__(self):
        return "MATIC-BTC"


MATIC_BTC = MATIC_BTC(*MATIC_BTC._fields)


class ELA_USDT(Symbol):
    """
        name: ELA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ELA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELA-USDT"

    def __str__(self):
        return "ELA-USDT"

    def __call__(self):
        return "ELA-USDT"


ELA_USDT = ELA_USDT(*ELA_USDT._fields)


class CRPT_USDT(Symbol):
    """
        name: CRPT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CRPT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRPT-USDT"

    def __str__(self):
        return "CRPT-USDT"

    def __call__(self):
        return "CRPT-USDT"


CRPT_USDT = CRPT_USDT(*CRPT_USDT._fields)


class OPCT_USDT(Symbol):
    """
        name: OPCT-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OPCT-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPCT-USDT"

    def __str__(self):
        return "OPCT-USDT"

    def __call__(self):
        return "OPCT-USDT"


OPCT_USDT = OPCT_USDT(*OPCT_USDT._fields)


class OGN_USDT(Symbol):
    """
        name: OGN-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "OGN-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGN-USDT"

    def __str__(self):
        return "OGN-USDT"

    def __call__(self):
        return "OGN-USDT"


OGN_USDT = OGN_USDT(*OGN_USDT._fields)


class OGN_BTC(Symbol):
    """
        name: OGN-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OGN-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGN-BTC"

    def __str__(self):
        return "OGN-BTC"

    def __call__(self):
        return "OGN-BTC"


OGN_BTC = OGN_BTC(*OGN_BTC._fields)


class OUSD_USDT(Symbol):
    """
        name: OUSD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OUSD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OUSD-USDT"

    def __str__(self):
        return "OUSD-USDT"

    def __call__(self):
        return "OUSD-USDT"


OUSD_USDT = OUSD_USDT(*OUSD_USDT._fields)


class OUSD_BTC(Symbol):
    """
        name: OUSD-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OUSD-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OUSD-BTC"

    def __str__(self):
        return "OUSD-BTC"

    def __call__(self):
        return "OUSD-BTC"


OUSD_BTC = OUSD_BTC(*OUSD_BTC._fields)


class TLOS_USDT(Symbol):
    """
        name: TLOS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TLOS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLOS-USDT"

    def __str__(self):
        return "TLOS-USDT"

    def __call__(self):
        return "TLOS-USDT"


TLOS_USDT = TLOS_USDT(*TLOS_USDT._fields)


class TLOS_BTC(Symbol):
    """
        name: TLOS-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TLOS-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLOS-BTC"

    def __str__(self):
        return "TLOS-BTC"

    def __call__(self):
        return "TLOS-BTC"


TLOS_BTC = TLOS_BTC(*TLOS_BTC._fields)


class GLQ_USDT(Symbol):
    """
        name: GLQ-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GLQ-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLQ-USDT"

    def __str__(self):
        return "GLQ-USDT"

    def __call__(self):
        return "GLQ-USDT"


GLQ_USDT = GLQ_USDT(*GLQ_USDT._fields)


class GLQ_BTC(Symbol):
    """
        name: GLQ-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GLQ-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLQ-BTC"

    def __str__(self):
        return "GLQ-BTC"

    def __call__(self):
        return "GLQ-BTC"


GLQ_BTC = GLQ_BTC(*GLQ_BTC._fields)


class MXC_USDT(Symbol):
    """
        name: MXC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "MXC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MXC-USDT"

    def __str__(self):
        return "MXC-USDT"

    def __call__(self):
        return "MXC-USDT"


MXC_USDT = MXC_USDT(*MXC_USDT._fields)


class ERSDL_USDT(Symbol):
    """
        name: ERSDL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ERSDL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERSDL-USDT"

    def __str__(self):
        return "ERSDL-USDT"

    def __call__(self):
        return "ERSDL-USDT"


ERSDL_USDT = ERSDL_USDT(*ERSDL_USDT._fields)


class HOTCROSS_USDT(Symbol):
    """
        name: HOTCROSS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HOTCROSS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTCROSS-USDT"

    def __str__(self):
        return "HOTCROSS-USDT"

    def __call__(self):
        return "HOTCROSS-USDT"


HOTCROSS_USDT = HOTCROSS_USDT(*HOTCROSS_USDT._fields)


class ADA3L_USDT(Symbol):
    """
        name: ADA3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ADA3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA3L-USDT"

    def __str__(self):
        return "ADA3L-USDT"

    def __call__(self):
        return "ADA3L-USDT"


ADA3L_USDT = ADA3L_USDT(*ADA3L_USDT._fields)


class ADA3S_USDT(Symbol):
    """
        name: ADA3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ADA3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA3S-USDT"

    def __str__(self):
        return "ADA3S-USDT"

    def __call__(self):
        return "ADA3S-USDT"


ADA3S_USDT = ADA3S_USDT(*ADA3S_USDT._fields)


class HYVE_USDT(Symbol):
    """
        name: HYVE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 5
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HYVE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 5
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HYVE-USDT"

    def __str__(self):
        return "HYVE-USDT"

    def __call__(self):
        return "HYVE-USDT"


HYVE_USDT = HYVE_USDT(*HYVE_USDT._fields)


class HYVE_BTC(Symbol):
    """
        name: HYVE-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 5
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HYVE-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 5
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HYVE-BTC"

    def __str__(self):
        return "HYVE-BTC"

    def __call__(self):
        return "HYVE-BTC"


HYVE_BTC = HYVE_BTC(*HYVE_BTC._fields)


class DAPPX_USDT(Symbol):
    """
        name: DAPPX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DAPPX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAPPX-USDT"

    def __str__(self):
        return "DAPPX-USDT"

    def __call__(self):
        return "DAPPX-USDT"


DAPPX_USDT = DAPPX_USDT(*DAPPX_USDT._fields)


class KONO_USDT(Symbol):
    """
        name: KONO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KONO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KONO-USDT"

    def __str__(self):
        return "KONO-USDT"

    def __call__(self):
        return "KONO-USDT"


KONO_USDT = KONO_USDT(*KONO_USDT._fields)


class PRQ_USDT(Symbol):
    """
        name: PRQ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PRQ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRQ-USDT"

    def __str__(self):
        return "PRQ-USDT"

    def __call__(self):
        return "PRQ-USDT"


PRQ_USDT = PRQ_USDT(*PRQ_USDT._fields)


class MAHA_USDT(Symbol):
    """
        name: MAHA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAHA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAHA-USDT"

    def __str__(self):
        return "MAHA-USDT"

    def __call__(self):
        return "MAHA-USDT"


MAHA_USDT = MAHA_USDT(*MAHA_USDT._fields)


class MAHA_BTC(Symbol):
    """
        name: MAHA-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAHA-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAHA-BTC"

    def __str__(self):
        return "MAHA-BTC"

    def __call__(self):
        return "MAHA-BTC"


MAHA_BTC = MAHA_BTC(*MAHA_BTC._fields)


class FEAR_USDT(Symbol):
    """
        name: FEAR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FEAR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FEAR-USDT"

    def __str__(self):
        return "FEAR-USDT"

    def __call__(self):
        return "FEAR-USDT"


FEAR_USDT = FEAR_USDT(*FEAR_USDT._fields)


class PYR_USDT(Symbol):
    """
        name: PYR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "PYR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYR-USDT"

    def __str__(self):
        return "PYR-USDT"

    def __call__(self):
        return "PYR-USDT"


PYR_USDT = PYR_USDT(*PYR_USDT._fields)


class PYR_BTC(Symbol):
    """
        name: PYR-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PYR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYR-BTC"

    def __str__(self):
        return "PYR-BTC"

    def __call__(self):
        return "PYR-BTC"


PYR_BTC = PYR_BTC(*PYR_BTC._fields)


class PROM_USDT(Symbol):
    """
        name: PROM-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PROM-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROM-USDT"

    def __str__(self):
        return "PROM-USDT"

    def __call__(self):
        return "PROM-USDT"


PROM_USDT = PROM_USDT(*PROM_USDT._fields)


class PROM_BTC(Symbol):
    """
        name: PROM-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PROM-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROM-BTC"

    def __str__(self):
        return "PROM-BTC"

    def __call__(self):
        return "PROM-BTC"


PROM_BTC = PROM_BTC(*PROM_BTC._fields)


class GLCH_USDT(Symbol):
    """
        name: GLCH-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GLCH-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLCH-USDT"

    def __str__(self):
        return "GLCH-USDT"

    def __call__(self):
        return "GLCH-USDT"


GLCH_USDT = GLCH_USDT(*GLCH_USDT._fields)


class UNO_USDT(Symbol):
    """
        name: UNO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UNO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNO-USDT"

    def __str__(self):
        return "UNO-USDT"

    def __call__(self):
        return "UNO-USDT"


UNO_USDT = UNO_USDT(*UNO_USDT._fields)


class XCAD_USDT(Symbol):
    """
        name: XCAD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XCAD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCAD-USDT"

    def __str__(self):
        return "XCAD-USDT"

    def __call__(self):
        return "XCAD-USDT"


XCAD_USDT = XCAD_USDT(*XCAD_USDT._fields)


class EOS3L_USDT(Symbol):
    """
        name: EOS3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EOS3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS3L-USDT"

    def __str__(self):
        return "EOS3L-USDT"

    def __call__(self):
        return "EOS3L-USDT"


EOS3L_USDT = EOS3L_USDT(*EOS3L_USDT._fields)


class EOS3S_USDT(Symbol):
    """
        name: EOS3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EOS3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS3S-USDT"

    def __str__(self):
        return "EOS3S-USDT"

    def __call__(self):
        return "EOS3S-USDT"


EOS3S_USDT = EOS3S_USDT(*EOS3S_USDT._fields)


class BCH3L_USDT(Symbol):
    """
        name: BCH3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BCH3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH3L-USDT"

    def __str__(self):
        return "BCH3L-USDT"

    def __call__(self):
        return "BCH3L-USDT"


BCH3L_USDT = BCH3L_USDT(*BCH3L_USDT._fields)


class BCH3S_USDT(Symbol):
    """
        name: BCH3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BCH3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH3S-USDT"

    def __str__(self):
        return "BCH3S-USDT"

    def __call__(self):
        return "BCH3S-USDT"


BCH3S_USDT = BCH3S_USDT(*BCH3S_USDT._fields)


class ELON_USDT(Symbol):
    """
        name: ELON-USDT
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100000
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ELON-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100000
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELON-USDT"

    def __str__(self):
        return "ELON-USDT"

    def __call__(self):
        return "ELON-USDT"


ELON_USDT = ELON_USDT(*ELON_USDT._fields)


class APL_USDT(Symbol):
    """
        name: APL-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "APL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APL-USDT"

    def __str__(self):
        return "APL-USDT"

    def __call__(self):
        return "APL-USDT"


APL_USDT = APL_USDT(*APL_USDT._fields)


class VEED_USDT(Symbol):
    """
        name: VEED-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VEED-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEED-USDT"

    def __str__(self):
        return "VEED-USDT"

    def __call__(self):
        return "VEED-USDT"


VEED_USDT = VEED_USDT(*VEED_USDT._fields)


class VEED_BTC(Symbol):
    """
        name: VEED-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VEED-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEED-BTC"

    def __str__(self):
        return "VEED-BTC"

    def __call__(self):
        return "VEED-BTC"


VEED_BTC = VEED_BTC(*VEED_BTC._fields)


class DIVI_USDT(Symbol):
    """
        name: DIVI-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DIVI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIVI-USDT"

    def __str__(self):
        return "DIVI-USDT"

    def __call__(self):
        return "DIVI-USDT"


DIVI_USDT = DIVI_USDT(*DIVI_USDT._fields)


class PDEX_BTC(Symbol):
    """
        name: PDEX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PDEX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PDEX-BTC"

    def __str__(self):
        return "PDEX-BTC"

    def __call__(self):
        return "PDEX-BTC"


PDEX_BTC = PDEX_BTC(*PDEX_BTC._fields)


class POLS_USDT(Symbol):
    """
        name: POLS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "POLS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLS-USDT"

    def __str__(self):
        return "POLS-USDT"

    def __call__(self):
        return "POLS-USDT"


POLS_USDT = POLS_USDT(*POLS_USDT._fields)


class POLS_BTC(Symbol):
    """
        name: POLS-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POLS-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLS-BTC"

    def __str__(self):
        return "POLS-BTC"

    def __call__(self):
        return "POLS-BTC"


POLS_BTC = POLS_BTC(*POLS_BTC._fields)


class LPOOL_USDT(Symbol):
    """
        name: LPOOL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LPOOL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPOOL-USDT"

    def __str__(self):
        return "LPOOL-USDT"

    def __call__(self):
        return "LPOOL-USDT"


LPOOL_USDT = LPOOL_USDT(*LPOOL_USDT._fields)


class LPOOL_BTC(Symbol):
    """
        name: LPOOL-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LPOOL-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPOOL-BTC"

    def __str__(self):
        return "LPOOL-BTC"

    def __call__(self):
        return "LPOOL-BTC"


LPOOL_BTC = LPOOL_BTC(*LPOOL_BTC._fields)


class LSS_USDT(Symbol):
    """
        name: LSS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LSS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSS-USDT"

    def __str__(self):
        return "LSS-USDT"

    def __call__(self):
        return "LSS-USDT"


LSS_USDT = LSS_USDT(*LSS_USDT._fields)


class VET3L_USDT(Symbol):
    """
        name: VET3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VET3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET3L-USDT"

    def __str__(self):
        return "VET3L-USDT"

    def __call__(self):
        return "VET3L-USDT"


VET3L_USDT = VET3L_USDT(*VET3L_USDT._fields)


class VET3S_USDT(Symbol):
    """
        name: VET3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VET3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET3S-USDT"

    def __str__(self):
        return "VET3S-USDT"

    def __call__(self):
        return "VET3S-USDT"


VET3S_USDT = VET3S_USDT(*VET3S_USDT._fields)


class LTC3L_USDT(Symbol):
    """
        name: LTC3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LTC3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC3L-USDT"

    def __str__(self):
        return "LTC3L-USDT"

    def __call__(self):
        return "LTC3L-USDT"


LTC3L_USDT = LTC3L_USDT(*LTC3L_USDT._fields)


class LTC3S_USDT(Symbol):
    """
        name: LTC3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LTC3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC3S-USDT"

    def __str__(self):
        return "LTC3S-USDT"

    def __call__(self):
        return "LTC3S-USDT"


LTC3S_USDT = LTC3S_USDT(*LTC3S_USDT._fields)


class ABBC_USDT(Symbol):
    """
        name: ABBC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ABBC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ABBC-USDT"

    def __str__(self):
        return "ABBC-USDT"

    def __call__(self):
        return "ABBC-USDT"


ABBC_USDT = ABBC_USDT(*ABBC_USDT._fields)


class ABBC_BTC(Symbol):
    """
        name: ABBC-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ABBC-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ABBC-BTC"

    def __str__(self):
        return "ABBC-BTC"

    def __call__(self):
        return "ABBC-BTC"


ABBC_BTC = ABBC_BTC(*ABBC_BTC._fields)


class KOK_USDT(Symbol):
    """
        name: KOK-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KOK-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KOK-USDT"

    def __str__(self):
        return "KOK-USDT"

    def __call__(self):
        return "KOK-USDT"


KOK_USDT = KOK_USDT(*KOK_USDT._fields)


class ZCX_USDT(Symbol):
    """
        name: ZCX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZCX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZCX-USDT"

    def __str__(self):
        return "ZCX-USDT"

    def __call__(self):
        return "ZCX-USDT"


ZCX_USDT = ZCX_USDT(*ZCX_USDT._fields)


class ZCX_BTC(Symbol):
    """
        name: ZCX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZCX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZCX-BTC"

    def __str__(self):
        return "ZCX-BTC"

    def __call__(self):
        return "ZCX-BTC"


ZCX_BTC = ZCX_BTC(*ZCX_BTC._fields)


class NORD_USDT(Symbol):
    """
        name: NORD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NORD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NORD-USDT"

    def __str__(self):
        return "NORD-USDT"

    def __call__(self):
        return "NORD-USDT"


NORD_USDT = NORD_USDT(*NORD_USDT._fields)


class GMEE_USDT(Symbol):
    """
        name: GMEE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMEE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMEE-USDT"

    def __str__(self):
        return "GMEE-USDT"

    def __call__(self):
        return "GMEE-USDT"


GMEE_USDT = GMEE_USDT(*GMEE_USDT._fields)


class SFUND_USDT(Symbol):
    """
        name: SFUND-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 5
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SFUND-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 5
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFUND-USDT"

    def __str__(self):
        return "SFUND-USDT"

    def __call__(self):
        return "SFUND-USDT"


SFUND_USDT = SFUND_USDT(*SFUND_USDT._fields)


class XAVA_USDT(Symbol):
    """
        name: XAVA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XAVA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XAVA-USDT"

    def __str__(self):
        return "XAVA-USDT"

    def __call__(self):
        return "XAVA-USDT"


XAVA_USDT = XAVA_USDT(*XAVA_USDT._fields)


class AI_USDT(Symbol):
    """
        name: AI-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AI-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AI-USDT"

    def __str__(self):
        return "AI-USDT"

    def __call__(self):
        return "AI-USDT"


AI_USDT = AI_USDT(*AI_USDT._fields)


class IOI_USDT(Symbol):
    """
        name: IOI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IOI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOI-USDT"

    def __str__(self):
        return "IOI-USDT"

    def __call__(self):
        return "IOI-USDT"


IOI_USDT = IOI_USDT(*IOI_USDT._fields)


class NFT_USDT(Symbol):
    """
        name: NFT-USDT
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100000
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "NFT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100000
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NFT-USDT"

    def __str__(self):
        return "NFT-USDT"

    def __call__(self):
        return "NFT-USDT"


NFT_USDT = NFT_USDT(*NFT_USDT._fields)


class NFT_TRX(Symbol):
    """
        name: NFT-TRX
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 10
        initial_margin: None
        min_order_size: 100000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NFT-TRX"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 10
    initial_margin: float = None
    min_order_size: float = 100000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NFT-TRX"

    def __str__(self):
        return "NFT-TRX"

    def __call__(self):
        return "NFT-TRX"


NFT_TRX = NFT_TRX(*NFT_TRX._fields)


class MNST_USDT(Symbol):
    """
        name: MNST-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MNST-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MNST-USDT"

    def __str__(self):
        return "MNST-USDT"

    def __call__(self):
        return "MNST-USDT"


MNST_USDT = MNST_USDT(*MNST_USDT._fields)


class MEM_USDT(Symbol):
    """
        name: MEM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MEM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MEM-USDT"

    def __str__(self):
        return "MEM-USDT"

    def __call__(self):
        return "MEM-USDT"


MEM_USDT = MEM_USDT(*MEM_USDT._fields)


class AGIX_USDT(Symbol):
    """
        name: AGIX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 5
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "AGIX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 5
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIX-USDT"

    def __str__(self):
        return "AGIX-USDT"

    def __call__(self):
        return "AGIX-USDT"


AGIX_USDT = AGIX_USDT(*AGIX_USDT._fields)


class AGIX_BTC(Symbol):
    """
        name: AGIX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 5
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AGIX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 5
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIX-BTC"

    def __str__(self):
        return "AGIX-BTC"

    def __call__(self):
        return "AGIX-BTC"


AGIX_BTC = AGIX_BTC(*AGIX_BTC._fields)


class AGIX_ETH(Symbol):
    """
        name: AGIX-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 5
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AGIX-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 5
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIX-ETH"

    def __str__(self):
        return "AGIX-ETH"

    def __call__(self):
        return "AGIX-ETH"


AGIX_ETH = AGIX_ETH(*AGIX_ETH._fields)


class CQT_USDT(Symbol):
    """
        name: CQT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CQT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CQT-USDT"

    def __str__(self):
        return "CQT-USDT"

    def __call__(self):
        return "CQT-USDT"


CQT_USDT = CQT_USDT(*CQT_USDT._fields)


class AIOZ_USDT(Symbol):
    """
        name: AIOZ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "AIOZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIOZ-USDT"

    def __str__(self):
        return "AIOZ-USDT"

    def __call__(self):
        return "AIOZ-USDT"


AIOZ_USDT = AIOZ_USDT(*AIOZ_USDT._fields)


class MARSH_USDT(Symbol):
    """
        name: MARSH-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MARSH-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MARSH-USDT"

    def __str__(self):
        return "MARSH-USDT"

    def __call__(self):
        return "MARSH-USDT"


MARSH_USDT = MARSH_USDT(*MARSH_USDT._fields)


class HAPI_USDT(Symbol):
    """
        name: HAPI-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HAPI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAPI-USDT"

    def __str__(self):
        return "HAPI-USDT"

    def __call__(self):
        return "HAPI-USDT"


HAPI_USDT = HAPI_USDT(*HAPI_USDT._fields)


class MODEFI_USDT(Symbol):
    """
        name: MODEFI-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MODEFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MODEFI-USDT"

    def __str__(self):
        return "MODEFI-USDT"

    def __call__(self):
        return "MODEFI-USDT"


MODEFI_USDT = MODEFI_USDT(*MODEFI_USDT._fields)


class MODEFI_BTC(Symbol):
    """
        name: MODEFI-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MODEFI-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MODEFI-BTC"

    def __str__(self):
        return "MODEFI-BTC"

    def __call__(self):
        return "MODEFI-BTC"


MODEFI_BTC = MODEFI_BTC(*MODEFI_BTC._fields)


class YFDAI_USDT(Symbol):
    """
        name: YFDAI-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "YFDAI-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFDAI-USDT"

    def __str__(self):
        return "YFDAI-USDT"

    def __call__(self):
        return "YFDAI-USDT"


YFDAI_USDT = YFDAI_USDT(*YFDAI_USDT._fields)


class YFDAI_BTC(Symbol):
    """
        name: YFDAI-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "YFDAI-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFDAI-BTC"

    def __str__(self):
        return "YFDAI-BTC"

    def __call__(self):
        return "YFDAI-BTC"


YFDAI_BTC = YFDAI_BTC(*YFDAI_BTC._fields)


class GENS_USDT(Symbol):
    """
        name: GENS-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GENS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GENS-USDT"

    def __str__(self):
        return "GENS-USDT"

    def __call__(self):
        return "GENS-USDT"


GENS_USDT = GENS_USDT(*GENS_USDT._fields)


class FORM_USDT(Symbol):
    """
        name: FORM-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FORM-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORM-USDT"

    def __str__(self):
        return "FORM-USDT"

    def __call__(self):
        return "FORM-USDT"


FORM_USDT = FORM_USDT(*FORM_USDT._fields)


class ARRR_USDT(Symbol):
    """
        name: ARRR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ARRR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARRR-USDT"

    def __str__(self):
        return "ARRR-USDT"

    def __call__(self):
        return "ARRR-USDT"


ARRR_USDT = ARRR_USDT(*ARRR_USDT._fields)


class ARRR_BTC(Symbol):
    """
        name: ARRR-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ARRR-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARRR-BTC"

    def __str__(self):
        return "ARRR-BTC"

    def __call__(self):
        return "ARRR-BTC"


ARRR_BTC = ARRR_BTC(*ARRR_BTC._fields)


class TOKO_KCS(Symbol):
    """
        name: TOKO-KCS
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TOKO-KCS"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOKO-KCS"

    def __str__(self):
        return "TOKO-KCS"

    def __call__(self):
        return "TOKO-KCS"


TOKO_KCS = TOKO_KCS(*TOKO_KCS._fields)


class LPT_USDT(Symbol):
    """
        name: LPT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LPT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPT-USDT"

    def __str__(self):
        return "LPT-USDT"

    def __call__(self):
        return "LPT-USDT"


LPT_USDT = LPT_USDT(*LPT_USDT._fields)


class ASD_USDT(Symbol):
    """
        name: ASD-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ASD-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASD-USDT"

    def __str__(self):
        return "ASD-USDT"

    def __call__(self):
        return "ASD-USDT"


ASD_USDT = ASD_USDT(*ASD_USDT._fields)


class BOND_USDT(Symbol):
    """
        name: BOND-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BOND-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOND-USDT"

    def __str__(self):
        return "BOND-USDT"

    def __call__(self):
        return "BOND-USDT"


BOND_USDT = BOND_USDT(*BOND_USDT._fields)


class HAI_BTC(Symbol):
    """
        name: HAI-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HAI-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAI-BTC"

    def __str__(self):
        return "HAI-BTC"

    def __call__(self):
        return "HAI-BTC"


HAI_BTC = HAI_BTC(*HAI_BTC._fields)


class SOUL_USDT(Symbol):
    """
        name: SOUL-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SOUL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOUL-USDT"

    def __str__(self):
        return "SOUL-USDT"

    def __call__(self):
        return "SOUL-USDT"


SOUL_USDT = SOUL_USDT(*SOUL_USDT._fields)


class TWOCRZ_USDT(Symbol):
    """
        name: 2CRZ-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "2CRZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "2CRZ-USDT"

    def __str__(self):
        return "2CRZ-USDT"

    def __call__(self):
        return "2CRZ-USDT"


TWOCRZ_USDT = TWOCRZ_USDT(*TWOCRZ_USDT._fields)


class NEAR_USDT(Symbol):
    """
        name: NEAR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "NEAR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR-USDT"

    def __str__(self):
        return "NEAR-USDT"

    def __call__(self):
        return "NEAR-USDT"


NEAR_USDT = NEAR_USDT(*NEAR_USDT._fields)


class NEAR_BTC(Symbol):
    """
        name: NEAR-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NEAR-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR-BTC"

    def __str__(self):
        return "NEAR-BTC"

    def __call__(self):
        return "NEAR-BTC"


NEAR_BTC = NEAR_BTC(*NEAR_BTC._fields)


class DFYN_USDT(Symbol):
    """
        name: DFYN-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DFYN-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFYN-USDT"

    def __str__(self):
        return "DFYN-USDT"

    def __call__(self):
        return "DFYN-USDT"


DFYN_USDT = DFYN_USDT(*DFYN_USDT._fields)


class OOE_USDT(Symbol):
    """
        name: OOE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OOE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOE-USDT"

    def __str__(self):
        return "OOE-USDT"

    def __call__(self):
        return "OOE-USDT"


OOE_USDT = OOE_USDT(*OOE_USDT._fields)


class CFG_USDT(Symbol):
    """
        name: CFG-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CFG-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFG-USDT"

    def __str__(self):
        return "CFG-USDT"

    def __call__(self):
        return "CFG-USDT"


CFG_USDT = CFG_USDT(*CFG_USDT._fields)


class CFG_BTC(Symbol):
    """
        name: CFG-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CFG-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFG-BTC"

    def __str__(self):
        return "CFG-BTC"

    def __call__(self):
        return "CFG-BTC"


CFG_BTC = CFG_BTC(*CFG_BTC._fields)


class AXS_USDT(Symbol):
    """
        name: AXS-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "AXS-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXS-USDT"

    def __str__(self):
        return "AXS-USDT"

    def __call__(self):
        return "AXS-USDT"


AXS_USDT = AXS_USDT(*AXS_USDT._fields)


class CLV_USDT(Symbol):
    """
        name: CLV-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CLV-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLV-USDT"

    def __str__(self):
        return "CLV-USDT"

    def __call__(self):
        return "CLV-USDT"


CLV_USDT = CLV_USDT(*CLV_USDT._fields)


class ROUTE_USDT(Symbol):
    """
        name: ROUTE-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ROUTE-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROUTE-USDT"

    def __str__(self):
        return "ROUTE-USDT"

    def __call__(self):
        return "ROUTE-USDT"


ROUTE_USDT = ROUTE_USDT(*ROUTE_USDT._fields)


class KAR_USDT(Symbol):
    """
        name: KAR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KAR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAR-USDT"

    def __str__(self):
        return "KAR-USDT"

    def __call__(self):
        return "KAR-USDT"


KAR_USDT = KAR_USDT(*KAR_USDT._fields)


class EFX_USDT(Symbol):
    """
        name: EFX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EFX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EFX-USDT"

    def __str__(self):
        return "EFX-USDT"

    def __call__(self):
        return "EFX-USDT"


EFX_USDT = EFX_USDT(*EFX_USDT._fields)


class XDC_BTC(Symbol):
    """
        name: XDC-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XDC-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDC-BTC"

    def __str__(self):
        return "XDC-BTC"

    def __call__(self):
        return "XDC-BTC"


XDC_BTC = XDC_BTC(*XDC_BTC._fields)


class PMON_USDT(Symbol):
    """
        name: PMON-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PMON-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PMON-USDT"

    def __str__(self):
        return "PMON-USDT"

    def __call__(self):
        return "PMON-USDT"


PMON_USDT = PMON_USDT(*PMON_USDT._fields)


class DPET_USDT(Symbol):
    """
        name: DPET-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DPET-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DPET-USDT"

    def __str__(self):
        return "DPET-USDT"

    def __call__(self):
        return "DPET-USDT"


DPET_USDT = DPET_USDT(*DPET_USDT._fields)


class ERG_USDT(Symbol):
    """
        name: ERG-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ERG-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERG-USDT"

    def __str__(self):
        return "ERG-USDT"

    def __call__(self):
        return "ERG-USDT"


ERG_USDT = ERG_USDT(*ERG_USDT._fields)


class ERG_BTC(Symbol):
    """
        name: ERG-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ERG-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERG-BTC"

    def __str__(self):
        return "ERG-BTC"

    def __call__(self):
        return "ERG-BTC"


ERG_BTC = ERG_BTC(*ERG_BTC._fields)


class SOL_USDT(Symbol):
    """
        name: SOL-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SOL-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOL-USDT"

    def __str__(self):
        return "SOL-USDT"

    def __call__(self):
        return "SOL-USDT"


SOL_USDT = SOL_USDT(*SOL_USDT._fields)


class SLP_USDT(Symbol):
    """
        name: SLP-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SLP-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLP-USDT"

    def __str__(self):
        return "SLP-USDT"

    def __call__(self):
        return "SLP-USDT"


SLP_USDT = SLP_USDT(*SLP_USDT._fields)


class LITH_USDT(Symbol):
    """
        name: LITH-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LITH-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITH-USDT"

    def __str__(self):
        return "LITH-USDT"

    def __call__(self):
        return "LITH-USDT"


LITH_USDT = LITH_USDT(*LITH_USDT._fields)


class LITH_ETH(Symbol):
    """
        name: LITH-ETH
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LITH-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITH-ETH"

    def __str__(self):
        return "LITH-ETH"

    def __call__(self):
        return "LITH-ETH"


LITH_ETH = LITH_ETH(*LITH_ETH._fields)


class XCH_USDT(Symbol):
    """
        name: XCH-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XCH-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCH-USDT"

    def __str__(self):
        return "XCH-USDT"

    def __call__(self):
        return "XCH-USDT"


XCH_USDT = XCH_USDT(*XCH_USDT._fields)


class HAKA_USDT(Symbol):
    """
        name: HAKA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HAKA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAKA-USDT"

    def __str__(self):
        return "HAKA-USDT"

    def __call__(self):
        return "HAKA-USDT"


HAKA_USDT = HAKA_USDT(*HAKA_USDT._fields)


class LAYER_BTC(Symbol):
    """
        name: LAYER-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LAYER-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAYER-BTC"

    def __str__(self):
        return "LAYER-BTC"

    def __call__(self):
        return "LAYER-BTC"


LAYER_BTC = LAYER_BTC(*LAYER_BTC._fields)


class MTL_USDT(Symbol):
    """
        name: MTL-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MTL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTL-USDT"

    def __str__(self):
        return "MTL-USDT"

    def __call__(self):
        return "MTL-USDT"


MTL_USDT = MTL_USDT(*MTL_USDT._fields)


class MTL_BTC(Symbol):
    """
        name: MTL-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MTL-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTL-BTC"

    def __str__(self):
        return "MTL-BTC"

    def __call__(self):
        return "MTL-BTC"


MTL_BTC = MTL_BTC(*MTL_BTC._fields)


class IOTX_USDT(Symbol):
    """
        name: IOTX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "IOTX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTX-USDT"

    def __str__(self):
        return "IOTX-USDT"

    def __call__(self):
        return "IOTX-USDT"


IOTX_USDT = IOTX_USDT(*IOTX_USDT._fields)


class GALA_USDT(Symbol):
    """
        name: GALAX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "GALAX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAX-USDT"

    def __str__(self):
        return "GALAX-USDT"

    def __call__(self):
        return "GALAX-USDT"


GALA_USDT = GALA_USDT(*GALA_USDT._fields)


class REQ_USDT(Symbol):
    """
        name: REQ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "REQ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQ-USDT"

    def __str__(self):
        return "REQ-USDT"

    def __call__(self):
        return "REQ-USDT"


REQ_USDT = REQ_USDT(*REQ_USDT._fields)


class TXA_USDT(Symbol):
    """
        name: TXA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TXA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TXA-USDT"

    def __str__(self):
        return "TXA-USDT"

    def __call__(self):
        return "TXA-USDT"


TXA_USDT = TXA_USDT(*TXA_USDT._fields)


class TXA_USDC(Symbol):
    """
        name: TXA-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TXA-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TXA-USDC"

    def __str__(self):
        return "TXA-USDC"

    def __call__(self):
        return "TXA-USDC"


TXA_USDC = TXA_USDC(*TXA_USDC._fields)


class CIRUS_USDT(Symbol):
    """
        name: CIRUS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CIRUS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CIRUS-USDT"

    def __str__(self):
        return "CIRUS-USDT"

    def __call__(self):
        return "CIRUS-USDT"


CIRUS_USDT = CIRUS_USDT(*CIRUS_USDT._fields)


class QI_USDT(Symbol):
    """
        name: QI-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "QI-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QI-USDT"

    def __str__(self):
        return "QI-USDT"

    def __call__(self):
        return "QI-USDT"


QI_USDT = QI_USDT(*QI_USDT._fields)


class QI_BTC(Symbol):
    """
        name: QI-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QI-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QI-BTC"

    def __str__(self):
        return "QI-BTC"

    def __call__(self):
        return "QI-BTC"


QI_BTC = QI_BTC(*QI_BTC._fields)


class ODDZ_USDT(Symbol):
    """
        name: ODDZ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ODDZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ODDZ-USDT"

    def __str__(self):
        return "ODDZ-USDT"

    def __call__(self):
        return "ODDZ-USDT"


ODDZ_USDT = ODDZ_USDT(*ODDZ_USDT._fields)


class PNT_USDT(Symbol):
    """
        name: PNT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PNT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PNT-USDT"

    def __str__(self):
        return "PNT-USDT"

    def __call__(self):
        return "PNT-USDT"


PNT_USDT = PNT_USDT(*PNT_USDT._fields)


class PNT_BTC(Symbol):
    """
        name: PNT-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PNT-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PNT-BTC"

    def __str__(self):
        return "PNT-BTC"

    def __call__(self):
        return "PNT-BTC"


PNT_BTC = PNT_BTC(*PNT_BTC._fields)


class XPR_USDT(Symbol):
    """
        name: XPR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "XPR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XPR-USDT"

    def __str__(self):
        return "XPR-USDT"

    def __call__(self):
        return "XPR-USDT"


XPR_USDT = XPR_USDT(*XPR_USDT._fields)


class XPR_BTC(Symbol):
    """
        name: XPR-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XPR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XPR-BTC"

    def __str__(self):
        return "XPR-BTC"

    def __call__(self):
        return "XPR-BTC"


XPR_BTC = XPR_BTC(*XPR_BTC._fields)


class TRIBE_USDT(Symbol):
    """
        name: TRIBE-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRIBE-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBE-USDT"

    def __str__(self):
        return "TRIBE-USDT"

    def __call__(self):
        return "TRIBE-USDT"


TRIBE_USDT = TRIBE_USDT(*TRIBE_USDT._fields)


class MOVR_USDT(Symbol):
    """
        name: MOVR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "MOVR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVR-USDT"

    def __str__(self):
        return "MOVR-USDT"

    def __call__(self):
        return "MOVR-USDT"


MOVR_USDT = MOVR_USDT(*MOVR_USDT._fields)


class MOVR_ETH(Symbol):
    """
        name: MOVR-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MOVR-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVR-ETH"

    def __str__(self):
        return "MOVR-ETH"

    def __call__(self):
        return "MOVR-ETH"


MOVR_ETH = MOVR_ETH(*MOVR_ETH._fields)


class WOO_USDT(Symbol):
    """
        name: WOO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "WOO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOO-USDT"

    def __str__(self):
        return "WOO-USDT"

    def __call__(self):
        return "WOO-USDT"


WOO_USDT = WOO_USDT(*WOO_USDT._fields)


class WILD_USDT(Symbol):
    """
        name: WILD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WILD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WILD-USDT"

    def __str__(self):
        return "WILD-USDT"

    def __call__(self):
        return "WILD-USDT"


WILD_USDT = WILD_USDT(*WILD_USDT._fields)


class QRDO_USDT(Symbol):
    """
        name: QRDO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QRDO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QRDO-USDT"

    def __str__(self):
        return "QRDO-USDT"

    def __call__(self):
        return "QRDO-USDT"


QRDO_USDT = QRDO_USDT(*QRDO_USDT._fields)


class QRDO_ETH(Symbol):
    """
        name: QRDO-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QRDO-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QRDO-ETH"

    def __str__(self):
        return "QRDO-ETH"

    def __call__(self):
        return "QRDO-ETH"


QRDO_ETH = QRDO_ETH(*QRDO_ETH._fields)


class MAKI_USDT(Symbol):
    """
        name: MAKI-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAKI-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAKI-USDT"

    def __str__(self):
        return "MAKI-USDT"

    def __call__(self):
        return "MAKI-USDT"


MAKI_USDT = MAKI_USDT(*MAKI_USDT._fields)


class MAKI_BTC(Symbol):
    """
        name: MAKI-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAKI-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAKI-BTC"

    def __str__(self):
        return "MAKI-BTC"

    def __call__(self):
        return "MAKI-BTC"


MAKI_BTC = MAKI_BTC(*MAKI_BTC._fields)


class OXT_USDT(Symbol):
    """
        name: OXT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OXT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXT-USDT"

    def __str__(self):
        return "OXT-USDT"

    def __call__(self):
        return "OXT-USDT"


OXT_USDT = OXT_USDT(*OXT_USDT._fields)


class OXT_BTC(Symbol):
    """
        name: OXT-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OXT-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXT-BTC"

    def __str__(self):
        return "OXT-BTC"

    def __call__(self):
        return "OXT-BTC"


OXT_BTC = OXT_BTC(*OXT_BTC._fields)


class OXT_ETH(Symbol):
    """
        name: OXT-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OXT-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXT-ETH"

    def __str__(self):
        return "OXT-ETH"

    def __call__(self):
        return "OXT-ETH"


OXT_ETH = OXT_ETH(*OXT_ETH._fields)


class BAL_USDT(Symbol):
    """
        name: BAL-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BAL-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAL-USDT"

    def __str__(self):
        return "BAL-USDT"

    def __call__(self):
        return "BAL-USDT"


BAL_USDT = BAL_USDT(*BAL_USDT._fields)


class BAL_BTC(Symbol):
    """
        name: BAL-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BAL-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAL-BTC"

    def __str__(self):
        return "BAL-BTC"

    def __call__(self):
        return "BAL-BTC"


BAL_BTC = BAL_BTC(*BAL_BTC._fields)


class BAL_ETH(Symbol):
    """
        name: BAL-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BAL-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAL-ETH"

    def __str__(self):
        return "BAL-ETH"

    def __call__(self):
        return "BAL-ETH"


BAL_ETH = BAL_ETH(*BAL_ETH._fields)


class STORJ_USDT(Symbol):
    """
        name: STORJ-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "STORJ-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJ-USDT"

    def __str__(self):
        return "STORJ-USDT"

    def __call__(self):
        return "STORJ-USDT"


STORJ_USDT = STORJ_USDT(*STORJ_USDT._fields)


class STORJ_BTC(Symbol):
    """
        name: STORJ-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STORJ-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJ-BTC"

    def __str__(self):
        return "STORJ-BTC"

    def __call__(self):
        return "STORJ-BTC"


STORJ_BTC = STORJ_BTC(*STORJ_BTC._fields)


class STORJ_ETH(Symbol):
    """
        name: STORJ-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STORJ-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJ-ETH"

    def __str__(self):
        return "STORJ-ETH"

    def __call__(self):
        return "STORJ-ETH"


STORJ_ETH = STORJ_ETH(*STORJ_ETH._fields)


class YGG_USDT(Symbol):
    """
        name: YGG-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "YGG-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGG-USDT"

    def __str__(self):
        return "YGG-USDT"

    def __call__(self):
        return "YGG-USDT"


YGG_USDT = YGG_USDT(*YGG_USDT._fields)


class NDAU_USDT(Symbol):
    """
        name: NDAU-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NDAU-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NDAU-USDT"

    def __str__(self):
        return "NDAU-USDT"

    def __call__(self):
        return "NDAU-USDT"


NDAU_USDT = NDAU_USDT(*NDAU_USDT._fields)


class SDAO_USDT(Symbol):
    """
        name: SDAO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SDAO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SDAO-USDT"

    def __str__(self):
        return "SDAO-USDT"

    def __call__(self):
        return "SDAO-USDT"


SDAO_USDT = SDAO_USDT(*SDAO_USDT._fields)


class SDAO_ETH(Symbol):
    """
        name: SDAO-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SDAO-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SDAO-ETH"

    def __str__(self):
        return "SDAO-ETH"

    def __call__(self):
        return "SDAO-ETH"


SDAO_ETH = SDAO_ETH(*SDAO_ETH._fields)


class XRP3L_USDT(Symbol):
    """
        name: XRP3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XRP3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP3L-USDT"

    def __str__(self):
        return "XRP3L-USDT"

    def __call__(self):
        return "XRP3L-USDT"


XRP3L_USDT = XRP3L_USDT(*XRP3L_USDT._fields)


class XRP3S_USDT(Symbol):
    """
        name: XRP3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 9999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "XRP3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 9999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP3S-USDT"

    def __str__(self):
        return "XRP3S-USDT"

    def __call__(self):
        return "XRP3S-USDT"


XRP3S_USDT = XRP3S_USDT(*XRP3S_USDT._fields)


class SKL_USDT(Symbol):
    """
        name: SKL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SKL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKL-USDT"

    def __str__(self):
        return "SKL-USDT"

    def __call__(self):
        return "SKL-USDT"


SKL_USDT = SKL_USDT(*SKL_USDT._fields)


class SKL_BTC(Symbol):
    """
        name: SKL-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SKL-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKL-BTC"

    def __str__(self):
        return "SKL-BTC"

    def __call__(self):
        return "SKL-BTC"


SKL_BTC = SKL_BTC(*SKL_BTC._fields)


class NMR_USDT(Symbol):
    """
        name: NMR-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NMR-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMR-USDT"

    def __str__(self):
        return "NMR-USDT"

    def __call__(self):
        return "NMR-USDT"


NMR_USDT = NMR_USDT(*NMR_USDT._fields)


class NMR_BTC(Symbol):
    """
        name: NMR-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NMR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMR-BTC"

    def __str__(self):
        return "NMR-BTC"

    def __call__(self):
        return "NMR-BTC"


NMR_BTC = NMR_BTC(*NMR_BTC._fields)


class IXS_USDT(Symbol):
    """
        name: IXS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IXS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IXS-USDT"

    def __str__(self):
        return "IXS-USDT"

    def __call__(self):
        return "IXS-USDT"


IXS_USDT = IXS_USDT(*IXS_USDT._fields)


class TRB_USDT(Symbol):
    """
        name: TRB-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRB-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRB-USDT"

    def __str__(self):
        return "TRB-USDT"

    def __call__(self):
        return "TRB-USDT"


TRB_USDT = TRB_USDT(*TRB_USDT._fields)


class TRB_BTC(Symbol):
    """
        name: TRB-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRB-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRB-BTC"

    def __str__(self):
        return "TRB-BTC"

    def __call__(self):
        return "TRB-BTC"


TRB_BTC = TRB_BTC(*TRB_BTC._fields)


class DYDX_USDT(Symbol):
    """
        name: DYDX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DYDX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDX-USDT"

    def __str__(self):
        return "DYDX-USDT"

    def __call__(self):
        return "DYDX-USDT"


DYDX_USDT = DYDX_USDT(*DYDX_USDT._fields)


class XYO_USDT(Symbol):
    """
        name: XYO-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XYO-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYO-USDT"

    def __str__(self):
        return "XYO-USDT"

    def __call__(self):
        return "XYO-USDT"


XYO_USDT = XYO_USDT(*XYO_USDT._fields)


class GTC_USDT(Symbol):
    """
        name: GTC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GTC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTC-USDT"

    def __str__(self):
        return "GTC-USDT"

    def __call__(self):
        return "GTC-USDT"


GTC_USDT = GTC_USDT(*GTC_USDT._fields)


class GTC_BTC(Symbol):
    """
        name: GTC-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GTC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTC-BTC"

    def __str__(self):
        return "GTC-BTC"

    def __call__(self):
        return "GTC-BTC"


GTC_BTC = GTC_BTC(*GTC_BTC._fields)


class EQX_USDT(Symbol):
    """
        name: EQX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EQX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EQX-USDT"

    def __str__(self):
        return "EQX-USDT"

    def __call__(self):
        return "EQX-USDT"


EQX_USDT = EQX_USDT(*EQX_USDT._fields)


class EQX_BTC(Symbol):
    """
        name: EQX-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EQX-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EQX-BTC"

    def __str__(self):
        return "EQX-BTC"

    def __call__(self):
        return "EQX-BTC"


EQX_BTC = EQX_BTC(*EQX_BTC._fields)


class RLC_USDT(Symbol):
    """
        name: RLC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "RLC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLC-USDT"

    def __str__(self):
        return "RLC-USDT"

    def __call__(self):
        return "RLC-USDT"


RLC_USDT = RLC_USDT(*RLC_USDT._fields)


class RLC_BTC(Symbol):
    """
        name: RLC-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RLC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLC-BTC"

    def __str__(self):
        return "RLC-BTC"

    def __call__(self):
        return "RLC-BTC"


RLC_BTC = RLC_BTC(*RLC_BTC._fields)


class XPRT_USDT(Symbol):
    """
        name: XPRT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XPRT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XPRT-USDT"

    def __str__(self):
        return "XPRT-USDT"

    def __call__(self):
        return "XPRT-USDT"


XPRT_USDT = XPRT_USDT(*XPRT_USDT._fields)


class EGLD_USDT(Symbol):
    """
        name: EGLD-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "EGLD-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLD-USDT"

    def __str__(self):
        return "EGLD-USDT"

    def __call__(self):
        return "EGLD-USDT"


EGLD_USDT = EGLD_USDT(*EGLD_USDT._fields)


class EGLD_BTC(Symbol):
    """
        name: EGLD-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EGLD-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLD-BTC"

    def __str__(self):
        return "EGLD-BTC"

    def __call__(self):
        return "EGLD-BTC"


EGLD_BTC = EGLD_BTC(*EGLD_BTC._fields)


class HBAR_USDT(Symbol):
    """
        name: HBAR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "HBAR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBAR-USDT"

    def __str__(self):
        return "HBAR-USDT"

    def __call__(self):
        return "HBAR-USDT"


HBAR_USDT = HBAR_USDT(*HBAR_USDT._fields)


class HBAR_BTC(Symbol):
    """
        name: HBAR-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HBAR-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBAR-BTC"

    def __str__(self):
        return "HBAR-BTC"

    def __call__(self):
        return "HBAR-BTC"


HBAR_BTC = HBAR_BTC(*HBAR_BTC._fields)


class DOGE3L_USDT(Symbol):
    """
        name: DOGE3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOGE3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE3L-USDT"

    def __str__(self):
        return "DOGE3L-USDT"

    def __call__(self):
        return "DOGE3L-USDT"


DOGE3L_USDT = DOGE3L_USDT(*DOGE3L_USDT._fields)


class DOGE3S_USDT(Symbol):
    """
        name: DOGE3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOGE3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE3S-USDT"

    def __str__(self):
        return "DOGE3S-USDT"

    def __call__(self):
        return "DOGE3S-USDT"


DOGE3S_USDT = DOGE3S_USDT(*DOGE3S_USDT._fields)


class FLOW_USDT(Symbol):
    """
        name: FLOW-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FLOW-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOW-USDT"

    def __str__(self):
        return "FLOW-USDT"

    def __call__(self):
        return "FLOW-USDT"


FLOW_USDT = FLOW_USDT(*FLOW_USDT._fields)


class FLOW_BTC(Symbol):
    """
        name: FLOW-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FLOW-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOW-BTC"

    def __str__(self):
        return "FLOW-BTC"

    def __call__(self):
        return "FLOW-BTC"


FLOW_BTC = FLOW_BTC(*FLOW_BTC._fields)


class NKN_USDT(Symbol):
    """
        name: NKN-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "NKN-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKN-USDT"

    def __str__(self):
        return "NKN-USDT"

    def __call__(self):
        return "NKN-USDT"


NKN_USDT = NKN_USDT(*NKN_USDT._fields)


class NKN_BTC(Symbol):
    """
        name: NKN-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NKN-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKN-BTC"

    def __str__(self):
        return "NKN-BTC"

    def __call__(self):
        return "NKN-BTC"


NKN_BTC = NKN_BTC(*NKN_BTC._fields)


class PBX_USDT(Symbol):
    """
        name: PBX-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PBX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PBX-USDT"

    def __str__(self):
        return "PBX-USDT"

    def __call__(self):
        return "PBX-USDT"


PBX_USDT = PBX_USDT(*PBX_USDT._fields)


class SOL3L_USDT(Symbol):
    """
        name: SOL3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SOL3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOL3L-USDT"

    def __str__(self):
        return "SOL3L-USDT"

    def __call__(self):
        return "SOL3L-USDT"


SOL3L_USDT = SOL3L_USDT(*SOL3L_USDT._fields)


class SOL3S_USDT(Symbol):
    """
        name: SOL3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SOL3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOL3S-USDT"

    def __str__(self):
        return "SOL3S-USDT"

    def __call__(self):
        return "SOL3S-USDT"


SOL3S_USDT = SOL3S_USDT(*SOL3S_USDT._fields)


class MLN_USDT(Symbol):
    """
        name: MLN-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MLN-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLN-USDT"

    def __str__(self):
        return "MLN-USDT"

    def __call__(self):
        return "MLN-USDT"


MLN_USDT = MLN_USDT(*MLN_USDT._fields)


class MLN_BTC(Symbol):
    """
        name: MLN-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MLN-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLN-BTC"

    def __str__(self):
        return "MLN-BTC"

    def __call__(self):
        return "MLN-BTC"


MLN_BTC = MLN_BTC(*MLN_BTC._fields)


class XNL_USDT(Symbol):
    """
        name: XNL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XNL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNL-USDT"

    def __str__(self):
        return "XNL-USDT"

    def __call__(self):
        return "XNL-USDT"


XNL_USDT = XNL_USDT(*XNL_USDT._fields)


class SOLVE_USDT(Symbol):
    """
        name: SOLVE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SOLVE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLVE-USDT"

    def __str__(self):
        return "SOLVE-USDT"

    def __call__(self):
        return "SOLVE-USDT"


SOLVE_USDT = SOLVE_USDT(*SOLVE_USDT._fields)


class DMTR_USDT(Symbol):
    """
        name: DMTR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DMTR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DMTR-USDT"

    def __str__(self):
        return "DMTR-USDT"

    def __call__(self):
        return "DMTR-USDT"


DMTR_USDT = DMTR_USDT(*DMTR_USDT._fields)


class LINK3L_USDT(Symbol):
    """
        name: LINK3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "LINK3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK3L-USDT"

    def __str__(self):
        return "LINK3L-USDT"

    def __call__(self):
        return "LINK3L-USDT"


LINK3L_USDT = LINK3L_USDT(*LINK3L_USDT._fields)


class LINK3S_USDT(Symbol):
    """
        name: LINK3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "LINK3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK3S-USDT"

    def __str__(self):
        return "LINK3S-USDT"

    def __call__(self):
        return "LINK3S-USDT"


LINK3S_USDT = LINK3S_USDT(*LINK3S_USDT._fields)


class DOT3L_USDT(Symbol):
    """
        name: DOT3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOT3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT3L-USDT"

    def __str__(self):
        return "DOT3L-USDT"

    def __call__(self):
        return "DOT3L-USDT"


DOT3L_USDT = DOT3L_USDT(*DOT3L_USDT._fields)


class DOT3S_USDT(Symbol):
    """
        name: DOT3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOT3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT3S-USDT"

    def __str__(self):
        return "DOT3S-USDT"

    def __call__(self):
        return "DOT3S-USDT"


DOT3S_USDT = DOT3S_USDT(*DOT3S_USDT._fields)


class CTSI_USDT(Symbol):
    """
        name: CTSI-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CTSI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSI-USDT"

    def __str__(self):
        return "CTSI-USDT"

    def __call__(self):
        return "CTSI-USDT"


CTSI_USDT = CTSI_USDT(*CTSI_USDT._fields)


class CTSI_BTC(Symbol):
    """
        name: CTSI-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CTSI-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSI-BTC"

    def __str__(self):
        return "CTSI-BTC"

    def __call__(self):
        return "CTSI-BTC"


CTSI_BTC = CTSI_BTC(*CTSI_BTC._fields)


class ALICE_USDT(Symbol):
    """
        name: ALICE-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ALICE-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICE-USDT"

    def __str__(self):
        return "ALICE-USDT"

    def __call__(self):
        return "ALICE-USDT"


ALICE_USDT = ALICE_USDT(*ALICE_USDT._fields)


class ALICE_BTC(Symbol):
    """
        name: ALICE-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALICE-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICE-BTC"

    def __str__(self):
        return "ALICE-BTC"

    def __call__(self):
        return "ALICE-BTC"


ALICE_BTC = ALICE_BTC(*ALICE_BTC._fields)


class ALICE_ETH(Symbol):
    """
        name: ALICE-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALICE-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICE-ETH"

    def __str__(self):
        return "ALICE-ETH"

    def __call__(self):
        return "ALICE-ETH"


ALICE_ETH = ALICE_ETH(*ALICE_ETH._fields)


class OPUL_USDT(Symbol):
    """
        name: OPUL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OPUL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPUL-USDT"

    def __str__(self):
        return "OPUL-USDT"

    def __call__(self):
        return "OPUL-USDT"


OPUL_USDT = OPUL_USDT(*OPUL_USDT._fields)


class ILV_USDT(Symbol):
    """
        name: ILV-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ILV-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILV-USDT"

    def __str__(self):
        return "ILV-USDT"

    def __call__(self):
        return "ILV-USDT"


ILV_USDT = ILV_USDT(*ILV_USDT._fields)


class BAND_USDT(Symbol):
    """
        name: BAND-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BAND-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAND-USDT"

    def __str__(self):
        return "BAND-USDT"

    def __call__(self):
        return "BAND-USDT"


BAND_USDT = BAND_USDT(*BAND_USDT._fields)


class BAND_BTC(Symbol):
    """
        name: BAND-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BAND-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAND-BTC"

    def __str__(self):
        return "BAND-BTC"

    def __call__(self):
        return "BAND-BTC"


BAND_BTC = BAND_BTC(*BAND_BTC._fields)


class FTT_USDT(Symbol):
    """
        name: FTT-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FTT-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTT-USDT"

    def __str__(self):
        return "FTT-USDT"

    def __call__(self):
        return "FTT-USDT"


FTT_USDT = FTT_USDT(*FTT_USDT._fields)


class FTT_BTC(Symbol):
    """
        name: FTT-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FTT-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTT-BTC"

    def __str__(self):
        return "FTT-BTC"

    def __call__(self):
        return "FTT-BTC"


FTT_BTC = FTT_BTC(*FTT_BTC._fields)


class DVPN_USDT(Symbol):
    """
        name: DVPN-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DVPN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DVPN-USDT"

    def __str__(self):
        return "DVPN-USDT"

    def __call__(self):
        return "DVPN-USDT"


DVPN_USDT = DVPN_USDT(*DVPN_USDT._fields)


class SKU_USDT(Symbol):
    """
        name: SKU-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SKU-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKU-USDT"

    def __str__(self):
        return "SKU-USDT"

    def __call__(self):
        return "SKU-USDT"


SKU_USDT = SKU_USDT(*SKU_USDT._fields)


class SKU_BTC(Symbol):
    """
        name: SKU-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SKU-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKU-BTC"

    def __str__(self):
        return "SKU-BTC"

    def __call__(self):
        return "SKU-BTC"


SKU_BTC = SKU_BTC(*SKU_BTC._fields)


class SLIM_USDT(Symbol):
    """
        name: SLIM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SLIM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLIM-USDT"

    def __str__(self):
        return "SLIM-USDT"

    def __call__(self):
        return "SLIM-USDT"


SLIM_USDT = SLIM_USDT(*SLIM_USDT._fields)


class TLM_USDT(Symbol):
    """
        name: TLM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "TLM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLM-USDT"

    def __str__(self):
        return "TLM-USDT"

    def __call__(self):
        return "TLM-USDT"


TLM_USDT = TLM_USDT(*TLM_USDT._fields)


class TLM_BTC(Symbol):
    """
        name: TLM-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TLM-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLM-BTC"

    def __str__(self):
        return "TLM-BTC"

    def __call__(self):
        return "TLM-BTC"


TLM_BTC = TLM_BTC(*TLM_BTC._fields)


class TLM_ETH(Symbol):
    """
        name: TLM-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TLM-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLM-ETH"

    def __str__(self):
        return "TLM-ETH"

    def __call__(self):
        return "TLM-ETH"


TLM_ETH = TLM_ETH(*TLM_ETH._fields)


class DEXE_USDT(Symbol):
    """
        name: DEXE-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DEXE-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXE-USDT"

    def __str__(self):
        return "DEXE-USDT"

    def __call__(self):
        return "DEXE-USDT"


DEXE_USDT = DEXE_USDT(*DEXE_USDT._fields)


class DEXE_BTC(Symbol):
    """
        name: DEXE-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DEXE-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXE-BTC"

    def __str__(self):
        return "DEXE-BTC"

    def __call__(self):
        return "DEXE-BTC"


DEXE_BTC = DEXE_BTC(*DEXE_BTC._fields)


class DEXE_ETH(Symbol):
    """
        name: DEXE-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DEXE-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXE-ETH"

    def __str__(self):
        return "DEXE-ETH"

    def __call__(self):
        return "DEXE-ETH"


DEXE_ETH = DEXE_ETH(*DEXE_ETH._fields)


class MATTER_USDT(Symbol):
    """
        name: MATTER-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MATTER-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATTER-USDT"

    def __str__(self):
        return "MATTER-USDT"

    def __call__(self):
        return "MATTER-USDT"


MATTER_USDT = MATTER_USDT(*MATTER_USDT._fields)


class CUDOS_BTC(Symbol):
    """
        name: CUDOS-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CUDOS-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CUDOS-BTC"

    def __str__(self):
        return "CUDOS-BTC"

    def __call__(self):
        return "CUDOS-BTC"


CUDOS_BTC = CUDOS_BTC(*CUDOS_BTC._fields)


class RUNE_USDT(Symbol):
    """
        name: RUNE-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "RUNE-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNE-USDT"

    def __str__(self):
        return "RUNE-USDT"

    def __call__(self):
        return "RUNE-USDT"


RUNE_USDT = RUNE_USDT(*RUNE_USDT._fields)


class RUNE_BTC(Symbol):
    """
        name: RUNE-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RUNE-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNE-BTC"

    def __str__(self):
        return "RUNE-BTC"

    def __call__(self):
        return "RUNE-BTC"


RUNE_BTC = RUNE_BTC(*RUNE_BTC._fields)


class RMRK_USDT(Symbol):
    """
        name: RMRK-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RMRK-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RMRK-USDT"

    def __str__(self):
        return "RMRK-USDT"

    def __call__(self):
        return "RMRK-USDT"


RMRK_USDT = RMRK_USDT(*RMRK_USDT._fields)


class C98_USDT(Symbol):
    """
        name: C98-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "C98-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98-USDT"

    def __str__(self):
        return "C98-USDT"

    def __call__(self):
        return "C98-USDT"


C98_USDT = C98_USDT(*C98_USDT._fields)


class BLOK_USDT(Symbol):
    """
        name: BLOK-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BLOK-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLOK-USDT"

    def __str__(self):
        return "BLOK-USDT"

    def __call__(self):
        return "BLOK-USDT"


BLOK_USDT = BLOK_USDT(*BLOK_USDT._fields)


class SOLR_USDT(Symbol):
    """
        name: SOLR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SOLR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLR-USDT"

    def __str__(self):
        return "SOLR-USDT"

    def __call__(self):
        return "SOLR-USDT"


SOLR_USDT = SOLR_USDT(*SOLR_USDT._fields)


class ATOM3L_USDT(Symbol):
    """
        name: ATOM3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ATOM3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM3L-USDT"

    def __str__(self):
        return "ATOM3L-USDT"

    def __call__(self):
        return "ATOM3L-USDT"


ATOM3L_USDT = ATOM3L_USDT(*ATOM3L_USDT._fields)


class ATOM3S_USDT(Symbol):
    """
        name: ATOM3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ATOM3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM3S-USDT"

    def __str__(self):
        return "ATOM3S-USDT"

    def __call__(self):
        return "ATOM3S-USDT"


ATOM3S_USDT = ATOM3S_USDT(*ATOM3S_USDT._fields)


class UNI3L_USDT(Symbol):
    """
        name: UNI3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "UNI3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNI3L-USDT"

    def __str__(self):
        return "UNI3L-USDT"

    def __call__(self):
        return "UNI3L-USDT"


UNI3L_USDT = UNI3L_USDT(*UNI3L_USDT._fields)


class UNI3S_USDT(Symbol):
    """
        name: UNI3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "UNI3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNI3S-USDT"

    def __str__(self):
        return "UNI3S-USDT"

    def __call__(self):
        return "UNI3S-USDT"


UNI3S_USDT = UNI3S_USDT(*UNI3S_USDT._fields)


class WSIENNA_USDT(Symbol):
    """
        name: WSIENNA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WSIENNA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WSIENNA-USDT"

    def __str__(self):
        return "WSIENNA-USDT"

    def __call__(self):
        return "WSIENNA-USDT"


WSIENNA_USDT = WSIENNA_USDT(*WSIENNA_USDT._fields)


class PUSH_USDT(Symbol):
    """
        name: PUSH-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PUSH-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUSH-USDT"

    def __str__(self):
        return "PUSH-USDT"

    def __call__(self):
        return "PUSH-USDT"


PUSH_USDT = PUSH_USDT(*PUSH_USDT._fields)


class PUSH_BTC(Symbol):
    """
        name: PUSH-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PUSH-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUSH-BTC"

    def __str__(self):
        return "PUSH-BTC"

    def __call__(self):
        return "PUSH-BTC"


PUSH_BTC = PUSH_BTC(*PUSH_BTC._fields)


class FORM_ETH(Symbol):
    """
        name: FORM-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FORM-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORM-ETH"

    def __str__(self):
        return "FORM-ETH"

    def __call__(self):
        return "FORM-ETH"


FORM_ETH = FORM_ETH(*FORM_ETH._fields)


class NTVRK_USDT(Symbol):
    """
        name: NTVRK-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NTVRK-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NTVRK-USDT"

    def __str__(self):
        return "NTVRK-USDT"

    def __call__(self):
        return "NTVRK-USDT"


NTVRK_USDT = NTVRK_USDT(*NTVRK_USDT._fields)


class NTVRK_USDC(Symbol):
    """
        name: NTVRK-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NTVRK-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NTVRK-USDC"

    def __str__(self):
        return "NTVRK-USDC"

    def __call__(self):
        return "NTVRK-USDC"


NTVRK_USDC = NTVRK_USDC(*NTVRK_USDC._fields)


class AXS3L_USDT(Symbol):
    """
        name: AXS3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "AXS3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXS3L-USDT"

    def __str__(self):
        return "AXS3L-USDT"

    def __call__(self):
        return "AXS3L-USDT"


AXS3L_USDT = AXS3L_USDT(*AXS3L_USDT._fields)


class AXS3S_USDT(Symbol):
    """
        name: AXS3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "AXS3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXS3S-USDT"

    def __str__(self):
        return "AXS3S-USDT"

    def __call__(self):
        return "AXS3S-USDT"


AXS3S_USDT = AXS3S_USDT(*AXS3S_USDT._fields)


class FTM3L_USDT(Symbol):
    """
        name: FTM3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "FTM3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM3L-USDT"

    def __str__(self):
        return "FTM3L-USDT"

    def __call__(self):
        return "FTM3L-USDT"


FTM3L_USDT = FTM3L_USDT(*FTM3L_USDT._fields)


class FTM3S_USDT(Symbol):
    """
        name: FTM3S-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "FTM3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM3S-USDT"

    def __str__(self):
        return "FTM3S-USDT"

    def __call__(self):
        return "FTM3S-USDT"


FTM3S_USDT = FTM3S_USDT(*FTM3S_USDT._fields)


class FLAME_USDT(Symbol):
    """
        name: FLAME-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FLAME-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLAME-USDT"

    def __str__(self):
        return "FLAME-USDT"

    def __call__(self):
        return "FLAME-USDT"


FLAME_USDT = FLAME_USDT(*FLAME_USDT._fields)


class AGLD_USDT(Symbol):
    """
        name: AGLD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AGLD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLD-USDT"

    def __str__(self):
        return "AGLD-USDT"

    def __call__(self):
        return "AGLD-USDT"


AGLD_USDT = AGLD_USDT(*AGLD_USDT._fields)


class NAKA_USDT(Symbol):
    """
        name: NAKA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NAKA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAKA-USDT"

    def __str__(self):
        return "NAKA-USDT"

    def __call__(self):
        return "NAKA-USDT"


NAKA_USDT = NAKA_USDT(*NAKA_USDT._fields)


class YLD_USDT(Symbol):
    """
        name: YLD-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "YLD-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YLD-USDT"

    def __str__(self):
        return "YLD-USDT"

    def __call__(self):
        return "YLD-USDT"


YLD_USDT = YLD_USDT(*YLD_USDT._fields)


class TONE_USDT(Symbol):
    """
        name: TONE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TONE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TONE-USDT"

    def __str__(self):
        return "TONE-USDT"

    def __call__(self):
        return "TONE-USDT"


TONE_USDT = TONE_USDT(*TONE_USDT._fields)


class REEF_USDT(Symbol):
    """
        name: REEF-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REEF-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEF-USDT"

    def __str__(self):
        return "REEF-USDT"

    def __call__(self):
        return "REEF-USDT"


REEF_USDT = REEF_USDT(*REEF_USDT._fields)


class REEF_BTC(Symbol):
    """
        name: REEF-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REEF-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEF-BTC"

    def __str__(self):
        return "REEF-BTC"

    def __call__(self):
        return "REEF-BTC"


REEF_BTC = REEF_BTC(*REEF_BTC._fields)


class TIDAL_USDT(Symbol):
    """
        name: TIDAL-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TIDAL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TIDAL-USDT"

    def __str__(self):
        return "TIDAL-USDT"

    def __call__(self):
        return "TIDAL-USDT"


TIDAL_USDT = TIDAL_USDT(*TIDAL_USDT._fields)


class TVK_USDT(Symbol):
    """
        name: TVK-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TVK-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVK-USDT"

    def __str__(self):
        return "TVK-USDT"

    def __call__(self):
        return "TVK-USDT"


TVK_USDT = TVK_USDT(*TVK_USDT._fields)


class TVK_BTC(Symbol):
    """
        name: TVK-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TVK-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVK-BTC"

    def __str__(self):
        return "TVK-BTC"

    def __call__(self):
        return "TVK-BTC"


TVK_BTC = TVK_BTC(*TVK_BTC._fields)


class INJ_USDT(Symbol):
    """
        name: INJ-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "INJ-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJ-USDT"

    def __str__(self):
        return "INJ-USDT"

    def __call__(self):
        return "INJ-USDT"


INJ_USDT = INJ_USDT(*INJ_USDT._fields)


class INJ_BTC(Symbol):
    """
        name: INJ-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "INJ-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJ-BTC"

    def __str__(self):
        return "INJ-BTC"

    def __call__(self):
        return "INJ-BTC"


INJ_BTC = INJ_BTC(*INJ_BTC._fields)


class BNB3L_USDT(Symbol):
    """
        name: BNB3L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "BNB3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB3L-USDT"

    def __str__(self):
        return "BNB3L-USDT"

    def __call__(self):
        return "BNB3L-USDT"


BNB3L_USDT = BNB3L_USDT(*BNB3L_USDT._fields)


class BNB3S_USDT(Symbol):
    """
        name: BNB3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "BNB3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB3S-USDT"

    def __str__(self):
        return "BNB3S-USDT"

    def __call__(self):
        return "BNB3S-USDT"


BNB3S_USDT = BNB3S_USDT(*BNB3S_USDT._fields)


class MATIC3L_USDT(Symbol):
    """
        name: MATIC3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "MATIC3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC3L-USDT"

    def __str__(self):
        return "MATIC3L-USDT"

    def __call__(self):
        return "MATIC3L-USDT"


MATIC3L_USDT = MATIC3L_USDT(*MATIC3L_USDT._fields)


class MATIC3S_USDT(Symbol):
    """
        name: MATIC3S-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "MATIC3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC3S-USDT"

    def __str__(self):
        return "MATIC3S-USDT"

    def __call__(self):
        return "MATIC3S-USDT"


MATIC3S_USDT = MATIC3S_USDT(*MATIC3S_USDT._fields)


class VEGA_USDT(Symbol):
    """
        name: VEGA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VEGA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEGA-USDT"

    def __str__(self):
        return "VEGA-USDT"

    def __call__(self):
        return "VEGA-USDT"


VEGA_USDT = VEGA_USDT(*VEGA_USDT._fields)


class VEGA_ETH(Symbol):
    """
        name: VEGA-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VEGA-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEGA-ETH"

    def __str__(self):
        return "VEGA-ETH"

    def __call__(self):
        return "VEGA-ETH"


VEGA_ETH = VEGA_ETH(*VEGA_ETH._fields)


class ALPHA_USDT(Symbol):
    """
        name: ALPHA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALPHA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHA-USDT"

    def __str__(self):
        return "ALPHA-USDT"

    def __call__(self):
        return "ALPHA-USDT"


ALPHA_USDT = ALPHA_USDT(*ALPHA_USDT._fields)


class ALPHA_BTC(Symbol):
    """
        name: ALPHA-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALPHA-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHA-BTC"

    def __str__(self):
        return "ALPHA-BTC"

    def __call__(self):
        return "ALPHA-BTC"


ALPHA_BTC = ALPHA_BTC(*ALPHA_BTC._fields)


class UNO_BTC(Symbol):
    """
        name: UNO-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UNO-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNO-BTC"

    def __str__(self):
        return "UNO-BTC"

    def __call__(self):
        return "UNO-BTC"


UNO_BTC = UNO_BTC(*UNO_BTC._fields)


class ZKT_USDT(Symbol):
    """
        name: ZKT-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZKT-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZKT-USDT"

    def __str__(self):
        return "ZKT-USDT"

    def __call__(self):
        return "ZKT-USDT"


ZKT_USDT = ZKT_USDT(*ZKT_USDT._fields)


class AR_USDT(Symbol):
    """
        name: AR-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "AR-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AR-USDT"

    def __str__(self):
        return "AR-USDT"

    def __call__(self):
        return "AR-USDT"


AR_USDT = AR_USDT(*AR_USDT._fields)


class AR_BTC(Symbol):
    """
        name: AR-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AR-BTC"

    def __str__(self):
        return "AR-BTC"

    def __call__(self):
        return "AR-BTC"


AR_BTC = AR_BTC(*AR_BTC._fields)


class JASMY_USDT(Symbol):
    """
        name: JASMY-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "JASMY-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMY-USDT"

    def __str__(self):
        return "JASMY-USDT"

    def __call__(self):
        return "JASMY-USDT"


JASMY_USDT = JASMY_USDT(*JASMY_USDT._fields)


class PERP_USDT(Symbol):
    """
        name: PERP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PERP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERP-USDT"

    def __str__(self):
        return "PERP-USDT"

    def __call__(self):
        return "PERP-USDT"


PERP_USDT = PERP_USDT(*PERP_USDT._fields)


class PERP_BTC(Symbol):
    """
        name: PERP-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PERP-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERP-BTC"

    def __str__(self):
        return "PERP-BTC"

    def __call__(self):
        return "PERP-BTC"


PERP_BTC = PERP_BTC(*PERP_BTC._fields)


class SCLP_USDT(Symbol):
    """
        name: SCLP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SCLP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCLP-USDT"

    def __str__(self):
        return "SCLP-USDT"

    def __call__(self):
        return "SCLP-USDT"


SCLP_USDT = SCLP_USDT(*SCLP_USDT._fields)


class SCLP_BTC(Symbol):
    """
        name: SCLP-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SCLP-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCLP-BTC"

    def __str__(self):
        return "SCLP-BTC"

    def __call__(self):
        return "SCLP-BTC"


SCLP_BTC = SCLP_BTC(*SCLP_BTC._fields)


class SUPER_USDT(Symbol):
    """
        name: SUPER-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SUPER-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPER-USDT"

    def __str__(self):
        return "SUPER-USDT"

    def __call__(self):
        return "SUPER-USDT"


SUPER_USDT = SUPER_USDT(*SUPER_USDT._fields)


class SUPER_BTC(Symbol):
    """
        name: SUPER-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUPER-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPER-BTC"

    def __str__(self):
        return "SUPER-BTC"

    def __call__(self):
        return "SUPER-BTC"


SUPER_BTC = SUPER_BTC(*SUPER_BTC._fields)


class CPOOL_USDT(Symbol):
    """
        name: CPOOL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CPOOL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CPOOL-USDT"

    def __str__(self):
        return "CPOOL-USDT"

    def __call__(self):
        return "CPOOL-USDT"


CPOOL_USDT = CPOOL_USDT(*CPOOL_USDT._fields)


class HERO_USDT(Symbol):
    """
        name: HERO-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 50
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HERO-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 50
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HERO-USDT"

    def __str__(self):
        return "HERO-USDT"

    def __call__(self):
        return "HERO-USDT"


HERO_USDT = HERO_USDT(*HERO_USDT._fields)


class BASIC_USDT(Symbol):
    """
        name: BASIC-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BASIC-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BASIC-USDT"

    def __str__(self):
        return "BASIC-USDT"

    def __call__(self):
        return "BASIC-USDT"


BASIC_USDT = BASIC_USDT(*BASIC_USDT._fields)


class XED_USDT(Symbol):
    """
        name: XED-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XED-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XED-USDT"

    def __str__(self):
        return "XED-USDT"

    def __call__(self):
        return "XED-USDT"


XED_USDT = XED_USDT(*XED_USDT._fields)


class XED_BTC(Symbol):
    """
        name: XED-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XED-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XED-BTC"

    def __str__(self):
        return "XED-BTC"

    def __call__(self):
        return "XED-BTC"


XED_BTC = XED_BTC(*XED_BTC._fields)


class AURY_USDT(Symbol):
    """
        name: AURY-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AURY-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AURY-USDT"

    def __str__(self):
        return "AURY-USDT"

    def __call__(self):
        return "AURY-USDT"


AURY_USDT = AURY_USDT(*AURY_USDT._fields)


class SWASH_USDT(Symbol):
    """
        name: SWASH-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SWASH-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWASH-USDT"

    def __str__(self):
        return "SWASH-USDT"

    def __call__(self):
        return "SWASH-USDT"


SWASH_USDT = SWASH_USDT(*SWASH_USDT._fields)


class LTO_USDT(Symbol):
    """
        name: LTO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LTO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTO-USDT"

    def __str__(self):
        return "LTO-USDT"

    def __call__(self):
        return "LTO-USDT"


LTO_USDT = LTO_USDT(*LTO_USDT._fields)


class LTO_BTC(Symbol):
    """
        name: LTO-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LTO-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTO-BTC"

    def __str__(self):
        return "LTO-BTC"

    def __call__(self):
        return "LTO-BTC"


LTO_BTC = LTO_BTC(*LTO_BTC._fields)


class BUX_USDT(Symbol):
    """
        name: BUX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BUX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUX-USDT"

    def __str__(self):
        return "BUX-USDT"

    def __call__(self):
        return "BUX-USDT"


BUX_USDT = BUX_USDT(*BUX_USDT._fields)


class MTRG_USDT(Symbol):
    """
        name: MTRG-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MTRG-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTRG-USDT"

    def __str__(self):
        return "MTRG-USDT"

    def __call__(self):
        return "MTRG-USDT"


MTRG_USDT = MTRG_USDT(*MTRG_USDT._fields)


class DREAMS_USDT(Symbol):
    """
        name: DREAMS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DREAMS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREAMS-USDT"

    def __str__(self):
        return "DREAMS-USDT"

    def __call__(self):
        return "DREAMS-USDT"


DREAMS_USDT = DREAMS_USDT(*DREAMS_USDT._fields)


class SHIB_DOGE(Symbol):
    """
        name: SHIB-DOGE
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHIB-DOGE"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIB-DOGE"

    def __str__(self):
        return "SHIB-DOGE"

    def __call__(self):
        return "SHIB-DOGE"


SHIB_DOGE = SHIB_DOGE(*SHIB_DOGE._fields)


class QUICK_USDT(Symbol):
    """
        name: QUICK-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QUICK-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICK-USDT"

    def __str__(self):
        return "QUICK-USDT"

    def __call__(self):
        return "QUICK-USDT"


QUICK_USDT = QUICK_USDT(*QUICK_USDT._fields)


class QUICK_BTC(Symbol):
    """
        name: QUICK-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QUICK-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICK-BTC"

    def __str__(self):
        return "QUICK-BTC"

    def __call__(self):
        return "QUICK-BTC"


QUICK_BTC = QUICK_BTC(*QUICK_BTC._fields)


class TRU_USDT(Symbol):
    """
        name: TRU-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRU-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRU-USDT"

    def __str__(self):
        return "TRU-USDT"

    def __call__(self):
        return "TRU-USDT"


TRU_USDT = TRU_USDT(*TRU_USDT._fields)


class TRU_BTC(Symbol):
    """
        name: TRU-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRU-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRU-BTC"

    def __str__(self):
        return "TRU-BTC"

    def __call__(self):
        return "TRU-BTC"


TRU_BTC = TRU_BTC(*TRU_BTC._fields)


class WRX_USDT(Symbol):
    """
        name: WRX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WRX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRX-USDT"

    def __str__(self):
        return "WRX-USDT"

    def __call__(self):
        return "WRX-USDT"


WRX_USDT = WRX_USDT(*WRX_USDT._fields)


class WRX_BTC(Symbol):
    """
        name: WRX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WRX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRX-BTC"

    def __str__(self):
        return "WRX-BTC"

    def __call__(self):
        return "WRX-BTC"


WRX_BTC = WRX_BTC(*WRX_BTC._fields)


class SUSHI3L_USDT(Symbol):
    """
        name: SUSHI3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUSHI3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHI3L-USDT"

    def __str__(self):
        return "SUSHI3L-USDT"

    def __call__(self):
        return "SUSHI3L-USDT"


SUSHI3L_USDT = SUSHI3L_USDT(*SUSHI3L_USDT._fields)


class SUSHI3S_USDT(Symbol):
    """
        name: SUSHI3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUSHI3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHI3S-USDT"

    def __str__(self):
        return "SUSHI3S-USDT"

    def __call__(self):
        return "SUSHI3S-USDT"


SUSHI3S_USDT = SUSHI3S_USDT(*SUSHI3S_USDT._fields)


class NEAR3L_USDT(Symbol):
    """
        name: NEAR3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "NEAR3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR3L-USDT"

    def __str__(self):
        return "NEAR3L-USDT"

    def __call__(self):
        return "NEAR3L-USDT"


NEAR3L_USDT = NEAR3L_USDT(*NEAR3L_USDT._fields)


class NEAR3S_USDT(Symbol):
    """
        name: NEAR3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "NEAR3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR3S-USDT"

    def __str__(self):
        return "NEAR3S-USDT"

    def __call__(self):
        return "NEAR3S-USDT"


NEAR3S_USDT = NEAR3S_USDT(*NEAR3S_USDT._fields)


class DATA_USDT(Symbol):
    """
        name: DATA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DATA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATA-USDT"

    def __str__(self):
        return "DATA-USDT"

    def __call__(self):
        return "DATA-USDT"


DATA_USDT = DATA_USDT(*DATA_USDT._fields)


class DATA_BTC(Symbol):
    """
        name: DATA-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DATA-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATA-BTC"

    def __str__(self):
        return "DATA-BTC"

    def __call__(self):
        return "DATA-BTC"


DATA_BTC = DATA_BTC(*DATA_BTC._fields)


class NORD_BTC(Symbol):
    """
        name: NORD-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NORD-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NORD-BTC"

    def __str__(self):
        return "NORD-BTC"

    def __call__(self):
        return "NORD-BTC"


NORD_BTC = NORD_BTC(*NORD_BTC._fields)


class ISP_USDT(Symbol):
    """
        name: ISP-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ISP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ISP-USDT"

    def __str__(self):
        return "ISP-USDT"

    def __call__(self):
        return "ISP-USDT"


ISP_USDT = ISP_USDT(*ISP_USDT._fields)


class CERE_USDT(Symbol):
    """
        name: CERE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CERE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CERE-USDT"

    def __str__(self):
        return "CERE-USDT"

    def __call__(self):
        return "CERE-USDT"


CERE_USDT = CERE_USDT(*CERE_USDT._fields)


class SHILL_USDT(Symbol):
    """
        name: SHILL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHILL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHILL-USDT"

    def __str__(self):
        return "SHILL-USDT"

    def __call__(self):
        return "SHILL-USDT"


SHILL_USDT = SHILL_USDT(*SHILL_USDT._fields)


class HEGIC_USDT(Symbol):
    """
        name: HEGIC-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HEGIC-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEGIC-USDT"

    def __str__(self):
        return "HEGIC-USDT"

    def __call__(self):
        return "HEGIC-USDT"


HEGIC_USDT = HEGIC_USDT(*HEGIC_USDT._fields)


class HEGIC_BTC(Symbol):
    """
        name: HEGIC-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HEGIC-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEGIC-BTC"

    def __str__(self):
        return "HEGIC-BTC"

    def __call__(self):
        return "HEGIC-BTC"


HEGIC_BTC = HEGIC_BTC(*HEGIC_BTC._fields)


class ERN_USDT(Symbol):
    """
        name: ERN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ERN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERN-USDT"

    def __str__(self):
        return "ERN-USDT"

    def __call__(self):
        return "ERN-USDT"


ERN_USDT = ERN_USDT(*ERN_USDT._fields)


class ERN_BTC(Symbol):
    """
        name: ERN-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ERN-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERN-BTC"

    def __str__(self):
        return "ERN-BTC"

    def __call__(self):
        return "ERN-BTC"


ERN_BTC = ERN_BTC(*ERN_BTC._fields)


class FTG_USDT(Symbol):
    """
        name: FTG-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FTG-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTG-USDT"

    def __str__(self):
        return "FTG-USDT"

    def __call__(self):
        return "FTG-USDT"


FTG_USDT = FTG_USDT(*FTG_USDT._fields)


class PAXG_USDT(Symbol):
    """
        name: PAXG-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PAXG-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXG-USDT"

    def __str__(self):
        return "PAXG-USDT"

    def __call__(self):
        return "PAXG-USDT"


PAXG_USDT = PAXG_USDT(*PAXG_USDT._fields)


class PAXG_BTC(Symbol):
    """
        name: PAXG-BTC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PAXG-BTC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXG-BTC"

    def __str__(self):
        return "PAXG-BTC"

    def __call__(self):
        return "PAXG-BTC"


PAXG_BTC = PAXG_BTC(*PAXG_BTC._fields)


class AUDIO_USDT(Symbol):
    """
        name: AUDIO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "AUDIO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIO-USDT"

    def __str__(self):
        return "AUDIO-USDT"

    def __call__(self):
        return "AUDIO-USDT"


AUDIO_USDT = AUDIO_USDT(*AUDIO_USDT._fields)


class AUDIO_BTC(Symbol):
    """
        name: AUDIO-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AUDIO-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIO-BTC"

    def __str__(self):
        return "AUDIO-BTC"

    def __call__(self):
        return "AUDIO-BTC"


AUDIO_BTC = AUDIO_BTC(*AUDIO_BTC._fields)


class ENS_USDT(Symbol):
    """
        name: ENS-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ENS-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENS-USDT"

    def __str__(self):
        return "ENS-USDT"

    def __call__(self):
        return "ENS-USDT"


ENS_USDT = ENS_USDT(*ENS_USDT._fields)


class AAVE3L_USDT(Symbol):
    """
        name: AAVE3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "AAVE3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE3L-USDT"

    def __str__(self):
        return "AAVE3L-USDT"

    def __call__(self):
        return "AAVE3L-USDT"


AAVE3L_USDT = AAVE3L_USDT(*AAVE3L_USDT._fields)


class AAVE3S_USDT(Symbol):
    """
        name: AAVE3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "AAVE3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE3S-USDT"

    def __str__(self):
        return "AAVE3S-USDT"

    def __call__(self):
        return "AAVE3S-USDT"


AAVE3S_USDT = AAVE3S_USDT(*AAVE3S_USDT._fields)


class SAND3L_USDT(Symbol):
    """
        name: SAND3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SAND3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SAND3L-USDT"

    def __str__(self):
        return "SAND3L-USDT"

    def __call__(self):
        return "SAND3L-USDT"


SAND3L_USDT = SAND3L_USDT(*SAND3L_USDT._fields)


class SAND3S_USDT(Symbol):
    """
        name: SAND3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SAND3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SAND3S-USDT"

    def __str__(self):
        return "SAND3S-USDT"

    def __call__(self):
        return "SAND3S-USDT"


SAND3S_USDT = SAND3S_USDT(*SAND3S_USDT._fields)


class XTM_USDT(Symbol):
    """
        name: XTM-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XTM-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTM-USDT"

    def __str__(self):
        return "XTM-USDT"

    def __call__(self):
        return "XTM-USDT"


XTM_USDT = XTM_USDT(*XTM_USDT._fields)


class MNW_USDT(Symbol):
    """
        name: MNW-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MNW-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MNW-USDT"

    def __str__(self):
        return "MNW-USDT"

    def __call__(self):
        return "MNW-USDT"


MNW_USDT = MNW_USDT(*MNW_USDT._fields)


class FXS_USDT(Symbol):
    """
        name: FXS-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FXS-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXS-USDT"

    def __str__(self):
        return "FXS-USDT"

    def __call__(self):
        return "FXS-USDT"


FXS_USDT = FXS_USDT(*FXS_USDT._fields)


class FXS_BTC(Symbol):
    """
        name: FXS-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FXS-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXS-BTC"

    def __str__(self):
        return "FXS-BTC"

    def __call__(self):
        return "FXS-BTC"


FXS_BTC = FXS_BTC(*FXS_BTC._fields)


class ATA_USDT(Symbol):
    """
        name: ATA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ATA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATA-USDT"

    def __str__(self):
        return "ATA-USDT"

    def __call__(self):
        return "ATA-USDT"


ATA_USDT = ATA_USDT(*ATA_USDT._fields)


class ATA_BTC(Symbol):
    """
        name: ATA-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ATA-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATA-BTC"

    def __str__(self):
        return "ATA-BTC"

    def __call__(self):
        return "ATA-BTC"


ATA_BTC = ATA_BTC(*ATA_BTC._fields)


class VXV_USDT(Symbol):
    """
        name: VXV-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VXV-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VXV-USDT"

    def __str__(self):
        return "VXV-USDT"

    def __call__(self):
        return "VXV-USDT"


VXV_USDT = VXV_USDT(*VXV_USDT._fields)


class LRC_BTC(Symbol):
    """
        name: LRC-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LRC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRC-BTC"

    def __str__(self):
        return "LRC-BTC"

    def __call__(self):
        return "LRC-BTC"


LRC_BTC = LRC_BTC(*LRC_BTC._fields)


class LRC_ETH(Symbol):
    """
        name: LRC-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LRC-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRC-ETH"

    def __str__(self):
        return "LRC-ETH"

    def __call__(self):
        return "LRC-ETH"


LRC_ETH = LRC_ETH(*LRC_ETH._fields)


class DPR_USDT(Symbol):
    """
        name: DPR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DPR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DPR-USDT"

    def __str__(self):
        return "DPR-USDT"

    def __call__(self):
        return "DPR-USDT"


DPR_USDT = DPR_USDT(*DPR_USDT._fields)


class CWAR_USDT(Symbol):
    """
        name: CWAR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CWAR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CWAR-USDT"

    def __str__(self):
        return "CWAR-USDT"

    def __call__(self):
        return "CWAR-USDT"


CWAR_USDT = CWAR_USDT(*CWAR_USDT._fields)


class CWAR_BTC(Symbol):
    """
        name: CWAR-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CWAR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CWAR-BTC"

    def __str__(self):
        return "CWAR-BTC"

    def __call__(self):
        return "CWAR-BTC"


CWAR_BTC = CWAR_BTC(*CWAR_BTC._fields)


class FLUX_BTC(Symbol):
    """
        name: FLUX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FLUX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUX-BTC"

    def __str__(self):
        return "FLUX-BTC"

    def __call__(self):
        return "FLUX-BTC"


FLUX_BTC = FLUX_BTC(*FLUX_BTC._fields)


class PBR_USDT(Symbol):
    """
        name: PBR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PBR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PBR-USDT"

    def __str__(self):
        return "PBR-USDT"

    def __call__(self):
        return "PBR-USDT"


PBR_USDT = PBR_USDT(*PBR_USDT._fields)


class ANT_USDT(Symbol):
    """
        name: ANT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ANT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANT-USDT"

    def __str__(self):
        return "ANT-USDT"

    def __call__(self):
        return "ANT-USDT"


ANT_USDT = ANT_USDT(*ANT_USDT._fields)


class ANT_BTC(Symbol):
    """
        name: ANT-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ANT-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANT-BTC"

    def __str__(self):
        return "ANT-BTC"

    def __call__(self):
        return "ANT-BTC"


ANT_BTC = ANT_BTC(*ANT_BTC._fields)


class COV_USDT(Symbol):
    """
        name: COV-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "COV-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COV-USDT"

    def __str__(self):
        return "COV-USDT"

    def __call__(self):
        return "COV-USDT"


COV_USDT = COV_USDT(*COV_USDT._fields)


class SWP_USDT(Symbol):
    """
        name: SWP-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SWP-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWP-USDT"

    def __str__(self):
        return "SWP-USDT"

    def __call__(self):
        return "SWP-USDT"


SWP_USDT = SWP_USDT(*SWP_USDT._fields)


class TWT_USDT(Symbol):
    """
        name: TWT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TWT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWT-USDT"

    def __str__(self):
        return "TWT-USDT"

    def __call__(self):
        return "TWT-USDT"


TWT_USDT = TWT_USDT(*TWT_USDT._fields)


class TWT_BTC(Symbol):
    """
        name: TWT-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TWT-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWT-BTC"

    def __str__(self):
        return "TWT-BTC"

    def __call__(self):
        return "TWT-BTC"


TWT_BTC = TWT_BTC(*TWT_BTC._fields)


class OM_USDT(Symbol):
    """
        name: OM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OM-USDT"

    def __str__(self):
        return "OM-USDT"

    def __call__(self):
        return "OM-USDT"


OM_USDT = OM_USDT(*OM_USDT._fields)


class OM_BTC(Symbol):
    """
        name: OM-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OM-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OM-BTC"

    def __str__(self):
        return "OM-BTC"

    def __call__(self):
        return "OM-BTC"


OM_BTC = OM_BTC(*OM_BTC._fields)


class ADX_USDT(Symbol):
    """
        name: ADX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ADX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADX-USDT"

    def __str__(self):
        return "ADX-USDT"

    def __call__(self):
        return "ADX-USDT"


ADX_USDT = ADX_USDT(*ADX_USDT._fields)


class AVAX3L_USDT(Symbol):
    """
        name: AVAX3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "AVAX3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX3L-USDT"

    def __str__(self):
        return "AVAX3L-USDT"

    def __call__(self):
        return "AVAX3L-USDT"


AVAX3L_USDT = AVAX3L_USDT(*AVAX3L_USDT._fields)


class AVAX3S_USDT(Symbol):
    """
        name: AVAX3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "AVAX3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX3S-USDT"

    def __str__(self):
        return "AVAX3S-USDT"

    def __call__(self):
        return "AVAX3S-USDT"


AVAX3S_USDT = AVAX3S_USDT(*AVAX3S_USDT._fields)


class MANA3L_USDT(Symbol):
    """
        name: MANA3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "MANA3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA3L-USDT"

    def __str__(self):
        return "MANA3L-USDT"

    def __call__(self):
        return "MANA3L-USDT"


MANA3L_USDT = MANA3L_USDT(*MANA3L_USDT._fields)


class MANA3S_USDT(Symbol):
    """
        name: MANA3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "MANA3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA3S-USDT"

    def __str__(self):
        return "MANA3S-USDT"

    def __call__(self):
        return "MANA3S-USDT"


MANA3S_USDT = MANA3S_USDT(*MANA3S_USDT._fields)


class GLM_USDT(Symbol):
    """
        name: GLM-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GLM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLM-USDT"

    def __str__(self):
        return "GLM-USDT"

    def __call__(self):
        return "GLM-USDT"


GLM_USDT = GLM_USDT(*GLM_USDT._fields)


class GLM_BTC(Symbol):
    """
        name: GLM-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GLM-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLM-BTC"

    def __str__(self):
        return "GLM-BTC"

    def __call__(self):
        return "GLM-BTC"


GLM_BTC = GLM_BTC(*GLM_BTC._fields)


class NUM_USDT(Symbol):
    """
        name: NUM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NUM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUM-USDT"

    def __str__(self):
        return "NUM-USDT"

    def __call__(self):
        return "NUM-USDT"


NUM_USDT = NUM_USDT(*NUM_USDT._fields)


class VLX_USDT(Symbol):
    """
        name: VLX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VLX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VLX-USDT"

    def __str__(self):
        return "VLX-USDT"

    def __call__(self):
        return "VLX-USDT"


VLX_USDT = VLX_USDT(*VLX_USDT._fields)


class VLX_BTC(Symbol):
    """
        name: VLX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VLX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VLX-BTC"

    def __str__(self):
        return "VLX-BTC"

    def __call__(self):
        return "VLX-BTC"


VLX_BTC = VLX_BTC(*VLX_BTC._fields)


class TRADE_USDT(Symbol):
    """
        name: TRADE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRADE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRADE-USDT"

    def __str__(self):
        return "TRADE-USDT"

    def __call__(self):
        return "TRADE-USDT"


TRADE_USDT = TRADE_USDT(*TRADE_USDT._fields)


class TRADE_BTC(Symbol):
    """
        name: TRADE-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRADE-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRADE-BTC"

    def __str__(self):
        return "TRADE-BTC"

    def __call__(self):
        return "TRADE-BTC"


TRADE_BTC = TRADE_BTC(*TRADE_BTC._fields)


class ONEEARTH_USDT(Symbol):
    """
        name: 1EARTH-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "1EARTH-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1EARTH-USDT"

    def __str__(self):
        return "1EARTH-USDT"

    def __call__(self):
        return "1EARTH-USDT"


ONEEARTH_USDT = ONEEARTH_USDT(*ONEEARTH_USDT._fields)


class MONI_USDT(Symbol):
    """
        name: MONI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MONI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MONI-USDT"

    def __str__(self):
        return "MONI-USDT"

    def __call__(self):
        return "MONI-USDT"


MONI_USDT = MONI_USDT(*MONI_USDT._fields)


class LIKE_USDT(Symbol):
    """
        name: LIKE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LIKE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LIKE-USDT"

    def __str__(self):
        return "LIKE-USDT"

    def __call__(self):
        return "LIKE-USDT"


LIKE_USDT = LIKE_USDT(*LIKE_USDT._fields)


class LIT_USDT(Symbol):
    """
        name: LIT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LIT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LIT-USDT"

    def __str__(self):
        return "LIT-USDT"

    def __call__(self):
        return "LIT-USDT"


LIT_USDT = LIT_USDT(*LIT_USDT._fields)


class LIT_BTC(Symbol):
    """
        name: LIT-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LIT-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LIT-BTC"

    def __str__(self):
        return "LIT-BTC"

    def __call__(self):
        return "LIT-BTC"


LIT_BTC = LIT_BTC(*LIT_BTC._fields)


class KAVA_USDT(Symbol):
    """
        name: KAVA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "KAVA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVA-USDT"

    def __str__(self):
        return "KAVA-USDT"

    def __call__(self):
        return "KAVA-USDT"


KAVA_USDT = KAVA_USDT(*KAVA_USDT._fields)


class SFP_USDT(Symbol):
    """
        name: SFP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SFP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFP-USDT"

    def __str__(self):
        return "SFP-USDT"

    def __call__(self):
        return "SFP-USDT"


SFP_USDT = SFP_USDT(*SFP_USDT._fields)


class SFP_BTC(Symbol):
    """
        name: SFP-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SFP-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFP-BTC"

    def __str__(self):
        return "SFP-BTC"

    def __call__(self):
        return "SFP-BTC"


SFP_BTC = SFP_BTC(*SFP_BTC._fields)


class BURGER_USDT(Symbol):
    """
        name: BURGER-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BURGER-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGER-USDT"

    def __str__(self):
        return "BURGER-USDT"

    def __call__(self):
        return "BURGER-USDT"


BURGER_USDT = BURGER_USDT(*BURGER_USDT._fields)


class BURGER_BTC(Symbol):
    """
        name: BURGER-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BURGER-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGER-BTC"

    def __str__(self):
        return "BURGER-BTC"

    def __call__(self):
        return "BURGER-BTC"


BURGER_BTC = BURGER_BTC(*BURGER_BTC._fields)


class ILA_USDT(Symbol):
    """
        name: ILA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ILA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILA-USDT"

    def __str__(self):
        return "ILA-USDT"

    def __call__(self):
        return "ILA-USDT"


ILA_USDT = ILA_USDT(*ILA_USDT._fields)


class CREAM_USDT(Symbol):
    """
        name: CREAM-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CREAM-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREAM-USDT"

    def __str__(self):
        return "CREAM-USDT"

    def __call__(self):
        return "CREAM-USDT"


CREAM_USDT = CREAM_USDT(*CREAM_USDT._fields)


class CREAM_BTC(Symbol):
    """
        name: CREAM-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CREAM-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREAM-BTC"

    def __str__(self):
        return "CREAM-BTC"

    def __call__(self):
        return "CREAM-BTC"


CREAM_BTC = CREAM_BTC(*CREAM_BTC._fields)


class RSR_USDT(Symbol):
    """
        name: RSR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "RSR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSR-USDT"

    def __str__(self):
        return "RSR-USDT"

    def __call__(self):
        return "RSR-USDT"


RSR_USDT = RSR_USDT(*RSR_USDT._fields)


class RSR_BTC(Symbol):
    """
        name: RSR-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RSR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSR-BTC"

    def __str__(self):
        return "RSR-BTC"

    def __call__(self):
        return "RSR-BTC"


RSR_BTC = RSR_BTC(*RSR_BTC._fields)


class BUY_BTC(Symbol):
    """
        name: BUY-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BUY-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUY-BTC"

    def __str__(self):
        return "BUY-BTC"

    def __call__(self):
        return "BUY-BTC"


BUY_BTC = BUY_BTC(*BUY_BTC._fields)


class IMX_USDT(Symbol):
    """
        name: IMX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "IMX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMX-USDT"

    def __str__(self):
        return "IMX-USDT"

    def __call__(self):
        return "IMX-USDT"


IMX_USDT = IMX_USDT(*IMX_USDT._fields)


class GODS_USDT(Symbol):
    """
        name: GODS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GODS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GODS-USDT"

    def __str__(self):
        return "GODS-USDT"

    def __call__(self):
        return "GODS-USDT"


GODS_USDT = GODS_USDT(*GODS_USDT._fields)


class KMA_USDT(Symbol):
    """
        name: KMA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KMA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMA-USDT"

    def __str__(self):
        return "KMA-USDT"

    def __call__(self):
        return "KMA-USDT"


KMA_USDT = KMA_USDT(*KMA_USDT._fields)


class SRM_USDT(Symbol):
    """
        name: SRM-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SRM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRM-USDT"

    def __str__(self):
        return "SRM-USDT"

    def __call__(self):
        return "SRM-USDT"


SRM_USDT = SRM_USDT(*SRM_USDT._fields)


class SRM_BTC(Symbol):
    """
        name: SRM-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SRM-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRM-BTC"

    def __str__(self):
        return "SRM-BTC"

    def __call__(self):
        return "SRM-BTC"


SRM_BTC = SRM_BTC(*SRM_BTC._fields)


class POLC_USDT(Symbol):
    """
        name: POLC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POLC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLC-USDT"

    def __str__(self):
        return "POLC-USDT"

    def __call__(self):
        return "POLC-USDT"


POLC_USDT = POLC_USDT(*POLC_USDT._fields)


class XTAG_USDT(Symbol):
    """
        name: XTAG-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XTAG-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTAG-USDT"

    def __str__(self):
        return "XTAG-USDT"

    def __call__(self):
        return "XTAG-USDT"


XTAG_USDT = XTAG_USDT(*XTAG_USDT._fields)


class MNET_USDT(Symbol):
    """
        name: MNET-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MNET-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MNET-USDT"

    def __str__(self):
        return "MNET-USDT"

    def __call__(self):
        return "MNET-USDT"


MNET_USDT = MNET_USDT(*MNET_USDT._fields)


class NGC_USDT(Symbol):
    """
        name: NGC-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NGC-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NGC-USDT"

    def __str__(self):
        return "NGC-USDT"

    def __call__(self):
        return "NGC-USDT"


NGC_USDT = NGC_USDT(*NGC_USDT._fields)


class HARD_USDT(Symbol):
    """
        name: HARD-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HARD-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARD-USDT"

    def __str__(self):
        return "HARD-USDT"

    def __call__(self):
        return "HARD-USDT"


HARD_USDT = HARD_USDT(*HARD_USDT._fields)


class GALAX3L_USDT(Symbol):
    """
        name: GALAX3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "GALAX3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAX3L-USDT"

    def __str__(self):
        return "GALAX3L-USDT"

    def __call__(self):
        return "GALAX3L-USDT"


GALAX3L_USDT = GALAX3L_USDT(*GALAX3L_USDT._fields)


class GALAX3S_USDT(Symbol):
    """
        name: GALAX3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "GALAX3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAX3S-USDT"

    def __str__(self):
        return "GALAX3S-USDT"

    def __call__(self):
        return "GALAX3S-USDT"


GALAX3S_USDT = GALAX3S_USDT(*GALAX3S_USDT._fields)


class UNIC_USDT(Symbol):
    """
        name: UNIC-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UNIC-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIC-USDT"

    def __str__(self):
        return "UNIC-USDT"

    def __call__(self):
        return "UNIC-USDT"


UNIC_USDT = UNIC_USDT(*UNIC_USDT._fields)


class POND_USDT(Symbol):
    """
        name: POND-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "POND-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POND-USDT"

    def __str__(self):
        return "POND-USDT"

    def __call__(self):
        return "POND-USDT"


POND_USDT = POND_USDT(*POND_USDT._fields)


class POND_BTC(Symbol):
    """
        name: POND-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POND-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POND-BTC"

    def __str__(self):
        return "POND-BTC"

    def __call__(self):
        return "POND-BTC"


POND_BTC = POND_BTC(*POND_BTC._fields)


class VR_USDT(Symbol):
    """
        name: VR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VR-USDT"

    def __str__(self):
        return "VR-USDT"

    def __call__(self):
        return "VR-USDT"


VR_USDT = VR_USDT(*VR_USDT._fields)


class EPIK_USDT(Symbol):
    """
        name: EPIK-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EPIK-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPIK-USDT"

    def __str__(self):
        return "EPIK-USDT"

    def __call__(self):
        return "EPIK-USDT"


EPIK_USDT = EPIK_USDT(*EPIK_USDT._fields)


class NGL_USDT(Symbol):
    """
        name: NGL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NGL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NGL-USDT"

    def __str__(self):
        return "NGL-USDT"

    def __call__(self):
        return "NGL-USDT"


NGL_USDT = NGL_USDT(*NGL_USDT._fields)


class NGL_BTC(Symbol):
    """
        name: NGL-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NGL-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NGL-BTC"

    def __str__(self):
        return "NGL-BTC"

    def __call__(self):
        return "NGL-BTC"


NGL_BTC = NGL_BTC(*NGL_BTC._fields)


class KDON_USDT(Symbol):
    """
        name: KDON-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KDON-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDON-USDT"

    def __str__(self):
        return "KDON-USDT"

    def __call__(self):
        return "KDON-USDT"


KDON_USDT = KDON_USDT(*KDON_USDT._fields)


class PEL_USDT(Symbol):
    """
        name: PEL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PEL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEL-USDT"

    def __str__(self):
        return "PEL-USDT"

    def __call__(self):
        return "PEL-USDT"


PEL_USDT = PEL_USDT(*PEL_USDT._fields)


class CIRUS_ETH(Symbol):
    """
        name: CIRUS-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CIRUS-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CIRUS-ETH"

    def __str__(self):
        return "CIRUS-ETH"

    def __call__(self):
        return "CIRUS-ETH"


CIRUS_ETH = CIRUS_ETH(*CIRUS_ETH._fields)


class LINA_USDT(Symbol):
    """
        name: LINA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "LINA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINA-USDT"

    def __str__(self):
        return "LINA-USDT"

    def __call__(self):
        return "LINA-USDT"


LINA_USDT = LINA_USDT(*LINA_USDT._fields)


class LINA_BTC(Symbol):
    """
        name: LINA-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LINA-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINA-BTC"

    def __str__(self):
        return "LINA-BTC"

    def __call__(self):
        return "LINA-BTC"


LINA_BTC = LINA_BTC(*LINA_BTC._fields)


class KLAY_USDT(Symbol):
    """
        name: KLAY-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KLAY-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAY-USDT"

    def __str__(self):
        return "KLAY-USDT"

    def __call__(self):
        return "KLAY-USDT"


KLAY_USDT = KLAY_USDT(*KLAY_USDT._fields)


class KLAY_BTC(Symbol):
    """
        name: KLAY-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KLAY-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAY-BTC"

    def __str__(self):
        return "KLAY-BTC"

    def __call__(self):
        return "KLAY-BTC"


KLAY_BTC = KLAY_BTC(*KLAY_BTC._fields)


class CREDI_USDT(Symbol):
    """
        name: CREDI-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CREDI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREDI-USDT"

    def __str__(self):
        return "CREDI-USDT"

    def __call__(self):
        return "CREDI-USDT"


CREDI_USDT = CREDI_USDT(*CREDI_USDT._fields)


class TRVL_USDT(Symbol):
    """
        name: TRVL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRVL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRVL-USDT"

    def __str__(self):
        return "TRVL-USDT"

    def __call__(self):
        return "TRVL-USDT"


TRVL_USDT = TRVL_USDT(*TRVL_USDT._fields)


class LACE_USDT(Symbol):
    """
        name: LACE-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LACE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LACE-USDT"

    def __str__(self):
        return "LACE-USDT"

    def __call__(self):
        return "LACE-USDT"


LACE_USDT = LACE_USDT(*LACE_USDT._fields)


class LACE_ETH(Symbol):
    """
        name: LACE-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LACE-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LACE-ETH"

    def __str__(self):
        return "LACE-ETH"

    def __call__(self):
        return "LACE-ETH"


LACE_ETH = LACE_ETH(*LACE_ETH._fields)


class ARKER_USDT(Symbol):
    """
        name: ARKER-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ARKER-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARKER-USDT"

    def __str__(self):
        return "ARKER-USDT"

    def __call__(self):
        return "ARKER-USDT"


ARKER_USDT = ARKER_USDT(*ARKER_USDT._fields)


class BONDLY_USDT(Symbol):
    """
        name: BONDLY-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BONDLY-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDLY-USDT"

    def __str__(self):
        return "BONDLY-USDT"

    def __call__(self):
        return "BONDLY-USDT"


BONDLY_USDT = BONDLY_USDT(*BONDLY_USDT._fields)


class BONDLY_ETH(Symbol):
    """
        name: BONDLY-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BONDLY-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDLY-ETH"

    def __str__(self):
        return "BONDLY-ETH"

    def __call__(self):
        return "BONDLY-ETH"


BONDLY_ETH = BONDLY_ETH(*BONDLY_ETH._fields)


class XEC_USDT(Symbol):
    """
        name: XEC-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XEC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEC-USDT"

    def __str__(self):
        return "XEC-USDT"

    def __call__(self):
        return "XEC-USDT"


XEC_USDT = XEC_USDT(*XEC_USDT._fields)


class HEART_USDT(Symbol):
    """
        name: HEART-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HEART-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEART-USDT"

    def __str__(self):
        return "HEART-USDT"

    def __call__(self):
        return "HEART-USDT"


HEART_USDT = HEART_USDT(*HEART_USDT._fields)


class HEART_BTC(Symbol):
    """
        name: HEART-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HEART-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEART-BTC"

    def __str__(self):
        return "HEART-BTC"

    def __call__(self):
        return "HEART-BTC"


HEART_BTC = HEART_BTC(*HEART_BTC._fields)


class UNB_USDT(Symbol):
    """
        name: UNB-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UNB-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNB-USDT"

    def __str__(self):
        return "UNB-USDT"

    def __call__(self):
        return "UNB-USDT"


UNB_USDT = UNB_USDT(*UNB_USDT._fields)


class GAFI_USDT(Symbol):
    """
        name: GAFI-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GAFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GAFI-USDT"

    def __str__(self):
        return "GAFI-USDT"

    def __call__(self):
        return "GAFI-USDT"


GAFI_USDT = GAFI_USDT(*GAFI_USDT._fields)


class KOL_USDT(Symbol):
    """
        name: KOL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KOL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KOL-USDT"

    def __str__(self):
        return "KOL-USDT"

    def __call__(self):
        return "KOL-USDT"


KOL_USDT = KOL_USDT(*KOL_USDT._fields)


class KOL_ETH(Symbol):
    """
        name: KOL-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KOL-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KOL-ETH"

    def __str__(self):
        return "KOL-ETH"

    def __call__(self):
        return "KOL-ETH"


KOL_ETH = KOL_ETH(*KOL_ETH._fields)


class H3RO3S_USDT(Symbol):
    """
        name: H3RO3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "H3RO3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "H3RO3S-USDT"

    def __str__(self):
        return "H3RO3S-USDT"

    def __call__(self):
        return "H3RO3S-USDT"


H3RO3S_USDT = H3RO3S_USDT(*H3RO3S_USDT._fields)


class FALCONS_USDT(Symbol):
    """
        name: FALCONS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FALCONS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FALCONS-USDT"

    def __str__(self):
        return "FALCONS-USDT"

    def __call__(self):
        return "FALCONS-USDT"


FALCONS_USDT = FALCONS_USDT(*FALCONS_USDT._fields)


class UFO_USDT(Symbol):
    """
        name: UFO-USDT
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UFO-USDT"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UFO-USDT"

    def __str__(self):
        return "UFO-USDT"

    def __call__(self):
        return "UFO-USDT"


UFO_USDT = UFO_USDT(*UFO_USDT._fields)


class CHMB_USDT(Symbol):
    """
        name: CHMB-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CHMB-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHMB-USDT"

    def __str__(self):
        return "CHMB-USDT"

    def __call__(self):
        return "CHMB-USDT"


CHMB_USDT = CHMB_USDT(*CHMB_USDT._fields)


class GEEQ_USDT(Symbol):
    """
        name: GEEQ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GEEQ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GEEQ-USDT"

    def __str__(self):
        return "GEEQ-USDT"

    def __call__(self):
        return "GEEQ-USDT"


GEEQ_USDT = GEEQ_USDT(*GEEQ_USDT._fields)


class ORC_USDT(Symbol):
    """
        name: ORC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ORC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORC-USDT"

    def __str__(self):
        return "ORC-USDT"

    def __call__(self):
        return "ORC-USDT"


ORC_USDT = ORC_USDT(*ORC_USDT._fields)


class RACEFI_USDT(Symbol):
    """
        name: RACEFI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RACEFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RACEFI-USDT"

    def __str__(self):
        return "RACEFI-USDT"

    def __call__(self):
        return "RACEFI-USDT"


RACEFI_USDT = RACEFI_USDT(*RACEFI_USDT._fields)


class PEOPLE_USDT(Symbol):
    """
        name: PEOPLE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "PEOPLE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLE-USDT"

    def __str__(self):
        return "PEOPLE-USDT"

    def __call__(self):
        return "PEOPLE-USDT"


PEOPLE_USDT = PEOPLE_USDT(*PEOPLE_USDT._fields)


class ADS_USDT(Symbol):
    """
        name: ADS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ADS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADS-USDT"

    def __str__(self):
        return "ADS-USDT"

    def __call__(self):
        return "ADS-USDT"


ADS_USDT = ADS_USDT(*ADS_USDT._fields)


class ADS_BTC(Symbol):
    """
        name: ADS-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ADS-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADS-BTC"

    def __str__(self):
        return "ADS-BTC"

    def __call__(self):
        return "ADS-BTC"


ADS_BTC = ADS_BTC(*ADS_BTC._fields)


class OCEAN_USDT(Symbol):
    """
        name: OCEAN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "OCEAN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEAN-USDT"

    def __str__(self):
        return "OCEAN-USDT"

    def __call__(self):
        return "OCEAN-USDT"


OCEAN_USDT = OCEAN_USDT(*OCEAN_USDT._fields)


class SOS_USDT(Symbol):
    """
        name: SOS-USDT
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SOS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOS-USDT"

    def __str__(self):
        return "SOS-USDT"

    def __call__(self):
        return "SOS-USDT"


SOS_USDT = SOS_USDT(*SOS_USDT._fields)


class WHALE_USDT(Symbol):
    """
        name: WHALE-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WHALE-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WHALE-USDT"

    def __str__(self):
        return "WHALE-USDT"

    def __call__(self):
        return "WHALE-USDT"


WHALE_USDT = WHALE_USDT(*WHALE_USDT._fields)


class TIME_USDT(Symbol):
    """
        name: TIME-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TIME-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TIME-USDT"

    def __str__(self):
        return "TIME-USDT"

    def __call__(self):
        return "TIME-USDT"


TIME_USDT = TIME_USDT(*TIME_USDT._fields)


class CWEB_USDT(Symbol):
    """
        name: CWEB-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CWEB-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CWEB-USDT"

    def __str__(self):
        return "CWEB-USDT"

    def __call__(self):
        return "CWEB-USDT"


CWEB_USDT = CWEB_USDT(*CWEB_USDT._fields)


class IOTA_USDT(Symbol):
    """
        name: IOTA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "IOTA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTA-USDT"

    def __str__(self):
        return "IOTA-USDT"

    def __call__(self):
        return "IOTA-USDT"


IOTA_USDT = IOTA_USDT(*IOTA_USDT._fields)


class IOTA_BTC(Symbol):
    """
        name: IOTA-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IOTA-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTA-BTC"

    def __str__(self):
        return "IOTA-BTC"

    def __call__(self):
        return "IOTA-BTC"


IOTA_BTC = IOTA_BTC(*IOTA_BTC._fields)


class HNT_USDT(Symbol):
    """
        name: HNT-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HNT-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNT-USDT"

    def __str__(self):
        return "HNT-USDT"

    def __call__(self):
        return "HNT-USDT"


HNT_USDT = HNT_USDT(*HNT_USDT._fields)


class HNT_BTC(Symbol):
    """
        name: HNT-BTC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HNT-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNT-BTC"

    def __str__(self):
        return "HNT-BTC"

    def __call__(self):
        return "HNT-BTC"


HNT_BTC = HNT_BTC(*HNT_BTC._fields)


class GGG_USDT(Symbol):
    """
        name: GGG-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GGG-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GGG-USDT"

    def __str__(self):
        return "GGG-USDT"

    def __call__(self):
        return "GGG-USDT"


GGG_USDT = GGG_USDT(*GGG_USDT._fields)


class REVU_USDT(Symbol):
    """
        name: REVU-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REVU-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REVU-USDT"

    def __str__(self):
        return "REVU-USDT"

    def __call__(self):
        return "REVU-USDT"


REVU_USDT = REVU_USDT(*REVU_USDT._fields)


class CLH_USDT(Symbol):
    """
        name: CLH-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CLH-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLH-USDT"

    def __str__(self):
        return "CLH-USDT"

    def __call__(self):
        return "CLH-USDT"


CLH_USDT = CLH_USDT(*CLH_USDT._fields)


class PLGR_USDT(Symbol):
    """
        name: PLGR-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PLGR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLGR-USDT"

    def __str__(self):
        return "PLGR-USDT"

    def __call__(self):
        return "PLGR-USDT"


PLGR_USDT = PLGR_USDT(*PLGR_USDT._fields)


class GLMR_USDT(Symbol):
    """
        name: GLMR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "GLMR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMR-USDT"

    def __str__(self):
        return "GLMR-USDT"

    def __call__(self):
        return "GLMR-USDT"


GLMR_USDT = GLMR_USDT(*GLMR_USDT._fields)


class GLMR_BTC(Symbol):
    """
        name: GLMR-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GLMR-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMR-BTC"

    def __str__(self):
        return "GLMR-BTC"

    def __call__(self):
        return "GLMR-BTC"


GLMR_BTC = GLMR_BTC(*GLMR_BTC._fields)


class CTC_USDT(Symbol):
    """
        name: CTC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CTC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTC-USDT"

    def __str__(self):
        return "CTC-USDT"

    def __call__(self):
        return "CTC-USDT"


CTC_USDT = CTC_USDT(*CTC_USDT._fields)


class CTC_BTC(Symbol):
    """
        name: CTC-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CTC-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTC-BTC"

    def __str__(self):
        return "CTC-BTC"

    def __call__(self):
        return "CTC-BTC"


CTC_BTC = CTC_BTC(*CTC_BTC._fields)


class GARI_USDT(Symbol):
    """
        name: GARI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GARI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GARI-USDT"

    def __str__(self):
        return "GARI-USDT"

    def __call__(self):
        return "GARI-USDT"


GARI_USDT = GARI_USDT(*GARI_USDT._fields)


class FRR_USDT(Symbol):
    """
        name: FRR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FRR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRR-USDT"

    def __str__(self):
        return "FRR-USDT"

    def __call__(self):
        return "FRR-USDT"


FRR_USDT = FRR_USDT(*FRR_USDT._fields)


class ASTR_USDT(Symbol):
    """
        name: ASTR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ASTR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTR-USDT"

    def __str__(self):
        return "ASTR-USDT"

    def __call__(self):
        return "ASTR-USDT"


ASTR_USDT = ASTR_USDT(*ASTR_USDT._fields)


class ASTR_BTC(Symbol):
    """
        name: ASTR-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ASTR-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTR-BTC"

    def __str__(self):
        return "ASTR-BTC"

    def __call__(self):
        return "ASTR-BTC"


ASTR_BTC = ASTR_BTC(*ASTR_BTC._fields)


class ERTHA_USDT(Symbol):
    """
        name: ERTHA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ERTHA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERTHA-USDT"

    def __str__(self):
        return "ERTHA-USDT"

    def __call__(self):
        return "ERTHA-USDT"


ERTHA_USDT = ERTHA_USDT(*ERTHA_USDT._fields)


class FCON_USDT(Symbol):
    """
        name: FCON-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FCON-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FCON-USDT"

    def __str__(self):
        return "FCON-USDT"

    def __call__(self):
        return "FCON-USDT"


FCON_USDT = FCON_USDT(*FCON_USDT._fields)


class ACA_USDT(Symbol):
    """
        name: ACA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACA-USDT"

    def __str__(self):
        return "ACA-USDT"

    def __call__(self):
        return "ACA-USDT"


ACA_USDT = ACA_USDT(*ACA_USDT._fields)


class ACA_BTC(Symbol):
    """
        name: ACA-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACA-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACA-BTC"

    def __str__(self):
        return "ACA-BTC"

    def __call__(self):
        return "ACA-BTC"


ACA_BTC = ACA_BTC(*ACA_BTC._fields)


class MTS_USDT(Symbol):
    """
        name: MTS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MTS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTS-USDT"

    def __str__(self):
        return "MTS-USDT"

    def __call__(self):
        return "MTS-USDT"


MTS_USDT = MTS_USDT(*MTS_USDT._fields)


class ROAR_USDT(Symbol):
    """
        name: ROAR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ROAR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROAR-USDT"

    def __str__(self):
        return "ROAR-USDT"

    def __call__(self):
        return "ROAR-USDT"


ROAR_USDT = ROAR_USDT(*ROAR_USDT._fields)


class HBB_USDT(Symbol):
    """
        name: HBB-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HBB-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBB-USDT"

    def __str__(self):
        return "HBB-USDT"

    def __call__(self):
        return "HBB-USDT"


HBB_USDT = HBB_USDT(*HBB_USDT._fields)


class CVX_USDT(Symbol):
    """
        name: CVX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CVX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVX-USDT"

    def __str__(self):
        return "CVX-USDT"

    def __call__(self):
        return "CVX-USDT"


CVX_USDT = CVX_USDT(*CVX_USDT._fields)


class AMP_USDT(Symbol):
    """
        name: AMP-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AMP-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMP-USDT"

    def __str__(self):
        return "AMP-USDT"

    def __call__(self):
        return "AMP-USDT"


AMP_USDT = AMP_USDT(*AMP_USDT._fields)


class ACT_USDT(Symbol):
    """
        name: ACT-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACT-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACT-USDT"

    def __str__(self):
        return "ACT-USDT"

    def __call__(self):
        return "ACT-USDT"


ACT_USDT = ACT_USDT(*ACT_USDT._fields)


class MJT_USDT(Symbol):
    """
        name: MJT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MJT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MJT-USDT"

    def __str__(self):
        return "MJT-USDT"

    def __call__(self):
        return "MJT-USDT"


MJT_USDT = MJT_USDT(*MJT_USDT._fields)


class MJT_KCS(Symbol):
    """
        name: MJT-KCS
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MJT-KCS"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MJT-KCS"

    def __str__(self):
        return "MJT-KCS"

    def __call__(self):
        return "MJT-KCS"


MJT_KCS = MJT_KCS(*MJT_KCS._fields)


class SHX_USDT(Symbol):
    """
        name: SHX-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHX-USDT"

    def __str__(self):
        return "SHX-USDT"

    def __call__(self):
        return "SHX-USDT"


SHX_USDT = SHX_USDT(*SHX_USDT._fields)


class SHX_BTC(Symbol):
    """
        name: SHX-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHX-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHX-BTC"

    def __str__(self):
        return "SHX-BTC"

    def __call__(self):
        return "SHX-BTC"


SHX_BTC = SHX_BTC(*SHX_BTC._fields)


class STARLY_USDT(Symbol):
    """
        name: STARLY-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STARLY-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STARLY-USDT"

    def __str__(self):
        return "STARLY-USDT"

    def __call__(self):
        return "STARLY-USDT"


STARLY_USDT = STARLY_USDT(*STARLY_USDT._fields)


class ONSTON_USDT(Symbol):
    """
        name: ONSTON-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ONSTON-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONSTON-USDT"

    def __str__(self):
        return "ONSTON-USDT"

    def __call__(self):
        return "ONSTON-USDT"


ONSTON_USDT = ONSTON_USDT(*ONSTON_USDT._fields)


class RANKER_USDT(Symbol):
    """
        name: RANKER-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RANKER-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RANKER-USDT"

    def __str__(self):
        return "RANKER-USDT"

    def __call__(self):
        return "RANKER-USDT"


RANKER_USDT = RANKER_USDT(*RANKER_USDT._fields)


class WMT_USDT(Symbol):
    """
        name: WMT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WMT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WMT-USDT"

    def __str__(self):
        return "WMT-USDT"

    def __call__(self):
        return "WMT-USDT"


WMT_USDT = WMT_USDT(*WMT_USDT._fields)


class XNO_USDT(Symbol):
    """
        name: XNO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XNO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNO-USDT"

    def __str__(self):
        return "XNO-USDT"

    def __call__(self):
        return "XNO-USDT"


XNO_USDT = XNO_USDT(*XNO_USDT._fields)


class XNO_BTC(Symbol):
    """
        name: XNO-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XNO-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNO-BTC"

    def __str__(self):
        return "XNO-BTC"

    def __call__(self):
        return "XNO-BTC"


XNO_BTC = XNO_BTC(*XNO_BTC._fields)


class MARS4_USDT(Symbol):
    """
        name: MARS4-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MARS4-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MARS4-USDT"

    def __str__(self):
        return "MARS4-USDT"

    def __call__(self):
        return "MARS4-USDT"


MARS4_USDT = MARS4_USDT(*MARS4_USDT._fields)


class TFUEL_USDT(Symbol):
    """
        name: TFUEL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TFUEL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUEL-USDT"

    def __str__(self):
        return "TFUEL-USDT"

    def __call__(self):
        return "TFUEL-USDT"


TFUEL_USDT = TFUEL_USDT(*TFUEL_USDT._fields)


class TFUEL_BTC(Symbol):
    """
        name: TFUEL-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TFUEL-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUEL-BTC"

    def __str__(self):
        return "TFUEL-BTC"

    def __call__(self):
        return "TFUEL-BTC"


TFUEL_BTC = TFUEL_BTC(*TFUEL_BTC._fields)


class METIS_USDT(Symbol):
    """
        name: METIS-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "METIS-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "METIS-USDT"

    def __str__(self):
        return "METIS-USDT"

    def __call__(self):
        return "METIS-USDT"


METIS_USDT = METIS_USDT(*METIS_USDT._fields)


class LAVAX_USDT(Symbol):
    """
        name: LAVAX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LAVAX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAVAX-USDT"

    def __str__(self):
        return "LAVAX-USDT"

    def __call__(self):
        return "LAVAX-USDT"


LAVAX_USDT = LAVAX_USDT(*LAVAX_USDT._fields)


class WAL_USDT(Symbol):
    """
        name: WAL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WAL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAL-USDT"

    def __str__(self):
        return "WAL-USDT"

    def __call__(self):
        return "WAL-USDT"


WAL_USDT = WAL_USDT(*WAL_USDT._fields)


class BULL_USDT(Symbol):
    """
        name: BULL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BULL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BULL-USDT"

    def __str__(self):
        return "BULL-USDT"

    def __call__(self):
        return "BULL-USDT"


BULL_USDT = BULL_USDT(*BULL_USDT._fields)


class SON_USDT(Symbol):
    """
        name: SON-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SON-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SON-USDT"

    def __str__(self):
        return "SON-USDT"

    def __call__(self):
        return "SON-USDT"


SON_USDT = SON_USDT(*SON_USDT._fields)


class MELOS_USDT(Symbol):
    """
        name: MELOS-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MELOS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MELOS-USDT"

    def __str__(self):
        return "MELOS-USDT"

    def __call__(self):
        return "MELOS-USDT"


MELOS_USDT = MELOS_USDT(*MELOS_USDT._fields)


class APE_USDT(Symbol):
    """
        name: APE-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "APE-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APE-USDT"

    def __str__(self):
        return "APE-USDT"

    def __call__(self):
        return "APE-USDT"


APE_USDT = APE_USDT(*APE_USDT._fields)


class GMT_USDT(Symbol):
    """
        name: GMT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "GMT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMT-USDT"

    def __str__(self):
        return "GMT-USDT"

    def __call__(self):
        return "GMT-USDT"


GMT_USDT = GMT_USDT(*GMT_USDT._fields)


class BICO_USDT(Symbol):
    """
        name: BICO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BICO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BICO-USDT"

    def __str__(self):
        return "BICO-USDT"

    def __call__(self):
        return "BICO-USDT"


BICO_USDT = BICO_USDT(*BICO_USDT._fields)


class STG_USDT(Symbol):
    """
        name: STG-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STG-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STG-USDT"

    def __str__(self):
        return "STG-USDT"

    def __call__(self):
        return "STG-USDT"


STG_USDT = STG_USDT(*STG_USDT._fields)


class LMR_USDT(Symbol):
    """
        name: LMR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LMR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LMR-USDT"

    def __str__(self):
        return "LMR-USDT"

    def __call__(self):
        return "LMR-USDT"


LMR_USDT = LMR_USDT(*LMR_USDT._fields)


class LMR_BTC(Symbol):
    """
        name: LMR-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LMR-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LMR-BTC"

    def __str__(self):
        return "LMR-BTC"

    def __call__(self):
        return "LMR-BTC"


LMR_BTC = LMR_BTC(*LMR_BTC._fields)


class LOKA_USDT(Symbol):
    """
        name: LOKA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOKA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKA-USDT"

    def __str__(self):
        return "LOKA-USDT"

    def __call__(self):
        return "LOKA-USDT"


LOKA_USDT = LOKA_USDT(*LOKA_USDT._fields)


class URUS_USDT(Symbol):
    """
        name: URUS-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "URUS-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "URUS-USDT"

    def __str__(self):
        return "URUS-USDT"

    def __call__(self):
        return "URUS-USDT"


URUS_USDT = URUS_USDT(*URUS_USDT._fields)


class JAM_USDT(Symbol):
    """
        name: JAM-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "JAM-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JAM-USDT"

    def __str__(self):
        return "JAM-USDT"

    def __call__(self):
        return "JAM-USDT"


JAM_USDT = JAM_USDT(*JAM_USDT._fields)


class JAM_ETH(Symbol):
    """
        name: JAM-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "JAM-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JAM-ETH"

    def __str__(self):
        return "JAM-ETH"

    def __call__(self):
        return "JAM-ETH"


JAM_ETH = JAM_ETH(*JAM_ETH._fields)


class BNC_USDT(Symbol):
    """
        name: BNC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BNC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNC-USDT"

    def __str__(self):
        return "BNC-USDT"

    def __call__(self):
        return "BNC-USDT"


BNC_USDT = BNC_USDT(*BNC_USDT._fields)


class LBP_USDT(Symbol):
    """
        name: LBP-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LBP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LBP-USDT"

    def __str__(self):
        return "LBP-USDT"

    def __call__(self):
        return "LBP-USDT"


LBP_USDT = LBP_USDT(*LBP_USDT._fields)


class CFX_USDT(Symbol):
    """
        name: CFX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "CFX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFX-USDT"

    def __str__(self):
        return "CFX-USDT"

    def __call__(self):
        return "CFX-USDT"


CFX_USDT = CFX_USDT(*CFX_USDT._fields)


class LOOKS_USDT(Symbol):
    """
        name: LOOKS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOOKS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOKS-USDT"

    def __str__(self):
        return "LOOKS-USDT"

    def __call__(self):
        return "LOOKS-USDT"


LOOKS_USDT = LOOKS_USDT(*LOOKS_USDT._fields)


class XCN_USDT(Symbol):
    """
        name: XCN-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XCN-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCN-USDT"

    def __str__(self):
        return "XCN-USDT"

    def __call__(self):
        return "XCN-USDT"


XCN_USDT = XCN_USDT(*XCN_USDT._fields)


class XCN_BTC(Symbol):
    """
        name: XCN-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XCN-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCN-BTC"

    def __str__(self):
        return "XCN-BTC"

    def __call__(self):
        return "XCN-BTC"


XCN_BTC = XCN_BTC(*XCN_BTC._fields)


class TITAN_USDT(Symbol):
    """
        name: TITAN-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TITAN-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TITAN-USDT"

    def __str__(self):
        return "TITAN-USDT"

    def __call__(self):
        return "TITAN-USDT"


TITAN_USDT = TITAN_USDT(*TITAN_USDT._fields)


class UPO_USDT(Symbol):
    """
        name: UPO-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "UPO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UPO-USDT"

    def __str__(self):
        return "UPO-USDT"

    def __call__(self):
        return "UPO-USDT"


UPO_USDT = UPO_USDT(*UPO_USDT._fields)


class SLCL_USDT(Symbol):
    """
        name: SLCL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SLCL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLCL-USDT"

    def __str__(self):
        return "SLCL-USDT"

    def __call__(self):
        return "SLCL-USDT"


SLCL_USDT = SLCL_USDT(*SLCL_USDT._fields)


class CEEK_USDT(Symbol):
    """
        name: CEEK-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CEEK-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CEEK-USDT"

    def __str__(self):
        return "CEEK-USDT"

    def __call__(self):
        return "CEEK-USDT"


CEEK_USDT = CEEK_USDT(*CEEK_USDT._fields)


class NHCT_USDT(Symbol):
    """
        name: NHCT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NHCT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NHCT-USDT"

    def __str__(self):
        return "NHCT-USDT"

    def __call__(self):
        return "NHCT-USDT"


NHCT_USDT = NHCT_USDT(*NHCT_USDT._fields)


class ARNM_USDT(Symbol):
    """
        name: ARNM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ARNM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARNM-USDT"

    def __str__(self):
        return "ARNM-USDT"

    def __call__(self):
        return "ARNM-USDT"


ARNM_USDT = ARNM_USDT(*ARNM_USDT._fields)


class FRA_USDT(Symbol):
    """
        name: FRA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FRA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRA-USDT"

    def __str__(self):
        return "FRA-USDT"

    def __call__(self):
        return "FRA-USDT"


FRA_USDT = FRA_USDT(*FRA_USDT._fields)


class VISION_USDT(Symbol):
    """
        name: VISION-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VISION-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VISION-USDT"

    def __str__(self):
        return "VISION-USDT"

    def __call__(self):
        return "VISION-USDT"


VISION_USDT = VISION_USDT(*VISION_USDT._fields)


class COCOS_USDT(Symbol):
    """
        name: COCOS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "COCOS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOS-USDT"

    def __str__(self):
        return "COCOS-USDT"

    def __call__(self):
        return "COCOS-USDT"


COCOS_USDT = COCOS_USDT(*COCOS_USDT._fields)


class ALPINE_USDT(Symbol):
    """
        name: ALPINE-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALPINE-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINE-USDT"

    def __str__(self):
        return "ALPINE-USDT"

    def __call__(self):
        return "ALPINE-USDT"


ALPINE_USDT = ALPINE_USDT(*ALPINE_USDT._fields)


class ZBC_USDT(Symbol):
    """
        name: ZBC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZBC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZBC-USDT"

    def __str__(self):
        return "ZBC-USDT"

    def __call__(self):
        return "ZBC-USDT"


ZBC_USDT = ZBC_USDT(*ZBC_USDT._fields)


class WOOP_USDT(Symbol):
    """
        name: WOOP-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WOOP-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOP-USDT"

    def __str__(self):
        return "WOOP-USDT"

    def __call__(self):
        return "WOOP-USDT"


WOOP_USDT = WOOP_USDT(*WOOP_USDT._fields)


class T_USDT(Symbol):
    """
        name: T-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "T-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "T-USDT"

    def __str__(self):
        return "T-USDT"

    def __call__(self):
        return "T-USDT"


T_USDT = T_USDT(*T_USDT._fields)


class NYM_USDT(Symbol):
    """
        name: NYM-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NYM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NYM-USDT"

    def __str__(self):
        return "NYM-USDT"

    def __call__(self):
        return "NYM-USDT"


NYM_USDT = NYM_USDT(*NYM_USDT._fields)


class VOXEL_USDT(Symbol):
    """
        name: VOXEL-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VOXEL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXEL-USDT"

    def __str__(self):
        return "VOXEL-USDT"

    def __call__(self):
        return "VOXEL-USDT"


VOXEL_USDT = VOXEL_USDT(*VOXEL_USDT._fields)


class VOXEL_ETH(Symbol):
    """
        name: VOXEL-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VOXEL-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXEL-ETH"

    def __str__(self):
        return "VOXEL-ETH"

    def __call__(self):
        return "VOXEL-ETH"


VOXEL_ETH = VOXEL_ETH(*VOXEL_ETH._fields)


class PSTAKE_USDT(Symbol):
    """
        name: PSTAKE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PSTAKE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSTAKE-USDT"

    def __str__(self):
        return "PSTAKE-USDT"

    def __call__(self):
        return "PSTAKE-USDT"


PSTAKE_USDT = PSTAKE_USDT(*PSTAKE_USDT._fields)


class SPA_USDT(Symbol):
    """
        name: SPA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SPA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPA-USDT"

    def __str__(self):
        return "SPA-USDT"

    def __call__(self):
        return "SPA-USDT"


SPA_USDT = SPA_USDT(*SPA_USDT._fields)


class SPA_ETH(Symbol):
    """
        name: SPA-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SPA-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPA-ETH"

    def __str__(self):
        return "SPA-ETH"

    def __call__(self):
        return "SPA-ETH"


SPA_ETH = SPA_ETH(*SPA_ETH._fields)


class SYNR_USDT(Symbol):
    """
        name: SYNR-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SYNR-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYNR-USDT"

    def __str__(self):
        return "SYNR-USDT"

    def __call__(self):
        return "SYNR-USDT"


SYNR_USDT = SYNR_USDT(*SYNR_USDT._fields)


class DAR_USDT(Symbol):
    """
        name: DAR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DAR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAR-USDT"

    def __str__(self):
        return "DAR-USDT"

    def __call__(self):
        return "DAR-USDT"


DAR_USDT = DAR_USDT(*DAR_USDT._fields)


class DAR_BTC(Symbol):
    """
        name: DAR-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DAR-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAR-BTC"

    def __str__(self):
        return "DAR-BTC"

    def __call__(self):
        return "DAR-BTC"


DAR_BTC = DAR_BTC(*DAR_BTC._fields)


class MV_USDT(Symbol):
    """
        name: MV-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MV-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MV-USDT"

    def __str__(self):
        return "MV-USDT"

    def __call__(self):
        return "MV-USDT"


MV_USDT = MV_USDT(*MV_USDT._fields)


class XDEFI_USDT(Symbol):
    """
        name: XDEFI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XDEFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDEFI-USDT"

    def __str__(self):
        return "XDEFI-USDT"

    def __call__(self):
        return "XDEFI-USDT"


XDEFI_USDT = XDEFI_USDT(*XDEFI_USDT._fields)


class RACA_USDT(Symbol):
    """
        name: RACA-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RACA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RACA-USDT"

    def __str__(self):
        return "RACA-USDT"

    def __call__(self):
        return "RACA-USDT"


RACA_USDT = RACA_USDT(*RACA_USDT._fields)


class XWG_USDT(Symbol):
    """
        name: XWG-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XWG-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XWG-USDT"

    def __str__(self):
        return "XWG-USDT"

    def __call__(self):
        return "XWG-USDT"


XWG_USDT = XWG_USDT(*XWG_USDT._fields)


class HAWK_USDT(Symbol):
    """
        name: HAWK-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HAWK-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAWK-USDT"

    def __str__(self):
        return "HAWK-USDT"

    def __call__(self):
        return "HAWK-USDT"


HAWK_USDT = HAWK_USDT(*HAWK_USDT._fields)


class TRVL_BTC(Symbol):
    """
        name: TRVL-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRVL-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRVL-BTC"

    def __str__(self):
        return "TRVL-BTC"

    def __call__(self):
        return "TRVL-BTC"


TRVL_BTC = TRVL_BTC(*TRVL_BTC._fields)


class SWFTC_USDT(Symbol):
    """
        name: SWFTC-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SWFTC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWFTC-USDT"

    def __str__(self):
        return "SWFTC-USDT"

    def __call__(self):
        return "SWFTC-USDT"


SWFTC_USDT = SWFTC_USDT(*SWFTC_USDT._fields)


class BRWL_USDT(Symbol):
    """
        name: BRWL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BRWL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRWL-USDT"

    def __str__(self):
        return "BRWL-USDT"

    def __call__(self):
        return "BRWL-USDT"


BRWL_USDT = BRWL_USDT(*BRWL_USDT._fields)


class TAUM_USDT(Symbol):
    """
        name: TAUM-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TAUM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TAUM-USDT"

    def __str__(self):
        return "TAUM-USDT"

    def __call__(self):
        return "TAUM-USDT"


TAUM_USDT = TAUM_USDT(*TAUM_USDT._fields)


class CELR_USDT(Symbol):
    """
        name: CELR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CELR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELR-USDT"

    def __str__(self):
        return "CELR-USDT"

    def __call__(self):
        return "CELR-USDT"


CELR_USDT = CELR_USDT(*CELR_USDT._fields)


class AURORA_USDT(Symbol):
    """
        name: AURORA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AURORA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AURORA-USDT"

    def __str__(self):
        return "AURORA-USDT"

    def __call__(self):
        return "AURORA-USDT"


AURORA_USDT = AURORA_USDT(*AURORA_USDT._fields)


class POSI_USDT(Symbol):
    """
        name: POSI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POSI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POSI-USDT"

    def __str__(self):
        return "POSI-USDT"

    def __call__(self):
        return "POSI-USDT"


POSI_USDT = POSI_USDT(*POSI_USDT._fields)


class COOHA_USDT(Symbol):
    """
        name: COOHA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "COOHA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COOHA-USDT"

    def __str__(self):
        return "COOHA-USDT"

    def __call__(self):
        return "COOHA-USDT"


COOHA_USDT = COOHA_USDT(*COOHA_USDT._fields)


class KNC_USDT(Symbol):
    """
        name: KNC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KNC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNC-USDT"

    def __str__(self):
        return "KNC-USDT"

    def __call__(self):
        return "KNC-USDT"


KNC_USDT = KNC_USDT(*KNC_USDT._fields)


class EPK_USDT(Symbol):
    """
        name: EPK-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EPK-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPK-USDT"

    def __str__(self):
        return "EPK-USDT"

    def __call__(self):
        return "EPK-USDT"


EPK_USDT = EPK_USDT(*EPK_USDT._fields)


class PLD_USDT(Symbol):
    """
        name: PLD-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PLD-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLD-USDT"

    def __str__(self):
        return "PLD-USDT"

    def __call__(self):
        return "PLD-USDT"


PLD_USDT = PLD_USDT(*PLD_USDT._fields)


class PSL_USDT(Symbol):
    """
        name: PSL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PSL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSL-USDT"

    def __str__(self):
        return "PSL-USDT"

    def __call__(self):
        return "PSL-USDT"


PSL_USDT = PSL_USDT(*PSL_USDT._fields)


class PKF_USDT(Symbol):
    """
        name: PKF-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PKF-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PKF-USDT"

    def __str__(self):
        return "PKF-USDT"

    def __call__(self):
        return "PKF-USDT"


PKF_USDT = PKF_USDT(*PKF_USDT._fields)


class OVR_USDT(Symbol):
    """
        name: OVR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OVR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OVR-USDT"

    def __str__(self):
        return "OVR-USDT"

    def __call__(self):
        return "OVR-USDT"


OVR_USDT = OVR_USDT(*OVR_USDT._fields)


class SYS_USDT(Symbol):
    """
        name: SYS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SYS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYS-USDT"

    def __str__(self):
        return "SYS-USDT"

    def __call__(self):
        return "SYS-USDT"


SYS_USDT = SYS_USDT(*SYS_USDT._fields)


class SYS_BTC(Symbol):
    """
        name: SYS-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SYS-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYS-BTC"

    def __str__(self):
        return "SYS-BTC"

    def __call__(self):
        return "SYS-BTC"


SYS_BTC = SYS_BTC(*SYS_BTC._fields)


class BRISE_USDT(Symbol):
    """
        name: BRISE-USDT
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BRISE-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRISE-USDT"

    def __str__(self):
        return "BRISE-USDT"

    def __call__(self):
        return "BRISE-USDT"


BRISE_USDT = BRISE_USDT(*BRISE_USDT._fields)


class DG_USDT(Symbol):
    """
        name: DG-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DG-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DG-USDT"

    def __str__(self):
        return "DG-USDT"

    def __call__(self):
        return "DG-USDT"


DG_USDT = DG_USDT(*DG_USDT._fields)


class EPX_USDT(Symbol):
    """
        name: EPX-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EPX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPX-USDT"

    def __str__(self):
        return "EPX-USDT"

    def __call__(self):
        return "EPX-USDT"


EPX_USDT = EPX_USDT(*EPX_USDT._fields)


class GST_USDT(Symbol):
    """
        name: GST-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GST-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GST-USDT"

    def __str__(self):
        return "GST-USDT"

    def __call__(self):
        return "GST-USDT"


GST_USDT = GST_USDT(*GST_USDT._fields)


class PLY_USDT(Symbol):
    """
        name: PLY-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PLY-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLY-USDT"

    def __str__(self):
        return "PLY-USDT"

    def __call__(self):
        return "PLY-USDT"


PLY_USDT = PLY_USDT(*PLY_USDT._fields)


class GAL_USDT(Symbol):
    """
        name: GAL-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "GAL-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GAL-USDT"

    def __str__(self):
        return "GAL-USDT"

    def __call__(self):
        return "GAL-USDT"


GAL_USDT = GAL_USDT(*GAL_USDT._fields)


class BSW_USDT(Symbol):
    """
        name: BSW-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BSW-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSW-USDT"

    def __str__(self):
        return "BSW-USDT"

    def __call__(self):
        return "BSW-USDT"


BSW_USDT = BSW_USDT(*BSW_USDT._fields)


class FITFI_USDT(Symbol):
    """
        name: FITFI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FITFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FITFI-USDT"

    def __str__(self):
        return "FITFI-USDT"

    def __call__(self):
        return "FITFI-USDT"


FITFI_USDT = FITFI_USDT(*FITFI_USDT._fields)


class FSN_USDT(Symbol):
    """
        name: FSN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FSN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FSN-USDT"

    def __str__(self):
        return "FSN-USDT"

    def __call__(self):
        return "FSN-USDT"


FSN_USDT = FSN_USDT(*FSN_USDT._fields)


class H2O_USDT(Symbol):
    """
        name: H2O-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "H2O-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "H2O-USDT"

    def __str__(self):
        return "H2O-USDT"

    def __call__(self):
        return "H2O-USDT"


H2O_USDT = H2O_USDT(*H2O_USDT._fields)


class GMM_USDT(Symbol):
    """
        name: GMM-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMM-USDT"

    def __str__(self):
        return "GMM-USDT"

    def __call__(self):
        return "GMM-USDT"


GMM_USDT = GMM_USDT(*GMM_USDT._fields)


class AKT_USDT(Symbol):
    """
        name: AKT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AKT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKT-USDT"

    def __str__(self):
        return "AKT-USDT"

    def __call__(self):
        return "AKT-USDT"


AKT_USDT = AKT_USDT(*AKT_USDT._fields)


class SIN_USDT(Symbol):
    """
        name: SIN-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SIN-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SIN-USDT"

    def __str__(self):
        return "SIN-USDT"

    def __call__(self):
        return "SIN-USDT"


SIN_USDT = SIN_USDT(*SIN_USDT._fields)


class AUSD_USDT(Symbol):
    """
        name: AUSD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AUSD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUSD-USDT"

    def __str__(self):
        return "AUSD-USDT"

    def __call__(self):
        return "AUSD-USDT"


AUSD_USDT = AUSD_USDT(*AUSD_USDT._fields)


class BOBA_USDT(Symbol):
    """
        name: BOBA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BOBA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOBA-USDT"

    def __str__(self):
        return "BOBA-USDT"

    def __call__(self):
        return "BOBA-USDT"


BOBA_USDT = BOBA_USDT(*BOBA_USDT._fields)


class BFC_USDT(Symbol):
    """
        name: BFC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BFC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BFC-USDT"

    def __str__(self):
        return "BFC-USDT"

    def __call__(self):
        return "BFC-USDT"


BFC_USDT = BFC_USDT(*BFC_USDT._fields)


class BIFI_USDT(Symbol):
    """
        name: BIFI-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BIFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BIFI-USDT"

    def __str__(self):
        return "BIFI-USDT"

    def __call__(self):
        return "BIFI-USDT"


BIFI_USDT = BIFI_USDT(*BIFI_USDT._fields)


class DFA_USDT(Symbol):
    """
        name: DFA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DFA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFA-USDT"

    def __str__(self):
        return "DFA-USDT"

    def __call__(self):
        return "DFA-USDT"


DFA_USDT = DFA_USDT(*DFA_USDT._fields)


class MBL_USDT(Symbol):
    """
        name: MBL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MBL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBL-USDT"

    def __str__(self):
        return "MBL-USDT"

    def __call__(self):
        return "MBL-USDT"


MBL_USDT = MBL_USDT(*MBL_USDT._fields)


class DUSK_USDT(Symbol):
    """
        name: DUSK-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DUSK-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSK-USDT"

    def __str__(self):
        return "DUSK-USDT"

    def __call__(self):
        return "DUSK-USDT"


DUSK_USDT = DUSK_USDT(*DUSK_USDT._fields)


class USDD_USDT(Symbol):
    """
        name: USDD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "USDD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDD-USDT"

    def __str__(self):
        return "USDD-USDT"

    def __call__(self):
        return "USDD-USDT"


USDD_USDT = USDD_USDT(*USDD_USDT._fields)


class USDD_USDC(Symbol):
    """
        name: USDD-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "USDD-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDD-USDC"

    def __str__(self):
        return "USDD-USDC"

    def __call__(self):
        return "USDD-USDC"


USDD_USDC = USDD_USDC(*USDD_USDC._fields)


class FITFI_USDC(Symbol):
    """
        name: FITFI-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FITFI-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FITFI-USDC"

    def __str__(self):
        return "FITFI-USDC"

    def __call__(self):
        return "FITFI-USDC"


FITFI_USDC = FITFI_USDC(*FITFI_USDC._fields)


class APE_USDC(Symbol):
    """
        name: APE-USDC
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "APE-USDC"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APE-USDC"

    def __str__(self):
        return "APE-USDC"

    def __call__(self):
        return "APE-USDC"


APE_USDC = APE_USDC(*APE_USDC._fields)


class AVAX_USDC(Symbol):
    """
        name: AVAX-USDC
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "AVAX-USDC"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX-USDC"

    def __str__(self):
        return "AVAX-USDC"

    def __call__(self):
        return "AVAX-USDC"


AVAX_USDC = AVAX_USDC(*AVAX_USDC._fields)


class SHIB_USDC(Symbol):
    """
        name: SHIB-USDC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHIB-USDC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIB-USDC"

    def __str__(self):
        return "SHIB-USDC"

    def __call__(self):
        return "SHIB-USDC"


SHIB_USDC = SHIB_USDC(*SHIB_USDC._fields)


class XCN_USDC(Symbol):
    """
        name: XCN-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XCN-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCN-USDC"

    def __str__(self):
        return "XCN-USDC"

    def __call__(self):
        return "XCN-USDC"


XCN_USDC = XCN_USDC(*XCN_USDC._fields)


class TRX_USDC(Symbol):
    """
        name: TRX-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "TRX-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-USDC"

    def __str__(self):
        return "TRX-USDC"

    def __call__(self):
        return "TRX-USDC"


TRX_USDC = TRX_USDC(*TRX_USDC._fields)


class NEAR_USDC(Symbol):
    """
        name: NEAR-USDC
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "NEAR-USDC"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR-USDC"

    def __str__(self):
        return "NEAR-USDC"

    def __call__(self):
        return "NEAR-USDC"


NEAR_USDC = NEAR_USDC(*NEAR_USDC._fields)


class MATIC_USDC(Symbol):
    """
        name: MATIC-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "MATIC-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC-USDC"

    def __str__(self):
        return "MATIC-USDC"

    def __call__(self):
        return "MATIC-USDC"


MATIC_USDC = MATIC_USDC(*MATIC_USDC._fields)


class FTM_USDC(Symbol):
    """
        name: FTM-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FTM-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM-USDC"

    def __str__(self):
        return "FTM-USDC"

    def __call__(self):
        return "FTM-USDC"


FTM_USDC = FTM_USDC(*FTM_USDC._fields)


class ZIL_USDC(Symbol):
    """
        name: ZIL-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZIL-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZIL-USDC"

    def __str__(self):
        return "ZIL-USDC"

    def __call__(self):
        return "ZIL-USDC"


ZIL_USDC = ZIL_USDC(*ZIL_USDC._fields)


class SOL_USDC(Symbol):
    """
        name: SOL-USDC
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SOL-USDC"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOL-USDC"

    def __str__(self):
        return "SOL-USDC"

    def __call__(self):
        return "SOL-USDC"


SOL_USDC = SOL_USDC(*SOL_USDC._fields)


class MLS_USDT(Symbol):
    """
        name: MLS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MLS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLS-USDT"

    def __str__(self):
        return "MLS-USDT"

    def __call__(self):
        return "MLS-USDT"


MLS_USDT = MLS_USDT(*MLS_USDT._fields)


class AFK_USDT(Symbol):
    """
        name: AFK-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AFK-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AFK-USDT"

    def __str__(self):
        return "AFK-USDT"

    def __call__(self):
        return "AFK-USDT"


AFK_USDT = AFK_USDT(*AFK_USDT._fields)


class AFK_USDC(Symbol):
    """
        name: AFK-USDC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AFK-USDC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AFK-USDC"

    def __str__(self):
        return "AFK-USDC"

    def __call__(self):
        return "AFK-USDC"


AFK_USDC = AFK_USDC(*AFK_USDC._fields)


class ACH_USDT(Symbol):
    """
        name: ACH-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACH-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACH-USDT"

    def __str__(self):
        return "ACH-USDT"

    def __call__(self):
        return "ACH-USDT"


ACH_USDT = ACH_USDT(*ACH_USDT._fields)


class SCRT_USDT(Symbol):
    """
        name: SCRT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SCRT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRT-USDT"

    def __str__(self):
        return "SCRT-USDT"

    def __call__(self):
        return "SCRT-USDT"


SCRT_USDT = SCRT_USDT(*SCRT_USDT._fields)


class SCRT_BTC(Symbol):
    """
        name: SCRT-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SCRT-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRT-BTC"

    def __str__(self):
        return "SCRT-BTC"

    def __call__(self):
        return "SCRT-BTC"


SCRT_BTC = SCRT_BTC(*SCRT_BTC._fields)


class APE3L_USDT(Symbol):
    """
        name: APE3L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "APE3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APE3L-USDT"

    def __str__(self):
        return "APE3L-USDT"

    def __call__(self):
        return "APE3L-USDT"


APE3L_USDT = APE3L_USDT(*APE3L_USDT._fields)


class APE3S_USDT(Symbol):
    """
        name: APE3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "APE3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APE3S-USDT"

    def __str__(self):
        return "APE3S-USDT"

    def __call__(self):
        return "APE3S-USDT"


APE3S_USDT = APE3S_USDT(*APE3S_USDT._fields)


class STORE_USDT(Symbol):
    """
        name: STORE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STORE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORE-USDT"

    def __str__(self):
        return "STORE-USDT"

    def __call__(self):
        return "STORE-USDT"


STORE_USDT = STORE_USDT(*STORE_USDT._fields)


class STORE_ETH(Symbol):
    """
        name: STORE-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STORE-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORE-ETH"

    def __str__(self):
        return "STORE-ETH"

    def __call__(self):
        return "STORE-ETH"


STORE_ETH = STORE_ETH(*STORE_ETH._fields)


class GMT3L_USDT(Symbol):
    """
        name: GMT3L-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMT3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMT3L-USDT"

    def __str__(self):
        return "GMT3L-USDT"

    def __call__(self):
        return "GMT3L-USDT"


GMT3L_USDT = GMT3L_USDT(*GMT3L_USDT._fields)


class GMT3S_USDT(Symbol):
    """
        name: GMT3S-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMT3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMT3S-USDT"

    def __str__(self):
        return "GMT3S-USDT"

    def __call__(self):
        return "GMT3S-USDT"


GMT3S_USDT = GMT3S_USDT(*GMT3S_USDT._fields)


class CCD_USDT(Symbol):
    """
        name: CCD-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CCD-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CCD-USDT"

    def __str__(self):
        return "CCD-USDT"

    def __call__(self):
        return "CCD-USDT"


CCD_USDT = CCD_USDT(*CCD_USDT._fields)


class DOSE_USDC(Symbol):
    """
        name: DOSE-USDC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DOSE-USDC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOSE-USDC"

    def __str__(self):
        return "DOSE-USDC"

    def __call__(self):
        return "DOSE-USDC"


DOSE_USDC = DOSE_USDC(*DOSE_USDC._fields)


class LUNC_USDT(Symbol):
    """
        name: LUNC-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LUNC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNC-USDT"

    def __str__(self):
        return "LUNC-USDT"

    def __call__(self):
        return "LUNC-USDT"


LUNC_USDT = LUNC_USDT(*LUNC_USDT._fields)


class LUNC_USDC(Symbol):
    """
        name: LUNC-USDC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LUNC-USDC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNC-USDC"

    def __str__(self):
        return "LUNC-USDC"

    def __call__(self):
        return "LUNC-USDC"


LUNC_USDC = LUNC_USDC(*LUNC_USDC._fields)


class USTC_USDT(Symbol):
    """
        name: USTC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USTC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTC-USDT"

    def __str__(self):
        return "USTC-USDT"

    def __call__(self):
        return "USTC-USDT"


USTC_USDT = USTC_USDT(*USTC_USDT._fields)


class USTC_USDC(Symbol):
    """
        name: USTC-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USTC-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTC-USDC"

    def __str__(self):
        return "USTC-USDC"

    def __call__(self):
        return "USTC-USDC"


USTC_USDC = USTC_USDC(*USTC_USDC._fields)


class GMT_USDC(Symbol):
    """
        name: GMT-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMT-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMT-USDC"

    def __str__(self):
        return "GMT-USDC"

    def __call__(self):
        return "GMT-USDC"


GMT_USDC = GMT_USDC(*GMT_USDC._fields)


class VRA_USDC(Symbol):
    """
        name: VRA-USDC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VRA-USDC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VRA-USDC"

    def __str__(self):
        return "VRA-USDC"

    def __call__(self):
        return "VRA-USDC"


VRA_USDC = VRA_USDC(*VRA_USDC._fields)


class DOT_USDC(Symbol):
    """
        name: DOT-USDC
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "DOT-USDC"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT-USDC"

    def __str__(self):
        return "DOT-USDC"

    def __call__(self):
        return "DOT-USDC"


DOT_USDC = DOT_USDC(*DOT_USDC._fields)


class RUNE_USDC(Symbol):
    """
        name: RUNE-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RUNE-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNE-USDC"

    def __str__(self):
        return "RUNE-USDC"

    def __call__(self):
        return "RUNE-USDC"


RUNE_USDC = RUNE_USDC(*RUNE_USDC._fields)


class ATOM_USDC(Symbol):
    """
        name: ATOM-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ATOM-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-USDC"

    def __str__(self):
        return "ATOM-USDC"

    def __call__(self):
        return "ATOM-USDC"


ATOM_USDC = ATOM_USDC(*ATOM_USDC._fields)


class BNB_USDC(Symbol):
    """
        name: BNB-USDC
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BNB-USDC"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB-USDC"

    def __str__(self):
        return "BNB-USDC"

    def __call__(self):
        return "BNB-USDC"


BNB_USDC = BNB_USDC(*BNB_USDC._fields)


class JASMY_USDC(Symbol):
    """
        name: JASMY-USDC
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "JASMY-USDC"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMY-USDC"

    def __str__(self):
        return "JASMY-USDC"

    def __call__(self):
        return "JASMY-USDC"


JASMY_USDC = JASMY_USDC(*JASMY_USDC._fields)


class KCS_USDC(Symbol):
    """
        name: KCS-USDC
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "KCS-USDC"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KCS-USDC"

    def __str__(self):
        return "KCS-USDC"

    def __call__(self):
        return "KCS-USDC"


KCS_USDC = KCS_USDC(*KCS_USDC._fields)


class KDA_USDC(Symbol):
    """
        name: KDA-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "KDA-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDA-USDC"

    def __str__(self):
        return "KDA-USDC"

    def __call__(self):
        return "KDA-USDC"


KDA_USDC = KDA_USDC(*KDA_USDC._fields)


class ALGO_USDC(Symbol):
    """
        name: ALGO-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALGO-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-USDC"

    def __str__(self):
        return "ALGO-USDC"

    def __call__(self):
        return "ALGO-USDC"


ALGO_USDC = ALGO_USDC(*ALGO_USDC._fields)


class LUNA_USDC(Symbol):
    """
        name: LUNA-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LUNA-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNA-USDC"

    def __str__(self):
        return "LUNA-USDC"

    def __call__(self):
        return "LUNA-USDC"


LUNA_USDC = LUNA_USDC(*LUNA_USDC._fields)


class OP_USDT(Symbol):
    """
        name: OP-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "OP-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OP-USDT"

    def __str__(self):
        return "OP-USDT"

    def __call__(self):
        return "OP-USDT"


OP_USDT = OP_USDT(*OP_USDT._fields)


class OP_USDC(Symbol):
    """
        name: OP-USDC
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "OP-USDC"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OP-USDC"

    def __str__(self):
        return "OP-USDC"

    def __call__(self):
        return "OP-USDC"


OP_USDC = OP_USDC(*OP_USDC._fields)


class JASMY3L_USDT(Symbol):
    """
        name: JASMY3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "JASMY3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMY3L-USDT"

    def __str__(self):
        return "JASMY3L-USDT"

    def __call__(self):
        return "JASMY3L-USDT"


JASMY3L_USDT = JASMY3L_USDT(*JASMY3L_USDT._fields)


class JASMY3S_USDT(Symbol):
    """
        name: JASMY3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 100000000000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "JASMY3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 100000000000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMY3S-USDT"

    def __str__(self):
        return "JASMY3S-USDT"

    def __call__(self):
        return "JASMY3S-USDT"


JASMY3S_USDT = JASMY3S_USDT(*JASMY3S_USDT._fields)


class EVER_USDT(Symbol):
    """
        name: EVER-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EVER-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EVER-USDT"

    def __str__(self):
        return "EVER-USDT"

    def __call__(self):
        return "EVER-USDT"


EVER_USDT = EVER_USDT(*EVER_USDT._fields)


class MOOV_USDT(Symbol):
    """
        name: MOOV-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MOOV-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOOV-USDT"

    def __str__(self):
        return "MOOV-USDT"

    def __call__(self):
        return "MOOV-USDT"


MOOV_USDT = MOOV_USDT(*MOOV_USDT._fields)


class IHC_USDT(Symbol):
    """
        name: IHC-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IHC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IHC-USDT"

    def __str__(self):
        return "IHC-USDT"

    def __call__(self):
        return "IHC-USDT"


IHC_USDT = IHC_USDT(*IHC_USDT._fields)


class ICX_USDT(Symbol):
    """
        name: ICX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ICX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICX-USDT"

    def __str__(self):
        return "ICX-USDT"

    def __call__(self):
        return "ICX-USDT"


ICX_USDT = ICX_USDT(*ICX_USDT._fields)


class ICX_ETH(Symbol):
    """
        name: ICX-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ICX-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICX-ETH"

    def __str__(self):
        return "ICX-ETH"

    def __call__(self):
        return "ICX-ETH"


ICX_ETH = ICX_ETH(*ICX_ETH._fields)


class BTC_BRL(Symbol):
    """
        name: BTC-BRL
        significant_digits: None
        tick_size: 0.1
        min_margin: None
        initial_margin: None
        min_order_size: 0.000001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTC-BRL"
    significant_digits: int = None
    tick_size: int = 0.1
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.000001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-BRL"

    def __str__(self):
        return "BTC-BRL"

    def __call__(self):
        return "BTC-BRL"


BTC_BRL = BTC_BRL(*BTC_BRL._fields)


class ETH_BRL(Symbol):
    """
        name: ETH-BRL
        significant_digits: None
        tick_size: 0.01
        min_margin: None
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETH-BRL"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-BRL"

    def __str__(self):
        return "ETH-BRL"

    def __call__(self):
        return "ETH-BRL"


ETH_BRL = ETH_BRL(*ETH_BRL._fields)


class USDT_BRL(Symbol):
    """
        name: USDT-BRL
        significant_digits: None
        tick_size: 0.0001
        min_margin: None
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDT-BRL"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-BRL"

    def __str__(self):
        return "USDT-BRL"

    def __call__(self):
        return "USDT-BRL"


USDT_BRL = USDT_BRL(*USDT_BRL._fields)


class WELL_USDT(Symbol):
    """
        name: WELL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WELL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WELL-USDT"

    def __str__(self):
        return "WELL-USDT"

    def __call__(self):
        return "WELL-USDT"


WELL_USDT = WELL_USDT(*WELL_USDT._fields)


class FORT_USDT(Symbol):
    """
        name: FORT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FORT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORT-USDT"

    def __str__(self):
        return "FORT-USDT"

    def __call__(self):
        return "FORT-USDT"


FORT_USDT = FORT_USDT(*FORT_USDT._fields)


class USDP_USDT(Symbol):
    """
        name: USDP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDP-USDT"

    def __str__(self):
        return "USDP-USDT"

    def __call__(self):
        return "USDP-USDT"


USDP_USDT = USDP_USDT(*USDP_USDT._fields)


class USDD_TRX(Symbol):
    """
        name: USDD-TRX
        significant_digits: None
        tick_size: 0.001
        min_margin: 10
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDD-TRX"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 10
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDD-TRX"

    def __str__(self):
        return "USDD-TRX"

    def __call__(self):
        return "USDD-TRX"


USDD_TRX = USDD_TRX(*USDD_TRX._fields)


class BTC_EUR(Symbol):
    """
        name: BTC-EUR
        significant_digits: None
        tick_size: 0.01
        min_margin: None
        initial_margin: None
        min_order_size: 0.00001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTC-EUR"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-EUR"

    def __str__(self):
        return "BTC-EUR"

    def __call__(self):
        return "BTC-EUR"


BTC_EUR = BTC_EUR(*BTC_EUR._fields)


class ETH_EUR(Symbol):
    """
        name: ETH-EUR
        significant_digits: None
        tick_size: 0.01
        min_margin: None
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETH-EUR"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-EUR"

    def __str__(self):
        return "ETH-EUR"

    def __call__(self):
        return "ETH-EUR"


ETH_EUR = ETH_EUR(*ETH_EUR._fields)


class USDT_EUR(Symbol):
    """
        name: USDT-EUR
        significant_digits: None
        tick_size: 0.0001
        min_margin: None
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDT-EUR"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-EUR"

    def __str__(self):
        return "USDT-EUR"

    def __call__(self):
        return "USDT-EUR"


USDT_EUR = USDT_EUR(*USDT_EUR._fields)


class CSPR_USDT(Symbol):
    """
        name: CSPR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CSPR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CSPR-USDT"

    def __str__(self):
        return "CSPR-USDT"

    def __call__(self):
        return "CSPR-USDT"


CSPR_USDT = CSPR_USDT(*CSPR_USDT._fields)


class CSPR_ETH(Symbol):
    """
        name: CSPR-ETH
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CSPR-ETH"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CSPR-ETH"

    def __str__(self):
        return "CSPR-ETH"

    def __call__(self):
        return "CSPR-ETH"


CSPR_ETH = CSPR_ETH(*CSPR_ETH._fields)


class WEMIX_USDT(Symbol):
    """
        name: WEMIX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WEMIX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WEMIX-USDT"

    def __str__(self):
        return "WEMIX-USDT"

    def __call__(self):
        return "WEMIX-USDT"


WEMIX_USDT = WEMIX_USDT(*WEMIX_USDT._fields)


class REV3L_USDT(Symbol):
    """
        name: REV3L-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "REV3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REV3L-USDT"

    def __str__(self):
        return "REV3L-USDT"

    def __call__(self):
        return "REV3L-USDT"


REV3L_USDT = REV3L_USDT(*REV3L_USDT._fields)


class OLE_USDT(Symbol):
    """
        name: OLE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OLE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OLE-USDT"

    def __str__(self):
        return "OLE-USDT"

    def __call__(self):
        return "OLE-USDT"


OLE_USDT = OLE_USDT(*OLE_USDT._fields)


class LDO_USDT(Symbol):
    """
        name: LDO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LDO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDO-USDT"

    def __str__(self):
        return "LDO-USDT"

    def __call__(self):
        return "LDO-USDT"


LDO_USDT = LDO_USDT(*LDO_USDT._fields)


class LDO_USDC(Symbol):
    """
        name: LDO-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LDO-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDO-USDC"

    def __str__(self):
        return "LDO-USDC"

    def __call__(self):
        return "LDO-USDC"


LDO_USDC = LDO_USDC(*LDO_USDC._fields)


class CULT_USDT(Symbol):
    """
        name: CULT-USDT
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CULT-USDT"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CULT-USDT"

    def __str__(self):
        return "CULT-USDT"

    def __call__(self):
        return "CULT-USDT"


CULT_USDT = CULT_USDT(*CULT_USDT._fields)


class SWFTC_USDC(Symbol):
    """
        name: SWFTC-USDC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SWFTC-USDC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWFTC-USDC"

    def __str__(self):
        return "SWFTC-USDC"

    def __call__(self):
        return "SWFTC-USDC"


SWFTC_USDC = SWFTC_USDC(*SWFTC_USDC._fields)


class FIDA_USDT(Symbol):
    """
        name: FIDA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FIDA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDA-USDT"

    def __str__(self):
        return "FIDA-USDT"

    def __call__(self):
        return "FIDA-USDT"


FIDA_USDT = FIDA_USDT(*FIDA_USDT._fields)


class BUSD_USDT(Symbol):
    """
        name: BUSD-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BUSD-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSD-USDT"

    def __str__(self):
        return "BUSD-USDT"

    def __call__(self):
        return "BUSD-USDT"


BUSD_USDT = BUSD_USDT(*BUSD_USDT._fields)


class RBP_USDT(Symbol):
    """
        name: RBP-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RBP-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RBP-USDT"

    def __str__(self):
        return "RBP-USDT"

    def __call__(self):
        return "RBP-USDT"


RBP_USDT = RBP_USDT(*RBP_USDT._fields)


class SRBP_USDT(Symbol):
    """
        name: SRBP-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SRBP-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRBP-USDT"

    def __str__(self):
        return "SRBP-USDT"

    def __call__(self):
        return "SRBP-USDT"


SRBP_USDT = SRBP_USDT(*SRBP_USDT._fields)


class HIBAYC_USDT(Symbol):
    """
        name: HIBAYC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIBAYC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIBAYC-USDT"

    def __str__(self):
        return "HIBAYC-USDT"

    def __call__(self):
        return "HIBAYC-USDT"


HIBAYC_USDT = HIBAYC_USDT(*HIBAYC_USDT._fields)


class BUSD_USDC(Symbol):
    """
        name: BUSD-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BUSD-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSD-USDC"

    def __str__(self):
        return "BUSD-USDC"

    def __call__(self):
        return "BUSD-USDC"


BUSD_USDC = BUSD_USDC(*BUSD_USDC._fields)


class OGV_USDT(Symbol):
    """
        name: OGV-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OGV-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGV-USDT"

    def __str__(self):
        return "OGV-USDT"

    def __call__(self):
        return "OGV-USDT"


OGV_USDT = OGV_USDT(*OGV_USDT._fields)


class WOMBAT_USDT(Symbol):
    """
        name: WOMBAT-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WOMBAT-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOMBAT-USDT"

    def __str__(self):
        return "WOMBAT-USDT"

    def __call__(self):
        return "WOMBAT-USDT"


WOMBAT_USDT = WOMBAT_USDT(*WOMBAT_USDT._fields)


class HIPUNKS_USDT(Symbol):
    """
        name: HIPUNKS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIPUNKS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIPUNKS-USDT"

    def __str__(self):
        return "HIPUNKS-USDT"

    def __call__(self):
        return "HIPUNKS-USDT"


HIPUNKS_USDT = HIPUNKS_USDT(*HIPUNKS_USDT._fields)


class FT_USDT(Symbol):
    """
        name: FT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FT-USDT"

    def __str__(self):
        return "FT-USDT"

    def __call__(self):
        return "FT-USDT"


FT_USDT = FT_USDT(*FT_USDT._fields)


class ETC_USDC(Symbol):
    """
        name: ETC-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETC-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETC-USDC"

    def __str__(self):
        return "ETC-USDC"

    def __call__(self):
        return "ETC-USDC"


ETC_USDC = ETC_USDC(*ETC_USDC._fields)


class HIENS4_USDT(Symbol):
    """
        name: HIENS4-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIENS4-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIENS4-USDT"

    def __str__(self):
        return "HIENS4-USDT"

    def __call__(self):
        return "HIENS4-USDT"


HIENS4_USDT = HIENS4_USDT(*HIENS4_USDT._fields)


class EGAME_USDT(Symbol):
    """
        name: EGAME-USDT
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EGAME-USDT"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGAME-USDT"

    def __str__(self):
        return "EGAME-USDT"

    def __call__(self):
        return "EGAME-USDT"


EGAME_USDT = EGAME_USDT(*EGAME_USDT._fields)


class EGAME_BTC(Symbol):
    """
        name: EGAME-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EGAME-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGAME-BTC"

    def __str__(self):
        return "EGAME-BTC"

    def __call__(self):
        return "EGAME-BTC"


EGAME_BTC = EGAME_BTC(*EGAME_BTC._fields)


class STEPWATCH_USDT(Symbol):
    """
        name: STEPWATCH-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STEPWATCH-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEPWATCH-USDT"

    def __str__(self):
        return "STEPWATCH-USDT"

    def __call__(self):
        return "STEPWATCH-USDT"


STEPWATCH_USDT = STEPWATCH_USDT(*STEPWATCH_USDT._fields)


class HISAND33_USDT(Symbol):
    """
        name: HISAND33-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HISAND33-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HISAND33-USDT"

    def __str__(self):
        return "HISAND33-USDT"

    def __call__(self):
        return "HISAND33-USDT"


HISAND33_USDT = HISAND33_USDT(*HISAND33_USDT._fields)


class DC_USDT(Symbol):
    """
        name: DC-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DC-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DC-USDT"

    def __str__(self):
        return "DC-USDT"

    def __call__(self):
        return "DC-USDT"


DC_USDT = DC_USDT(*DC_USDT._fields)


class NEER_USDT(Symbol):
    """
        name: NEER-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NEER-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEER-USDT"

    def __str__(self):
        return "NEER-USDT"

    def __call__(self):
        return "NEER-USDT"


NEER_USDT = NEER_USDT(*NEER_USDT._fields)


class RVN_USDT(Symbol):
    """
        name: RVN-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RVN-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVN-USDT"

    def __str__(self):
        return "RVN-USDT"

    def __call__(self):
        return "RVN-USDT"


RVN_USDT = RVN_USDT(*RVN_USDT._fields)


class HIENS3_USDT(Symbol):
    """
        name: HIENS3-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIENS3-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIENS3-USDT"

    def __str__(self):
        return "HIENS3-USDT"

    def __call__(self):
        return "HIENS3-USDT"


HIENS3_USDT = HIENS3_USDT(*HIENS3_USDT._fields)


class MC_USDT(Symbol):
    """
        name: MC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MC-USDT"

    def __str__(self):
        return "MC-USDT"

    def __call__(self):
        return "MC-USDT"


MC_USDT = MC_USDT(*MC_USDT._fields)


class PEEL_USDT(Symbol):
    """
        name: PEEL-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PEEL-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEEL-USDT"

    def __str__(self):
        return "PEEL-USDT"

    def __call__(self):
        return "PEEL-USDT"


PEEL_USDT = PEEL_USDT(*PEEL_USDT._fields)


class PEEL_BTC(Symbol):
    """
        name: PEEL-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PEEL-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEEL-BTC"

    def __str__(self):
        return "PEEL-BTC"

    def __call__(self):
        return "PEEL-BTC"


PEEL_BTC = PEEL_BTC(*PEEL_BTC._fields)


class SDL_USDT(Symbol):
    """
        name: SDL-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SDL-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SDL-USDT"

    def __str__(self):
        return "SDL-USDT"

    def __call__(self):
        return "SDL-USDT"


SDL_USDT = SDL_USDT(*SDL_USDT._fields)


class SDL_BTC(Symbol):
    """
        name: SDL-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SDL-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SDL-BTC"

    def __str__(self):
        return "SDL-BTC"

    def __call__(self):
        return "SDL-BTC"


SDL_BTC = SDL_BTC(*SDL_BTC._fields)


class SWEAT_USDT(Symbol):
    """
        name: SWEAT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SWEAT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWEAT-USDT"

    def __str__(self):
        return "SWEAT-USDT"

    def __call__(self):
        return "SWEAT-USDT"


SWEAT_USDT = SWEAT_USDT(*SWEAT_USDT._fields)


class HIODBS_USDT(Symbol):
    """
        name: HIODBS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIODBS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIODBS-USDT"

    def __str__(self):
        return "HIODBS-USDT"

    def __call__(self):
        return "HIODBS-USDT"


HIODBS_USDT = HIODBS_USDT(*HIODBS_USDT._fields)


class CMP_USDT(Symbol):
    """
        name: CMP-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CMP-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CMP-USDT"

    def __str__(self):
        return "CMP-USDT"

    def __call__(self):
        return "CMP-USDT"


CMP_USDT = CMP_USDT(*CMP_USDT._fields)


class PIX_USDT(Symbol):
    """
        name: PIX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PIX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PIX-USDT"

    def __str__(self):
        return "PIX-USDT"

    def __call__(self):
        return "PIX-USDT"


PIX_USDT = PIX_USDT(*PIX_USDT._fields)


class MPLX_USDT(Symbol):
    """
        name: MPLX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MPLX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MPLX-USDT"

    def __str__(self):
        return "MPLX-USDT"

    def __call__(self):
        return "MPLX-USDT"


MPLX_USDT = MPLX_USDT(*MPLX_USDT._fields)


class HIDOODLES_USDT(Symbol):
    """
        name: HIDOODLES-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIDOODLES-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIDOODLES-USDT"

    def __str__(self):
        return "HIDOODLES-USDT"

    def __call__(self):
        return "HIDOODLES-USDT"


HIDOODLES_USDT = HIDOODLES_USDT(*HIDOODLES_USDT._fields)


class ETHW_USDT(Symbol):
    """
        name: ETHW-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETHW-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHW-USDT"

    def __str__(self):
        return "ETHW-USDT"

    def __call__(self):
        return "ETHW-USDT"


ETHW_USDT = ETHW_USDT(*ETHW_USDT._fields)


class QUARTZ_USDT(Symbol):
    """
        name: QUARTZ-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "QUARTZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUARTZ-USDT"

    def __str__(self):
        return "QUARTZ-USDT"

    def __call__(self):
        return "QUARTZ-USDT"


QUARTZ_USDT = QUARTZ_USDT(*QUARTZ_USDT._fields)


class ACQ_USDT(Symbol):
    """
        name: ACQ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACQ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACQ-USDT"

    def __str__(self):
        return "ACQ-USDT"

    def __call__(self):
        return "ACQ-USDT"


ACQ_USDT = ACQ_USDT(*ACQ_USDT._fields)


class ACQ_USDC(Symbol):
    """
        name: ACQ-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACQ-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACQ-USDC"

    def __str__(self):
        return "ACQ-USDC"

    def __call__(self):
        return "ACQ-USDC"


ACQ_USDC = ACQ_USDC(*ACQ_USDC._fields)


class AOG_USDT(Symbol):
    """
        name: AOG-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AOG-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AOG-USDT"

    def __str__(self):
        return "AOG-USDT"

    def __call__(self):
        return "AOG-USDT"


AOG_USDT = AOG_USDT(*AOG_USDT._fields)


class HIMAYC_USDT(Symbol):
    """
        name: HIMAYC-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIMAYC-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIMAYC-USDT"

    def __str__(self):
        return "HIMAYC-USDT"

    def __call__(self):
        return "HIMAYC-USDT"


HIMAYC_USDT = HIMAYC_USDT(*HIMAYC_USDT._fields)


class PRMX_USDT(Symbol):
    """
        name: PRMX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PRMX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRMX-USDT"

    def __str__(self):
        return "PRMX-USDT"

    def __call__(self):
        return "PRMX-USDT"


PRMX_USDT = PRMX_USDT(*PRMX_USDT._fields)


class RED_USDT(Symbol):
    """
        name: RED-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RED-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RED-USDT"

    def __str__(self):
        return "RED-USDT"

    def __call__(self):
        return "RED-USDT"


RED_USDT = RED_USDT(*RED_USDT._fields)


class PUMLX_USDT(Symbol):
    """
        name: PUMLX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PUMLX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUMLX-USDT"

    def __str__(self):
        return "PUMLX-USDT"

    def __call__(self):
        return "PUMLX-USDT"


PUMLX_USDT = PUMLX_USDT(*PUMLX_USDT._fields)


class XETA_USDT(Symbol):
    """
        name: XETA-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XETA-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XETA-USDT"

    def __str__(self):
        return "XETA-USDT"

    def __call__(self):
        return "XETA-USDT"


XETA_USDT = XETA_USDT(*XETA_USDT._fields)


class GEM_USDT(Symbol):
    """
        name: GEM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GEM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GEM-USDT"

    def __str__(self):
        return "GEM-USDT"

    def __call__(self):
        return "GEM-USDT"


GEM_USDT = GEM_USDT(*GEM_USDT._fields)


class DERC_USDT(Symbol):
    """
        name: DERC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DERC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DERC-USDT"

    def __str__(self):
        return "DERC-USDT"

    def __call__(self):
        return "DERC-USDT"


DERC_USDT = DERC_USDT(*DERC_USDT._fields)


class P00LS_USDT(Symbol):
    """
        name: P00LS-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "P00LS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "P00LS-USDT"

    def __str__(self):
        return "P00LS-USDT"

    def __call__(self):
        return "P00LS-USDT"


P00LS_USDT = P00LS_USDT(*P00LS_USDT._fields)


class P00LS_USDC(Symbol):
    """
        name: P00LS-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "P00LS-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "P00LS-USDC"

    def __str__(self):
        return "P00LS-USDC"

    def __call__(self):
        return "P00LS-USDC"


P00LS_USDC = P00LS_USDC(*P00LS_USDC._fields)


class KICKS_USDT(Symbol):
    """
        name: KICKS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KICKS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KICKS-USDT"

    def __str__(self):
        return "KICKS-USDT"

    def __call__(self):
        return "KICKS-USDT"


KICKS_USDT = KICKS_USDT(*KICKS_USDT._fields)


class TRIBL_USDT(Symbol):
    """
        name: TRIBL-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRIBL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBL-USDT"

    def __str__(self):
        return "TRIBL-USDT"

    def __call__(self):
        return "TRIBL-USDT"


TRIBL_USDT = TRIBL_USDT(*TRIBL_USDT._fields)


class GMX_USDT(Symbol):
    """
        name: GMX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GMX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMX-USDT"

    def __str__(self):
        return "GMX-USDT"

    def __call__(self):
        return "GMX-USDT"


GMX_USDT = GMX_USDT(*GMX_USDT._fields)


class HIOD_USDT(Symbol):
    """
        name: HIOD-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIOD-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIOD-USDT"

    def __str__(self):
        return "HIOD-USDT"

    def __call__(self):
        return "HIOD-USDT"


HIOD_USDT = HIOD_USDT(*HIOD_USDT._fields)


class POKT_USDT(Symbol):
    """
        name: POKT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "POKT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POKT-USDT"

    def __str__(self):
        return "POKT-USDT"

    def __call__(self):
        return "POKT-USDT"


POKT_USDT = POKT_USDT(*POKT_USDT._fields)


class EFI_USDT(Symbol):
    """
        name: EFI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EFI-USDT"

    def __str__(self):
        return "EFI-USDT"

    def __call__(self):
        return "EFI-USDT"


EFI_USDT = EFI_USDT(*EFI_USDT._fields)


class APT_USDT(Symbol):
    """
        name: APT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "APT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APT-USDT"

    def __str__(self):
        return "APT-USDT"

    def __call__(self):
        return "APT-USDT"


APT_USDT = APT_USDT(*APT_USDT._fields)


class BBC_USDT(Symbol):
    """
        name: BBC-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BBC-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BBC-USDT"

    def __str__(self):
        return "BBC-USDT"

    def __call__(self):
        return "BBC-USDT"


BBC_USDT = BBC_USDT(*BBC_USDT._fields)


class EUL_USDT(Symbol):
    """
        name: EUL-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "EUL-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EUL-USDT"

    def __str__(self):
        return "EUL-USDT"

    def __call__(self):
        return "EUL-USDT"


EUL_USDT = EUL_USDT(*EUL_USDT._fields)


class TON_USDT(Symbol):
    """
        name: TON-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TON-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TON-USDT"

    def __str__(self):
        return "TON-USDT"

    def __call__(self):
        return "TON-USDT"


TON_USDT = TON_USDT(*TON_USDT._fields)


class PIAS_USDT(Symbol):
    """
        name: PIAS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PIAS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PIAS-USDT"

    def __str__(self):
        return "PIAS-USDT"

    def __call__(self):
        return "PIAS-USDT"


PIAS_USDT = PIAS_USDT(*PIAS_USDT._fields)


class HIMEEBITS_USDT(Symbol):
    """
        name: HIMEEBITS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIMEEBITS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIMEEBITS-USDT"

    def __str__(self):
        return "HIMEEBITS-USDT"

    def __call__(self):
        return "HIMEEBITS-USDT"


HIMEEBITS_USDT = HIMEEBITS_USDT(*HIMEEBITS_USDT._fields)


class HISQUIGGLE_USDT(Symbol):
    """
        name: HISQUIGGLE-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HISQUIGGLE-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HISQUIGGLE-USDT"

    def __str__(self):
        return "HISQUIGGLE-USDT"

    def __call__(self):
        return "HISQUIGGLE-USDT"


HISQUIGGLE_USDT = HISQUIGGLE_USDT(*HISQUIGGLE_USDT._fields)


class XCV_USDT(Symbol):
    """
        name: XCV-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XCV-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCV-USDT"

    def __str__(self):
        return "XCV-USDT"

    def __call__(self):
        return "XCV-USDT"


XCV_USDT = XCV_USDT(*XCV_USDT._fields)


class HFT_USDT(Symbol):
    """
        name: HFT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HFT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFT-USDT"

    def __str__(self):
        return "HFT-USDT"

    def __call__(self):
        return "HFT-USDT"


HFT_USDT = HFT_USDT(*HFT_USDT._fields)


class HFT_USDC(Symbol):
    """
        name: HFT-USDC
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HFT-USDC"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFT-USDC"

    def __str__(self):
        return "HFT-USDC"

    def __call__(self):
        return "HFT-USDC"


HFT_USDC = HFT_USDC(*HFT_USDC._fields)


class ECOX_USDT(Symbol):
    """
        name: ECOX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ECOX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ECOX-USDT"

    def __str__(self):
        return "ECOX-USDT"

    def __call__(self):
        return "ECOX-USDT"


ECOX_USDT = ECOX_USDT(*ECOX_USDT._fields)


class AMB_USDT(Symbol):
    """
        name: AMB-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AMB-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMB-USDT"

    def __str__(self):
        return "AMB-USDT"

    def __call__(self):
        return "AMB-USDT"


AMB_USDT = AMB_USDT(*AMB_USDT._fields)


class AZERO_USDT(Symbol):
    """
        name: AZERO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AZERO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AZERO-USDT"

    def __str__(self):
        return "AZERO-USDT"

    def __call__(self):
        return "AZERO-USDT"


AZERO_USDT = AZERO_USDT(*AZERO_USDT._fields)


class HIFIDENZA_USDT(Symbol):
    """
        name: HIFIDENZA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIFIDENZA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFIDENZA-USDT"

    def __str__(self):
        return "HIFIDENZA-USDT"

    def __call__(self):
        return "HIFIDENZA-USDT"


HIFIDENZA_USDT = HIFIDENZA_USDT(*HIFIDENZA_USDT._fields)


class BEAT_USDT(Symbol):
    """
        name: BEAT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BEAT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEAT-USDT"

    def __str__(self):
        return "BEAT-USDT"

    def __call__(self):
        return "BEAT-USDT"


BEAT_USDT = BEAT_USDT(*BEAT_USDT._fields)


class NRFB_USDT(Symbol):
    """
        name: NRFB-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NRFB-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NRFB-USDT"

    def __str__(self):
        return "NRFB-USDT"

    def __call__(self):
        return "NRFB-USDT"


NRFB_USDT = NRFB_USDT(*NRFB_USDT._fields)


class NRFB_BTC(Symbol):
    """
        name: NRFB-BTC
        significant_digits: None
        tick_size: 0.0000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NRFB-BTC"
    significant_digits: int = None
    tick_size: int = 0.0000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NRFB-BTC"

    def __str__(self):
        return "NRFB-BTC"

    def __call__(self):
        return "NRFB-BTC"


NRFB_BTC = NRFB_BTC(*NRFB_BTC._fields)


class HIGAZERS_USDT(Symbol):
    """
        name: HIGAZERS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIGAZERS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGAZERS-USDT"

    def __str__(self):
        return "HIGAZERS-USDT"

    def __call__(self):
        return "HIGAZERS-USDT"


HIGAZERS_USDT = HIGAZERS_USDT(*HIGAZERS_USDT._fields)


class NAVI_USDT(Symbol):
    """
        name: NAVI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NAVI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAVI-USDT"

    def __str__(self):
        return "NAVI-USDT"

    def __call__(self):
        return "NAVI-USDT"


NAVI_USDT = NAVI_USDT(*NAVI_USDT._fields)


class CARE_USDT(Symbol):
    """
        name: CARE-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CARE-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CARE-USDT"

    def __str__(self):
        return "CARE-USDT"

    def __call__(self):
        return "CARE-USDT"


CARE_USDT = CARE_USDT(*CARE_USDT._fields)


class CLUB_USDT(Symbol):
    """
        name: CLUB-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CLUB-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLUB-USDT"

    def __str__(self):
        return "CLUB-USDT"

    def __call__(self):
        return "CLUB-USDT"


CLUB_USDT = CLUB_USDT(*CLUB_USDT._fields)


class HIPENGUINS_USDT(Symbol):
    """
        name: HIPENGUINS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIPENGUINS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIPENGUINS-USDT"

    def __str__(self):
        return "HIPENGUINS-USDT"

    def __call__(self):
        return "HIPENGUINS-USDT"


HIPENGUINS_USDT = HIPENGUINS_USDT(*HIPENGUINS_USDT._fields)


class ALT_USDT(Symbol):
    """
        name: ALT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ALT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALT-USDT"

    def __str__(self):
        return "ALT-USDT"

    def __call__(self):
        return "ALT-USDT"


ALT_USDT = ALT_USDT(*ALT_USDT._fields)


class HICLONEX_USDT(Symbol):
    """
        name: HICLONEX-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HICLONEX-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HICLONEX-USDT"

    def __str__(self):
        return "HICLONEX-USDT"

    def __call__(self):
        return "HICLONEX-USDT"


HICLONEX_USDT = HICLONEX_USDT(*HICLONEX_USDT._fields)


class PRIMAL_USDT(Symbol):
    """
        name: PRIMAL-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PRIMAL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRIMAL-USDT"

    def __str__(self):
        return "PRIMAL-USDT"

    def __call__(self):
        return "PRIMAL-USDT"


PRIMAL_USDT = PRIMAL_USDT(*PRIMAL_USDT._fields)


class PRIMAL_USDC(Symbol):
    """
        name: PRIMAL-USDC
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PRIMAL-USDC"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRIMAL-USDC"

    def __str__(self):
        return "PRIMAL-USDC"

    def __call__(self):
        return "PRIMAL-USDC"


PRIMAL_USDC = PRIMAL_USDC(*PRIMAL_USDC._fields)


class OAS_USDT(Symbol):
    """
        name: OAS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OAS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OAS-USDT"

    def __str__(self):
        return "OAS-USDT"

    def __call__(self):
        return "OAS-USDT"


OAS_USDT = OAS_USDT(*OAS_USDT._fields)


class VEMP_USDC(Symbol):
    """
        name: VEMP-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "VEMP-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEMP-USDC"

    def __str__(self):
        return "VEMP-USDC"

    def __call__(self):
        return "VEMP-USDC"


VEMP_USDC = VEMP_USDC(*VEMP_USDC._fields)


class HICOOLCATS_USDT(Symbol):
    """
        name: HICOOLCATS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HICOOLCATS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HICOOLCATS-USDT"

    def __str__(self):
        return "HICOOLCATS-USDT"

    def __call__(self):
        return "HICOOLCATS-USDT"


HICOOLCATS_USDT = HICOOLCATS_USDT(*HICOOLCATS_USDT._fields)


class HIAZUKI_USDT(Symbol):
    """
        name: HIAZUKI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIAZUKI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIAZUKI-USDT"

    def __str__(self):
        return "HIAZUKI-USDT"

    def __call__(self):
        return "HIAZUKI-USDT"


HIAZUKI_USDT = HIAZUKI_USDT(*HIAZUKI_USDT._fields)


class TEM_USDT(Symbol):
    """
        name: TEM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TEM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TEM-USDT"

    def __str__(self):
        return "TEM-USDT"

    def __call__(self):
        return "TEM-USDT"


TEM_USDT = TEM_USDT(*TEM_USDT._fields)


class HIFLUF_USDT(Symbol):
    """
        name: HIFLUF-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIFLUF-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFLUF-USDT"

    def __str__(self):
        return "HIFLUF-USDT"

    def __call__(self):
        return "HIFLUF-USDT"


HIFLUF_USDT = HIFLUF_USDT(*HIFLUF_USDT._fields)


class HIBIRDS_USDT(Symbol):
    """
        name: HIBIRDS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIBIRDS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIBIRDS-USDT"

    def __str__(self):
        return "HIBIRDS-USDT"

    def __call__(self):
        return "HIBIRDS-USDT"


HIBIRDS_USDT = HIBIRDS_USDT(*HIBIRDS_USDT._fields)


class BDX_USDT(Symbol):
    """
        name: BDX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BDX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BDX-USDT"

    def __str__(self):
        return "BDX-USDT"

    def __call__(self):
        return "BDX-USDT"


BDX_USDT = BDX_USDT(*BDX_USDT._fields)


class BDX_BTC(Symbol):
    """
        name: BDX-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BDX-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BDX-BTC"

    def __str__(self):
        return "BDX-BTC"

    def __call__(self):
        return "BDX-BTC"


BDX_BTC = BDX_BTC(*BDX_BTC._fields)


class FLR_USDT(Symbol):
    """
        name: FLR-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FLR-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLR-USDT"

    def __str__(self):
        return "FLR-USDT"

    def __call__(self):
        return "FLR-USDT"


FLR_USDT = FLR_USDT(*FLR_USDT._fields)


class FLR_USDC(Symbol):
    """
        name: FLR-USDC
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FLR-USDC"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLR-USDC"

    def __str__(self):
        return "FLR-USDC"

    def __call__(self):
        return "FLR-USDC"


FLR_USDC = FLR_USDC(*FLR_USDC._fields)


class HIMFERS_USDT(Symbol):
    """
        name: HIMFERS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIMFERS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIMFERS-USDT"

    def __str__(self):
        return "HIMFERS-USDT"

    def __call__(self):
        return "HIMFERS-USDT"


HIMFERS_USDT = HIMFERS_USDT(*HIMFERS_USDT._fields)


class OSMO_USDT(Symbol):
    """
        name: OSMO-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OSMO-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSMO-USDT"

    def __str__(self):
        return "OSMO-USDT"

    def __call__(self):
        return "OSMO-USDT"


OSMO_USDT = OSMO_USDT(*OSMO_USDT._fields)


class ASTRA_USDT(Symbol):
    """
        name: ASTRA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ASTRA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRA-USDT"

    def __str__(self):
        return "ASTRA-USDT"

    def __call__(self):
        return "ASTRA-USDT"


ASTRA_USDT = ASTRA_USDT(*ASTRA_USDT._fields)


class MAGIC_USDT(Symbol):
    """
        name: MAGIC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MAGIC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGIC-USDT"

    def __str__(self):
        return "MAGIC-USDT"

    def __call__(self):
        return "MAGIC-USDT"


MAGIC_USDT = MAGIC_USDT(*MAGIC_USDT._fields)


class SQUAD_USDT(Symbol):
    """
        name: SQUAD-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SQUAD-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SQUAD-USDT"

    def __str__(self):
        return "SQUAD-USDT"

    def __call__(self):
        return "SQUAD-USDT"


SQUAD_USDT = SQUAD_USDT(*SQUAD_USDT._fields)


class SIMP_USDT(Symbol):
    """
        name: SIMP-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SIMP-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SIMP-USDT"

    def __str__(self):
        return "SIMP-USDT"

    def __call__(self):
        return "SIMP-USDT"


SIMP_USDT = SIMP_USDT(*SIMP_USDT._fields)


class HIVALHALLA_USDT(Symbol):
    """
        name: HIVALHALLA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIVALHALLA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIVALHALLA-USDT"

    def __str__(self):
        return "HIVALHALLA-USDT"

    def __call__(self):
        return "HIVALHALLA-USDT"


HIVALHALLA_USDT = HIVALHALLA_USDT(*HIVALHALLA_USDT._fields)


class RPL_USDT(Symbol):
    """
        name: RPL-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RPL-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RPL-USDT"

    def __str__(self):
        return "RPL-USDT"

    def __call__(self):
        return "RPL-USDT"


RPL_USDT = RPL_USDT(*RPL_USDT._fields)


class HIRENGA_USDT(Symbol):
    """
        name: HIRENGA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIRENGA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIRENGA-USDT"

    def __str__(self):
        return "HIRENGA-USDT"

    def __call__(self):
        return "HIRENGA-USDT"


HIRENGA_USDT = HIRENGA_USDT(*HIRENGA_USDT._fields)


class KING_USDT(Symbol):
    """
        name: KING-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KING-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KING-USDT"

    def __str__(self):
        return "KING-USDT"

    def __call__(self):
        return "KING-USDT"


KING_USDT = KING_USDT(*KING_USDT._fields)


class SHIB2L_USDT(Symbol):
    """
        name: SHIB2L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHIB2L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIB2L-USDT"

    def __str__(self):
        return "SHIB2L-USDT"

    def __call__(self):
        return "SHIB2L-USDT"


SHIB2L_USDT = SHIB2L_USDT(*SHIB2L_USDT._fields)


class SHIB2S_USDT(Symbol):
    """
        name: SHIB2S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SHIB2S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIB2S-USDT"

    def __str__(self):
        return "SHIB2S-USDT"

    def __call__(self):
        return "SHIB2S-USDT"


SHIB2S_USDT = SHIB2S_USDT(*SHIB2S_USDT._fields)


class OP2L_USDT(Symbol):
    """
        name: OP2L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "OP2L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OP2L-USDT"

    def __str__(self):
        return "OP2L-USDT"

    def __call__(self):
        return "OP2L-USDT"


OP2L_USDT = OP2L_USDT(*OP2L_USDT._fields)


class OP2S_USDT(Symbol):
    """
        name: OP2S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "OP2S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OP2S-USDT"

    def __str__(self):
        return "OP2S-USDT"

    def __call__(self):
        return "OP2S-USDT"


OP2S_USDT = OP2S_USDT(*OP2S_USDT._fields)


class HIGH_USDT(Symbol):
    """
        name: HIGH-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIGH-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGH-USDT"

    def __str__(self):
        return "HIGH-USDT"

    def __call__(self):
        return "HIGH-USDT"


HIGH_USDT = HIGH_USDT(*HIGH_USDT._fields)


class HIGH_ETH(Symbol):
    """
        name: HIGH-ETH
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIGH-ETH"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGH-ETH"

    def __str__(self):
        return "HIGH-ETH"

    def __call__(self):
        return "HIGH-ETH"


HIGH_ETH = HIGH_ETH(*HIGH_ETH._fields)


class HIUNDEAD_USDT(Symbol):
    """
        name: HIUNDEAD-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIUNDEAD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIUNDEAD-USDT"

    def __str__(self):
        return "HIUNDEAD-USDT"

    def __call__(self):
        return "HIUNDEAD-USDT"


HIUNDEAD_USDT = HIUNDEAD_USDT(*HIUNDEAD_USDT._fields)


class AGIX2L_USDT(Symbol):
    """
        name: AGIX2L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "AGIX2L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIX2L-USDT"

    def __str__(self):
        return "AGIX2L-USDT"

    def __call__(self):
        return "AGIX2L-USDT"


AGIX2L_USDT = AGIX2L_USDT(*AGIX2L_USDT._fields)


class AGIX2S_USDT(Symbol):
    """
        name: AGIX2S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "AGIX2S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIX2S-USDT"

    def __str__(self):
        return "AGIX2S-USDT"

    def __call__(self):
        return "AGIX2S-USDT"


AGIX2S_USDT = AGIX2S_USDT(*AGIX2S_USDT._fields)


class TRAC_USDT(Symbol):
    """
        name: TRAC-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "TRAC-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRAC-USDT"

    def __str__(self):
        return "TRAC-USDT"

    def __call__(self):
        return "TRAC-USDT"


TRAC_USDT = TRAC_USDT(*TRAC_USDT._fields)


class GRT2L_USDT(Symbol):
    """
        name: GRT2L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "GRT2L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRT2L-USDT"

    def __str__(self):
        return "GRT2L-USDT"

    def __call__(self):
        return "GRT2L-USDT"


GRT2L_USDT = GRT2L_USDT(*GRT2L_USDT._fields)


class GRT2S_USDT(Symbol):
    """
        name: GRT2S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "GRT2S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRT2S-USDT"

    def __str__(self):
        return "GRT2S-USDT"

    def __call__(self):
        return "GRT2S-USDT"


GRT2S_USDT = GRT2S_USDT(*GRT2S_USDT._fields)


class APT2L_USDT(Symbol):
    """
        name: APT2L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "APT2L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APT2L-USDT"

    def __str__(self):
        return "APT2L-USDT"

    def __call__(self):
        return "APT2L-USDT"


APT2L_USDT = APT2L_USDT(*APT2L_USDT._fields)


class APT2S_USDT(Symbol):
    """
        name: APT2S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "APT2S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APT2S-USDT"

    def __str__(self):
        return "APT2S-USDT"

    def __call__(self):
        return "APT2S-USDT"


APT2S_USDT = APT2S_USDT(*APT2S_USDT._fields)


class GFT_USDT(Symbol):
    """
        name: GFT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GFT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GFT-USDT"

    def __str__(self):
        return "GFT-USDT"

    def __call__(self):
        return "GFT-USDT"


GFT_USDT = GFT_USDT(*GFT_USDT._fields)


class GFT_BTC(Symbol):
    """
        name: GFT-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GFT-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GFT-BTC"

    def __str__(self):
        return "GFT-BTC"

    def __call__(self):
        return "GFT-BTC"


GFT_BTC = GFT_BTC(*GFT_BTC._fields)


class BLUR_USDT(Symbol):
    """
        name: BLUR-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "BLUR-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLUR-USDT"

    def __str__(self):
        return "BLUR-USDT"

    def __call__(self):
        return "BLUR-USDT"


BLUR_USDT = BLUR_USDT(*BLUR_USDT._fields)


class HIFRIENDS_USDT(Symbol):
    """
        name: HIFRIENDS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIFRIENDS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFRIENDS-USDT"

    def __str__(self):
        return "HIFRIENDS-USDT"

    def __call__(self):
        return "HIFRIENDS-USDT"


HIFRIENDS_USDT = HIFRIENDS_USDT(*HIFRIENDS_USDT._fields)


class WAXL_USDT(Symbol):
    """
        name: WAXL-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "WAXL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAXL-USDT"

    def __str__(self):
        return "WAXL-USDT"

    def __call__(self):
        return "WAXL-USDT"


WAXL_USDT = WAXL_USDT(*WAXL_USDT._fields)


class FLOKI_USDT(Symbol):
    """
        name: FLOKI-USDT
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "FLOKI-USDT"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOKI-USDT"

    def __str__(self):
        return "FLOKI-USDT"

    def __call__(self):
        return "FLOKI-USDT"


FLOKI_USDT = FLOKI_USDT(*FLOKI_USDT._fields)


class SSV_USDT(Symbol):
    """
        name: SSV-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.01
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SSV-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.01
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SSV-USDT"

    def __str__(self):
        return "SSV-USDT"

    def __call__(self):
        return "SSV-USDT"


SSV_USDT = SSV_USDT(*SSV_USDT._fields)


class FLOKI_USDC(Symbol):
    """
        name: FLOKI-USDC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FLOKI-USDC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOKI-USDC"

    def __str__(self):
        return "FLOKI-USDC"

    def __call__(self):
        return "FLOKI-USDC"


FLOKI_USDC = FLOKI_USDC(*FLOKI_USDC._fields)


class ACS_USDT(Symbol):
    """
        name: ACS-USDT
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ACS-USDT"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACS-USDT"

    def __str__(self):
        return "ACS-USDT"

    def __call__(self):
        return "ACS-USDT"


ACS_USDT = ACS_USDT(*ACS_USDT._fields)


class IGU_USDT(Symbol):
    """
        name: IGU-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IGU-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IGU-USDT"

    def __str__(self):
        return "IGU-USDT"

    def __call__(self):
        return "IGU-USDT"


IGU_USDT = IGU_USDT(*IGU_USDT._fields)


class IGU_BTC(Symbol):
    """
        name: IGU-BTC
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IGU-BTC"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IGU-BTC"

    def __str__(self):
        return "IGU-BTC"

    def __call__(self):
        return "IGU-BTC"


IGU_BTC = IGU_BTC(*IGU_BTC._fields)


class BLUR2L_USDT(Symbol):
    """
        name: BLUR2L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "BLUR2L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLUR2L-USDT"

    def __str__(self):
        return "BLUR2L-USDT"

    def __call__(self):
        return "BLUR2L-USDT"


BLUR2L_USDT = BLUR2L_USDT(*BLUR2L_USDT._fields)


class BLUR2S_USDT(Symbol):
    """
        name: BLUR2S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "BLUR2S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLUR2S-USDT"

    def __str__(self):
        return "BLUR2S-USDT"

    def __call__(self):
        return "BLUR2S-USDT"


BLUR2S_USDT = BLUR2S_USDT(*BLUR2S_USDT._fields)


class CSIX_USDT(Symbol):
    """
        name: CSIX-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CSIX-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CSIX-USDT"

    def __str__(self):
        return "CSIX-USDT"

    def __call__(self):
        return "CSIX-USDT"


CSIX_USDT = CSIX_USDT(*CSIX_USDT._fields)


class FET_USDT(Symbol):
    """
        name: FET-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "FET-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FET-USDT"

    def __str__(self):
        return "FET-USDT"

    def __call__(self):
        return "FET-USDT"


FET_USDT = FET_USDT(*FET_USDT._fields)


class CSIX_ETH(Symbol):
    """
        name: CSIX-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CSIX-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CSIX-ETH"

    def __str__(self):
        return "CSIX-ETH"

    def __call__(self):
        return "CSIX-ETH"


CSIX_ETH = CSIX_ETH(*CSIX_ETH._fields)


class CFX2L_USDT(Symbol):
    """
        name: CFX2L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "CFX2L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFX2L-USDT"

    def __str__(self):
        return "CFX2L-USDT"

    def __call__(self):
        return "CFX2L-USDT"


CFX2L_USDT = CFX2L_USDT(*CFX2L_USDT._fields)


class CFX2S_USDT(Symbol):
    """
        name: CFX2S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "CFX2S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFX2S-USDT"

    def __str__(self):
        return "CFX2S-USDT"

    def __call__(self):
        return "CFX2S-USDT"


CFX2S_USDT = CFX2S_USDT(*CFX2S_USDT._fields)


class HISEALS_USDT(Symbol):
    """
        name: HISEALS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HISEALS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HISEALS-USDT"

    def __str__(self):
        return "HISEALS-USDT"

    def __call__(self):
        return "HISEALS-USDT"


HISEALS_USDT = HISEALS_USDT(*HISEALS_USDT._fields)


class SIDUS_USDT(Symbol):
    """
        name: SIDUS-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SIDUS-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SIDUS-USDT"

    def __str__(self):
        return "SIDUS-USDT"

    def __call__(self):
        return "SIDUS-USDT"


SIDUS_USDT = SIDUS_USDT(*SIDUS_USDT._fields)


class GOAL_USDT(Symbol):
    """
        name: GOAL-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GOAL-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOAL-USDT"

    def __str__(self):
        return "GOAL-USDT"

    def __call__(self):
        return "GOAL-USDT"


GOAL_USDT = GOAL_USDT(*GOAL_USDT._fields)


class AIPAD_USDT(Symbol):
    """
        name: AIPAD-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "AIPAD-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIPAD-USDT"

    def __str__(self):
        return "AIPAD-USDT"

    def __call__(self):
        return "AIPAD-USDT"


AIPAD_USDT = AIPAD_USDT(*AIPAD_USDT._fields)


class RDNT_USDT(Symbol):
    """
        name: RDNT-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RDNT-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RDNT-USDT"

    def __str__(self):
        return "RDNT-USDT"

    def __call__(self):
        return "RDNT-USDT"


RDNT_USDT = RDNT_USDT(*RDNT_USDT._fields)


class DPX_USDT(Symbol):
    """
        name: DPX-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "DPX-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DPX-USDT"

    def __str__(self):
        return "DPX-USDT"

    def __call__(self):
        return "DPX-USDT"


DPX_USDT = DPX_USDT(*DPX_USDT._fields)


class SYN_USDT(Symbol):
    """
        name: SYN-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SYN-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYN-USDT"

    def __str__(self):
        return "SYN-USDT"

    def __call__(self):
        return "SYN-USDT"


SYN_USDT = SYN_USDT(*SYN_USDT._fields)


class GNS_USDT(Symbol):
    """
        name: GNS-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GNS-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GNS-USDT"

    def __str__(self):
        return "GNS-USDT"

    def __call__(self):
        return "GNS-USDT"


GNS_USDT = GNS_USDT(*GNS_USDT._fields)


class GRAIL_USDT(Symbol):
    """
        name: GRAIL-USDT
        significant_digits: None
        tick_size: 0.01
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GRAIL-USDT"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRAIL-USDT"

    def __str__(self):
        return "GRAIL-USDT"

    def __call__(self):
        return "GRAIL-USDT"


GRAIL_USDT = GRAIL_USDT(*GRAIL_USDT._fields)


class BLZ_USDT(Symbol):
    """
        name: BLZ-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BLZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLZ-USDT"

    def __str__(self):
        return "BLZ-USDT"

    def __call__(self):
        return "BLZ-USDT"


BLZ_USDT = BLZ_USDT(*BLZ_USDT._fields)


class HIBEANZ_USDT(Symbol):
    """
        name: HIBEANZ-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIBEANZ-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIBEANZ-USDT"

    def __str__(self):
        return "HIBEANZ-USDT"

    def __call__(self):
        return "HIBEANZ-USDT"


HIBEANZ_USDT = HIBEANZ_USDT(*HIBEANZ_USDT._fields)


class BTC_GBP(Symbol):
    """
        name: BTC-GBP
        significant_digits: None
        tick_size: 0.01
        min_margin: None
        initial_margin: None
        min_order_size: 0.00001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTC-GBP"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.00001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-GBP"

    def __str__(self):
        return "BTC-GBP"

    def __call__(self):
        return "BTC-GBP"


BTC_GBP = BTC_GBP(*BTC_GBP._fields)


class ETH_GBP(Symbol):
    """
        name: ETH-GBP
        significant_digits: None
        tick_size: 0.01
        min_margin: None
        initial_margin: None
        min_order_size: 0.0001
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETH-GBP"
    significant_digits: int = None
    tick_size: int = 0.01
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 0.0001
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-GBP"

    def __str__(self):
        return "ETH-GBP"

    def __call__(self):
        return "ETH-GBP"


ETH_GBP = ETH_GBP(*ETH_GBP._fields)


class USDT_GBP(Symbol):
    """
        name: USDT-GBP
        significant_digits: None
        tick_size: 0.0001
        min_margin: None
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "USDT-GBP"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = None
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-GBP"

    def __str__(self):
        return "USDT-GBP"

    def __call__(self):
        return "USDT-GBP"


USDT_GBP = USDT_GBP(*USDT_GBP._fields)


class HALO_USDT(Symbol):
    """
        name: HALO-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HALO-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HALO-USDT"

    def __str__(self):
        return "HALO-USDT"

    def __call__(self):
        return "HALO-USDT"


HALO_USDT = HALO_USDT(*HALO_USDT._fields)


class NXRA_USDT(Symbol):
    """
        name: NXRA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NXRA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NXRA-USDT"

    def __str__(self):
        return "NXRA-USDT"

    def __call__(self):
        return "NXRA-USDT"


NXRA_USDT = NXRA_USDT(*NXRA_USDT._fields)


class NXRA_ETH(Symbol):
    """
        name: NXRA-ETH
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NXRA-ETH"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NXRA-ETH"

    def __str__(self):
        return "NXRA-ETH"

    def __call__(self):
        return "NXRA-ETH"


NXRA_ETH = NXRA_ETH(*NXRA_ETH._fields)


class MINA_USDT(Symbol):
    """
        name: MINA-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MINA-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MINA-USDT"

    def __str__(self):
        return "MINA-USDT"

    def __call__(self):
        return "MINA-USDT"


MINA_USDT = MINA_USDT(*MINA_USDT._fields)


class XRD_USDT(Symbol):
    """
        name: XRD-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "XRD-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRD-USDT"

    def __str__(self):
        return "XRD-USDT"

    def __call__(self):
        return "XRD-USDT"


XRD_USDT = XRD_USDT(*XRD_USDT._fields)


class NOM_USDT(Symbol):
    """
        name: NOM-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "NOM-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NOM-USDT"

    def __str__(self):
        return "NOM-USDT"

    def __call__(self):
        return "NOM-USDT"


NOM_USDT = NOM_USDT(*NOM_USDT._fields)


class LQTY_USDT(Symbol):
    """
        name: LQTY-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LQTY-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LQTY-USDT"

    def __str__(self):
        return "LQTY-USDT"

    def __call__(self):
        return "LQTY-USDT"


LQTY_USDT = LQTY_USDT(*LQTY_USDT._fields)


class CFX_BTC(Symbol):
    """
        name: CFX-BTC
        significant_digits: None
        tick_size: 0.00000001
        min_margin: 0.000001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CFX-BTC"
    significant_digits: int = None
    tick_size: int = 0.00000001
    min_margin: float = 0.000001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFX-BTC"

    def __str__(self):
        return "CFX-BTC"

    def __call__(self):
        return "CFX-BTC"


CFX_BTC = CFX_BTC(*CFX_BTC._fields)


class CFX_ETH(Symbol):
    """
        name: CFX-ETH
        significant_digits: None
        tick_size: 0.0000001
        min_margin: 0.00001
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CFX-ETH"
    significant_digits: int = None
    tick_size: int = 0.0000001
    min_margin: float = 0.00001
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFX-ETH"

    def __str__(self):
        return "CFX-ETH"

    def __call__(self):
        return "CFX-ETH"


CFX_ETH = CFX_ETH(*CFX_ETH._fields)


class ID_USDT(Symbol):
    """
        name: ID-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ID-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ID-USDT"

    def __str__(self):
        return "ID-USDT"

    def __call__(self):
        return "ID-USDT"


ID_USDT = ID_USDT(*ID_USDT._fields)


class ARB_USDT(Symbol):
    """
        name: ARB-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "ARB-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARB-USDT"

    def __str__(self):
        return "ARB-USDT"

    def __call__(self):
        return "ARB-USDT"


ARB_USDT = ARB_USDT(*ARB_USDT._fields)


class ARB3S_USDT(Symbol):
    """
        name: ARB3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ARB3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARB3S-USDT"

    def __str__(self):
        return "ARB3S-USDT"

    def __call__(self):
        return "ARB3S-USDT"


ARB3S_USDT = ARB3S_USDT(*ARB3S_USDT._fields)


class ARB3L_USDT(Symbol):
    """
        name: ARB3L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ARB3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARB3L-USDT"

    def __str__(self):
        return "ARB3L-USDT"

    def __call__(self):
        return "ARB3L-USDT"


ARB3L_USDT = ARB3L_USDT(*ARB3L_USDT._fields)


class ID3L_USDT(Symbol):
    """
        name: ID3L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ID3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ID3L-USDT"

    def __str__(self):
        return "ID3L-USDT"

    def __call__(self):
        return "ID3L-USDT"


ID3L_USDT = ID3L_USDT(*ID3L_USDT._fields)


class ID3S_USDT(Symbol):
    """
        name: ID3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ID3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ID3S-USDT"

    def __str__(self):
        return "ID3S-USDT"

    def __call__(self):
        return "ID3S-USDT"


ID3S_USDT = ID3S_USDT(*ID3S_USDT._fields)


class HMND_USDT(Symbol):
    """
        name: HMND-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HMND-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HMND-USDT"

    def __str__(self):
        return "HMND-USDT"

    def __call__(self):
        return "HMND-USDT"


HMND_USDT = HMND_USDT(*HMND_USDT._fields)


class BTCUP_USDT(Symbol):
    """
        name: BTCUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTCUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCUP-USDT"

    def __str__(self):
        return "BTCUP-USDT"

    def __call__(self):
        return "BTCUP-USDT"


BTCUP_USDT = BTCUP_USDT(*BTCUP_USDT._fields)


class BTCDOWN_USDT(Symbol):
    """
        name: BTCDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "BTCDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTCDOWN-USDT"

    def __str__(self):
        return "BTCDOWN-USDT"

    def __call__(self):
        return "BTCDOWN-USDT"


BTCDOWN_USDT = BTCDOWN_USDT(*BTCDOWN_USDT._fields)


class ETHUP_USDT(Symbol):
    """
        name: ETHUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETHUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHUP-USDT"

    def __str__(self):
        return "ETHUP-USDT"

    def __call__(self):
        return "ETHUP-USDT"


ETHUP_USDT = ETHUP_USDT(*ETHUP_USDT._fields)


class ETHDOWN_USDT(Symbol):
    """
        name: ETHDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETHDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHDOWN-USDT"

    def __str__(self):
        return "ETHDOWN-USDT"

    def __call__(self):
        return "ETHDOWN-USDT"


ETHDOWN_USDT = ETHDOWN_USDT(*ETHDOWN_USDT._fields)


class HIFI_USDT(Symbol):
    """
        name: HIFI-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "HIFI-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFI-USDT"

    def __str__(self):
        return "HIFI-USDT"

    def __call__(self):
        return "HIFI-USDT"


HIFI_USDT = HIFI_USDT(*HIFI_USDT._fields)


class MYRIA_USDT(Symbol):
    """
        name: MYRIA-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "MYRIA-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MYRIA-USDT"

    def __str__(self):
        return "MYRIA-USDT"

    def __call__(self):
        return "MYRIA-USDT"


MYRIA_USDT = MYRIA_USDT(*MYRIA_USDT._fields)


class SD_USDT(Symbol):
    """
        name: SD-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "SD-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SD-USDT"

    def __str__(self):
        return "SD-USDT"

    def __call__(self):
        return "SD-USDT"


SD_USDT = SD_USDT(*SD_USDT._fields)


class CGPT_USDT(Symbol):
    """
        name: CGPT-USDT
        significant_digits: None
        tick_size: 0.000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "CGPT-USDT"
    significant_digits: int = None
    tick_size: int = 0.000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CGPT-USDT"

    def __str__(self):
        return "CGPT-USDT"

    def __call__(self):
        return "CGPT-USDT"


CGPT_USDT = CGPT_USDT(*CGPT_USDT._fields)


class STRAX_USDT(Symbol):
    """
        name: STRAX-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "STRAX-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRAX-USDT"

    def __str__(self):
        return "STRAX-USDT"

    def __call__(self):
        return "STRAX-USDT"


STRAX_USDT = STRAX_USDT(*STRAX_USDT._fields)


class KAGI_USDT(Symbol):
    """
        name: KAGI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "KAGI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAGI-USDT"

    def __str__(self):
        return "KAGI-USDT"

    def __call__(self):
        return "KAGI-USDT"


KAGI_USDT = KAGI_USDT(*KAGI_USDT._fields)


class RLTM_USDT(Symbol):
    """
        name: RLTM-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "RLTM-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLTM-USDT"

    def __str__(self):
        return "RLTM-USDT"

    def __call__(self):
        return "RLTM-USDT"


RLTM_USDT = RLTM_USDT(*RLTM_USDT._fields)


class DYDXUP_USDT(Symbol):
    """
        name: DYDXUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "DYDXUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXUP-USDT"

    def __str__(self):
        return "DYDXUP-USDT"

    def __call__(self):
        return "DYDXUP-USDT"


DYDXUP_USDT = DYDXUP_USDT(*DYDXUP_USDT._fields)


class DYDXDOWN_USDT(Symbol):
    """
        name: DYDXDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "DYDXDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDXDOWN-USDT"

    def __str__(self):
        return "DYDXDOWN-USDT"

    def __call__(self):
        return "DYDXDOWN-USDT"


DYDXDOWN_USDT = DYDXDOWN_USDT(*DYDXDOWN_USDT._fields)


class SXPUP_USDT(Symbol):
    """
        name: SXPUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SXPUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPUP-USDT"

    def __str__(self):
        return "SXPUP-USDT"

    def __call__(self):
        return "SXPUP-USDT"


SXPUP_USDT = SXPUP_USDT(*SXPUP_USDT._fields)


class SXPDOWN_USDT(Symbol):
    """
        name: SXPDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SXPDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXPDOWN-USDT"

    def __str__(self):
        return "SXPDOWN-USDT"

    def __call__(self):
        return "SXPDOWN-USDT"


SXPDOWN_USDT = SXPDOWN_USDT(*SXPDOWN_USDT._fields)


class MASKUP_USDT(Symbol):
    """
        name: MASKUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "MASKUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASKUP-USDT"

    def __str__(self):
        return "MASKUP-USDT"

    def __call__(self):
        return "MASKUP-USDT"


MASKUP_USDT = MASKUP_USDT(*MASKUP_USDT._fields)


class MASKDOWN_USDT(Symbol):
    """
        name: MASKDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "MASKDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASKDOWN-USDT"

    def __str__(self):
        return "MASKDOWN-USDT"

    def __call__(self):
        return "MASKDOWN-USDT"


MASKDOWN_USDT = MASKDOWN_USDT(*MASKDOWN_USDT._fields)


class OTK_USDT(Symbol):
    """
        name: OTK-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "OTK-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OTK-USDT"

    def __str__(self):
        return "OTK-USDT"

    def __call__(self):
        return "OTK-USDT"


OTK_USDT = OTK_USDT(*OTK_USDT._fields)


class RNDRUP_USDT(Symbol):
    """
        name: RNDRUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "RNDRUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRUP-USDT"

    def __str__(self):
        return "RNDRUP-USDT"

    def __call__(self):
        return "RNDRUP-USDT"


RNDRUP_USDT = RNDRUP_USDT(*RNDRUP_USDT._fields)


class RNDRDOWN_USDT(Symbol):
    """
        name: RNDRDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "RNDRDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDRDOWN-USDT"

    def __str__(self):
        return "RNDRDOWN-USDT"

    def __call__(self):
        return "RNDRDOWN-USDT"


RNDRDOWN_USDT = RNDRDOWN_USDT(*RNDRDOWN_USDT._fields)


class STXUP_USDT(Symbol):
    """
        name: STXUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "STXUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXUP-USDT"

    def __str__(self):
        return "STXUP-USDT"

    def __call__(self):
        return "STXUP-USDT"


STXUP_USDT = STXUP_USDT(*STXUP_USDT._fields)


class STXDOWN_USDT(Symbol):
    """
        name: STXDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "STXDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STXDOWN-USDT"

    def __str__(self):
        return "STXDOWN-USDT"

    def __call__(self):
        return "STXDOWN-USDT"


STXDOWN_USDT = STXDOWN_USDT(*STXDOWN_USDT._fields)


class LINAUP_USDT(Symbol):
    """
        name: LINAUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "LINAUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINAUP-USDT"

    def __str__(self):
        return "LINAUP-USDT"

    def __call__(self):
        return "LINAUP-USDT"


LINAUP_USDT = LINAUP_USDT(*LINAUP_USDT._fields)


class LINADOWN_USDT(Symbol):
    """
        name: LINADOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "LINADOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINADOWN-USDT"

    def __str__(self):
        return "LINADOWN-USDT"

    def __call__(self):
        return "LINADOWN-USDT"


LINADOWN_USDT = LINADOWN_USDT(*LINADOWN_USDT._fields)


class GPT_USDT(Symbol):
    """
        name: GPT-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "GPT-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GPT-USDT"

    def __str__(self):
        return "GPT-USDT"

    def __call__(self):
        return "GPT-USDT"


GPT_USDT = GPT_USDT(*GPT_USDT._fields)


class BABYDOGE_USDT(Symbol):
    """
        name: BABYDOGE-USDT
        significant_digits: None
        tick_size: 0.000000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100000000
        max_order_size: 1000000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "BABYDOGE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100000000
    max_order_size: float = 1000000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BABYDOGE-USDT"

    def __str__(self):
        return "BABYDOGE-USDT"

    def __call__(self):
        return "BABYDOGE-USDT"


BABYDOGE_USDT = BABYDOGE_USDT(*BABYDOGE_USDT._fields)


class PZP_USDT(Symbol):
    """
        name: PZP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PZP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PZP-USDT"

    def __str__(self):
        return "PZP-USDT"

    def __call__(self):
        return "PZP-USDT"


PZP_USDT = PZP_USDT(*PZP_USDT._fields)


class INJDOWN_USDT(Symbol):
    """
        name: INJDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "INJDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJDOWN-USDT"

    def __str__(self):
        return "INJDOWN-USDT"

    def __call__(self):
        return "INJDOWN-USDT"


INJDOWN_USDT = INJDOWN_USDT(*INJDOWN_USDT._fields)


class ETCUP_USDT(Symbol):
    """
        name: ETCUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETCUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCUP-USDT"

    def __str__(self):
        return "ETCUP-USDT"

    def __call__(self):
        return "ETCUP-USDT"


ETCUP_USDT = ETCUP_USDT(*ETCUP_USDT._fields)


class ETCDOWN_USDT(Symbol):
    """
        name: ETCDOWN-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "ETCDOWN-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETCDOWN-USDT"

    def __str__(self):
        return "ETCDOWN-USDT"

    def __call__(self):
        return "ETCDOWN-USDT"


ETCDOWN_USDT = ETCDOWN_USDT(*ETCDOWN_USDT._fields)


class INJUP_USDT(Symbol):
    """
        name: INJUP-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 999999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "INJUP-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 999999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJUP-USDT"

    def __str__(self):
        return "INJUP-USDT"

    def __call__(self):
        return "INJUP-USDT"


INJUP_USDT = INJUP_USDT(*INJUP_USDT._fields)


class LOCUS_USDT(Symbol):
    """
        name: LOCUS-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "LOCUS-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOCUS-USDT"

    def __str__(self):
        return "LOCUS-USDT"

    def __call__(self):
        return "LOCUS-USDT"


LOCUS_USDT = LOCUS_USDT(*LOCUS_USDT._fields)


class IRON_USDT(Symbol):
    """
        name: IRON-USDT
        significant_digits: None
        tick_size: 0.001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IRON-USDT"
    significant_digits: int = None
    tick_size: int = 0.001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IRON-USDT"

    def __str__(self):
        return "IRON-USDT"

    def __call__(self):
        return "IRON-USDT"


IRON_USDT = IRON_USDT(*IRON_USDT._fields)


class ZPAY_USDT(Symbol):
    """
        name: ZPAY-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "ZPAY-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZPAY-USDT"

    def __str__(self):
        return "ZPAY-USDT"

    def __call__(self):
        return "ZPAY-USDT"


ZPAY_USDT = ZPAY_USDT(*ZPAY_USDT._fields)


class IZI_USDT(Symbol):
    """
        name: IZI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 10
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "IZI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 10
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IZI-USDT"

    def __str__(self):
        return "IZI-USDT"

    def __call__(self):
        return "IZI-USDT"


IZI_USDT = IZI_USDT(*IZI_USDT._fields)


class SUI_USDT(Symbol):
    """
        name: SUI-USDT
        significant_digits: None
        tick_size: 0.00001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 1
        max_order_size: 10000000000
        has_margin: True
        exchange: kucoin
    """
    name: str = "SUI-USDT"
    significant_digits: int = None
    tick_size: int = 0.00001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 1
    max_order_size: float = 10000000000
    has_margin: bool = True
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUI-USDT"

    def __str__(self):
        return "SUI-USDT"

    def __call__(self):
        return "SUI-USDT"


SUI_USDT = SUI_USDT(*SUI_USDT._fields)


class SUI3S_USDT(Symbol):
    """
        name: SUI3S-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 9999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUI3S-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 9999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUI3S-USDT"

    def __str__(self):
        return "SUI3S-USDT"

    def __call__(self):
        return "SUI3S-USDT"


SUI3S_USDT = SUI3S_USDT(*SUI3S_USDT._fields)


class SUI3L_USDT(Symbol):
    """
        name: SUI3L-USDT
        significant_digits: None
        tick_size: 0.0001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 0.1
        max_order_size: 99999999999
        has_margin: False
        exchange: kucoin
    """
    name: str = "SUI3L-USDT"
    significant_digits: int = None
    tick_size: int = 0.0001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 0.1
    max_order_size: float = 99999999999
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUI3L-USDT"

    def __str__(self):
        return "SUI3L-USDT"

    def __call__(self):
        return "SUI3L-USDT"


SUI3L_USDT = SUI3L_USDT(*SUI3L_USDT._fields)


class PEPE_USDT(Symbol):
    """
        name: PEPE-USDT
        significant_digits: None
        tick_size: 0.000000001
        min_margin: 0.1
        initial_margin: None
        min_order_size: 100000
        max_order_size: 10000000000
        has_margin: False
        exchange: kucoin
    """
    name: str = "PEPE-USDT"
    significant_digits: int = None
    tick_size: int = 0.000000001
    min_margin: float = 0.1
    initial_margin: float = None
    min_order_size: float = 100000
    max_order_size: float = 10000000000
    has_margin: bool = False
    exchange: str = "kucoin"

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEPE-USDT"

    def __str__(self):
        return "PEPE-USDT"

    def __call__(self):
        return "PEPE-USDT"


PEPE_USDT = PEPE_USDT(*PEPE_USDT._fields)


class Kucoin:

    OXEN_BTC: Symbol = OXEN_BTC
    OXEN_ETH: Symbol = OXEN_ETH
    NRG_BTC: Symbol = NRG_BTC
    AVA_USDT: Symbol = AVA_USDT
    FET_BTC: Symbol = FET_BTC
    FET_ETH: Symbol = FET_ETH
    ANKR_BTC: Symbol = ANKR_BTC
    XMR_BTC: Symbol = XMR_BTC
    XMR_ETH: Symbol = XMR_ETH
    MTV_BTC: Symbol = MTV_BTC
    MTV_ETH: Symbol = MTV_ETH
    CRO_BTC: Symbol = CRO_BTC
    MTV_USDT: Symbol = MTV_USDT
    KMD_BTC: Symbol = KMD_BTC
    KMD_USDT: Symbol = KMD_USDT
    RFOX_USDT: Symbol = RFOX_USDT
    TEL_USDT: Symbol = TEL_USDT
    TT_USDT: Symbol = TT_USDT
    AERGO_USDT: Symbol = AERGO_USDT
    XMR_USDT: Symbol = XMR_USDT
    TRX_KCS: Symbol = TRX_KCS
    ATOM_BTC: Symbol = ATOM_BTC
    ATOM_ETH: Symbol = ATOM_ETH
    ATOM_USDT: Symbol = ATOM_USDT
    ATOM_KCS: Symbol = ATOM_KCS
    ETN_USDT: Symbol = ETN_USDT
    FTM_USDT: Symbol = FTM_USDT
    VSYS_USDT: Symbol = VSYS_USDT
    OCEAN_BTC: Symbol = OCEAN_BTC
    OCEAN_ETH: Symbol = OCEAN_ETH
    CHR_BTC: Symbol = CHR_BTC
    CHR_USDT: Symbol = CHR_USDT
    FX_BTC: Symbol = FX_BTC
    FX_ETH: Symbol = FX_ETH
    NIM_BTC: Symbol = NIM_BTC
    NIM_ETH: Symbol = NIM_ETH
    COTI_BTC: Symbol = COTI_BTC
    COTI_USDT: Symbol = COTI_USDT
    NRG_ETH: Symbol = NRG_ETH
    BNB_BTC: Symbol = BNB_BTC
    BNB_USDT: Symbol = BNB_USDT
    JAR_BTC: Symbol = JAR_BTC
    JAR_USDT: Symbol = JAR_USDT
    ALGO_BTC: Symbol = ALGO_BTC
    ALGO_ETH: Symbol = ALGO_ETH
    ALGO_USDT: Symbol = ALGO_USDT
    XEM_BTC: Symbol = XEM_BTC
    XEM_USDT: Symbol = XEM_USDT
    CIX100_USDT: Symbol = CIX100_USDT
    XTZ_BTC: Symbol = XTZ_BTC
    XTZ_USDT: Symbol = XTZ_USDT
    ZEC_BTC: Symbol = ZEC_BTC
    ZEC_USDT: Symbol = ZEC_USDT
    ADA_BTC: Symbol = ADA_BTC
    ADA_USDT: Symbol = ADA_USDT
    REV_USDT: Symbol = REV_USDT
    FORESTPLUS_BTC: Symbol = FORESTPLUS_BTC
    FORESTPLUS_USDT: Symbol = FORESTPLUS_USDT
    BOLT_BTC: Symbol = BOLT_BTC
    BOLT_USDT: Symbol = BOLT_USDT
    ARPA_USDT: Symbol = ARPA_USDT
    CHZ_BTC: Symbol = CHZ_BTC
    CHZ_USDT: Symbol = CHZ_USDT
    DAPPT_BTC: Symbol = DAPPT_BTC
    DAPPT_USDT: Symbol = DAPPT_USDT
    NOIA_BTC: Symbol = NOIA_BTC
    NOIA_USDT: Symbol = NOIA_USDT
    WIN_BTC: Symbol = WIN_BTC
    WIN_USDT: Symbol = WIN_USDT
    DERO_BTC: Symbol = DERO_BTC
    DERO_USDT: Symbol = DERO_USDT
    BTT_USDT: Symbol = BTT_USDT
    EOSC_USDT: Symbol = EOSC_USDT
    ENQ_BTC: Symbol = ENQ_BTC
    ENQ_USDT: Symbol = ENQ_USDT
    ONE_BTC: Symbol = ONE_BTC
    ONE_USDT: Symbol = ONE_USDT
    TOKO_BTC: Symbol = TOKO_BTC
    TOKO_USDT: Symbol = TOKO_USDT
    VID_BTC: Symbol = VID_BTC
    VID_USDT: Symbol = VID_USDT
    LUNA_USDT: Symbol = LUNA_USDT
    SXP_BTC: Symbol = SXP_BTC
    SXP_USDT: Symbol = SXP_USDT
    AKRO_BTC: Symbol = AKRO_BTC
    AKRO_USDT: Symbol = AKRO_USDT
    ROOBEE_BTC: Symbol = ROOBEE_BTC
    WIN_TRX: Symbol = WIN_TRX
    MAP_BTC: Symbol = MAP_BTC
    MAP_USDT: Symbol = MAP_USDT
    AMPL_BTC: Symbol = AMPL_BTC
    AMPL_USDT: Symbol = AMPL_USDT
    DAG_USDT: Symbol = DAG_USDT
    POL_USDT: Symbol = POL_USDT
    ARX_USDT: Symbol = ARX_USDT
    NWC_BTC: Symbol = NWC_BTC
    NWC_USDT: Symbol = NWC_USDT
    BEPRO_BTC: Symbol = BEPRO_BTC
    BEPRO_USDT: Symbol = BEPRO_USDT
    VRA_BTC: Symbol = VRA_BTC
    VRA_USDT: Symbol = VRA_USDT
    KSM_BTC: Symbol = KSM_BTC
    KSM_USDT: Symbol = KSM_USDT
    DASH_USDT: Symbol = DASH_USDT
    SUTER_USDT: Symbol = SUTER_USDT
    ACOIN_USDT: Symbol = ACOIN_USDT
    SUTER_BTC: Symbol = SUTER_BTC
    SENSO_USDT: Symbol = SENSO_USDT
    PRE_BTC: Symbol = PRE_BTC
    XDB_USDT: Symbol = XDB_USDT
    SYLO_USDT: Symbol = SYLO_USDT
    WOM_USDT: Symbol = WOM_USDT
    SENSO_BTC: Symbol = SENSO_BTC
    DGB_USDT: Symbol = DGB_USDT
    LYXE_USDT: Symbol = LYXE_USDT
    LYXE_ETH: Symbol = LYXE_ETH
    XDB_BTC: Symbol = XDB_BTC
    STX_BTC: Symbol = STX_BTC
    STX_USDT: Symbol = STX_USDT
    COMP_USDT: Symbol = COMP_USDT
    CRO_USDT: Symbol = CRO_USDT
    KAI_USDT: Symbol = KAI_USDT
    KAI_BTC: Symbol = KAI_BTC
    WEST_BTC: Symbol = WEST_BTC
    WEST_USDT: Symbol = WEST_USDT
    EWT_BTC: Symbol = EWT_BTC
    WAVES_USDT: Symbol = WAVES_USDT
    WAVES_BTC: Symbol = WAVES_BTC
    ORN_USDT: Symbol = ORN_USDT
    AMPL_ETH: Symbol = AMPL_ETH
    BNS_USDT: Symbol = BNS_USDT
    BNS_BTC: Symbol = BNS_BTC
    MKR_USDT: Symbol = MKR_USDT
    SUKU_BTC: Symbol = SUKU_BTC
    MLK_BTC: Symbol = MLK_BTC
    MLK_USDT: Symbol = MLK_USDT
    JST_USDT: Symbol = JST_USDT
    KAI_ETH: Symbol = KAI_ETH
    SUKU_USDT: Symbol = SUKU_USDT
    DIA_USDT: Symbol = DIA_USDT
    DIA_BTC: Symbol = DIA_BTC
    LINK_BTC: Symbol = LINK_BTC
    LINK_USDT: Symbol = LINK_USDT
    DOT_USDT: Symbol = DOT_USDT
    DOT_BTC: Symbol = DOT_BTC
    SHA_BTC: Symbol = SHA_BTC
    SHA_USDT: Symbol = SHA_USDT
    EWT_USDT: Symbol = EWT_USDT
    USDJ_USDT: Symbol = USDJ_USDT
    EFX_BTC: Symbol = EFX_BTC
    CKB_BTC: Symbol = CKB_BTC
    CKB_USDT: Symbol = CKB_USDT
    UMA_USDT: Symbol = UMA_USDT
    ALEPH_USDT: Symbol = ALEPH_USDT
    VELO_USDT: Symbol = VELO_USDT
    SUN_USDT: Symbol = SUN_USDT
    BUY_USDT: Symbol = BUY_USDT
    YFI_USDT: Symbol = YFI_USDT
    OXEN_USDT: Symbol = OXEN_USDT
    UNI_USDT: Symbol = UNI_USDT
    UOS_USDT: Symbol = UOS_USDT
    UOS_BTC: Symbol = UOS_BTC
    NIM_USDT: Symbol = NIM_USDT
    DEGO_USDT: Symbol = DEGO_USDT
    DEGO_ETH: Symbol = DEGO_ETH
    RFUEL_USDT: Symbol = RFUEL_USDT
    FIL_USDT: Symbol = FIL_USDT
    UBX_ETH: Symbol = UBX_ETH
    REAP_USDT: Symbol = REAP_USDT
    AAVE_USDT: Symbol = AAVE_USDT
    AAVE_BTC: Symbol = AAVE_BTC
    TONE_BTC: Symbol = TONE_BTC
    TONE_ETH: Symbol = TONE_ETH
    ELF_ETH: Symbol = ELF_ETH
    AERGO_BTC: Symbol = AERGO_BTC
    IOST_ETH: Symbol = IOST_ETH
    KCS_USDT: Symbol = KCS_USDT
    SNX_ETH: Symbol = SNX_ETH
    KCS_ETH: Symbol = KCS_ETH
    WAN_ETH: Symbol = WAN_ETH
    NULS_ETH: Symbol = NULS_ETH
    QTUM_BTC: Symbol = QTUM_BTC
    MANA_BTC: Symbol = MANA_BTC
    TEL_BTC: Symbol = TEL_BTC
    XYO_ETH: Symbol = XYO_ETH
    ETN_BTC: Symbol = ETN_BTC
    COV_ETH: Symbol = COV_ETH
    VET_BTC: Symbol = VET_BTC
    KCS_BTC: Symbol = KCS_BTC
    CAPP_ETH: Symbol = CAPP_ETH
    ONT_BTC: Symbol = ONT_BTC
    DAG_ETH: Symbol = DAG_ETH
    WAN_BTC: Symbol = WAN_BTC
    KNC_ETH: Symbol = KNC_ETH
    CRPT_ETH: Symbol = CRPT_ETH
    LTC_USDT: Symbol = LTC_USDT
    BAX_ETH: Symbol = BAX_ETH
    BSV_USDT: Symbol = BSV_USDT
    DENT_ETH: Symbol = DENT_ETH
    LYM_ETH: Symbol = LYM_ETH
    TRAC_ETH: Symbol = TRAC_ETH
    ENJ_BTC: Symbol = ENJ_BTC
    WAXP_BTC: Symbol = WAXP_BTC
    DGB_BTC: Symbol = DGB_BTC
    ELA_BTC: Symbol = ELA_BTC
    ZIL_BTC: Symbol = ZIL_BTC
    BSV_BTC: Symbol = BSV_BTC
    XLM_USDT: Symbol = XLM_USDT
    IOTX_ETH: Symbol = IOTX_ETH
    SOUL_BTC: Symbol = SOUL_BTC
    DOCK_BTC: Symbol = DOCK_BTC
    AMB_ETH: Symbol = AMB_ETH
    TRX_BTC: Symbol = TRX_BTC
    XRP_TUSD: Symbol = XRP_TUSD
    NULS_BTC: Symbol = NULS_BTC
    ETH_DAI: Symbol = ETH_DAI
    LSK_BTC: Symbol = LSK_BTC
    GMB_ETH: Symbol = GMB_ETH
    GMB_BTC: Symbol = GMB_BTC
    NEO_ETH: Symbol = NEO_ETH
    OMG_ETH: Symbol = OMG_ETH
    BTC_TUSD: Symbol = BTC_TUSD
    KAT_USDT: Symbol = KAT_USDT
    KNC_BTC: Symbol = KNC_BTC
    ELF_BTC: Symbol = ELF_BTC
    MANA_ETH: Symbol = MANA_ETH
    ETC_USDT: Symbol = ETC_USDT
    ONT_ETH: Symbol = ONT_ETH
    MKR_BTC: Symbol = MKR_BTC
    KAT_BTC: Symbol = KAT_BTC
    XRP_USDC: Symbol = XRP_USDC
    XYO_BTC: Symbol = XYO_BTC
    ZRX_BTC: Symbol = ZRX_BTC
    LOOM_ETH: Symbol = LOOM_ETH
    OLT_ETH: Symbol = OLT_ETH
    OLT_BTC: Symbol = OLT_BTC
    TRAC_BTC: Symbol = TRAC_BTC
    XLM_ETH: Symbol = XLM_ETH
    ETH_USDT: Symbol = ETH_USDT
    BSV_ETH: Symbol = BSV_ETH
    TRX_ETH: Symbol = TRX_ETH
    ETN_ETH: Symbol = ETN_ETH
    AOA_USDT: Symbol = AOA_USDT
    DENT_BTC: Symbol = DENT_BTC
    DOCK_ETH: Symbol = DOCK_ETH
    KEY_BTC: Symbol = KEY_BTC
    EOS_KCS: Symbol = EOS_KCS
    XLM_BTC: Symbol = XLM_BTC
    TIME_ETH: Symbol = TIME_ETH
    CVC_BTC: Symbol = CVC_BTC
    LSK_ETH: Symbol = LSK_ETH
    QKC_BTC: Symbol = QKC_BTC
    AMB_BTC: Symbol = AMB_BTC
    USDT_TUSD: Symbol = USDT_TUSD
    ETC_ETH: Symbol = ETC_ETH
    XRP_BTC: Symbol = XRP_BTC
    NEO_KCS: Symbol = NEO_KCS
    SNX_USDT: Symbol = SNX_USDT
    CRPT_BTC: Symbol = CRPT_BTC
    IOTX_BTC: Symbol = IOTX_BTC
    LTC_ETH: Symbol = LTC_ETH
    XRP_KCS: Symbol = XRP_KCS
    LTC_KCS: Symbol = LTC_KCS
    TEL_ETH: Symbol = TEL_ETH
    DCR_ETH: Symbol = DCR_ETH
    LYM_USDT: Symbol = LYM_USDT
    USDT_USDC: Symbol = USDT_USDC
    ETH_USDC: Symbol = ETH_USDC
    DAG_BTC: Symbol = DAG_BTC
    AVA_BTC: Symbol = AVA_BTC
    BTC_USDT: Symbol = BTC_USDT
    WAXP_ETH: Symbol = WAXP_ETH
    XRP_USDT: Symbol = XRP_USDT
    KEY_ETH: Symbol = KEY_ETH
    VET_ETH: Symbol = VET_ETH
    FTM_BTC: Symbol = FTM_BTC
    USDT_DAI: Symbol = USDT_DAI
    QKC_ETH: Symbol = QKC_ETH
    ETH_BTC: Symbol = ETH_BTC
    MAN_BTC: Symbol = MAN_BTC
    CPC_ETH: Symbol = CPC_ETH
    TRX_USDT: Symbol = TRX_USDT
    BTC_DAI: Symbol = BTC_DAI
    ONT_USDT: Symbol = ONT_USDT
    DASH_ETH: Symbol = DASH_ETH
    BAX_BTC: Symbol = BAX_BTC
    AVA_ETH: Symbol = AVA_ETH
    LOOM_BTC: Symbol = LOOM_BTC
    MKR_ETH: Symbol = MKR_ETH
    COV_BTC: Symbol = COV_BTC
    CPC_BTC: Symbol = CPC_BTC
    REQ_ETH: Symbol = REQ_ETH
    EOS_BTC: Symbol = EOS_BTC
    LTC_BTC: Symbol = LTC_BTC
    XRP_ETH: Symbol = XRP_ETH
    CAPP_BTC: Symbol = CAPP_BTC
    FTM_ETH: Symbol = FTM_ETH
    ZRX_ETH: Symbol = ZRX_ETH
    DGB_ETH: Symbol = DGB_ETH
    VET_USDT: Symbol = VET_USDT
    REQ_BTC: Symbol = REQ_BTC
    UTK_BTC: Symbol = UTK_BTC
    PLAY_BTC: Symbol = PLAY_BTC
    UTK_ETH: Symbol = UTK_ETH
    SNX_BTC: Symbol = SNX_BTC
    NEO_BTC: Symbol = NEO_BTC
    SOUL_ETH: Symbol = SOUL_ETH
    NEO_USDT: Symbol = NEO_USDT
    ELA_ETH: Symbol = ELA_ETH
    OMG_BTC: Symbol = OMG_BTC
    TIME_BTC: Symbol = TIME_BTC
    AOA_BTC: Symbol = AOA_BTC
    ETC_BTC: Symbol = ETC_BTC
    DCR_BTC: Symbol = DCR_BTC
    BTC_USDC: Symbol = BTC_USDC
    ENJ_ETH: Symbol = ENJ_ETH
    IOST_BTC: Symbol = IOST_BTC
    DASH_BTC: Symbol = DASH_BTC
    EOS_USDT: Symbol = EOS_USDT
    EOS_ETH: Symbol = EOS_ETH
    ZIL_ETH: Symbol = ZIL_ETH
    ETH_TUSD: Symbol = ETH_TUSD
    GAS_BTC: Symbol = GAS_BTC
    LYM_BTC: Symbol = LYM_BTC
    BCH_BTC: Symbol = BCH_BTC
    VSYS_BTC: Symbol = VSYS_BTC
    BCH_USDT: Symbol = BCH_USDT
    MKR_DAI: Symbol = MKR_DAI
    SOLVE_BTC: Symbol = SOLVE_BTC
    UQC_BTC: Symbol = UQC_BTC
    UQC_ETH: Symbol = UQC_ETH
    OPCT_BTC: Symbol = OPCT_BTC
    OPCT_ETH: Symbol = OPCT_ETH
    PRE_USDT: Symbol = PRE_USDT
    SHR_BTC: Symbol = SHR_BTC
    SHR_USDT: Symbol = SHR_USDT
    VIDT_USDT: Symbol = VIDT_USDT
    ROSE_USDT: Symbol = ROSE_USDT
    USDC_USDT: Symbol = USDC_USDT
    CTI_USDT: Symbol = CTI_USDT
    CTI_ETH: Symbol = CTI_ETH
    ETH2_ETH: Symbol = ETH2_ETH
    BUX_BTC: Symbol = BUX_BTC
    XHV_USDT: Symbol = XHV_USDT
    PLU_USDT: Symbol = PLU_USDT
    GRT_USDT: Symbol = GRT_USDT
    CAS_BTC: Symbol = CAS_BTC
    CAS_USDT: Symbol = CAS_USDT
    MSWAP_BTC: Symbol = MSWAP_BTC
    MSWAP_USDT: Symbol = MSWAP_USDT
    REVV_BTC: Symbol = REVV_BTC
    REVV_USDT: Symbol = REVV_USDT
    ONEINCH_USDT: Symbol = ONEINCH_USDT
    LOC_USDT: Symbol = LOC_USDT
    API3_USDT: Symbol = API3_USDT
    UNFI_USDT: Symbol = UNFI_USDT
    HTR_USDT: Symbol = HTR_USDT
    FRONT_USDT: Symbol = FRONT_USDT
    FRONT_BTC: Symbol = FRONT_BTC
    WBTC_BTC: Symbol = WBTC_BTC
    WBTC_ETH: Symbol = WBTC_ETH
    MIR_USDT: Symbol = MIR_USDT
    LTC_USDC: Symbol = LTC_USDC
    BCH_USDC: Symbol = BCH_USDC
    HYDRA_USDT: Symbol = HYDRA_USDT
    DFI_USDT: Symbol = DFI_USDT
    DFI_BTC: Symbol = DFI_BTC
    CRV_USDT: Symbol = CRV_USDT
    SUSHI_USDT: Symbol = SUSHI_USDT
    FRM_USDT: Symbol = FRM_USDT
    EOS_USDC: Symbol = EOS_USDC
    BSV_USDC: Symbol = BSV_USDC
    ZEN_USDT: Symbol = ZEN_USDT
    CUDOS_USDT: Symbol = CUDOS_USDT
    ADA_USDC: Symbol = ADA_USDC
    REN_USDT: Symbol = REN_USDT
    LRC_USDT: Symbol = LRC_USDT
    LINK_USDC: Symbol = LINK_USDC
    KLV_USDT: Symbol = KLV_USDT
    KLV_BTC: Symbol = KLV_BTC
    BOA_USDT: Symbol = BOA_USDT
    THETA_USDT: Symbol = THETA_USDT
    QNT_USDT: Symbol = QNT_USDT
    BAT_USDT: Symbol = BAT_USDT
    DOGE_USDT: Symbol = DOGE_USDT
    DOGE_USDC: Symbol = DOGE_USDC
    DAO_USDT: Symbol = DAO_USDT
    STRONG_USDT: Symbol = STRONG_USDT
    TRIAS_USDT: Symbol = TRIAS_USDT
    TRIAS_BTC: Symbol = TRIAS_BTC
    DOGE_BTC: Symbol = DOGE_BTC
    MITX_BTC: Symbol = MITX_BTC
    MITX_USDT: Symbol = MITX_USDT
    CAKE_USDT: Symbol = CAKE_USDT
    ORAI_USDT: Symbol = ORAI_USDT
    ZEE_USDT: Symbol = ZEE_USDT
    LTX_USDT: Symbol = LTX_USDT
    LTX_BTC: Symbol = LTX_BTC
    MASK_USDT: Symbol = MASK_USDT
    KLV_TRX: Symbol = KLV_TRX
    IDEA_USDT: Symbol = IDEA_USDT
    PHA_USDT: Symbol = PHA_USDT
    PHA_ETH: Symbol = PHA_ETH
    BCH_KCS: Symbol = BCH_KCS
    SRK_USDT: Symbol = SRK_USDT
    SRK_BTC: Symbol = SRK_BTC
    ADA_KCS: Symbol = ADA_KCS
    HTR_BTC: Symbol = HTR_BTC
    BSV_KCS: Symbol = BSV_KCS
    DOT_KCS: Symbol = DOT_KCS
    LINK_KCS: Symbol = LINK_KCS
    MIR_KCS: Symbol = MIR_KCS
    BNB_KCS: Symbol = BNB_KCS
    XLM_KCS: Symbol = XLM_KCS
    VET_KCS: Symbol = VET_KCS
    SWINGBY_USDT: Symbol = SWINGBY_USDT
    SWINGBY_BTC: Symbol = SWINGBY_BTC
    XHV_BTC: Symbol = XHV_BTC
    DASH_KCS: Symbol = DASH_KCS
    UNI_KCS: Symbol = UNI_KCS
    AAVE_KCS: Symbol = AAVE_KCS
    DOGE_KCS: Symbol = DOGE_KCS
    ZEC_KCS: Symbol = ZEC_KCS
    XTZ_KCS: Symbol = XTZ_KCS
    GRT_KCS: Symbol = GRT_KCS
    ALGO_KCS: Symbol = ALGO_KCS
    EWT_KCS: Symbol = EWT_KCS
    GAS_USDT: Symbol = GAS_USDT
    AVAX_USDT: Symbol = AVAX_USDT
    AVAX_BTC: Symbol = AVAX_BTC
    KRL_BTC: Symbol = KRL_BTC
    KRL_USDT: Symbol = KRL_USDT
    POLK_USDT: Symbol = POLK_USDT
    POLK_BTC: Symbol = POLK_BTC
    ENJ_USDT: Symbol = ENJ_USDT
    MANA_USDT: Symbol = MANA_USDT
    RNDR_USDT: Symbol = RNDR_USDT
    RNDR_BTC: Symbol = RNDR_BTC
    RLY_USDT: Symbol = RLY_USDT
    ANC_USDT: Symbol = ANC_USDT
    SKEY_USDT: Symbol = SKEY_USDT
    LAYER_USDT: Symbol = LAYER_USDT
    TARA_USDT: Symbol = TARA_USDT
    TARA_ETH: Symbol = TARA_ETH
    IOST_USDT: Symbol = IOST_USDT
    DYP_USDT: Symbol = DYP_USDT
    DYP_ETH: Symbol = DYP_ETH
    XYM_USDT: Symbol = XYM_USDT
    XYM_BTC: Symbol = XYM_BTC
    PCX_USDT: Symbol = PCX_USDT
    PCX_BTC: Symbol = PCX_BTC
    ORBS_USDT: Symbol = ORBS_USDT
    ORBS_BTC: Symbol = ORBS_BTC
    BTC3L_USDT: Symbol = BTC3L_USDT
    BTC3S_USDT: Symbol = BTC3S_USDT
    ETH3L_USDT: Symbol = ETH3L_USDT
    ETH3S_USDT: Symbol = ETH3S_USDT
    ANKR_USDT: Symbol = ANKR_USDT
    DSLA_USDT: Symbol = DSLA_USDT
    DSLA_BTC: Symbol = DSLA_BTC
    SAND_USDT: Symbol = SAND_USDT
    VAI_USDT: Symbol = VAI_USDT
    XCUR_USDT: Symbol = XCUR_USDT
    XCUR_BTC: Symbol = XCUR_BTC
    FLUX_USDT: Symbol = FLUX_USDT
    OMG_USDT: Symbol = OMG_USDT
    ZIL_USDT: Symbol = ZIL_USDT
    DODO_USDT: Symbol = DODO_USDT
    MAN_USDT: Symbol = MAN_USDT
    BAX_USDT: Symbol = BAX_USDT
    BOSON_USDT: Symbol = BOSON_USDT
    BOSON_ETH: Symbol = BOSON_ETH
    PUNDIX_USDT: Symbol = PUNDIX_USDT
    PUNDIX_BTC: Symbol = PUNDIX_BTC
    WAXP_USDT: Symbol = WAXP_USDT
    HT_USDT: Symbol = HT_USDT
    PDEX_USDT: Symbol = PDEX_USDT
    LABS_USDT: Symbol = LABS_USDT
    LABS_ETH: Symbol = LABS_ETH
    GMB_USDT: Symbol = GMB_USDT
    PHNX_USDT: Symbol = PHNX_USDT
    PHNX_BTC: Symbol = PHNX_BTC
    HAI_USDT: Symbol = HAI_USDT
    EQZ_USDT: Symbol = EQZ_USDT
    FORTH_USDT: Symbol = FORTH_USDT
    CGG_USDT: Symbol = CGG_USDT
    UBX_USDT: Symbol = UBX_USDT
    GHX_USDT: Symbol = GHX_USDT
    STND_USDT: Symbol = STND_USDT
    STND_ETH: Symbol = STND_ETH
    TOWER_USDT: Symbol = TOWER_USDT
    TOWER_BTC: Symbol = TOWER_BTC
    ACE_USDT: Symbol = ACE_USDT
    LOCG_USDT: Symbol = LOCG_USDT
    CARD_USDT: Symbol = CARD_USDT
    FLY_USDT: Symbol = FLY_USDT
    CWS_USDT: Symbol = CWS_USDT
    XDC_USDT: Symbol = XDC_USDT
    XDC_ETH: Symbol = XDC_ETH
    STRK_BTC: Symbol = STRK_BTC
    STRK_ETH: Symbol = STRK_ETH
    SHIB_USDT: Symbol = SHIB_USDT
    POLX_USDT: Symbol = POLX_USDT
    KDA_USDT: Symbol = KDA_USDT
    KDA_BTC: Symbol = KDA_BTC
    ICP_USDT: Symbol = ICP_USDT
    ICP_BTC: Symbol = ICP_BTC
    STC_USDT: Symbol = STC_USDT
    STC_BTC: Symbol = STC_BTC
    GOVI_USDT: Symbol = GOVI_USDT
    GOVI_BTC: Symbol = GOVI_BTC
    FKX_USDT: Symbol = FKX_USDT
    CELO_USDT: Symbol = CELO_USDT
    CELO_BTC: Symbol = CELO_BTC
    CUSD_USDT: Symbol = CUSD_USDT
    CUSD_BTC: Symbol = CUSD_BTC
    MATIC_USDT: Symbol = MATIC_USDT
    MATIC_BTC: Symbol = MATIC_BTC
    ELA_USDT: Symbol = ELA_USDT
    CRPT_USDT: Symbol = CRPT_USDT
    OPCT_USDT: Symbol = OPCT_USDT
    OGN_USDT: Symbol = OGN_USDT
    OGN_BTC: Symbol = OGN_BTC
    OUSD_USDT: Symbol = OUSD_USDT
    OUSD_BTC: Symbol = OUSD_BTC
    TLOS_USDT: Symbol = TLOS_USDT
    TLOS_BTC: Symbol = TLOS_BTC
    GLQ_USDT: Symbol = GLQ_USDT
    GLQ_BTC: Symbol = GLQ_BTC
    MXC_USDT: Symbol = MXC_USDT
    ERSDL_USDT: Symbol = ERSDL_USDT
    HOTCROSS_USDT: Symbol = HOTCROSS_USDT
    ADA3L_USDT: Symbol = ADA3L_USDT
    ADA3S_USDT: Symbol = ADA3S_USDT
    HYVE_USDT: Symbol = HYVE_USDT
    HYVE_BTC: Symbol = HYVE_BTC
    DAPPX_USDT: Symbol = DAPPX_USDT
    KONO_USDT: Symbol = KONO_USDT
    PRQ_USDT: Symbol = PRQ_USDT
    MAHA_USDT: Symbol = MAHA_USDT
    MAHA_BTC: Symbol = MAHA_BTC
    FEAR_USDT: Symbol = FEAR_USDT
    PYR_USDT: Symbol = PYR_USDT
    PYR_BTC: Symbol = PYR_BTC
    PROM_USDT: Symbol = PROM_USDT
    PROM_BTC: Symbol = PROM_BTC
    GLCH_USDT: Symbol = GLCH_USDT
    UNO_USDT: Symbol = UNO_USDT
    XCAD_USDT: Symbol = XCAD_USDT
    EOS3L_USDT: Symbol = EOS3L_USDT
    EOS3S_USDT: Symbol = EOS3S_USDT
    BCH3L_USDT: Symbol = BCH3L_USDT
    BCH3S_USDT: Symbol = BCH3S_USDT
    ELON_USDT: Symbol = ELON_USDT
    APL_USDT: Symbol = APL_USDT
    VEED_USDT: Symbol = VEED_USDT
    VEED_BTC: Symbol = VEED_BTC
    DIVI_USDT: Symbol = DIVI_USDT
    PDEX_BTC: Symbol = PDEX_BTC
    POLS_USDT: Symbol = POLS_USDT
    POLS_BTC: Symbol = POLS_BTC
    LPOOL_USDT: Symbol = LPOOL_USDT
    LPOOL_BTC: Symbol = LPOOL_BTC
    LSS_USDT: Symbol = LSS_USDT
    VET3L_USDT: Symbol = VET3L_USDT
    VET3S_USDT: Symbol = VET3S_USDT
    LTC3L_USDT: Symbol = LTC3L_USDT
    LTC3S_USDT: Symbol = LTC3S_USDT
    ABBC_USDT: Symbol = ABBC_USDT
    ABBC_BTC: Symbol = ABBC_BTC
    KOK_USDT: Symbol = KOK_USDT
    ZCX_USDT: Symbol = ZCX_USDT
    ZCX_BTC: Symbol = ZCX_BTC
    NORD_USDT: Symbol = NORD_USDT
    GMEE_USDT: Symbol = GMEE_USDT
    SFUND_USDT: Symbol = SFUND_USDT
    XAVA_USDT: Symbol = XAVA_USDT
    AI_USDT: Symbol = AI_USDT
    IOI_USDT: Symbol = IOI_USDT
    NFT_USDT: Symbol = NFT_USDT
    NFT_TRX: Symbol = NFT_TRX
    MNST_USDT: Symbol = MNST_USDT
    MEM_USDT: Symbol = MEM_USDT
    AGIX_USDT: Symbol = AGIX_USDT
    AGIX_BTC: Symbol = AGIX_BTC
    AGIX_ETH: Symbol = AGIX_ETH
    CQT_USDT: Symbol = CQT_USDT
    AIOZ_USDT: Symbol = AIOZ_USDT
    MARSH_USDT: Symbol = MARSH_USDT
    HAPI_USDT: Symbol = HAPI_USDT
    MODEFI_USDT: Symbol = MODEFI_USDT
    MODEFI_BTC: Symbol = MODEFI_BTC
    YFDAI_USDT: Symbol = YFDAI_USDT
    YFDAI_BTC: Symbol = YFDAI_BTC
    GENS_USDT: Symbol = GENS_USDT
    FORM_USDT: Symbol = FORM_USDT
    ARRR_USDT: Symbol = ARRR_USDT
    ARRR_BTC: Symbol = ARRR_BTC
    TOKO_KCS: Symbol = TOKO_KCS
    LPT_USDT: Symbol = LPT_USDT
    ASD_USDT: Symbol = ASD_USDT
    BOND_USDT: Symbol = BOND_USDT
    HAI_BTC: Symbol = HAI_BTC
    SOUL_USDT: Symbol = SOUL_USDT
    TWOCRZ_USDT: Symbol = TWOCRZ_USDT
    NEAR_USDT: Symbol = NEAR_USDT
    NEAR_BTC: Symbol = NEAR_BTC
    DFYN_USDT: Symbol = DFYN_USDT
    OOE_USDT: Symbol = OOE_USDT
    CFG_USDT: Symbol = CFG_USDT
    CFG_BTC: Symbol = CFG_BTC
    AXS_USDT: Symbol = AXS_USDT
    CLV_USDT: Symbol = CLV_USDT
    ROUTE_USDT: Symbol = ROUTE_USDT
    KAR_USDT: Symbol = KAR_USDT
    EFX_USDT: Symbol = EFX_USDT
    XDC_BTC: Symbol = XDC_BTC
    PMON_USDT: Symbol = PMON_USDT
    DPET_USDT: Symbol = DPET_USDT
    ERG_USDT: Symbol = ERG_USDT
    ERG_BTC: Symbol = ERG_BTC
    SOL_USDT: Symbol = SOL_USDT
    SLP_USDT: Symbol = SLP_USDT
    LITH_USDT: Symbol = LITH_USDT
    LITH_ETH: Symbol = LITH_ETH
    XCH_USDT: Symbol = XCH_USDT
    HAKA_USDT: Symbol = HAKA_USDT
    LAYER_BTC: Symbol = LAYER_BTC
    MTL_USDT: Symbol = MTL_USDT
    MTL_BTC: Symbol = MTL_BTC
    IOTX_USDT: Symbol = IOTX_USDT
    GALA_USDT: Symbol = GALA_USDT
    REQ_USDT: Symbol = REQ_USDT
    TXA_USDT: Symbol = TXA_USDT
    TXA_USDC: Symbol = TXA_USDC
    CIRUS_USDT: Symbol = CIRUS_USDT
    QI_USDT: Symbol = QI_USDT
    QI_BTC: Symbol = QI_BTC
    ODDZ_USDT: Symbol = ODDZ_USDT
    PNT_USDT: Symbol = PNT_USDT
    PNT_BTC: Symbol = PNT_BTC
    XPR_USDT: Symbol = XPR_USDT
    XPR_BTC: Symbol = XPR_BTC
    TRIBE_USDT: Symbol = TRIBE_USDT
    MOVR_USDT: Symbol = MOVR_USDT
    MOVR_ETH: Symbol = MOVR_ETH
    WOO_USDT: Symbol = WOO_USDT
    WILD_USDT: Symbol = WILD_USDT
    QRDO_USDT: Symbol = QRDO_USDT
    QRDO_ETH: Symbol = QRDO_ETH
    MAKI_USDT: Symbol = MAKI_USDT
    MAKI_BTC: Symbol = MAKI_BTC
    OXT_USDT: Symbol = OXT_USDT
    OXT_BTC: Symbol = OXT_BTC
    OXT_ETH: Symbol = OXT_ETH
    BAL_USDT: Symbol = BAL_USDT
    BAL_BTC: Symbol = BAL_BTC
    BAL_ETH: Symbol = BAL_ETH
    STORJ_USDT: Symbol = STORJ_USDT
    STORJ_BTC: Symbol = STORJ_BTC
    STORJ_ETH: Symbol = STORJ_ETH
    YGG_USDT: Symbol = YGG_USDT
    NDAU_USDT: Symbol = NDAU_USDT
    SDAO_USDT: Symbol = SDAO_USDT
    SDAO_ETH: Symbol = SDAO_ETH
    XRP3L_USDT: Symbol = XRP3L_USDT
    XRP3S_USDT: Symbol = XRP3S_USDT
    SKL_USDT: Symbol = SKL_USDT
    SKL_BTC: Symbol = SKL_BTC
    NMR_USDT: Symbol = NMR_USDT
    NMR_BTC: Symbol = NMR_BTC
    IXS_USDT: Symbol = IXS_USDT
    TRB_USDT: Symbol = TRB_USDT
    TRB_BTC: Symbol = TRB_BTC
    DYDX_USDT: Symbol = DYDX_USDT
    XYO_USDT: Symbol = XYO_USDT
    GTC_USDT: Symbol = GTC_USDT
    GTC_BTC: Symbol = GTC_BTC
    EQX_USDT: Symbol = EQX_USDT
    EQX_BTC: Symbol = EQX_BTC
    RLC_USDT: Symbol = RLC_USDT
    RLC_BTC: Symbol = RLC_BTC
    XPRT_USDT: Symbol = XPRT_USDT
    EGLD_USDT: Symbol = EGLD_USDT
    EGLD_BTC: Symbol = EGLD_BTC
    HBAR_USDT: Symbol = HBAR_USDT
    HBAR_BTC: Symbol = HBAR_BTC
    DOGE3L_USDT: Symbol = DOGE3L_USDT
    DOGE3S_USDT: Symbol = DOGE3S_USDT
    FLOW_USDT: Symbol = FLOW_USDT
    FLOW_BTC: Symbol = FLOW_BTC
    NKN_USDT: Symbol = NKN_USDT
    NKN_BTC: Symbol = NKN_BTC
    PBX_USDT: Symbol = PBX_USDT
    SOL3L_USDT: Symbol = SOL3L_USDT
    SOL3S_USDT: Symbol = SOL3S_USDT
    MLN_USDT: Symbol = MLN_USDT
    MLN_BTC: Symbol = MLN_BTC
    XNL_USDT: Symbol = XNL_USDT
    SOLVE_USDT: Symbol = SOLVE_USDT
    DMTR_USDT: Symbol = DMTR_USDT
    LINK3L_USDT: Symbol = LINK3L_USDT
    LINK3S_USDT: Symbol = LINK3S_USDT
    DOT3L_USDT: Symbol = DOT3L_USDT
    DOT3S_USDT: Symbol = DOT3S_USDT
    CTSI_USDT: Symbol = CTSI_USDT
    CTSI_BTC: Symbol = CTSI_BTC
    ALICE_USDT: Symbol = ALICE_USDT
    ALICE_BTC: Symbol = ALICE_BTC
    ALICE_ETH: Symbol = ALICE_ETH
    OPUL_USDT: Symbol = OPUL_USDT
    ILV_USDT: Symbol = ILV_USDT
    BAND_USDT: Symbol = BAND_USDT
    BAND_BTC: Symbol = BAND_BTC
    FTT_USDT: Symbol = FTT_USDT
    FTT_BTC: Symbol = FTT_BTC
    DVPN_USDT: Symbol = DVPN_USDT
    SKU_USDT: Symbol = SKU_USDT
    SKU_BTC: Symbol = SKU_BTC
    SLIM_USDT: Symbol = SLIM_USDT
    TLM_USDT: Symbol = TLM_USDT
    TLM_BTC: Symbol = TLM_BTC
    TLM_ETH: Symbol = TLM_ETH
    DEXE_USDT: Symbol = DEXE_USDT
    DEXE_BTC: Symbol = DEXE_BTC
    DEXE_ETH: Symbol = DEXE_ETH
    MATTER_USDT: Symbol = MATTER_USDT
    CUDOS_BTC: Symbol = CUDOS_BTC
    RUNE_USDT: Symbol = RUNE_USDT
    RUNE_BTC: Symbol = RUNE_BTC
    RMRK_USDT: Symbol = RMRK_USDT
    C98_USDT: Symbol = C98_USDT
    BLOK_USDT: Symbol = BLOK_USDT
    SOLR_USDT: Symbol = SOLR_USDT
    ATOM3L_USDT: Symbol = ATOM3L_USDT
    ATOM3S_USDT: Symbol = ATOM3S_USDT
    UNI3L_USDT: Symbol = UNI3L_USDT
    UNI3S_USDT: Symbol = UNI3S_USDT
    WSIENNA_USDT: Symbol = WSIENNA_USDT
    PUSH_USDT: Symbol = PUSH_USDT
    PUSH_BTC: Symbol = PUSH_BTC
    FORM_ETH: Symbol = FORM_ETH
    NTVRK_USDT: Symbol = NTVRK_USDT
    NTVRK_USDC: Symbol = NTVRK_USDC
    AXS3L_USDT: Symbol = AXS3L_USDT
    AXS3S_USDT: Symbol = AXS3S_USDT
    FTM3L_USDT: Symbol = FTM3L_USDT
    FTM3S_USDT: Symbol = FTM3S_USDT
    FLAME_USDT: Symbol = FLAME_USDT
    AGLD_USDT: Symbol = AGLD_USDT
    NAKA_USDT: Symbol = NAKA_USDT
    YLD_USDT: Symbol = YLD_USDT
    TONE_USDT: Symbol = TONE_USDT
    REEF_USDT: Symbol = REEF_USDT
    REEF_BTC: Symbol = REEF_BTC
    TIDAL_USDT: Symbol = TIDAL_USDT
    TVK_USDT: Symbol = TVK_USDT
    TVK_BTC: Symbol = TVK_BTC
    INJ_USDT: Symbol = INJ_USDT
    INJ_BTC: Symbol = INJ_BTC
    BNB3L_USDT: Symbol = BNB3L_USDT
    BNB3S_USDT: Symbol = BNB3S_USDT
    MATIC3L_USDT: Symbol = MATIC3L_USDT
    MATIC3S_USDT: Symbol = MATIC3S_USDT
    VEGA_USDT: Symbol = VEGA_USDT
    VEGA_ETH: Symbol = VEGA_ETH
    ALPHA_USDT: Symbol = ALPHA_USDT
    ALPHA_BTC: Symbol = ALPHA_BTC
    UNO_BTC: Symbol = UNO_BTC
    ZKT_USDT: Symbol = ZKT_USDT
    AR_USDT: Symbol = AR_USDT
    AR_BTC: Symbol = AR_BTC
    JASMY_USDT: Symbol = JASMY_USDT
    PERP_USDT: Symbol = PERP_USDT
    PERP_BTC: Symbol = PERP_BTC
    SCLP_USDT: Symbol = SCLP_USDT
    SCLP_BTC: Symbol = SCLP_BTC
    SUPER_USDT: Symbol = SUPER_USDT
    SUPER_BTC: Symbol = SUPER_BTC
    CPOOL_USDT: Symbol = CPOOL_USDT
    HERO_USDT: Symbol = HERO_USDT
    BASIC_USDT: Symbol = BASIC_USDT
    XED_USDT: Symbol = XED_USDT
    XED_BTC: Symbol = XED_BTC
    AURY_USDT: Symbol = AURY_USDT
    SWASH_USDT: Symbol = SWASH_USDT
    LTO_USDT: Symbol = LTO_USDT
    LTO_BTC: Symbol = LTO_BTC
    BUX_USDT: Symbol = BUX_USDT
    MTRG_USDT: Symbol = MTRG_USDT
    DREAMS_USDT: Symbol = DREAMS_USDT
    SHIB_DOGE: Symbol = SHIB_DOGE
    QUICK_USDT: Symbol = QUICK_USDT
    QUICK_BTC: Symbol = QUICK_BTC
    TRU_USDT: Symbol = TRU_USDT
    TRU_BTC: Symbol = TRU_BTC
    WRX_USDT: Symbol = WRX_USDT
    WRX_BTC: Symbol = WRX_BTC
    SUSHI3L_USDT: Symbol = SUSHI3L_USDT
    SUSHI3S_USDT: Symbol = SUSHI3S_USDT
    NEAR3L_USDT: Symbol = NEAR3L_USDT
    NEAR3S_USDT: Symbol = NEAR3S_USDT
    DATA_USDT: Symbol = DATA_USDT
    DATA_BTC: Symbol = DATA_BTC
    NORD_BTC: Symbol = NORD_BTC
    ISP_USDT: Symbol = ISP_USDT
    CERE_USDT: Symbol = CERE_USDT
    SHILL_USDT: Symbol = SHILL_USDT
    HEGIC_USDT: Symbol = HEGIC_USDT
    HEGIC_BTC: Symbol = HEGIC_BTC
    ERN_USDT: Symbol = ERN_USDT
    ERN_BTC: Symbol = ERN_BTC
    FTG_USDT: Symbol = FTG_USDT
    PAXG_USDT: Symbol = PAXG_USDT
    PAXG_BTC: Symbol = PAXG_BTC
    AUDIO_USDT: Symbol = AUDIO_USDT
    AUDIO_BTC: Symbol = AUDIO_BTC
    ENS_USDT: Symbol = ENS_USDT
    AAVE3L_USDT: Symbol = AAVE3L_USDT
    AAVE3S_USDT: Symbol = AAVE3S_USDT
    SAND3L_USDT: Symbol = SAND3L_USDT
    SAND3S_USDT: Symbol = SAND3S_USDT
    XTM_USDT: Symbol = XTM_USDT
    MNW_USDT: Symbol = MNW_USDT
    FXS_USDT: Symbol = FXS_USDT
    FXS_BTC: Symbol = FXS_BTC
    ATA_USDT: Symbol = ATA_USDT
    ATA_BTC: Symbol = ATA_BTC
    VXV_USDT: Symbol = VXV_USDT
    LRC_BTC: Symbol = LRC_BTC
    LRC_ETH: Symbol = LRC_ETH
    DPR_USDT: Symbol = DPR_USDT
    CWAR_USDT: Symbol = CWAR_USDT
    CWAR_BTC: Symbol = CWAR_BTC
    FLUX_BTC: Symbol = FLUX_BTC
    PBR_USDT: Symbol = PBR_USDT
    ANT_USDT: Symbol = ANT_USDT
    ANT_BTC: Symbol = ANT_BTC
    COV_USDT: Symbol = COV_USDT
    SWP_USDT: Symbol = SWP_USDT
    TWT_USDT: Symbol = TWT_USDT
    TWT_BTC: Symbol = TWT_BTC
    OM_USDT: Symbol = OM_USDT
    OM_BTC: Symbol = OM_BTC
    ADX_USDT: Symbol = ADX_USDT
    AVAX3L_USDT: Symbol = AVAX3L_USDT
    AVAX3S_USDT: Symbol = AVAX3S_USDT
    MANA3L_USDT: Symbol = MANA3L_USDT
    MANA3S_USDT: Symbol = MANA3S_USDT
    GLM_USDT: Symbol = GLM_USDT
    GLM_BTC: Symbol = GLM_BTC
    NUM_USDT: Symbol = NUM_USDT
    VLX_USDT: Symbol = VLX_USDT
    VLX_BTC: Symbol = VLX_BTC
    TRADE_USDT: Symbol = TRADE_USDT
    TRADE_BTC: Symbol = TRADE_BTC
    ONEEARTH_USDT: Symbol = ONEEARTH_USDT
    MONI_USDT: Symbol = MONI_USDT
    LIKE_USDT: Symbol = LIKE_USDT
    LIT_USDT: Symbol = LIT_USDT
    LIT_BTC: Symbol = LIT_BTC
    KAVA_USDT: Symbol = KAVA_USDT
    SFP_USDT: Symbol = SFP_USDT
    SFP_BTC: Symbol = SFP_BTC
    BURGER_USDT: Symbol = BURGER_USDT
    BURGER_BTC: Symbol = BURGER_BTC
    ILA_USDT: Symbol = ILA_USDT
    CREAM_USDT: Symbol = CREAM_USDT
    CREAM_BTC: Symbol = CREAM_BTC
    RSR_USDT: Symbol = RSR_USDT
    RSR_BTC: Symbol = RSR_BTC
    BUY_BTC: Symbol = BUY_BTC
    IMX_USDT: Symbol = IMX_USDT
    GODS_USDT: Symbol = GODS_USDT
    KMA_USDT: Symbol = KMA_USDT
    SRM_USDT: Symbol = SRM_USDT
    SRM_BTC: Symbol = SRM_BTC
    POLC_USDT: Symbol = POLC_USDT
    XTAG_USDT: Symbol = XTAG_USDT
    MNET_USDT: Symbol = MNET_USDT
    NGC_USDT: Symbol = NGC_USDT
    HARD_USDT: Symbol = HARD_USDT
    GALAX3L_USDT: Symbol = GALAX3L_USDT
    GALAX3S_USDT: Symbol = GALAX3S_USDT
    UNIC_USDT: Symbol = UNIC_USDT
    POND_USDT: Symbol = POND_USDT
    POND_BTC: Symbol = POND_BTC
    VR_USDT: Symbol = VR_USDT
    EPIK_USDT: Symbol = EPIK_USDT
    NGL_USDT: Symbol = NGL_USDT
    NGL_BTC: Symbol = NGL_BTC
    KDON_USDT: Symbol = KDON_USDT
    PEL_USDT: Symbol = PEL_USDT
    CIRUS_ETH: Symbol = CIRUS_ETH
    LINA_USDT: Symbol = LINA_USDT
    LINA_BTC: Symbol = LINA_BTC
    KLAY_USDT: Symbol = KLAY_USDT
    KLAY_BTC: Symbol = KLAY_BTC
    CREDI_USDT: Symbol = CREDI_USDT
    TRVL_USDT: Symbol = TRVL_USDT
    LACE_USDT: Symbol = LACE_USDT
    LACE_ETH: Symbol = LACE_ETH
    ARKER_USDT: Symbol = ARKER_USDT
    BONDLY_USDT: Symbol = BONDLY_USDT
    BONDLY_ETH: Symbol = BONDLY_ETH
    XEC_USDT: Symbol = XEC_USDT
    HEART_USDT: Symbol = HEART_USDT
    HEART_BTC: Symbol = HEART_BTC
    UNB_USDT: Symbol = UNB_USDT
    GAFI_USDT: Symbol = GAFI_USDT
    KOL_USDT: Symbol = KOL_USDT
    KOL_ETH: Symbol = KOL_ETH
    H3RO3S_USDT: Symbol = H3RO3S_USDT
    FALCONS_USDT: Symbol = FALCONS_USDT
    UFO_USDT: Symbol = UFO_USDT
    CHMB_USDT: Symbol = CHMB_USDT
    GEEQ_USDT: Symbol = GEEQ_USDT
    ORC_USDT: Symbol = ORC_USDT
    RACEFI_USDT: Symbol = RACEFI_USDT
    PEOPLE_USDT: Symbol = PEOPLE_USDT
    ADS_USDT: Symbol = ADS_USDT
    ADS_BTC: Symbol = ADS_BTC
    OCEAN_USDT: Symbol = OCEAN_USDT
    SOS_USDT: Symbol = SOS_USDT
    WHALE_USDT: Symbol = WHALE_USDT
    TIME_USDT: Symbol = TIME_USDT
    CWEB_USDT: Symbol = CWEB_USDT
    IOTA_USDT: Symbol = IOTA_USDT
    IOTA_BTC: Symbol = IOTA_BTC
    HNT_USDT: Symbol = HNT_USDT
    HNT_BTC: Symbol = HNT_BTC
    GGG_USDT: Symbol = GGG_USDT
    REVU_USDT: Symbol = REVU_USDT
    CLH_USDT: Symbol = CLH_USDT
    PLGR_USDT: Symbol = PLGR_USDT
    GLMR_USDT: Symbol = GLMR_USDT
    GLMR_BTC: Symbol = GLMR_BTC
    CTC_USDT: Symbol = CTC_USDT
    CTC_BTC: Symbol = CTC_BTC
    GARI_USDT: Symbol = GARI_USDT
    FRR_USDT: Symbol = FRR_USDT
    ASTR_USDT: Symbol = ASTR_USDT
    ASTR_BTC: Symbol = ASTR_BTC
    ERTHA_USDT: Symbol = ERTHA_USDT
    FCON_USDT: Symbol = FCON_USDT
    ACA_USDT: Symbol = ACA_USDT
    ACA_BTC: Symbol = ACA_BTC
    MTS_USDT: Symbol = MTS_USDT
    ROAR_USDT: Symbol = ROAR_USDT
    HBB_USDT: Symbol = HBB_USDT
    CVX_USDT: Symbol = CVX_USDT
    AMP_USDT: Symbol = AMP_USDT
    ACT_USDT: Symbol = ACT_USDT
    MJT_USDT: Symbol = MJT_USDT
    MJT_KCS: Symbol = MJT_KCS
    SHX_USDT: Symbol = SHX_USDT
    SHX_BTC: Symbol = SHX_BTC
    STARLY_USDT: Symbol = STARLY_USDT
    ONSTON_USDT: Symbol = ONSTON_USDT
    RANKER_USDT: Symbol = RANKER_USDT
    WMT_USDT: Symbol = WMT_USDT
    XNO_USDT: Symbol = XNO_USDT
    XNO_BTC: Symbol = XNO_BTC
    MARS4_USDT: Symbol = MARS4_USDT
    TFUEL_USDT: Symbol = TFUEL_USDT
    TFUEL_BTC: Symbol = TFUEL_BTC
    METIS_USDT: Symbol = METIS_USDT
    LAVAX_USDT: Symbol = LAVAX_USDT
    WAL_USDT: Symbol = WAL_USDT
    BULL_USDT: Symbol = BULL_USDT
    SON_USDT: Symbol = SON_USDT
    MELOS_USDT: Symbol = MELOS_USDT
    APE_USDT: Symbol = APE_USDT
    GMT_USDT: Symbol = GMT_USDT
    BICO_USDT: Symbol = BICO_USDT
    STG_USDT: Symbol = STG_USDT
    LMR_USDT: Symbol = LMR_USDT
    LMR_BTC: Symbol = LMR_BTC
    LOKA_USDT: Symbol = LOKA_USDT
    URUS_USDT: Symbol = URUS_USDT
    JAM_USDT: Symbol = JAM_USDT
    JAM_ETH: Symbol = JAM_ETH
    BNC_USDT: Symbol = BNC_USDT
    LBP_USDT: Symbol = LBP_USDT
    CFX_USDT: Symbol = CFX_USDT
    LOOKS_USDT: Symbol = LOOKS_USDT
    XCN_USDT: Symbol = XCN_USDT
    XCN_BTC: Symbol = XCN_BTC
    TITAN_USDT: Symbol = TITAN_USDT
    UPO_USDT: Symbol = UPO_USDT
    SLCL_USDT: Symbol = SLCL_USDT
    CEEK_USDT: Symbol = CEEK_USDT
    NHCT_USDT: Symbol = NHCT_USDT
    ARNM_USDT: Symbol = ARNM_USDT
    FRA_USDT: Symbol = FRA_USDT
    VISION_USDT: Symbol = VISION_USDT
    COCOS_USDT: Symbol = COCOS_USDT
    ALPINE_USDT: Symbol = ALPINE_USDT
    ZBC_USDT: Symbol = ZBC_USDT
    WOOP_USDT: Symbol = WOOP_USDT
    T_USDT: Symbol = T_USDT
    NYM_USDT: Symbol = NYM_USDT
    VOXEL_USDT: Symbol = VOXEL_USDT
    VOXEL_ETH: Symbol = VOXEL_ETH
    PSTAKE_USDT: Symbol = PSTAKE_USDT
    SPA_USDT: Symbol = SPA_USDT
    SPA_ETH: Symbol = SPA_ETH
    SYNR_USDT: Symbol = SYNR_USDT
    DAR_USDT: Symbol = DAR_USDT
    DAR_BTC: Symbol = DAR_BTC
    MV_USDT: Symbol = MV_USDT
    XDEFI_USDT: Symbol = XDEFI_USDT
    RACA_USDT: Symbol = RACA_USDT
    XWG_USDT: Symbol = XWG_USDT
    HAWK_USDT: Symbol = HAWK_USDT
    TRVL_BTC: Symbol = TRVL_BTC
    SWFTC_USDT: Symbol = SWFTC_USDT
    BRWL_USDT: Symbol = BRWL_USDT
    TAUM_USDT: Symbol = TAUM_USDT
    CELR_USDT: Symbol = CELR_USDT
    AURORA_USDT: Symbol = AURORA_USDT
    POSI_USDT: Symbol = POSI_USDT
    COOHA_USDT: Symbol = COOHA_USDT
    KNC_USDT: Symbol = KNC_USDT
    EPK_USDT: Symbol = EPK_USDT
    PLD_USDT: Symbol = PLD_USDT
    PSL_USDT: Symbol = PSL_USDT
    PKF_USDT: Symbol = PKF_USDT
    OVR_USDT: Symbol = OVR_USDT
    SYS_USDT: Symbol = SYS_USDT
    SYS_BTC: Symbol = SYS_BTC
    BRISE_USDT: Symbol = BRISE_USDT
    DG_USDT: Symbol = DG_USDT
    EPX_USDT: Symbol = EPX_USDT
    GST_USDT: Symbol = GST_USDT
    PLY_USDT: Symbol = PLY_USDT
    GAL_USDT: Symbol = GAL_USDT
    BSW_USDT: Symbol = BSW_USDT
    FITFI_USDT: Symbol = FITFI_USDT
    FSN_USDT: Symbol = FSN_USDT
    H2O_USDT: Symbol = H2O_USDT
    GMM_USDT: Symbol = GMM_USDT
    AKT_USDT: Symbol = AKT_USDT
    SIN_USDT: Symbol = SIN_USDT
    AUSD_USDT: Symbol = AUSD_USDT
    BOBA_USDT: Symbol = BOBA_USDT
    BFC_USDT: Symbol = BFC_USDT
    BIFI_USDT: Symbol = BIFI_USDT
    DFA_USDT: Symbol = DFA_USDT
    MBL_USDT: Symbol = MBL_USDT
    DUSK_USDT: Symbol = DUSK_USDT
    USDD_USDT: Symbol = USDD_USDT
    USDD_USDC: Symbol = USDD_USDC
    FITFI_USDC: Symbol = FITFI_USDC
    APE_USDC: Symbol = APE_USDC
    AVAX_USDC: Symbol = AVAX_USDC
    SHIB_USDC: Symbol = SHIB_USDC
    XCN_USDC: Symbol = XCN_USDC
    TRX_USDC: Symbol = TRX_USDC
    NEAR_USDC: Symbol = NEAR_USDC
    MATIC_USDC: Symbol = MATIC_USDC
    FTM_USDC: Symbol = FTM_USDC
    ZIL_USDC: Symbol = ZIL_USDC
    SOL_USDC: Symbol = SOL_USDC
    MLS_USDT: Symbol = MLS_USDT
    AFK_USDT: Symbol = AFK_USDT
    AFK_USDC: Symbol = AFK_USDC
    ACH_USDT: Symbol = ACH_USDT
    SCRT_USDT: Symbol = SCRT_USDT
    SCRT_BTC: Symbol = SCRT_BTC
    APE3L_USDT: Symbol = APE3L_USDT
    APE3S_USDT: Symbol = APE3S_USDT
    STORE_USDT: Symbol = STORE_USDT
    STORE_ETH: Symbol = STORE_ETH
    GMT3L_USDT: Symbol = GMT3L_USDT
    GMT3S_USDT: Symbol = GMT3S_USDT
    CCD_USDT: Symbol = CCD_USDT
    DOSE_USDC: Symbol = DOSE_USDC
    LUNC_USDT: Symbol = LUNC_USDT
    LUNC_USDC: Symbol = LUNC_USDC
    USTC_USDT: Symbol = USTC_USDT
    USTC_USDC: Symbol = USTC_USDC
    GMT_USDC: Symbol = GMT_USDC
    VRA_USDC: Symbol = VRA_USDC
    DOT_USDC: Symbol = DOT_USDC
    RUNE_USDC: Symbol = RUNE_USDC
    ATOM_USDC: Symbol = ATOM_USDC
    BNB_USDC: Symbol = BNB_USDC
    JASMY_USDC: Symbol = JASMY_USDC
    KCS_USDC: Symbol = KCS_USDC
    KDA_USDC: Symbol = KDA_USDC
    ALGO_USDC: Symbol = ALGO_USDC
    LUNA_USDC: Symbol = LUNA_USDC
    OP_USDT: Symbol = OP_USDT
    OP_USDC: Symbol = OP_USDC
    JASMY3L_USDT: Symbol = JASMY3L_USDT
    JASMY3S_USDT: Symbol = JASMY3S_USDT
    EVER_USDT: Symbol = EVER_USDT
    MOOV_USDT: Symbol = MOOV_USDT
    IHC_USDT: Symbol = IHC_USDT
    ICX_USDT: Symbol = ICX_USDT
    ICX_ETH: Symbol = ICX_ETH
    BTC_BRL: Symbol = BTC_BRL
    ETH_BRL: Symbol = ETH_BRL
    USDT_BRL: Symbol = USDT_BRL
    WELL_USDT: Symbol = WELL_USDT
    FORT_USDT: Symbol = FORT_USDT
    USDP_USDT: Symbol = USDP_USDT
    USDD_TRX: Symbol = USDD_TRX
    BTC_EUR: Symbol = BTC_EUR
    ETH_EUR: Symbol = ETH_EUR
    USDT_EUR: Symbol = USDT_EUR
    CSPR_USDT: Symbol = CSPR_USDT
    CSPR_ETH: Symbol = CSPR_ETH
    WEMIX_USDT: Symbol = WEMIX_USDT
    REV3L_USDT: Symbol = REV3L_USDT
    OLE_USDT: Symbol = OLE_USDT
    LDO_USDT: Symbol = LDO_USDT
    LDO_USDC: Symbol = LDO_USDC
    CULT_USDT: Symbol = CULT_USDT
    SWFTC_USDC: Symbol = SWFTC_USDC
    FIDA_USDT: Symbol = FIDA_USDT
    BUSD_USDT: Symbol = BUSD_USDT
    RBP_USDT: Symbol = RBP_USDT
    SRBP_USDT: Symbol = SRBP_USDT
    HIBAYC_USDT: Symbol = HIBAYC_USDT
    BUSD_USDC: Symbol = BUSD_USDC
    OGV_USDT: Symbol = OGV_USDT
    WOMBAT_USDT: Symbol = WOMBAT_USDT
    HIPUNKS_USDT: Symbol = HIPUNKS_USDT
    FT_USDT: Symbol = FT_USDT
    ETC_USDC: Symbol = ETC_USDC
    HIENS4_USDT: Symbol = HIENS4_USDT
    EGAME_USDT: Symbol = EGAME_USDT
    EGAME_BTC: Symbol = EGAME_BTC
    STEPWATCH_USDT: Symbol = STEPWATCH_USDT
    HISAND33_USDT: Symbol = HISAND33_USDT
    DC_USDT: Symbol = DC_USDT
    NEER_USDT: Symbol = NEER_USDT
    RVN_USDT: Symbol = RVN_USDT
    HIENS3_USDT: Symbol = HIENS3_USDT
    MC_USDT: Symbol = MC_USDT
    PEEL_USDT: Symbol = PEEL_USDT
    PEEL_BTC: Symbol = PEEL_BTC
    SDL_USDT: Symbol = SDL_USDT
    SDL_BTC: Symbol = SDL_BTC
    SWEAT_USDT: Symbol = SWEAT_USDT
    HIODBS_USDT: Symbol = HIODBS_USDT
    CMP_USDT: Symbol = CMP_USDT
    PIX_USDT: Symbol = PIX_USDT
    MPLX_USDT: Symbol = MPLX_USDT
    HIDOODLES_USDT: Symbol = HIDOODLES_USDT
    ETHW_USDT: Symbol = ETHW_USDT
    QUARTZ_USDT: Symbol = QUARTZ_USDT
    ACQ_USDT: Symbol = ACQ_USDT
    ACQ_USDC: Symbol = ACQ_USDC
    AOG_USDT: Symbol = AOG_USDT
    HIMAYC_USDT: Symbol = HIMAYC_USDT
    PRMX_USDT: Symbol = PRMX_USDT
    RED_USDT: Symbol = RED_USDT
    PUMLX_USDT: Symbol = PUMLX_USDT
    XETA_USDT: Symbol = XETA_USDT
    GEM_USDT: Symbol = GEM_USDT
    DERC_USDT: Symbol = DERC_USDT
    P00LS_USDT: Symbol = P00LS_USDT
    P00LS_USDC: Symbol = P00LS_USDC
    KICKS_USDT: Symbol = KICKS_USDT
    TRIBL_USDT: Symbol = TRIBL_USDT
    GMX_USDT: Symbol = GMX_USDT
    HIOD_USDT: Symbol = HIOD_USDT
    POKT_USDT: Symbol = POKT_USDT
    EFI_USDT: Symbol = EFI_USDT
    APT_USDT: Symbol = APT_USDT
    BBC_USDT: Symbol = BBC_USDT
    EUL_USDT: Symbol = EUL_USDT
    TON_USDT: Symbol = TON_USDT
    PIAS_USDT: Symbol = PIAS_USDT
    HIMEEBITS_USDT: Symbol = HIMEEBITS_USDT
    HISQUIGGLE_USDT: Symbol = HISQUIGGLE_USDT
    XCV_USDT: Symbol = XCV_USDT
    HFT_USDT: Symbol = HFT_USDT
    HFT_USDC: Symbol = HFT_USDC
    ECOX_USDT: Symbol = ECOX_USDT
    AMB_USDT: Symbol = AMB_USDT
    AZERO_USDT: Symbol = AZERO_USDT
    HIFIDENZA_USDT: Symbol = HIFIDENZA_USDT
    BEAT_USDT: Symbol = BEAT_USDT
    NRFB_USDT: Symbol = NRFB_USDT
    NRFB_BTC: Symbol = NRFB_BTC
    HIGAZERS_USDT: Symbol = HIGAZERS_USDT
    NAVI_USDT: Symbol = NAVI_USDT
    CARE_USDT: Symbol = CARE_USDT
    CLUB_USDT: Symbol = CLUB_USDT
    HIPENGUINS_USDT: Symbol = HIPENGUINS_USDT
    ALT_USDT: Symbol = ALT_USDT
    HICLONEX_USDT: Symbol = HICLONEX_USDT
    PRIMAL_USDT: Symbol = PRIMAL_USDT
    PRIMAL_USDC: Symbol = PRIMAL_USDC
    OAS_USDT: Symbol = OAS_USDT
    VEMP_USDC: Symbol = VEMP_USDC
    HICOOLCATS_USDT: Symbol = HICOOLCATS_USDT
    HIAZUKI_USDT: Symbol = HIAZUKI_USDT
    TEM_USDT: Symbol = TEM_USDT
    HIFLUF_USDT: Symbol = HIFLUF_USDT
    HIBIRDS_USDT: Symbol = HIBIRDS_USDT
    BDX_USDT: Symbol = BDX_USDT
    BDX_BTC: Symbol = BDX_BTC
    FLR_USDT: Symbol = FLR_USDT
    FLR_USDC: Symbol = FLR_USDC
    HIMFERS_USDT: Symbol = HIMFERS_USDT
    OSMO_USDT: Symbol = OSMO_USDT
    ASTRA_USDT: Symbol = ASTRA_USDT
    MAGIC_USDT: Symbol = MAGIC_USDT
    SQUAD_USDT: Symbol = SQUAD_USDT
    SIMP_USDT: Symbol = SIMP_USDT
    HIVALHALLA_USDT: Symbol = HIVALHALLA_USDT
    RPL_USDT: Symbol = RPL_USDT
    HIRENGA_USDT: Symbol = HIRENGA_USDT
    KING_USDT: Symbol = KING_USDT
    SHIB2L_USDT: Symbol = SHIB2L_USDT
    SHIB2S_USDT: Symbol = SHIB2S_USDT
    OP2L_USDT: Symbol = OP2L_USDT
    OP2S_USDT: Symbol = OP2S_USDT
    HIGH_USDT: Symbol = HIGH_USDT
    HIGH_ETH: Symbol = HIGH_ETH
    HIUNDEAD_USDT: Symbol = HIUNDEAD_USDT
    AGIX2L_USDT: Symbol = AGIX2L_USDT
    AGIX2S_USDT: Symbol = AGIX2S_USDT
    TRAC_USDT: Symbol = TRAC_USDT
    GRT2L_USDT: Symbol = GRT2L_USDT
    GRT2S_USDT: Symbol = GRT2S_USDT
    APT2L_USDT: Symbol = APT2L_USDT
    APT2S_USDT: Symbol = APT2S_USDT
    GFT_USDT: Symbol = GFT_USDT
    GFT_BTC: Symbol = GFT_BTC
    BLUR_USDT: Symbol = BLUR_USDT
    HIFRIENDS_USDT: Symbol = HIFRIENDS_USDT
    WAXL_USDT: Symbol = WAXL_USDT
    FLOKI_USDT: Symbol = FLOKI_USDT
    SSV_USDT: Symbol = SSV_USDT
    FLOKI_USDC: Symbol = FLOKI_USDC
    ACS_USDT: Symbol = ACS_USDT
    IGU_USDT: Symbol = IGU_USDT
    IGU_BTC: Symbol = IGU_BTC
    BLUR2L_USDT: Symbol = BLUR2L_USDT
    BLUR2S_USDT: Symbol = BLUR2S_USDT
    CSIX_USDT: Symbol = CSIX_USDT
    FET_USDT: Symbol = FET_USDT
    CSIX_ETH: Symbol = CSIX_ETH
    CFX2L_USDT: Symbol = CFX2L_USDT
    CFX2S_USDT: Symbol = CFX2S_USDT
    HISEALS_USDT: Symbol = HISEALS_USDT
    SIDUS_USDT: Symbol = SIDUS_USDT
    GOAL_USDT: Symbol = GOAL_USDT
    AIPAD_USDT: Symbol = AIPAD_USDT
    RDNT_USDT: Symbol = RDNT_USDT
    DPX_USDT: Symbol = DPX_USDT
    SYN_USDT: Symbol = SYN_USDT
    GNS_USDT: Symbol = GNS_USDT
    GRAIL_USDT: Symbol = GRAIL_USDT
    BLZ_USDT: Symbol = BLZ_USDT
    HIBEANZ_USDT: Symbol = HIBEANZ_USDT
    BTC_GBP: Symbol = BTC_GBP
    ETH_GBP: Symbol = ETH_GBP
    USDT_GBP: Symbol = USDT_GBP
    HALO_USDT: Symbol = HALO_USDT
    NXRA_USDT: Symbol = NXRA_USDT
    NXRA_ETH: Symbol = NXRA_ETH
    MINA_USDT: Symbol = MINA_USDT
    XRD_USDT: Symbol = XRD_USDT
    NOM_USDT: Symbol = NOM_USDT
    LQTY_USDT: Symbol = LQTY_USDT
    CFX_BTC: Symbol = CFX_BTC
    CFX_ETH: Symbol = CFX_ETH
    ID_USDT: Symbol = ID_USDT
    ARB_USDT: Symbol = ARB_USDT
    ARB3S_USDT: Symbol = ARB3S_USDT
    ARB3L_USDT: Symbol = ARB3L_USDT
    ID3L_USDT: Symbol = ID3L_USDT
    ID3S_USDT: Symbol = ID3S_USDT
    HMND_USDT: Symbol = HMND_USDT
    BTCUP_USDT: Symbol = BTCUP_USDT
    BTCDOWN_USDT: Symbol = BTCDOWN_USDT
    ETHUP_USDT: Symbol = ETHUP_USDT
    ETHDOWN_USDT: Symbol = ETHDOWN_USDT
    HIFI_USDT: Symbol = HIFI_USDT
    MYRIA_USDT: Symbol = MYRIA_USDT
    SD_USDT: Symbol = SD_USDT
    CGPT_USDT: Symbol = CGPT_USDT
    STRAX_USDT: Symbol = STRAX_USDT
    KAGI_USDT: Symbol = KAGI_USDT
    RLTM_USDT: Symbol = RLTM_USDT
    DYDXUP_USDT: Symbol = DYDXUP_USDT
    DYDXDOWN_USDT: Symbol = DYDXDOWN_USDT
    SXPUP_USDT: Symbol = SXPUP_USDT
    SXPDOWN_USDT: Symbol = SXPDOWN_USDT
    MASKUP_USDT: Symbol = MASKUP_USDT
    MASKDOWN_USDT: Symbol = MASKDOWN_USDT
    OTK_USDT: Symbol = OTK_USDT
    RNDRUP_USDT: Symbol = RNDRUP_USDT
    RNDRDOWN_USDT: Symbol = RNDRDOWN_USDT
    STXUP_USDT: Symbol = STXUP_USDT
    STXDOWN_USDT: Symbol = STXDOWN_USDT
    LINAUP_USDT: Symbol = LINAUP_USDT
    LINADOWN_USDT: Symbol = LINADOWN_USDT
    GPT_USDT: Symbol = GPT_USDT
    BABYDOGE_USDT: Symbol = BABYDOGE_USDT
    PZP_USDT: Symbol = PZP_USDT
    INJDOWN_USDT: Symbol = INJDOWN_USDT
    ETCUP_USDT: Symbol = ETCUP_USDT
    ETCDOWN_USDT: Symbol = ETCDOWN_USDT
    INJUP_USDT: Symbol = INJUP_USDT
    LOCUS_USDT: Symbol = LOCUS_USDT
    IRON_USDT: Symbol = IRON_USDT
    ZPAY_USDT: Symbol = ZPAY_USDT
    IZI_USDT: Symbol = IZI_USDT
    SUI_USDT: Symbol = SUI_USDT
    SUI3S_USDT: Symbol = SUI3S_USDT
    SUI3L_USDT: Symbol = SUI3L_USDT
    PEPE_USDT: Symbol = PEPE_USDT

    def __iter__(self) -> list[Symbol]:
        return iter([OXEN_BTC, OXEN_ETH, NRG_BTC, AVA_USDT, FET_BTC, FET_ETH, ANKR_BTC, XMR_BTC, XMR_ETH, MTV_BTC, MTV_ETH, CRO_BTC, MTV_USDT, KMD_BTC, KMD_USDT, RFOX_USDT, TEL_USDT, TT_USDT, AERGO_USDT, XMR_USDT, TRX_KCS, ATOM_BTC, ATOM_ETH, ATOM_USDT, ATOM_KCS, ETN_USDT, FTM_USDT, VSYS_USDT, OCEAN_BTC, OCEAN_ETH, CHR_BTC, CHR_USDT, FX_BTC, FX_ETH, NIM_BTC, NIM_ETH, COTI_BTC, COTI_USDT, NRG_ETH, BNB_BTC, BNB_USDT, JAR_BTC, JAR_USDT, ALGO_BTC, ALGO_ETH, ALGO_USDT, XEM_BTC, XEM_USDT, CIX100_USDT, XTZ_BTC, XTZ_USDT, ZEC_BTC, ZEC_USDT, ADA_BTC, ADA_USDT, REV_USDT, FORESTPLUS_BTC, FORESTPLUS_USDT, BOLT_BTC, BOLT_USDT, ARPA_USDT, CHZ_BTC, CHZ_USDT, DAPPT_BTC, DAPPT_USDT, NOIA_BTC, NOIA_USDT, WIN_BTC, WIN_USDT, DERO_BTC, DERO_USDT, BTT_USDT, EOSC_USDT, ENQ_BTC, ENQ_USDT, ONE_BTC, ONE_USDT, TOKO_BTC, TOKO_USDT, VID_BTC, VID_USDT, LUNA_USDT, SXP_BTC, SXP_USDT, AKRO_BTC, AKRO_USDT, ROOBEE_BTC, WIN_TRX, MAP_BTC, MAP_USDT, AMPL_BTC, AMPL_USDT, DAG_USDT, POL_USDT, ARX_USDT, NWC_BTC, NWC_USDT, BEPRO_BTC, BEPRO_USDT, VRA_BTC, VRA_USDT, KSM_BTC, KSM_USDT, DASH_USDT, SUTER_USDT, ACOIN_USDT, SUTER_BTC, SENSO_USDT, PRE_BTC, XDB_USDT, SYLO_USDT, WOM_USDT, SENSO_BTC, DGB_USDT, LYXE_USDT, LYXE_ETH, XDB_BTC, STX_BTC, STX_USDT, COMP_USDT, CRO_USDT, KAI_USDT, KAI_BTC, WEST_BTC, WEST_USDT, EWT_BTC, WAVES_USDT, WAVES_BTC, ORN_USDT, AMPL_ETH, BNS_USDT, BNS_BTC, MKR_USDT, SUKU_BTC, MLK_BTC, MLK_USDT, JST_USDT, KAI_ETH, SUKU_USDT, DIA_USDT, DIA_BTC, LINK_BTC, LINK_USDT, DOT_USDT, DOT_BTC, SHA_BTC, SHA_USDT, EWT_USDT, USDJ_USDT, EFX_BTC, CKB_BTC, CKB_USDT, UMA_USDT, ALEPH_USDT, VELO_USDT, SUN_USDT, BUY_USDT, YFI_USDT, OXEN_USDT, UNI_USDT, UOS_USDT, UOS_BTC, NIM_USDT, DEGO_USDT, DEGO_ETH, RFUEL_USDT, FIL_USDT, UBX_ETH, REAP_USDT, AAVE_USDT, AAVE_BTC, TONE_BTC, TONE_ETH, ELF_ETH, AERGO_BTC, IOST_ETH, KCS_USDT, SNX_ETH, KCS_ETH, WAN_ETH, NULS_ETH, QTUM_BTC, MANA_BTC, TEL_BTC, XYO_ETH, ETN_BTC, COV_ETH, VET_BTC, KCS_BTC, CAPP_ETH, ONT_BTC, DAG_ETH, WAN_BTC, KNC_ETH, CRPT_ETH, LTC_USDT, BAX_ETH, BSV_USDT, DENT_ETH, LYM_ETH, TRAC_ETH, ENJ_BTC, WAXP_BTC, DGB_BTC, ELA_BTC, ZIL_BTC, BSV_BTC, XLM_USDT, IOTX_ETH, SOUL_BTC, DOCK_BTC, AMB_ETH, TRX_BTC, XRP_TUSD, NULS_BTC, ETH_DAI, LSK_BTC, GMB_ETH, GMB_BTC, NEO_ETH, OMG_ETH, BTC_TUSD, KAT_USDT, KNC_BTC, ELF_BTC, MANA_ETH, ETC_USDT, ONT_ETH, MKR_BTC, KAT_BTC, XRP_USDC, XYO_BTC, ZRX_BTC, LOOM_ETH, OLT_ETH, OLT_BTC, TRAC_BTC, XLM_ETH, ETH_USDT, BSV_ETH, TRX_ETH, ETN_ETH, AOA_USDT, DENT_BTC, DOCK_ETH, KEY_BTC, EOS_KCS, XLM_BTC, TIME_ETH, CVC_BTC, LSK_ETH, QKC_BTC, AMB_BTC, USDT_TUSD, ETC_ETH, XRP_BTC, NEO_KCS, SNX_USDT, CRPT_BTC, IOTX_BTC, LTC_ETH, XRP_KCS, LTC_KCS, TEL_ETH, DCR_ETH, LYM_USDT, USDT_USDC, ETH_USDC, DAG_BTC, AVA_BTC, BTC_USDT, WAXP_ETH, XRP_USDT, KEY_ETH, VET_ETH, FTM_BTC, USDT_DAI, QKC_ETH, ETH_BTC, MAN_BTC, CPC_ETH, TRX_USDT, BTC_DAI, ONT_USDT, DASH_ETH, BAX_BTC, AVA_ETH, LOOM_BTC, MKR_ETH, COV_BTC, CPC_BTC, REQ_ETH, EOS_BTC, LTC_BTC, XRP_ETH, CAPP_BTC, FTM_ETH, ZRX_ETH, DGB_ETH, VET_USDT, REQ_BTC, UTK_BTC, PLAY_BTC, UTK_ETH, SNX_BTC, NEO_BTC, SOUL_ETH, NEO_USDT, ELA_ETH, OMG_BTC, TIME_BTC, AOA_BTC, ETC_BTC, DCR_BTC, BTC_USDC, ENJ_ETH, IOST_BTC, DASH_BTC, EOS_USDT, EOS_ETH, ZIL_ETH, ETH_TUSD, GAS_BTC, LYM_BTC, BCH_BTC, VSYS_BTC, BCH_USDT, MKR_DAI, SOLVE_BTC, UQC_BTC, UQC_ETH, OPCT_BTC, OPCT_ETH, PRE_USDT, SHR_BTC, SHR_USDT, VIDT_USDT, ROSE_USDT, USDC_USDT, CTI_USDT, CTI_ETH, ETH2_ETH, BUX_BTC, XHV_USDT, PLU_USDT, GRT_USDT, CAS_BTC, CAS_USDT, MSWAP_BTC, MSWAP_USDT, REVV_BTC, REVV_USDT, ONEINCH_USDT, LOC_USDT, API3_USDT, UNFI_USDT, HTR_USDT, FRONT_USDT, FRONT_BTC, WBTC_BTC, WBTC_ETH, MIR_USDT, LTC_USDC, BCH_USDC, HYDRA_USDT, DFI_USDT, DFI_BTC, CRV_USDT, SUSHI_USDT, FRM_USDT, EOS_USDC, BSV_USDC, ZEN_USDT, CUDOS_USDT, ADA_USDC, REN_USDT, LRC_USDT, LINK_USDC, KLV_USDT, KLV_BTC, BOA_USDT, THETA_USDT, QNT_USDT, BAT_USDT, DOGE_USDT, DOGE_USDC, DAO_USDT, STRONG_USDT, TRIAS_USDT, TRIAS_BTC, DOGE_BTC, MITX_BTC, MITX_USDT, CAKE_USDT, ORAI_USDT, ZEE_USDT, LTX_USDT, LTX_BTC, MASK_USDT, KLV_TRX, IDEA_USDT, PHA_USDT, PHA_ETH, BCH_KCS, SRK_USDT, SRK_BTC, ADA_KCS, HTR_BTC, BSV_KCS, DOT_KCS, LINK_KCS, MIR_KCS, BNB_KCS, XLM_KCS, VET_KCS, SWINGBY_USDT, SWINGBY_BTC, XHV_BTC, DASH_KCS, UNI_KCS, AAVE_KCS, DOGE_KCS, ZEC_KCS, XTZ_KCS, GRT_KCS, ALGO_KCS, EWT_KCS, GAS_USDT, AVAX_USDT, AVAX_BTC, KRL_BTC, KRL_USDT, POLK_USDT, POLK_BTC, ENJ_USDT, MANA_USDT, RNDR_USDT, RNDR_BTC, RLY_USDT, ANC_USDT, SKEY_USDT, LAYER_USDT, TARA_USDT, TARA_ETH, IOST_USDT, DYP_USDT, DYP_ETH, XYM_USDT, XYM_BTC, PCX_USDT, PCX_BTC, ORBS_USDT, ORBS_BTC, BTC3L_USDT, BTC3S_USDT, ETH3L_USDT, ETH3S_USDT, ANKR_USDT, DSLA_USDT, DSLA_BTC, SAND_USDT, VAI_USDT, XCUR_USDT, XCUR_BTC, FLUX_USDT, OMG_USDT, ZIL_USDT, DODO_USDT, MAN_USDT, BAX_USDT, BOSON_USDT, BOSON_ETH, PUNDIX_USDT, PUNDIX_BTC, WAXP_USDT, HT_USDT, PDEX_USDT, LABS_USDT, LABS_ETH, GMB_USDT, PHNX_USDT, PHNX_BTC, HAI_USDT, EQZ_USDT, FORTH_USDT, CGG_USDT, UBX_USDT, GHX_USDT, STND_USDT, STND_ETH, TOWER_USDT, TOWER_BTC, ACE_USDT, LOCG_USDT, CARD_USDT, FLY_USDT, CWS_USDT, XDC_USDT, XDC_ETH, STRK_BTC, STRK_ETH, SHIB_USDT, POLX_USDT, KDA_USDT, KDA_BTC, ICP_USDT, ICP_BTC, STC_USDT, STC_BTC, GOVI_USDT, GOVI_BTC, FKX_USDT, CELO_USDT, CELO_BTC, CUSD_USDT, CUSD_BTC, MATIC_USDT, MATIC_BTC, ELA_USDT, CRPT_USDT, OPCT_USDT, OGN_USDT, OGN_BTC, OUSD_USDT, OUSD_BTC, TLOS_USDT, TLOS_BTC, GLQ_USDT, GLQ_BTC, MXC_USDT, ERSDL_USDT, HOTCROSS_USDT, ADA3L_USDT, ADA3S_USDT, HYVE_USDT, HYVE_BTC, DAPPX_USDT, KONO_USDT, PRQ_USDT, MAHA_USDT, MAHA_BTC, FEAR_USDT, PYR_USDT, PYR_BTC, PROM_USDT, PROM_BTC, GLCH_USDT, UNO_USDT, XCAD_USDT, EOS3L_USDT, EOS3S_USDT, BCH3L_USDT, BCH3S_USDT, ELON_USDT, APL_USDT, VEED_USDT, VEED_BTC, DIVI_USDT, PDEX_BTC, POLS_USDT, POLS_BTC, LPOOL_USDT, LPOOL_BTC, LSS_USDT, VET3L_USDT, VET3S_USDT, LTC3L_USDT, LTC3S_USDT, ABBC_USDT, ABBC_BTC, KOK_USDT, ZCX_USDT, ZCX_BTC, NORD_USDT, GMEE_USDT, SFUND_USDT, XAVA_USDT, AI_USDT, IOI_USDT, NFT_USDT, NFT_TRX, MNST_USDT, MEM_USDT, AGIX_USDT, AGIX_BTC, AGIX_ETH, CQT_USDT, AIOZ_USDT, MARSH_USDT, HAPI_USDT, MODEFI_USDT, MODEFI_BTC, YFDAI_USDT, YFDAI_BTC, GENS_USDT, FORM_USDT, ARRR_USDT, ARRR_BTC, TOKO_KCS, LPT_USDT, ASD_USDT, BOND_USDT, HAI_BTC, SOUL_USDT, TWOCRZ_USDT, NEAR_USDT, NEAR_BTC, DFYN_USDT, OOE_USDT, CFG_USDT, CFG_BTC, AXS_USDT, CLV_USDT, ROUTE_USDT, KAR_USDT, EFX_USDT, XDC_BTC, PMON_USDT, DPET_USDT, ERG_USDT, ERG_BTC, SOL_USDT, SLP_USDT, LITH_USDT, LITH_ETH, XCH_USDT, HAKA_USDT, LAYER_BTC, MTL_USDT, MTL_BTC, IOTX_USDT, GALA_USDT, REQ_USDT, TXA_USDT, TXA_USDC, CIRUS_USDT, QI_USDT, QI_BTC, ODDZ_USDT, PNT_USDT, PNT_BTC, XPR_USDT, XPR_BTC, TRIBE_USDT, MOVR_USDT, MOVR_ETH, WOO_USDT, WILD_USDT, QRDO_USDT, QRDO_ETH, MAKI_USDT, MAKI_BTC, OXT_USDT, OXT_BTC, OXT_ETH, BAL_USDT, BAL_BTC, BAL_ETH, STORJ_USDT, STORJ_BTC, STORJ_ETH, YGG_USDT, NDAU_USDT, SDAO_USDT, SDAO_ETH, XRP3L_USDT, XRP3S_USDT, SKL_USDT, SKL_BTC, NMR_USDT, NMR_BTC, IXS_USDT, TRB_USDT, TRB_BTC, DYDX_USDT, XYO_USDT, GTC_USDT, GTC_BTC, EQX_USDT, EQX_BTC, RLC_USDT, RLC_BTC, XPRT_USDT, EGLD_USDT, EGLD_BTC, HBAR_USDT, HBAR_BTC, DOGE3L_USDT, DOGE3S_USDT, FLOW_USDT, FLOW_BTC, NKN_USDT, NKN_BTC, PBX_USDT, SOL3L_USDT, SOL3S_USDT, MLN_USDT, MLN_BTC, XNL_USDT, SOLVE_USDT, DMTR_USDT, LINK3L_USDT, LINK3S_USDT, DOT3L_USDT, DOT3S_USDT, CTSI_USDT, CTSI_BTC, ALICE_USDT, ALICE_BTC, ALICE_ETH, OPUL_USDT, ILV_USDT, BAND_USDT, BAND_BTC, FTT_USDT, FTT_BTC, DVPN_USDT, SKU_USDT, SKU_BTC, SLIM_USDT, TLM_USDT, TLM_BTC, TLM_ETH, DEXE_USDT, DEXE_BTC, DEXE_ETH, MATTER_USDT, CUDOS_BTC, RUNE_USDT, RUNE_BTC, RMRK_USDT, C98_USDT, BLOK_USDT, SOLR_USDT, ATOM3L_USDT, ATOM3S_USDT, UNI3L_USDT, UNI3S_USDT, WSIENNA_USDT, PUSH_USDT, PUSH_BTC, FORM_ETH, NTVRK_USDT, NTVRK_USDC, AXS3L_USDT, AXS3S_USDT, FTM3L_USDT, FTM3S_USDT, FLAME_USDT, AGLD_USDT, NAKA_USDT, YLD_USDT, TONE_USDT, REEF_USDT, REEF_BTC, TIDAL_USDT, TVK_USDT, TVK_BTC, INJ_USDT, INJ_BTC, BNB3L_USDT, BNB3S_USDT, MATIC3L_USDT, MATIC3S_USDT, VEGA_USDT, VEGA_ETH, ALPHA_USDT, ALPHA_BTC, UNO_BTC, ZKT_USDT, AR_USDT, AR_BTC, JASMY_USDT, PERP_USDT, PERP_BTC, SCLP_USDT, SCLP_BTC, SUPER_USDT, SUPER_BTC, CPOOL_USDT, HERO_USDT, BASIC_USDT, XED_USDT, XED_BTC, AURY_USDT, SWASH_USDT, LTO_USDT, LTO_BTC, BUX_USDT, MTRG_USDT, DREAMS_USDT, SHIB_DOGE, QUICK_USDT, QUICK_BTC, TRU_USDT, TRU_BTC, WRX_USDT, WRX_BTC, SUSHI3L_USDT, SUSHI3S_USDT, NEAR3L_USDT, NEAR3S_USDT, DATA_USDT, DATA_BTC, NORD_BTC, ISP_USDT, CERE_USDT, SHILL_USDT, HEGIC_USDT, HEGIC_BTC, ERN_USDT, ERN_BTC, FTG_USDT, PAXG_USDT, PAXG_BTC, AUDIO_USDT, AUDIO_BTC, ENS_USDT, AAVE3L_USDT, AAVE3S_USDT, SAND3L_USDT, SAND3S_USDT, XTM_USDT, MNW_USDT, FXS_USDT, FXS_BTC, ATA_USDT, ATA_BTC, VXV_USDT, LRC_BTC, LRC_ETH, DPR_USDT, CWAR_USDT, CWAR_BTC, FLUX_BTC, PBR_USDT, ANT_USDT, ANT_BTC, COV_USDT, SWP_USDT, TWT_USDT, TWT_BTC, OM_USDT, OM_BTC, ADX_USDT, AVAX3L_USDT, AVAX3S_USDT, MANA3L_USDT, MANA3S_USDT, GLM_USDT, GLM_BTC, NUM_USDT, VLX_USDT, VLX_BTC, TRADE_USDT, TRADE_BTC, ONEEARTH_USDT, MONI_USDT, LIKE_USDT, LIT_USDT, LIT_BTC, KAVA_USDT, SFP_USDT, SFP_BTC, BURGER_USDT, BURGER_BTC, ILA_USDT, CREAM_USDT, CREAM_BTC, RSR_USDT, RSR_BTC, BUY_BTC, IMX_USDT, GODS_USDT, KMA_USDT, SRM_USDT, SRM_BTC, POLC_USDT, XTAG_USDT, MNET_USDT, NGC_USDT, HARD_USDT, GALAX3L_USDT, GALAX3S_USDT, UNIC_USDT, POND_USDT, POND_BTC, VR_USDT, EPIK_USDT, NGL_USDT, NGL_BTC, KDON_USDT, PEL_USDT, CIRUS_ETH, LINA_USDT, LINA_BTC, KLAY_USDT, KLAY_BTC, CREDI_USDT, TRVL_USDT, LACE_USDT, LACE_ETH, ARKER_USDT, BONDLY_USDT, BONDLY_ETH, XEC_USDT, HEART_USDT, HEART_BTC, UNB_USDT, GAFI_USDT, KOL_USDT, KOL_ETH, H3RO3S_USDT, FALCONS_USDT, UFO_USDT, CHMB_USDT, GEEQ_USDT, ORC_USDT, RACEFI_USDT, PEOPLE_USDT, ADS_USDT, ADS_BTC, OCEAN_USDT, SOS_USDT, WHALE_USDT, TIME_USDT, CWEB_USDT, IOTA_USDT, IOTA_BTC, HNT_USDT, HNT_BTC, GGG_USDT, REVU_USDT, CLH_USDT, PLGR_USDT, GLMR_USDT, GLMR_BTC, CTC_USDT, CTC_BTC, GARI_USDT, FRR_USDT, ASTR_USDT, ASTR_BTC, ERTHA_USDT, FCON_USDT, ACA_USDT, ACA_BTC, MTS_USDT, ROAR_USDT, HBB_USDT, CVX_USDT, AMP_USDT, ACT_USDT, MJT_USDT, MJT_KCS, SHX_USDT, SHX_BTC, STARLY_USDT, ONSTON_USDT, RANKER_USDT, WMT_USDT, XNO_USDT, XNO_BTC, MARS4_USDT, TFUEL_USDT, TFUEL_BTC, METIS_USDT, LAVAX_USDT, WAL_USDT, BULL_USDT, SON_USDT, MELOS_USDT, APE_USDT, GMT_USDT, BICO_USDT, STG_USDT, LMR_USDT, LMR_BTC, LOKA_USDT, URUS_USDT, JAM_USDT, JAM_ETH, BNC_USDT, LBP_USDT, CFX_USDT, LOOKS_USDT, XCN_USDT, XCN_BTC, TITAN_USDT, UPO_USDT, SLCL_USDT, CEEK_USDT, NHCT_USDT, ARNM_USDT, FRA_USDT, VISION_USDT, COCOS_USDT, ALPINE_USDT, ZBC_USDT, WOOP_USDT, T_USDT, NYM_USDT, VOXEL_USDT, VOXEL_ETH, PSTAKE_USDT, SPA_USDT, SPA_ETH, SYNR_USDT, DAR_USDT, DAR_BTC, MV_USDT, XDEFI_USDT, RACA_USDT, XWG_USDT, HAWK_USDT, TRVL_BTC, SWFTC_USDT, BRWL_USDT, TAUM_USDT, CELR_USDT, AURORA_USDT, POSI_USDT, COOHA_USDT, KNC_USDT, EPK_USDT, PLD_USDT, PSL_USDT, PKF_USDT, OVR_USDT, SYS_USDT, SYS_BTC, BRISE_USDT, DG_USDT, EPX_USDT, GST_USDT, PLY_USDT, GAL_USDT, BSW_USDT, FITFI_USDT, FSN_USDT, H2O_USDT, GMM_USDT, AKT_USDT, SIN_USDT, AUSD_USDT, BOBA_USDT, BFC_USDT, BIFI_USDT, DFA_USDT, MBL_USDT, DUSK_USDT, USDD_USDT, USDD_USDC, FITFI_USDC, APE_USDC, AVAX_USDC, SHIB_USDC, XCN_USDC, TRX_USDC, NEAR_USDC, MATIC_USDC, FTM_USDC, ZIL_USDC, SOL_USDC, MLS_USDT, AFK_USDT, AFK_USDC, ACH_USDT, SCRT_USDT, SCRT_BTC, APE3L_USDT, APE3S_USDT, STORE_USDT, STORE_ETH, GMT3L_USDT, GMT3S_USDT, CCD_USDT, DOSE_USDC, LUNC_USDT, LUNC_USDC, USTC_USDT, USTC_USDC, GMT_USDC, VRA_USDC, DOT_USDC, RUNE_USDC, ATOM_USDC, BNB_USDC, JASMY_USDC, KCS_USDC, KDA_USDC, ALGO_USDC, LUNA_USDC, OP_USDT, OP_USDC, JASMY3L_USDT, JASMY3S_USDT, EVER_USDT, MOOV_USDT, IHC_USDT, ICX_USDT, ICX_ETH, BTC_BRL, ETH_BRL, USDT_BRL, WELL_USDT, FORT_USDT, USDP_USDT, USDD_TRX, BTC_EUR, ETH_EUR, USDT_EUR, CSPR_USDT, CSPR_ETH, WEMIX_USDT, REV3L_USDT, OLE_USDT, LDO_USDT, LDO_USDC, CULT_USDT, SWFTC_USDC, FIDA_USDT, BUSD_USDT, RBP_USDT, SRBP_USDT, HIBAYC_USDT, BUSD_USDC, OGV_USDT, WOMBAT_USDT, HIPUNKS_USDT, FT_USDT, ETC_USDC, HIENS4_USDT, EGAME_USDT, EGAME_BTC, STEPWATCH_USDT, HISAND33_USDT, DC_USDT, NEER_USDT, RVN_USDT, HIENS3_USDT, MC_USDT, PEEL_USDT, PEEL_BTC, SDL_USDT, SDL_BTC, SWEAT_USDT, HIODBS_USDT, CMP_USDT, PIX_USDT, MPLX_USDT, HIDOODLES_USDT, ETHW_USDT, QUARTZ_USDT, ACQ_USDT, ACQ_USDC, AOG_USDT, HIMAYC_USDT, PRMX_USDT, RED_USDT, PUMLX_USDT, XETA_USDT, GEM_USDT, DERC_USDT, P00LS_USDT, P00LS_USDC, KICKS_USDT, TRIBL_USDT, GMX_USDT, HIOD_USDT, POKT_USDT, EFI_USDT, APT_USDT, BBC_USDT, EUL_USDT, TON_USDT, PIAS_USDT, HIMEEBITS_USDT, HISQUIGGLE_USDT, XCV_USDT, HFT_USDT, HFT_USDC, ECOX_USDT, AMB_USDT, AZERO_USDT, HIFIDENZA_USDT, BEAT_USDT, NRFB_USDT, NRFB_BTC, HIGAZERS_USDT, NAVI_USDT, CARE_USDT, CLUB_USDT, HIPENGUINS_USDT, ALT_USDT, HICLONEX_USDT, PRIMAL_USDT, PRIMAL_USDC, OAS_USDT, VEMP_USDC, HICOOLCATS_USDT, HIAZUKI_USDT, TEM_USDT, HIFLUF_USDT, HIBIRDS_USDT, BDX_USDT, BDX_BTC, FLR_USDT, FLR_USDC, HIMFERS_USDT, OSMO_USDT, ASTRA_USDT, MAGIC_USDT, SQUAD_USDT, SIMP_USDT, HIVALHALLA_USDT, RPL_USDT, HIRENGA_USDT, KING_USDT, SHIB2L_USDT, SHIB2S_USDT, OP2L_USDT, OP2S_USDT, HIGH_USDT, HIGH_ETH, HIUNDEAD_USDT, AGIX2L_USDT, AGIX2S_USDT, TRAC_USDT, GRT2L_USDT, GRT2S_USDT, APT2L_USDT, APT2S_USDT, GFT_USDT, GFT_BTC, BLUR_USDT, HIFRIENDS_USDT, WAXL_USDT, FLOKI_USDT, SSV_USDT, FLOKI_USDC, ACS_USDT, IGU_USDT, IGU_BTC, BLUR2L_USDT, BLUR2S_USDT, CSIX_USDT, FET_USDT, CSIX_ETH, CFX2L_USDT, CFX2S_USDT, HISEALS_USDT, SIDUS_USDT, GOAL_USDT, AIPAD_USDT, RDNT_USDT, DPX_USDT, SYN_USDT, GNS_USDT, GRAIL_USDT, BLZ_USDT, HIBEANZ_USDT, BTC_GBP, ETH_GBP, USDT_GBP, HALO_USDT, NXRA_USDT, NXRA_ETH, MINA_USDT, XRD_USDT, NOM_USDT, LQTY_USDT, CFX_BTC, CFX_ETH, ID_USDT, ARB_USDT, ARB3S_USDT, ARB3L_USDT, ID3L_USDT, ID3S_USDT, HMND_USDT, BTCUP_USDT, BTCDOWN_USDT, ETHUP_USDT, ETHDOWN_USDT, HIFI_USDT, MYRIA_USDT, SD_USDT, CGPT_USDT, STRAX_USDT, KAGI_USDT, RLTM_USDT, DYDXUP_USDT, DYDXDOWN_USDT, SXPUP_USDT, SXPDOWN_USDT, MASKUP_USDT, MASKDOWN_USDT, OTK_USDT, RNDRUP_USDT, RNDRDOWN_USDT, STXUP_USDT, STXDOWN_USDT, LINAUP_USDT, LINADOWN_USDT, GPT_USDT, BABYDOGE_USDT, PZP_USDT, INJDOWN_USDT, ETCUP_USDT, ETCDOWN_USDT, INJUP_USDT, LOCUS_USDT, IRON_USDT, ZPAY_USDT, IZI_USDT, SUI_USDT, SUI3S_USDT, SUI3L_USDT, PEPE_USDT])

kucoin = Kucoin()
