from dataclasses import dataclass


@dataclass(slots=True, frozen=True)
class OXEN_BTC:
    """
        name: LOKI-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOKI-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKI-BTC"

    def __str__(self):
        return "LOKI-BTC"

    def __call__(self):
        return "LOKI-BTC"


OXEN_BTC = OXEN_BTC()
"""
    name: LOKI-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OXEN_ETH:
    """
        name: LOKI-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOKI-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKI-ETH"

    def __str__(self):
        return "LOKI-ETH"

    def __call__(self):
        return "LOKI-ETH"


OXEN_ETH = OXEN_ETH()
"""
    name: LOKI-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NRG_BTC:
    """
        name: NRG-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NRG-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NRG-BTC"

    def __str__(self):
        return "NRG-BTC"

    def __call__(self):
        return "NRG-BTC"


NRG_BTC = NRG_BTC()
"""
    name: NRG-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AVA_USDT:
    """
        name: AVA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AVA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVA-USDT"

    def __str__(self):
        return "AVA-USDT"

    def __call__(self):
        return "AVA-USDT"


AVA_USDT = AVA_USDT()
"""
    name: AVA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FET_BTC:
    """
        name: FET-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FET-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FET-BTC"

    def __str__(self):
        return "FET-BTC"

    def __call__(self):
        return "FET-BTC"


FET_BTC = FET_BTC()
"""
    name: FET-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FET_ETH:
    """
        name: FET-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FET-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FET-ETH"

    def __str__(self):
        return "FET-ETH"

    def __call__(self):
        return "FET-ETH"


FET_ETH = FET_ETH()
"""
    name: FET-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ANKR_BTC:
    """
        name: ANKR-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ANKR-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKR-BTC"

    def __str__(self):
        return "ANKR-BTC"

    def __call__(self):
        return "ANKR-BTC"


ANKR_BTC = ANKR_BTC()
"""
    name: ANKR-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XMR_BTC:
    """
        name: XMR-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XMR-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMR-BTC"

    def __str__(self):
        return "XMR-BTC"

    def __call__(self):
        return "XMR-BTC"


XMR_BTC = XMR_BTC()
"""
    name: XMR-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XMR_ETH:
    """
        name: XMR-ETH
        precision: 0.00001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XMR-ETH"
    precision: int = 0.00001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMR-ETH"

    def __str__(self):
        return "XMR-ETH"

    def __call__(self):
        return "XMR-ETH"


XMR_ETH = XMR_ETH()
"""
    name: XMR-ETH
    precision: 0.00001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MTV_BTC:
    """
        name: MTV-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MTV-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTV-BTC"

    def __str__(self):
        return "MTV-BTC"

    def __call__(self):
        return "MTV-BTC"


MTV_BTC = MTV_BTC()
"""
    name: MTV-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MTV_ETH:
    """
        name: MTV-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MTV-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTV-ETH"

    def __str__(self):
        return "MTV-ETH"

    def __call__(self):
        return "MTV-ETH"


MTV_ETH = MTV_ETH()
"""
    name: MTV-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CRO_BTC:
    """
        name: CRO-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CRO-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRO-BTC"

    def __str__(self):
        return "CRO-BTC"

    def __call__(self):
        return "CRO-BTC"


CRO_BTC = CRO_BTC()
"""
    name: CRO-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MTV_USDT:
    """
        name: MTV-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MTV-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTV-USDT"

    def __str__(self):
        return "MTV-USDT"

    def __call__(self):
        return "MTV-USDT"


MTV_USDT = MTV_USDT()
"""
    name: MTV-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KMD_BTC:
    """
        name: KMD-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KMD-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMD-BTC"

    def __str__(self):
        return "KMD-BTC"

    def __call__(self):
        return "KMD-BTC"


KMD_BTC = KMD_BTC()
"""
    name: KMD-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KMD_USDT:
    """
        name: KMD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KMD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMD-USDT"

    def __str__(self):
        return "KMD-USDT"

    def __call__(self):
        return "KMD-USDT"


KMD_USDT = KMD_USDT()
"""
    name: KMD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RFOX_USDT:
    """
        name: RFOX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 5
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RFOX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 5
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RFOX-USDT"

    def __str__(self):
        return "RFOX-USDT"

    def __call__(self):
        return "RFOX-USDT"


RFOX_USDT = RFOX_USDT()
"""
    name: RFOX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 5
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TEL_USDT:
    """
        name: TEL-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TEL-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TEL-USDT"

    def __str__(self):
        return "TEL-USDT"

    def __call__(self):
        return "TEL-USDT"


TEL_USDT = TEL_USDT()
"""
    name: TEL-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TT_USDT:
    """
        name: TT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TT-USDT"

    def __str__(self):
        return "TT-USDT"

    def __call__(self):
        return "TT-USDT"


TT_USDT = TT_USDT()
"""
    name: TT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AERGO_USDT:
    """
        name: AERGO-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AERGO-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGO-USDT"

    def __str__(self):
        return "AERGO-USDT"

    def __call__(self):
        return "AERGO-USDT"


AERGO_USDT = AERGO_USDT()
"""
    name: AERGO-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XMR_USDT:
    """
        name: XMR-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XMR-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XMR-USDT"

    def __str__(self):
        return "XMR-USDT"

    def __call__(self):
        return "XMR-USDT"


XMR_USDT = XMR_USDT()
"""
    name: XMR-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class TRX_KCS:
    """
        name: TRX-KCS
        precision: 0.000001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRX-KCS"
    precision: int = 0.000001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-KCS"

    def __str__(self):
        return "TRX-KCS"

    def __call__(self):
        return "TRX-KCS"


TRX_KCS = TRX_KCS()
"""
    name: TRX-KCS
    precision: 0.000001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ATOM_BTC:
    """
        name: ATOM-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ATOM-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-BTC"

    def __str__(self):
        return "ATOM-BTC"

    def __call__(self):
        return "ATOM-BTC"


ATOM_BTC = ATOM_BTC()
"""
    name: ATOM-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ATOM_ETH:
    """
        name: ATOM-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ATOM-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-ETH"

    def __str__(self):
        return "ATOM-ETH"

    def __call__(self):
        return "ATOM-ETH"


ATOM_ETH = ATOM_ETH()
"""
    name: ATOM-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ATOM_USDT:
    """
        name: ATOM-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ATOM-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-USDT"

    def __str__(self):
        return "ATOM-USDT"

    def __call__(self):
        return "ATOM-USDT"


ATOM_USDT = ATOM_USDT()
"""
    name: ATOM-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ATOM_KCS:
    """
        name: ATOM-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ATOM-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-KCS"

    def __str__(self):
        return "ATOM-KCS"

    def __call__(self):
        return "ATOM-KCS"


ATOM_KCS = ATOM_KCS()
"""
    name: ATOM-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETN_USDT:
    """
        name: ETN-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETN-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETN-USDT"

    def __str__(self):
        return "ETN-USDT"

    def __call__(self):
        return "ETN-USDT"


ETN_USDT = ETN_USDT()
"""
    name: ETN-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FTM_USDT:
    """
        name: FTM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FTM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM-USDT"

    def __str__(self):
        return "FTM-USDT"

    def __call__(self):
        return "FTM-USDT"


FTM_USDT = FTM_USDT()
"""
    name: FTM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class VSYS_USDT:
    """
        name: VSYS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VSYS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VSYS-USDT"

    def __str__(self):
        return "VSYS-USDT"

    def __call__(self):
        return "VSYS-USDT"


VSYS_USDT = VSYS_USDT()
"""
    name: VSYS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OCEAN_BTC:
    """
        name: OCEAN-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OCEAN-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEAN-BTC"

    def __str__(self):
        return "OCEAN-BTC"

    def __call__(self):
        return "OCEAN-BTC"


OCEAN_BTC = OCEAN_BTC()
"""
    name: OCEAN-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OCEAN_ETH:
    """
        name: OCEAN-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OCEAN-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEAN-ETH"

    def __str__(self):
        return "OCEAN-ETH"

    def __call__(self):
        return "OCEAN-ETH"


OCEAN_ETH = OCEAN_ETH()
"""
    name: OCEAN-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CHR_BTC:
    """
        name: CHR-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CHR-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHR-BTC"

    def __str__(self):
        return "CHR-BTC"

    def __call__(self):
        return "CHR-BTC"


CHR_BTC = CHR_BTC()
"""
    name: CHR-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CHR_USDT:
    """
        name: CHR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CHR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHR-USDT"

    def __str__(self):
        return "CHR-USDT"

    def __call__(self):
        return "CHR-USDT"


CHR_USDT = CHR_USDT()
"""
    name: CHR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class FX_BTC:
    """
        name: FX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FX-BTC"

    def __str__(self):
        return "FX-BTC"

    def __call__(self):
        return "FX-BTC"


FX_BTC = FX_BTC()
"""
    name: FX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FX_ETH:
    """
        name: FX-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FX-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FX-ETH"

    def __str__(self):
        return "FX-ETH"

    def __call__(self):
        return "FX-ETH"


FX_ETH = FX_ETH()
"""
    name: FX-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NIM_BTC:
    """
        name: NIM-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NIM-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NIM-BTC"

    def __str__(self):
        return "NIM-BTC"

    def __call__(self):
        return "NIM-BTC"


NIM_BTC = NIM_BTC()
"""
    name: NIM-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NIM_ETH:
    """
        name: NIM-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NIM-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NIM-ETH"

    def __str__(self):
        return "NIM-ETH"

    def __call__(self):
        return "NIM-ETH"


NIM_ETH = NIM_ETH()
"""
    name: NIM-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class COTI_BTC:
    """
        name: COTI-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "COTI-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTI-BTC"

    def __str__(self):
        return "COTI-BTC"

    def __call__(self):
        return "COTI-BTC"


COTI_BTC = COTI_BTC()
"""
    name: COTI-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class COTI_USDT:
    """
        name: COTI-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "COTI-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COTI-USDT"

    def __str__(self):
        return "COTI-USDT"

    def __call__(self):
        return "COTI-USDT"


COTI_USDT = COTI_USDT()
"""
    name: COTI-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NRG_ETH:
    """
        name: NRG-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NRG-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NRG-ETH"

    def __str__(self):
        return "NRG-ETH"

    def __call__(self):
        return "NRG-ETH"


NRG_ETH = NRG_ETH()
"""
    name: NRG-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNB_BTC:
    """
        name: BNB-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BNB-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB-BTC"

    def __str__(self):
        return "BNB-BTC"

    def __call__(self):
        return "BNB-BTC"


BNB_BTC = BNB_BTC()
"""
    name: BNB-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNB_USDT:
    """
        name: BNB-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BNB-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB-USDT"

    def __str__(self):
        return "BNB-USDT"

    def __call__(self):
        return "BNB-USDT"


BNB_USDT = BNB_USDT()
"""
    name: BNB-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class JAR_BTC:
    """
        name: JAR-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "JAR-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JAR-BTC"

    def __str__(self):
        return "JAR-BTC"

    def __call__(self):
        return "JAR-BTC"


JAR_BTC = JAR_BTC()
"""
    name: JAR-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class JAR_USDT:
    """
        name: JAR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "JAR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JAR-USDT"

    def __str__(self):
        return "JAR-USDT"

    def __call__(self):
        return "JAR-USDT"


JAR_USDT = JAR_USDT()
"""
    name: JAR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALGO_BTC:
    """
        name: ALGO-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALGO-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-BTC"

    def __str__(self):
        return "ALGO-BTC"

    def __call__(self):
        return "ALGO-BTC"


ALGO_BTC = ALGO_BTC()
"""
    name: ALGO-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALGO_ETH:
    """
        name: ALGO-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALGO-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-ETH"

    def __str__(self):
        return "ALGO-ETH"

    def __call__(self):
        return "ALGO-ETH"


ALGO_ETH = ALGO_ETH()
"""
    name: ALGO-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALGO_USDT:
    """
        name: ALGO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ALGO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-USDT"

    def __str__(self):
        return "ALGO-USDT"

    def __call__(self):
        return "ALGO-USDT"


ALGO_USDT = ALGO_USDT()
"""
    name: ALGO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XEM_BTC:
    """
        name: XEM-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XEM-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEM-BTC"

    def __str__(self):
        return "XEM-BTC"

    def __call__(self):
        return "XEM-BTC"


XEM_BTC = XEM_BTC()
"""
    name: XEM-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XEM_USDT:
    """
        name: XEM-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XEM-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEM-USDT"

    def __str__(self):
        return "XEM-USDT"

    def __call__(self):
        return "XEM-USDT"


XEM_USDT = XEM_USDT()
"""
    name: XEM-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CIX100_USDT:
    """
        name: CIX100-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CIX100-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CIX100-USDT"

    def __str__(self):
        return "CIX100-USDT"

    def __call__(self):
        return "CIX100-USDT"


CIX100_USDT = CIX100_USDT()
"""
    name: CIX100-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XTZ_BTC:
    """
        name: XTZ-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XTZ-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZ-BTC"

    def __str__(self):
        return "XTZ-BTC"

    def __call__(self):
        return "XTZ-BTC"


XTZ_BTC = XTZ_BTC()
"""
    name: XTZ-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XTZ_USDT:
    """
        name: XTZ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XTZ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZ-USDT"

    def __str__(self):
        return "XTZ-USDT"

    def __call__(self):
        return "XTZ-USDT"


XTZ_USDT = XTZ_USDT()
"""
    name: XTZ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ZEC_BTC:
    """
        name: ZEC-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ZEC-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEC-BTC"

    def __str__(self):
        return "ZEC-BTC"

    def __call__(self):
        return "ZEC-BTC"


ZEC_BTC = ZEC_BTC()
"""
    name: ZEC-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ZEC_USDT:
    """
        name: ZEC-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ZEC-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEC-USDT"

    def __str__(self):
        return "ZEC-USDT"

    def __call__(self):
        return "ZEC-USDT"


ZEC_USDT = ZEC_USDT()
"""
    name: ZEC-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ADA_BTC:
    """
        name: ADA-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ADA-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA-BTC"

    def __str__(self):
        return "ADA-BTC"

    def __call__(self):
        return "ADA-BTC"


ADA_BTC = ADA_BTC()
"""
    name: ADA-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ADA_USDT:
    """
        name: ADA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ADA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA-USDT"

    def __str__(self):
        return "ADA-USDT"

    def __call__(self):
        return "ADA-USDT"


ADA_USDT = ADA_USDT()
"""
    name: ADA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class REV_USDT:
    """
        name: R-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "R-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "R-USDT"

    def __str__(self):
        return "R-USDT"

    def __call__(self):
        return "R-USDT"


REV_USDT = REV_USDT()
"""
    name: R-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WXT_BTC:
    """
        name: WXT-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WXT-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WXT-BTC"

    def __str__(self):
        return "WXT-BTC"

    def __call__(self):
        return "WXT-BTC"


WXT_BTC = WXT_BTC()
"""
    name: WXT-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WXT_USDT:
    """
        name: WXT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WXT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WXT-USDT"

    def __str__(self):
        return "WXT-USDT"

    def __call__(self):
        return "WXT-USDT"


WXT_USDT = WXT_USDT()
"""
    name: WXT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FORESTPLUS_BTC:
    """
        name: FORESTPLUS-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FORESTPLUS-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORESTPLUS-BTC"

    def __str__(self):
        return "FORESTPLUS-BTC"

    def __call__(self):
        return "FORESTPLUS-BTC"


FORESTPLUS_BTC = FORESTPLUS_BTC()
"""
    name: FORESTPLUS-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FORESTPLUS_USDT:
    """
        name: FORESTPLUS-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FORESTPLUS-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORESTPLUS-USDT"

    def __str__(self):
        return "FORESTPLUS-USDT"

    def __call__(self):
        return "FORESTPLUS-USDT"


FORESTPLUS_USDT = FORESTPLUS_USDT()
"""
    name: FORESTPLUS-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BOLT_BTC:
    """
        name: BOLT-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BOLT-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOLT-BTC"

    def __str__(self):
        return "BOLT-BTC"

    def __call__(self):
        return "BOLT-BTC"


BOLT_BTC = BOLT_BTC()
"""
    name: BOLT-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BOLT_USDT:
    """
        name: BOLT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BOLT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOLT-USDT"

    def __str__(self):
        return "BOLT-USDT"

    def __call__(self):
        return "BOLT-USDT"


BOLT_USDT = BOLT_USDT()
"""
    name: BOLT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ARPA_USDT:
    """
        name: ARPA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ARPA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARPA-USDT"

    def __str__(self):
        return "ARPA-USDT"

    def __call__(self):
        return "ARPA-USDT"


ARPA_USDT = ARPA_USDT()
"""
    name: ARPA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CHZ_BTC:
    """
        name: CHZ-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CHZ-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZ-BTC"

    def __str__(self):
        return "CHZ-BTC"

    def __call__(self):
        return "CHZ-BTC"


CHZ_BTC = CHZ_BTC()
"""
    name: CHZ-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CHZ_USDT:
    """
        name: CHZ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CHZ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHZ-USDT"

    def __str__(self):
        return "CHZ-USDT"

    def __call__(self):
        return "CHZ-USDT"


CHZ_USDT = CHZ_USDT()
"""
    name: CHZ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DAPPT_BTC:
    """
        name: DAPPT-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DAPPT-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAPPT-BTC"

    def __str__(self):
        return "DAPPT-BTC"

    def __call__(self):
        return "DAPPT-BTC"


DAPPT_BTC = DAPPT_BTC()
"""
    name: DAPPT-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DAPPT_USDT:
    """
        name: DAPPT-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DAPPT-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAPPT-USDT"

    def __str__(self):
        return "DAPPT-USDT"

    def __call__(self):
        return "DAPPT-USDT"


DAPPT_USDT = DAPPT_USDT()
"""
    name: DAPPT-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NOIA_BTC:
    """
        name: NOIA-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NOIA-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NOIA-BTC"

    def __str__(self):
        return "NOIA-BTC"

    def __call__(self):
        return "NOIA-BTC"


NOIA_BTC = NOIA_BTC()
"""
    name: NOIA-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NOIA_USDT:
    """
        name: NOIA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NOIA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NOIA-USDT"

    def __str__(self):
        return "NOIA-USDT"

    def __call__(self):
        return "NOIA-USDT"


NOIA_USDT = NOIA_USDT()
"""
    name: NOIA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WIN_BTC:
    """
        name: WIN-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WIN-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WIN-BTC"

    def __str__(self):
        return "WIN-BTC"

    def __call__(self):
        return "WIN-BTC"


WIN_BTC = WIN_BTC()
"""
    name: WIN-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WIN_USDT:
    """
        name: WIN-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "WIN-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WIN-USDT"

    def __str__(self):
        return "WIN-USDT"

    def __call__(self):
        return "WIN-USDT"


WIN_USDT = WIN_USDT()
"""
    name: WIN-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DERO_BTC:
    """
        name: DERO-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DERO-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DERO-BTC"

    def __str__(self):
        return "DERO-BTC"

    def __call__(self):
        return "DERO-BTC"


DERO_BTC = DERO_BTC()
"""
    name: DERO-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DERO_USDT:
    """
        name: DERO-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DERO-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DERO-USDT"

    def __str__(self):
        return "DERO-USDT"

    def __call__(self):
        return "DERO-USDT"


DERO_USDT = DERO_USDT()
"""
    name: DERO-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BTT_USDT:
    """
        name: BTT-USDT
        precision: 0.0000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10000
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BTT-USDT"
    precision: int = 0.0000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10000
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTT-USDT"

    def __str__(self):
        return "BTT-USDT"

    def __call__(self):
        return "BTT-USDT"


BTT_USDT = BTT_USDT()
"""
    name: BTT-USDT
    precision: 0.0000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10000
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class EOSC_USDT:
    """
        name: EOSC-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EOSC-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOSC-USDT"

    def __str__(self):
        return "EOSC-USDT"

    def __call__(self):
        return "EOSC-USDT"


EOSC_USDT = EOSC_USDT()
"""
    name: EOSC-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ENQ_BTC:
    """
        name: ENQ-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ENQ-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENQ-BTC"

    def __str__(self):
        return "ENQ-BTC"

    def __call__(self):
        return "ENQ-BTC"


ENQ_BTC = ENQ_BTC()
"""
    name: ENQ-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ENQ_USDT:
    """
        name: ENQ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ENQ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENQ-USDT"

    def __str__(self):
        return "ENQ-USDT"

    def __call__(self):
        return "ENQ-USDT"


ENQ_USDT = ENQ_USDT()
"""
    name: ENQ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ONE_BTC:
    """
        name: ONE-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ONE-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONE-BTC"

    def __str__(self):
        return "ONE-BTC"

    def __call__(self):
        return "ONE-BTC"


ONE_BTC = ONE_BTC()
"""
    name: ONE-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ONE_USDT:
    """
        name: ONE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ONE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONE-USDT"

    def __str__(self):
        return "ONE-USDT"

    def __call__(self):
        return "ONE-USDT"


ONE_USDT = ONE_USDT()
"""
    name: ONE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class TOKO_BTC:
    """
        name: TOKO-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TOKO-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOKO-BTC"

    def __str__(self):
        return "TOKO-BTC"

    def __call__(self):
        return "TOKO-BTC"


TOKO_BTC = TOKO_BTC()
"""
    name: TOKO-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TOKO_USDT:
    """
        name: TOKO-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TOKO-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOKO-USDT"

    def __str__(self):
        return "TOKO-USDT"

    def __call__(self):
        return "TOKO-USDT"


TOKO_USDT = TOKO_USDT()
"""
    name: TOKO-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VID_BTC:
    """
        name: VID-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VID-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VID-BTC"

    def __str__(self):
        return "VID-BTC"

    def __call__(self):
        return "VID-BTC"


VID_BTC = VID_BTC()
"""
    name: VID-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VID_USDT:
    """
        name: VID-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VID-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VID-USDT"

    def __str__(self):
        return "VID-USDT"

    def __call__(self):
        return "VID-USDT"


VID_USDT = VID_USDT()
"""
    name: VID-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LUNA_USDT:
    """
        name: LUNA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LUNA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNA-USDT"

    def __str__(self):
        return "LUNA-USDT"

    def __call__(self):
        return "LUNA-USDT"


LUNA_USDT = LUNA_USDT()
"""
    name: LUNA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SXP_BTC:
    """
        name: SXP-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SXP-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXP-BTC"

    def __str__(self):
        return "SXP-BTC"

    def __call__(self):
        return "SXP-BTC"


SXP_BTC = SXP_BTC()
"""
    name: SXP-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SXP_USDT:
    """
        name: SXP-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SXP-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SXP-USDT"

    def __str__(self):
        return "SXP-USDT"

    def __call__(self):
        return "SXP-USDT"


SXP_USDT = SXP_USDT()
"""
    name: SXP-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class AKRO_BTC:
    """
        name: AKRO-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AKRO-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKRO-BTC"

    def __str__(self):
        return "AKRO-BTC"

    def __call__(self):
        return "AKRO-BTC"


AKRO_BTC = AKRO_BTC()
"""
    name: AKRO-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AKRO_USDT:
    """
        name: AKRO-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AKRO-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKRO-USDT"

    def __str__(self):
        return "AKRO-USDT"

    def __call__(self):
        return "AKRO-USDT"


AKRO_USDT = AKRO_USDT()
"""
    name: AKRO-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ROOBEE_BTC:
    """
        name: ROOBEE-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ROOBEE-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROOBEE-BTC"

    def __str__(self):
        return "ROOBEE-BTC"

    def __call__(self):
        return "ROOBEE-BTC"


ROOBEE_BTC = ROOBEE_BTC()
"""
    name: ROOBEE-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WIN_TRX:
    """
        name: WIN-TRX
        precision: 0.0000001
        minimum_margin: 10
        initial_margin: None
        minimum_order_size: 10000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WIN-TRX"
    precision: int = 0.0000001
    minimum_margin: float = 10
    initial_margin: float = None
    minimum_order_size: float = 10000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WIN-TRX"

    def __str__(self):
        return "WIN-TRX"

    def __call__(self):
        return "WIN-TRX"


WIN_TRX = WIN_TRX()
"""
    name: WIN-TRX
    precision: 0.0000001
    minimum_margin: 10
    initial_margin: None
    minimum_order_size: 10000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MAP_BTC:
    """
        name: MAP-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 20
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAP-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 20
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAP-BTC"

    def __str__(self):
        return "MAP-BTC"

    def __call__(self):
        return "MAP-BTC"


MAP_BTC = MAP_BTC()
"""
    name: MAP-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 20
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MAP_USDT:
    """
        name: MAP-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 20
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAP-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 20
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAP-USDT"

    def __str__(self):
        return "MAP-USDT"

    def __call__(self):
        return "MAP-USDT"


MAP_USDT = MAP_USDT()
"""
    name: MAP-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 20
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AMPL_BTC:
    """
        name: AMPL-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AMPL-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPL-BTC"

    def __str__(self):
        return "AMPL-BTC"

    def __call__(self):
        return "AMPL-BTC"


AMPL_BTC = AMPL_BTC()
"""
    name: AMPL-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AMPL_USDT:
    """
        name: AMPL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AMPL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPL-USDT"

    def __str__(self):
        return "AMPL-USDT"

    def __call__(self):
        return "AMPL-USDT"


AMPL_USDT = AMPL_USDT()
"""
    name: AMPL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DAG_USDT:
    """
        name: DAG-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DAG-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAG-USDT"

    def __str__(self):
        return "DAG-USDT"

    def __call__(self):
        return "DAG-USDT"


DAG_USDT = DAG_USDT()
"""
    name: DAG-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class POL_USDT:
    """
        name: POL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POL-USDT"

    def __str__(self):
        return "POL-USDT"

    def __call__(self):
        return "POL-USDT"


POL_USDT = POL_USDT()
"""
    name: POL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ARX_USDT:
    """
        name: ARX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ARX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARX-USDT"

    def __str__(self):
        return "ARX-USDT"

    def __call__(self):
        return "ARX-USDT"


ARX_USDT = ARX_USDT()
"""
    name: ARX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NWC_BTC:
    """
        name: NWC-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NWC-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NWC-BTC"

    def __str__(self):
        return "NWC-BTC"

    def __call__(self):
        return "NWC-BTC"


NWC_BTC = NWC_BTC()
"""
    name: NWC-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NWC_USDT:
    """
        name: NWC-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NWC-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NWC-USDT"

    def __str__(self):
        return "NWC-USDT"

    def __call__(self):
        return "NWC-USDT"


NWC_USDT = NWC_USDT()
"""
    name: NWC-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BEPRO_BTC:
    """
        name: BEPRO-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BEPRO-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEPRO-BTC"

    def __str__(self):
        return "BEPRO-BTC"

    def __call__(self):
        return "BEPRO-BTC"


BEPRO_BTC = BEPRO_BTC()
"""
    name: BEPRO-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BEPRO_USDT:
    """
        name: BEPRO-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BEPRO-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEPRO-USDT"

    def __str__(self):
        return "BEPRO-USDT"

    def __call__(self):
        return "BEPRO-USDT"


BEPRO_USDT = BEPRO_USDT()
"""
    name: BEPRO-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VRA_BTC:
    """
        name: VRA-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VRA-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VRA-BTC"

    def __str__(self):
        return "VRA-BTC"

    def __call__(self):
        return "VRA-BTC"


VRA_BTC = VRA_BTC()
"""
    name: VRA-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VRA_USDT:
    """
        name: VRA-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "VRA-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VRA-USDT"

    def __str__(self):
        return "VRA-USDT"

    def __call__(self):
        return "VRA-USDT"


VRA_USDT = VRA_USDT()
"""
    name: VRA-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KSM_BTC:
    """
        name: KSM-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KSM-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSM-BTC"

    def __str__(self):
        return "KSM-BTC"

    def __call__(self):
        return "KSM-BTC"


KSM_BTC = KSM_BTC()
"""
    name: KSM-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KSM_USDT:
    """
        name: KSM-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "KSM-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KSM-USDT"

    def __str__(self):
        return "KSM-USDT"

    def __call__(self):
        return "KSM-USDT"


KSM_USDT = KSM_USDT()
"""
    name: KSM-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DASH_USDT:
    """
        name: DASH-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DASH-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASH-USDT"

    def __str__(self):
        return "DASH-USDT"

    def __call__(self):
        return "DASH-USDT"


DASH_USDT = DASH_USDT()
"""
    name: DASH-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SUTER_USDT:
    """
        name: SUTER-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SUTER-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUTER-USDT"

    def __str__(self):
        return "SUTER-USDT"

    def __call__(self):
        return "SUTER-USDT"


SUTER_USDT = SUTER_USDT()
"""
    name: SUTER-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ACOIN_USDT:
    """
        name: ACOIN-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ACOIN-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACOIN-USDT"

    def __str__(self):
        return "ACOIN-USDT"

    def __call__(self):
        return "ACOIN-USDT"


ACOIN_USDT = ACOIN_USDT()
"""
    name: ACOIN-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SUTER_BTC:
    """
        name: SUTER-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SUTER-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUTER-BTC"

    def __str__(self):
        return "SUTER-BTC"

    def __call__(self):
        return "SUTER-BTC"


SUTER_BTC = SUTER_BTC()
"""
    name: SUTER-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SENSO_USDT:
    """
        name: SENSO-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SENSO-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SENSO-USDT"

    def __str__(self):
        return "SENSO-USDT"

    def __call__(self):
        return "SENSO-USDT"


SENSO_USDT = SENSO_USDT()
"""
    name: SENSO-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PRE_BTC:
    """
        name: PRE-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PRE-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRE-BTC"

    def __str__(self):
        return "PRE-BTC"

    def __call__(self):
        return "PRE-BTC"


PRE_BTC = PRE_BTC()
"""
    name: PRE-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XDB_USDT:
    """
        name: XDB-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XDB-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDB-USDT"

    def __str__(self):
        return "XDB-USDT"

    def __call__(self):
        return "XDB-USDT"


XDB_USDT = XDB_USDT()
"""
    name: XDB-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SYLO_USDT:
    """
        name: SYLO-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SYLO-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYLO-USDT"

    def __str__(self):
        return "SYLO-USDT"

    def __call__(self):
        return "SYLO-USDT"


SYLO_USDT = SYLO_USDT()
"""
    name: SYLO-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WOM_USDT:
    """
        name: WOM-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 20
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WOM-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 20
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOM-USDT"

    def __str__(self):
        return "WOM-USDT"

    def __call__(self):
        return "WOM-USDT"


WOM_USDT = WOM_USDT()
"""
    name: WOM-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 20
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SENSO_BTC:
    """
        name: SENSO-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SENSO-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SENSO-BTC"

    def __str__(self):
        return "SENSO-BTC"

    def __call__(self):
        return "SENSO-BTC"


SENSO_BTC = SENSO_BTC()
"""
    name: SENSO-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DGB_USDT:
    """
        name: DGB-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DGB-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGB-USDT"

    def __str__(self):
        return "DGB-USDT"

    def __call__(self):
        return "DGB-USDT"


DGB_USDT = DGB_USDT()
"""
    name: DGB-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class LYXE_USDT:
    """
        name: LYXE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LYXE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYXE-USDT"

    def __str__(self):
        return "LYXE-USDT"

    def __call__(self):
        return "LYXE-USDT"


LYXE_USDT = LYXE_USDT()
"""
    name: LYXE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LYXE_ETH:
    """
        name: LYXE-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LYXE-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYXE-ETH"

    def __str__(self):
        return "LYXE-ETH"

    def __call__(self):
        return "LYXE-ETH"


LYXE_ETH = LYXE_ETH()
"""
    name: LYXE-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XDB_BTC:
    """
        name: XDB-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XDB-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDB-BTC"

    def __str__(self):
        return "XDB-BTC"

    def __call__(self):
        return "XDB-BTC"


XDB_BTC = XDB_BTC()
"""
    name: XDB-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STX_BTC:
    """
        name: STX-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STX-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STX-BTC"

    def __str__(self):
        return "STX-BTC"

    def __call__(self):
        return "STX-BTC"


STX_BTC = STX_BTC()
"""
    name: STX-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STX_USDT:
    """
        name: STX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "STX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STX-USDT"

    def __str__(self):
        return "STX-USDT"

    def __call__(self):
        return "STX-USDT"


STX_USDT = STX_USDT()
"""
    name: STX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class COMP_USDT:
    """
        name: COMP-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "COMP-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COMP-USDT"

    def __str__(self):
        return "COMP-USDT"

    def __call__(self):
        return "COMP-USDT"


COMP_USDT = COMP_USDT()
"""
    name: COMP-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CRO_USDT:
    """
        name: CRO-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CRO-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRO-USDT"

    def __str__(self):
        return "CRO-USDT"

    def __call__(self):
        return "CRO-USDT"


CRO_USDT = CRO_USDT()
"""
    name: CRO-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KAI_USDT:
    """
        name: KAI-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KAI-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAI-USDT"

    def __str__(self):
        return "KAI-USDT"

    def __call__(self):
        return "KAI-USDT"


KAI_USDT = KAI_USDT()
"""
    name: KAI-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KAI_BTC:
    """
        name: KAI-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KAI-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAI-BTC"

    def __str__(self):
        return "KAI-BTC"

    def __call__(self):
        return "KAI-BTC"


KAI_BTC = KAI_BTC()
"""
    name: KAI-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WEST_BTC:
    """
        name: WEST-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WEST-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WEST-BTC"

    def __str__(self):
        return "WEST-BTC"

    def __call__(self):
        return "WEST-BTC"


WEST_BTC = WEST_BTC()
"""
    name: WEST-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WEST_USDT:
    """
        name: WEST-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WEST-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WEST-USDT"

    def __str__(self):
        return "WEST-USDT"

    def __call__(self):
        return "WEST-USDT"


WEST_USDT = WEST_USDT()
"""
    name: WEST-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EWT_BTC:
    """
        name: EWT-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EWT-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EWT-BTC"

    def __str__(self):
        return "EWT-BTC"

    def __call__(self):
        return "EWT-BTC"


EWT_BTC = EWT_BTC()
"""
    name: EWT-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WAVES_USDT:
    """
        name: WAVES-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "WAVES-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVES-USDT"

    def __str__(self):
        return "WAVES-USDT"

    def __call__(self):
        return "WAVES-USDT"


WAVES_USDT = WAVES_USDT()
"""
    name: WAVES-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class WAVES_BTC:
    """
        name: WAVES-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WAVES-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAVES-BTC"

    def __str__(self):
        return "WAVES-BTC"

    def __call__(self):
        return "WAVES-BTC"


WAVES_BTC = WAVES_BTC()
"""
    name: WAVES-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ORN_USDT:
    """
        name: ORN-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ORN-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORN-USDT"

    def __str__(self):
        return "ORN-USDT"

    def __call__(self):
        return "ORN-USDT"


ORN_USDT = ORN_USDT()
"""
    name: ORN-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class AMPL_ETH:
    """
        name: AMPL-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AMPL-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMPL-ETH"

    def __str__(self):
        return "AMPL-ETH"

    def __call__(self):
        return "AMPL-ETH"


AMPL_ETH = AMPL_ETH()
"""
    name: AMPL-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNS_USDT:
    """
        name: BNS-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BNS-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNS-USDT"

    def __str__(self):
        return "BNS-USDT"

    def __call__(self):
        return "BNS-USDT"


BNS_USDT = BNS_USDT()
"""
    name: BNS-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MKR_USDT:
    """
        name: MKR-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "MKR-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKR-USDT"

    def __str__(self):
        return "MKR-USDT"

    def __call__(self):
        return "MKR-USDT"


MKR_USDT = MKR_USDT()
"""
    name: MKR-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SUKU_BTC:
    """
        name: SUKU-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SUKU-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUKU-BTC"

    def __str__(self):
        return "SUKU-BTC"

    def __call__(self):
        return "SUKU-BTC"


SUKU_BTC = SUKU_BTC()
"""
    name: SUKU-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MLK_BTC:
    """
        name: MLK-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MLK-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLK-BTC"

    def __str__(self):
        return "MLK-BTC"

    def __call__(self):
        return "MLK-BTC"


MLK_BTC = MLK_BTC()
"""
    name: MLK-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MLK_USDT:
    """
        name: MLK-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MLK-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLK-USDT"

    def __str__(self):
        return "MLK-USDT"

    def __call__(self):
        return "MLK-USDT"


MLK_USDT = MLK_USDT()
"""
    name: MLK-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class JST_USDT:
    """
        name: JST-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "JST-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JST-USDT"

    def __str__(self):
        return "JST-USDT"

    def __call__(self):
        return "JST-USDT"


JST_USDT = JST_USDT()
"""
    name: JST-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KAI_ETH:
    """
        name: KAI-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KAI-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAI-ETH"

    def __str__(self):
        return "KAI-ETH"

    def __call__(self):
        return "KAI-ETH"


KAI_ETH = KAI_ETH()
"""
    name: KAI-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SUKU_USDT:
    """
        name: SUKU-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SUKU-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUKU-USDT"

    def __str__(self):
        return "SUKU-USDT"

    def __call__(self):
        return "SUKU-USDT"


SUKU_USDT = SUKU_USDT()
"""
    name: SUKU-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DIA_USDT:
    """
        name: DIA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DIA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIA-USDT"

    def __str__(self):
        return "DIA-USDT"

    def __call__(self):
        return "DIA-USDT"


DIA_USDT = DIA_USDT()
"""
    name: DIA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DIA_BTC:
    """
        name: DIA-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DIA-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIA-BTC"

    def __str__(self):
        return "DIA-BTC"

    def __call__(self):
        return "DIA-BTC"


DIA_BTC = DIA_BTC()
"""
    name: DIA-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LINK_BTC:
    """
        name: LINK-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LINK-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK-BTC"

    def __str__(self):
        return "LINK-BTC"

    def __call__(self):
        return "LINK-BTC"


LINK_BTC = LINK_BTC()
"""
    name: LINK-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LINK_USDT:
    """
        name: LINK-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LINK-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK-USDT"

    def __str__(self):
        return "LINK-USDT"

    def __call__(self):
        return "LINK-USDT"


LINK_USDT = LINK_USDT()
"""
    name: LINK-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DOT_USDT:
    """
        name: DOT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DOT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT-USDT"

    def __str__(self):
        return "DOT-USDT"

    def __call__(self):
        return "DOT-USDT"


DOT_USDT = DOT_USDT()
"""
    name: DOT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DOT_BTC:
    """
        name: DOT-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DOT-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT-BTC"

    def __str__(self):
        return "DOT-BTC"

    def __call__(self):
        return "DOT-BTC"


DOT_BTC = DOT_BTC()
"""
    name: DOT-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHA_BTC:
    """
        name: SHA-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 2000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHA-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 2000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHA-BTC"

    def __str__(self):
        return "SHA-BTC"

    def __call__(self):
        return "SHA-BTC"


SHA_BTC = SHA_BTC()
"""
    name: SHA-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 2000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHA_USDT:
    """
        name: SHA-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 2000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHA-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 2000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHA-USDT"

    def __str__(self):
        return "SHA-USDT"

    def __call__(self):
        return "SHA-USDT"


SHA_USDT = SHA_USDT()
"""
    name: SHA-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 2000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EWT_USDT:
    """
        name: EWT-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EWT-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EWT-USDT"

    def __str__(self):
        return "EWT-USDT"

    def __call__(self):
        return "EWT-USDT"


EWT_USDT = EWT_USDT()
"""
    name: EWT-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USDJ_USDT:
    """
        name: USDJ-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USDJ-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDJ-USDT"

    def __str__(self):
        return "USDJ-USDT"

    def __call__(self):
        return "USDJ-USDT"


USDJ_USDT = USDJ_USDT()
"""
    name: USDJ-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EFX_BTC:
    """
        name: EFX-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EFX-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EFX-BTC"

    def __str__(self):
        return "EFX-BTC"

    def __call__(self):
        return "EFX-BTC"


EFX_BTC = EFX_BTC()
"""
    name: EFX-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CKB_BTC:
    """
        name: CKB-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CKB-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKB-BTC"

    def __str__(self):
        return "CKB-BTC"

    def __call__(self):
        return "CKB-BTC"


CKB_BTC = CKB_BTC()
"""
    name: CKB-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CKB_USDT:
    """
        name: CKB-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CKB-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CKB-USDT"

    def __str__(self):
        return "CKB-USDT"

    def __call__(self):
        return "CKB-USDT"


CKB_USDT = CKB_USDT()
"""
    name: CKB-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class UMA_USDT:
    """
        name: UMA-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "UMA-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UMA-USDT"

    def __str__(self):
        return "UMA-USDT"

    def __call__(self):
        return "UMA-USDT"


UMA_USDT = UMA_USDT()
"""
    name: UMA-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ALEPH_USDT:
    """
        name: ALEPH-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALEPH-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALEPH-USDT"

    def __str__(self):
        return "ALEPH-USDT"

    def __call__(self):
        return "ALEPH-USDT"


ALEPH_USDT = ALEPH_USDT()
"""
    name: ALEPH-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VELO_USDT:
    """
        name: VELO-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 5
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "VELO-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 5
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VELO-USDT"

    def __str__(self):
        return "VELO-USDT"

    def __call__(self):
        return "VELO-USDT"


VELO_USDT = VELO_USDT()
"""
    name: VELO-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 5
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SUN_USDT:
    """
        name: SUN-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SUN-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUN-USDT"

    def __str__(self):
        return "SUN-USDT"

    def __call__(self):
        return "SUN-USDT"


SUN_USDT = SUN_USDT()
"""
    name: SUN-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BUY_USDT:
    """
        name: BUY-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BUY-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUY-USDT"

    def __str__(self):
        return "BUY-USDT"

    def __call__(self):
        return "BUY-USDT"


BUY_USDT = BUY_USDT()
"""
    name: BUY-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class YFI_USDT:
    """
        name: YFI-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.000001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "YFI-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.000001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFI-USDT"

    def __str__(self):
        return "YFI-USDT"

    def __call__(self):
        return "YFI-USDT"


YFI_USDT = YFI_USDT()
"""
    name: YFI-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.000001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class OXEN_USDT:
    """
        name: LOKI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOKI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKI-USDT"

    def __str__(self):
        return "LOKI-USDT"

    def __call__(self):
        return "LOKI-USDT"


OXEN_USDT = OXEN_USDT()
"""
    name: LOKI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UNI_USDT:
    """
        name: UNI-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "UNI-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNI-USDT"

    def __str__(self):
        return "UNI-USDT"

    def __call__(self):
        return "UNI-USDT"


UNI_USDT = UNI_USDT()
"""
    name: UNI-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class UOS_USDT:
    """
        name: UOS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UOS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UOS-USDT"

    def __str__(self):
        return "UOS-USDT"

    def __call__(self):
        return "UOS-USDT"


UOS_USDT = UOS_USDT()
"""
    name: UOS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UOS_BTC:
    """
        name: UOS-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UOS-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UOS-BTC"

    def __str__(self):
        return "UOS-BTC"

    def __call__(self):
        return "UOS-BTC"


UOS_BTC = UOS_BTC()
"""
    name: UOS-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NIM_USDT:
    """
        name: NIM-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NIM-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NIM-USDT"

    def __str__(self):
        return "NIM-USDT"

    def __call__(self):
        return "NIM-USDT"


NIM_USDT = NIM_USDT()
"""
    name: NIM-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DEGO_USDT:
    """
        name: DEGO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DEGO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGO-USDT"

    def __str__(self):
        return "DEGO-USDT"

    def __call__(self):
        return "DEGO-USDT"


DEGO_USDT = DEGO_USDT()
"""
    name: DEGO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DEGO_ETH:
    """
        name: DEGO-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DEGO-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEGO-ETH"

    def __str__(self):
        return "DEGO-ETH"

    def __call__(self):
        return "DEGO-ETH"


DEGO_ETH = DEGO_ETH()
"""
    name: DEGO-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RFUEL_USDT:
    """
        name: RFUEL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RFUEL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RFUEL-USDT"

    def __str__(self):
        return "RFUEL-USDT"

    def __call__(self):
        return "RFUEL-USDT"


RFUEL_USDT = RFUEL_USDT()
"""
    name: RFUEL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FIL_USDT:
    """
        name: FIL-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FIL-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIL-USDT"

    def __str__(self):
        return "FIL-USDT"

    def __call__(self):
        return "FIL-USDT"


FIL_USDT = FIL_USDT()
"""
    name: FIL-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class UBX_ETH:
    """
        name: UBX-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UBX-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UBX-ETH"

    def __str__(self):
        return "UBX-ETH"

    def __call__(self):
        return "UBX-ETH"


UBX_ETH = UBX_ETH()
"""
    name: UBX-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class REAP_USDT:
    """
        name: REAP-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REAP-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REAP-USDT"

    def __str__(self):
        return "REAP-USDT"

    def __call__(self):
        return "REAP-USDT"


REAP_USDT = REAP_USDT()
"""
    name: REAP-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AAVE_USDT:
    """
        name: AAVE-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "AAVE-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE-USDT"

    def __str__(self):
        return "AAVE-USDT"

    def __call__(self):
        return "AAVE-USDT"


AAVE_USDT = AAVE_USDT()
"""
    name: AAVE-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class AAVE_BTC:
    """
        name: AAVE-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AAVE-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE-BTC"

    def __str__(self):
        return "AAVE-BTC"

    def __call__(self):
        return "AAVE-BTC"


AAVE_BTC = AAVE_BTC()
"""
    name: AAVE-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TONE_BTC:
    """
        name: TONE-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TONE-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TONE-BTC"

    def __str__(self):
        return "TONE-BTC"

    def __call__(self):
        return "TONE-BTC"


TONE_BTC = TONE_BTC()
"""
    name: TONE-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TONE_ETH:
    """
        name: TONE-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TONE-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TONE-ETH"

    def __str__(self):
        return "TONE-ETH"

    def __call__(self):
        return "TONE-ETH"


TONE_ETH = TONE_ETH()
"""
    name: TONE-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ELF_ETH:
    """
        name: ELF-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ELF-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELF-ETH"

    def __str__(self):
        return "ELF-ETH"

    def __call__(self):
        return "ELF-ETH"


ELF_ETH = ELF_ETH()
"""
    name: ELF-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AERGO_BTC:
    """
        name: AERGO-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AERGO-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AERGO-BTC"

    def __str__(self):
        return "AERGO-BTC"

    def __call__(self):
        return "AERGO-BTC"


AERGO_BTC = AERGO_BTC()
"""
    name: AERGO-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IOST_ETH:
    """
        name: IOST-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "IOST-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOST-ETH"

    def __str__(self):
        return "IOST-ETH"

    def __call__(self):
        return "IOST-ETH"


IOST_ETH = IOST_ETH()
"""
    name: IOST-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KCS_USDT:
    """
        name: KCS-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "KCS-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KCS-USDT"

    def __str__(self):
        return "KCS-USDT"

    def __call__(self):
        return "KCS-USDT"


KCS_USDT = KCS_USDT()
"""
    name: KCS-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SNX_ETH:
    """
        name: SNX-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SNX-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNX-ETH"

    def __str__(self):
        return "SNX-ETH"

    def __call__(self):
        return "SNX-ETH"


SNX_ETH = SNX_ETH()
"""
    name: SNX-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KCS_ETH:
    """
        name: KCS-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KCS-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KCS-ETH"

    def __str__(self):
        return "KCS-ETH"

    def __call__(self):
        return "KCS-ETH"


KCS_ETH = KCS_ETH()
"""
    name: KCS-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DRGN_BTC:
    """
        name: DRGN-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DRGN-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DRGN-BTC"

    def __str__(self):
        return "DRGN-BTC"

    def __call__(self):
        return "DRGN-BTC"


DRGN_BTC = DRGN_BTC()
"""
    name: DRGN-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WAN_ETH:
    """
        name: WAN-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WAN-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAN-ETH"

    def __str__(self):
        return "WAN-ETH"

    def __call__(self):
        return "WAN-ETH"


WAN_ETH = WAN_ETH()
"""
    name: WAN-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NULS_ETH:
    """
        name: NULS-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NULS-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULS-ETH"

    def __str__(self):
        return "NULS-ETH"

    def __call__(self):
        return "NULS-ETH"


NULS_ETH = NULS_ETH()
"""
    name: NULS-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AXPR_ETH:
    """
        name: AXPR-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AXPR-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXPR-ETH"

    def __str__(self):
        return "AXPR-ETH"

    def __call__(self):
        return "AXPR-ETH"


AXPR_ETH = AXPR_ETH()
"""
    name: AXPR-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QTUM_BTC:
    """
        name: QTUM-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QTUM-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QTUM-BTC"

    def __str__(self):
        return "QTUM-BTC"

    def __call__(self):
        return "QTUM-BTC"


QTUM_BTC = QTUM_BTC()
"""
    name: QTUM-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MANA_BTC:
    """
        name: MANA-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MANA-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA-BTC"

    def __str__(self):
        return "MANA-BTC"

    def __call__(self):
        return "MANA-BTC"


MANA_BTC = MANA_BTC()
"""
    name: MANA-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TEL_BTC:
    """
        name: TEL-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TEL-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TEL-BTC"

    def __str__(self):
        return "TEL-BTC"

    def __call__(self):
        return "TEL-BTC"


TEL_BTC = TEL_BTC()
"""
    name: TEL-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XYO_ETH:
    """
        name: XYO-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XYO-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYO-ETH"

    def __str__(self):
        return "XYO-ETH"

    def __call__(self):
        return "XYO-ETH"


XYO_ETH = XYO_ETH()
"""
    name: XYO-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AXPR_BTC:
    """
        name: AXPR-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AXPR-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXPR-BTC"

    def __str__(self):
        return "AXPR-BTC"

    def __call__(self):
        return "AXPR-BTC"


AXPR_BTC = AXPR_BTC()
"""
    name: AXPR-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETN_BTC:
    """
        name: ETN-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETN-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETN-BTC"

    def __str__(self):
        return "ETN-BTC"

    def __call__(self):
        return "ETN-BTC"


ETN_BTC = ETN_BTC()
"""
    name: ETN-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class COV_ETH:
    """
        name: COV-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "COV-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COV-ETH"

    def __str__(self):
        return "COV-ETH"

    def __call__(self):
        return "COV-ETH"


COV_ETH = COV_ETH()
"""
    name: COV-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VET_BTC:
    """
        name: VET-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "VET-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET-BTC"

    def __str__(self):
        return "VET-BTC"

    def __call__(self):
        return "VET-BTC"


VET_BTC = VET_BTC()
"""
    name: VET-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KCS_BTC:
    """
        name: KCS-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KCS-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KCS-BTC"

    def __str__(self):
        return "KCS-BTC"

    def __call__(self):
        return "KCS-BTC"


KCS_BTC = KCS_BTC()
"""
    name: KCS-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CAPP_ETH:
    """
        name: CAPP-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CAPP-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAPP-ETH"

    def __str__(self):
        return "CAPP-ETH"

    def __call__(self):
        return "CAPP-ETH"


CAPP_ETH = CAPP_ETH()
"""
    name: CAPP-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ONT_BTC:
    """
        name: ONT-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ONT-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONT-BTC"

    def __str__(self):
        return "ONT-BTC"

    def __call__(self):
        return "ONT-BTC"


ONT_BTC = ONT_BTC()
"""
    name: ONT-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DRGN_ETH:
    """
        name: DRGN-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DRGN-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DRGN-ETH"

    def __str__(self):
        return "DRGN-ETH"

    def __call__(self):
        return "DRGN-ETH"


DRGN_ETH = DRGN_ETH()
"""
    name: DRGN-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DAG_ETH:
    """
        name: DAG-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DAG-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAG-ETH"

    def __str__(self):
        return "DAG-ETH"

    def __call__(self):
        return "DAG-ETH"


DAG_ETH = DAG_ETH()
"""
    name: DAG-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WAN_BTC:
    """
        name: WAN-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WAN-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAN-BTC"

    def __str__(self):
        return "WAN-BTC"

    def __call__(self):
        return "WAN-BTC"


WAN_BTC = WAN_BTC()
"""
    name: WAN-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KNC_ETH:
    """
        name: KNC-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KNC-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNC-ETH"

    def __str__(self):
        return "KNC-ETH"

    def __call__(self):
        return "KNC-ETH"


KNC_ETH = KNC_ETH()
"""
    name: KNC-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CRPT_ETH:
    """
        name: CRPT-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CRPT-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRPT-ETH"

    def __str__(self):
        return "CRPT-ETH"

    def __call__(self):
        return "CRPT-ETH"


CRPT_ETH = CRPT_ETH()
"""
    name: CRPT-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTC_USDT:
    """
        name: LTC-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LTC-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-USDT"

    def __str__(self):
        return "LTC-USDT"

    def __call__(self):
        return "LTC-USDT"


LTC_USDT = LTC_USDT()
"""
    name: LTC-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BAX_ETH:
    """
        name: BAX-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BAX-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAX-ETH"

    def __str__(self):
        return "BAX-ETH"

    def __call__(self):
        return "BAX-ETH"


BAX_ETH = BAX_ETH()
"""
    name: BAX-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BSV_USDT:
    """
        name: BCHSV-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BCHSV-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-USDT"

    def __str__(self):
        return "BCHSV-USDT"

    def __call__(self):
        return "BCHSV-USDT"


BSV_USDT = BSV_USDT()
"""
    name: BCHSV-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DENT_ETH:
    """
        name: DENT-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DENT-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENT-ETH"

    def __str__(self):
        return "DENT-ETH"

    def __call__(self):
        return "DENT-ETH"


DENT_ETH = DENT_ETH()
"""
    name: DENT-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LYM_ETH:
    """
        name: LYM-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LYM-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYM-ETH"

    def __str__(self):
        return "LYM-ETH"

    def __call__(self):
        return "LYM-ETH"


LYM_ETH = LYM_ETH()
"""
    name: LYM-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRAC_ETH:
    """
        name: TRAC-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRAC-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRAC-ETH"

    def __str__(self):
        return "TRAC-ETH"

    def __call__(self):
        return "TRAC-ETH"


TRAC_ETH = TRAC_ETH()
"""
    name: TRAC-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ENJ_BTC:
    """
        name: ENJ-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ENJ-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJ-BTC"

    def __str__(self):
        return "ENJ-BTC"

    def __call__(self):
        return "ENJ-BTC"


ENJ_BTC = ENJ_BTC()
"""
    name: ENJ-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WAXP_BTC:
    """
        name: WAX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WAX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAX-BTC"

    def __str__(self):
        return "WAX-BTC"

    def __call__(self):
        return "WAX-BTC"


WAXP_BTC = WAXP_BTC()
"""
    name: WAX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DGB_BTC:
    """
        name: DGB-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DGB-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGB-BTC"

    def __str__(self):
        return "DGB-BTC"

    def __call__(self):
        return "DGB-BTC"


DGB_BTC = DGB_BTC()
"""
    name: DGB-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ELA_BTC:
    """
        name: ELA-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ELA-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELA-BTC"

    def __str__(self):
        return "ELA-BTC"

    def __call__(self):
        return "ELA-BTC"


ELA_BTC = ELA_BTC()
"""
    name: ELA-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZIL_BTC:
    """
        name: ZIL-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ZIL-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZIL-BTC"

    def __str__(self):
        return "ZIL-BTC"

    def __call__(self):
        return "ZIL-BTC"


ZIL_BTC = ZIL_BTC()
"""
    name: ZIL-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BSV_BTC:
    """
        name: BCHSV-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BCHSV-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-BTC"

    def __str__(self):
        return "BCHSV-BTC"

    def __call__(self):
        return "BCHSV-BTC"


BSV_BTC = BSV_BTC()
"""
    name: BCHSV-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XLM_USDT:
    """
        name: XLM-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XLM-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLM-USDT"

    def __str__(self):
        return "XLM-USDT"

    def __call__(self):
        return "XLM-USDT"


XLM_USDT = XLM_USDT()
"""
    name: XLM-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class IOTX_ETH:
    """
        name: IOTX-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "IOTX-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTX-ETH"

    def __str__(self):
        return "IOTX-ETH"

    def __call__(self):
        return "IOTX-ETH"


IOTX_ETH = IOTX_ETH()
"""
    name: IOTX-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOUL_BTC:
    """
        name: SOUL-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SOUL-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOUL-BTC"

    def __str__(self):
        return "SOUL-BTC"

    def __call__(self):
        return "SOUL-BTC"


SOUL_BTC = SOUL_BTC()
"""
    name: SOUL-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOCK_BTC:
    """
        name: DOCK-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DOCK-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCK-BTC"

    def __str__(self):
        return "DOCK-BTC"

    def __call__(self):
        return "DOCK-BTC"


DOCK_BTC = DOCK_BTC()
"""
    name: DOCK-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AMB_ETH:
    """
        name: AMB-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AMB-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMB-ETH"

    def __str__(self):
        return "AMB-ETH"

    def __call__(self):
        return "AMB-ETH"


AMB_ETH = AMB_ETH()
"""
    name: AMB-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRX_BTC:
    """
        name: TRX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "TRX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-BTC"

    def __str__(self):
        return "TRX-BTC"

    def __call__(self):
        return "TRX-BTC"


TRX_BTC = TRX_BTC()
"""
    name: TRX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XRP_TUSD:
    """
        name: XRP-TUSD
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XRP-TUSD"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-TUSD"

    def __str__(self):
        return "XRP-TUSD"

    def __call__(self):
        return "XRP-TUSD"


XRP_TUSD = XRP_TUSD()
"""
    name: XRP-TUSD
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NULS_BTC:
    """
        name: NULS-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NULS-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NULS-BTC"

    def __str__(self):
        return "NULS-BTC"

    def __call__(self):
        return "NULS-BTC"


NULS_BTC = NULS_BTC()
"""
    name: NULS-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH_DAI:
    """
        name: ETH-DAI
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETH-DAI"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-DAI"

    def __str__(self):
        return "ETH-DAI"

    def __call__(self):
        return "ETH-DAI"


ETH_DAI = ETH_DAI()
"""
    name: ETH-DAI
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LSK_BTC:
    """
        name: LSK-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LSK-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSK-BTC"

    def __str__(self):
        return "LSK-BTC"

    def __call__(self):
        return "LSK-BTC"


LSK_BTC = LSK_BTC()
"""
    name: LSK-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMB_ETH:
    """
        name: GMB-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GMB-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMB-ETH"

    def __str__(self):
        return "GMB-ETH"

    def __call__(self):
        return "GMB-ETH"


GMB_ETH = GMB_ETH()
"""
    name: GMB-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMB_BTC:
    """
        name: GMB-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GMB-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMB-BTC"

    def __str__(self):
        return "GMB-BTC"

    def __call__(self):
        return "GMB-BTC"


GMB_BTC = GMB_BTC()
"""
    name: GMB-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NEO_ETH:
    """
        name: NEO-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NEO-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEO-ETH"

    def __str__(self):
        return "NEO-ETH"

    def __call__(self):
        return "NEO-ETH"


NEO_ETH = NEO_ETH()
"""
    name: NEO-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OMG_ETH:
    """
        name: OMG-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OMG-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMG-ETH"

    def __str__(self):
        return "OMG-ETH"

    def __call__(self):
        return "OMG-ETH"


OMG_ETH = OMG_ETH()
"""
    name: OMG-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BTC_TUSD:
    """
        name: BTC-TUSD
        precision: 0.1
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.00001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BTC-TUSD"
    precision: int = 0.1
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.00001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-TUSD"

    def __str__(self):
        return "BTC-TUSD"

    def __call__(self):
        return "BTC-TUSD"


BTC_TUSD = BTC_TUSD()
"""
    name: BTC-TUSD
    precision: 0.1
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.00001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KAT_USDT:
    """
        name: KAT-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KAT-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAT-USDT"

    def __str__(self):
        return "KAT-USDT"

    def __call__(self):
        return "KAT-USDT"


KAT_USDT = KAT_USDT()
"""
    name: KAT-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KNC_BTC:
    """
        name: KNC-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KNC-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNC-BTC"

    def __str__(self):
        return "KNC-BTC"

    def __call__(self):
        return "KNC-BTC"


KNC_BTC = KNC_BTC()
"""
    name: KNC-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ELF_BTC:
    """
        name: ELF-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ELF-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELF-BTC"

    def __str__(self):
        return "ELF-BTC"

    def __call__(self):
        return "ELF-BTC"


ELF_BTC = ELF_BTC()
"""
    name: ELF-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MANA_ETH:
    """
        name: MANA-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MANA-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA-ETH"

    def __str__(self):
        return "MANA-ETH"

    def __call__(self):
        return "MANA-ETH"


MANA_ETH = MANA_ETH()
"""
    name: MANA-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETC_USDT:
    """
        name: ETC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ETC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETC-USDT"

    def __str__(self):
        return "ETC-USDT"

    def __call__(self):
        return "ETC-USDT"


ETC_USDT = ETC_USDT()
"""
    name: ETC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ONT_ETH:
    """
        name: ONT-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ONT-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONT-ETH"

    def __str__(self):
        return "ONT-ETH"

    def __call__(self):
        return "ONT-ETH"


ONT_ETH = ONT_ETH()
"""
    name: ONT-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MKR_BTC:
    """
        name: MKR-BTC
        precision: 0.00001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MKR-BTC"
    precision: int = 0.00001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKR-BTC"

    def __str__(self):
        return "MKR-BTC"

    def __call__(self):
        return "MKR-BTC"


MKR_BTC = MKR_BTC()
"""
    name: MKR-BTC
    precision: 0.00001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KAT_BTC:
    """
        name: KAT-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KAT-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAT-BTC"

    def __str__(self):
        return "KAT-BTC"

    def __call__(self):
        return "KAT-BTC"


KAT_BTC = KAT_BTC()
"""
    name: KAT-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XRP_USDC:
    """
        name: XRP-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XRP-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-USDC"

    def __str__(self):
        return "XRP-USDC"

    def __call__(self):
        return "XRP-USDC"


XRP_USDC = XRP_USDC()
"""
    name: XRP-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XYO_BTC:
    """
        name: XYO-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XYO-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYO-BTC"

    def __str__(self):
        return "XYO-BTC"

    def __call__(self):
        return "XYO-BTC"


XYO_BTC = XYO_BTC()
"""
    name: XYO-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZRX_BTC:
    """
        name: ZRX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZRX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRX-BTC"

    def __str__(self):
        return "ZRX-BTC"

    def __call__(self):
        return "ZRX-BTC"


ZRX_BTC = ZRX_BTC()
"""
    name: ZRX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LOOM_ETH:
    """
        name: LOOM-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOOM-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOM-ETH"

    def __str__(self):
        return "LOOM-ETH"

    def __call__(self):
        return "LOOM-ETH"


LOOM_ETH = LOOM_ETH()
"""
    name: LOOM-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OLT_ETH:
    """
        name: OLT-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OLT-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OLT-ETH"

    def __str__(self):
        return "OLT-ETH"

    def __call__(self):
        return "OLT-ETH"


OLT_ETH = OLT_ETH()
"""
    name: OLT-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OLT_BTC:
    """
        name: OLT-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OLT-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OLT-BTC"

    def __str__(self):
        return "OLT-BTC"

    def __call__(self):
        return "OLT-BTC"


OLT_BTC = OLT_BTC()
"""
    name: OLT-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRAC_BTC:
    """
        name: TRAC-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRAC-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRAC-BTC"

    def __str__(self):
        return "TRAC-BTC"

    def __call__(self):
        return "TRAC-BTC"


TRAC_BTC = TRAC_BTC()
"""
    name: TRAC-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XLM_ETH:
    """
        name: XLM-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XLM-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLM-ETH"

    def __str__(self):
        return "XLM-ETH"

    def __call__(self):
        return "XLM-ETH"


XLM_ETH = XLM_ETH()
"""
    name: XLM-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH_USDT:
    """
        name: ETH-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ETH-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-USDT"

    def __str__(self):
        return "ETH-USDT"

    def __call__(self):
        return "ETH-USDT"


ETH_USDT = ETH_USDT()
"""
    name: ETH-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BSV_ETH:
    """
        name: BCHSV-ETH
        precision: 0.00001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BCHSV-ETH"
    precision: int = 0.00001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-ETH"

    def __str__(self):
        return "BCHSV-ETH"

    def __call__(self):
        return "BCHSV-ETH"


BSV_ETH = BSV_ETH()
"""
    name: BCHSV-ETH
    precision: 0.00001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class TRX_ETH:
    """
        name: TRX-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "TRX-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-ETH"

    def __str__(self):
        return "TRX-ETH"

    def __call__(self):
        return "TRX-ETH"


TRX_ETH = TRX_ETH()
"""
    name: TRX-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ETN_ETH:
    """
        name: ETN-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETN-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETN-ETH"

    def __str__(self):
        return "ETN-ETH"

    def __call__(self):
        return "ETN-ETH"


ETN_ETH = ETN_ETH()
"""
    name: ETN-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AOA_USDT:
    """
        name: AOA-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AOA-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AOA-USDT"

    def __str__(self):
        return "AOA-USDT"

    def __call__(self):
        return "AOA-USDT"


AOA_USDT = AOA_USDT()
"""
    name: AOA-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DENT_BTC:
    """
        name: DENT-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DENT-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DENT-BTC"

    def __str__(self):
        return "DENT-BTC"

    def __call__(self):
        return "DENT-BTC"


DENT_BTC = DENT_BTC()
"""
    name: DENT-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOCK_ETH:
    """
        name: DOCK-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DOCK-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOCK-ETH"

    def __str__(self):
        return "DOCK-ETH"

    def __call__(self):
        return "DOCK-ETH"


DOCK_ETH = DOCK_ETH()
"""
    name: DOCK-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KEY_BTC:
    """
        name: KEY-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KEY-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEY-BTC"

    def __str__(self):
        return "KEY-BTC"

    def __call__(self):
        return "KEY-BTC"


KEY_BTC = KEY_BTC()
"""
    name: KEY-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EOS_KCS:
    """
        name: EOS-KCS
        precision: 0.00001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EOS-KCS"
    precision: int = 0.00001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-KCS"

    def __str__(self):
        return "EOS-KCS"

    def __call__(self):
        return "EOS-KCS"


EOS_KCS = EOS_KCS()
"""
    name: EOS-KCS
    precision: 0.00001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XLM_BTC:
    """
        name: XLM-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XLM-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLM-BTC"

    def __str__(self):
        return "XLM-BTC"

    def __call__(self):
        return "XLM-BTC"


XLM_BTC = XLM_BTC()
"""
    name: XLM-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ADB_ETH:
    """
        name: ADB-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ADB-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADB-ETH"

    def __str__(self):
        return "ADB-ETH"

    def __call__(self):
        return "ADB-ETH"


ADB_ETH = ADB_ETH()
"""
    name: ADB-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TIME_ETH:
    """
        name: TIME-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TIME-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TIME-ETH"

    def __str__(self):
        return "TIME-ETH"

    def __call__(self):
        return "TIME-ETH"


TIME_ETH = TIME_ETH()
"""
    name: TIME-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CVC_BTC:
    """
        name: CVC-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CVC-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVC-BTC"

    def __str__(self):
        return "CVC-BTC"

    def __call__(self):
        return "CVC-BTC"


CVC_BTC = CVC_BTC()
"""
    name: CVC-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LSK_ETH:
    """
        name: LSK-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LSK-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSK-ETH"

    def __str__(self):
        return "LSK-ETH"

    def __call__(self):
        return "LSK-ETH"


LSK_ETH = LSK_ETH()
"""
    name: LSK-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QKC_BTC:
    """
        name: QKC-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QKC-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKC-BTC"

    def __str__(self):
        return "QKC-BTC"

    def __call__(self):
        return "QKC-BTC"


QKC_BTC = QKC_BTC()
"""
    name: QKC-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AMB_BTC:
    """
        name: AMB-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AMB-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMB-BTC"

    def __str__(self):
        return "AMB-BTC"

    def __call__(self):
        return "AMB-BTC"


AMB_BTC = AMB_BTC()
"""
    name: AMB-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USDT_TUSD:
    """
        name: USDT-TUSD
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USDT-TUSD"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-TUSD"

    def __str__(self):
        return "USDT-TUSD"

    def __call__(self):
        return "USDT-TUSD"


USDT_TUSD = USDT_TUSD()
"""
    name: USDT-TUSD
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETC_ETH:
    """
        name: ETC-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETC-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETC-ETH"

    def __str__(self):
        return "ETC-ETH"

    def __call__(self):
        return "ETC-ETH"


ETC_ETH = ETC_ETH()
"""
    name: ETC-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XRP_BTC:
    """
        name: XRP-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XRP-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-BTC"

    def __str__(self):
        return "XRP-BTC"

    def __call__(self):
        return "XRP-BTC"


XRP_BTC = XRP_BTC()
"""
    name: XRP-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class NEO_KCS:
    """
        name: NEO-KCS
        precision: 0.001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NEO-KCS"
    precision: int = 0.001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEO-KCS"

    def __str__(self):
        return "NEO-KCS"

    def __call__(self):
        return "NEO-KCS"


NEO_KCS = NEO_KCS()
"""
    name: NEO-KCS
    precision: 0.001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SNX_USDT:
    """
        name: SNX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SNX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNX-USDT"

    def __str__(self):
        return "SNX-USDT"

    def __call__(self):
        return "SNX-USDT"


SNX_USDT = SNX_USDT()
"""
    name: SNX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CRPT_BTC:
    """
        name: CRPT-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CRPT-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRPT-BTC"

    def __str__(self):
        return "CRPT-BTC"

    def __call__(self):
        return "CRPT-BTC"


CRPT_BTC = CRPT_BTC()
"""
    name: CRPT-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IOTX_BTC:
    """
        name: IOTX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "IOTX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTX-BTC"

    def __str__(self):
        return "IOTX-BTC"

    def __call__(self):
        return "IOTX-BTC"


IOTX_BTC = IOTX_BTC()
"""
    name: IOTX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTC_ETH:
    """
        name: LTC-ETH
        precision: 0.00001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LTC-ETH"
    precision: int = 0.00001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-ETH"

    def __str__(self):
        return "LTC-ETH"

    def __call__(self):
        return "LTC-ETH"


LTC_ETH = LTC_ETH()
"""
    name: LTC-ETH
    precision: 0.00001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XRP_KCS:
    """
        name: XRP-KCS
        precision: 0.00001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XRP-KCS"
    precision: int = 0.00001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-KCS"

    def __str__(self):
        return "XRP-KCS"

    def __call__(self):
        return "XRP-KCS"


XRP_KCS = XRP_KCS()
"""
    name: XRP-KCS
    precision: 0.00001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ADB_BTC:
    """
        name: ADB-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ADB-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADB-BTC"

    def __str__(self):
        return "ADB-BTC"

    def __call__(self):
        return "ADB-BTC"


ADB_BTC = ADB_BTC()
"""
    name: ADB-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTC_KCS:
    """
        name: LTC-KCS
        precision: 0.001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LTC-KCS"
    precision: int = 0.001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-KCS"

    def __str__(self):
        return "LTC-KCS"

    def __call__(self):
        return "LTC-KCS"


LTC_KCS = LTC_KCS()
"""
    name: LTC-KCS
    precision: 0.001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TEL_ETH:
    """
        name: TEL-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TEL-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TEL-ETH"

    def __str__(self):
        return "TEL-ETH"

    def __call__(self):
        return "TEL-ETH"


TEL_ETH = TEL_ETH()
"""
    name: TEL-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DCR_ETH:
    """
        name: DCR-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DCR-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCR-ETH"

    def __str__(self):
        return "DCR-ETH"

    def __call__(self):
        return "DCR-ETH"


DCR_ETH = DCR_ETH()
"""
    name: DCR-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LYM_USDT:
    """
        name: LYM-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LYM-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYM-USDT"

    def __str__(self):
        return "LYM-USDT"

    def __call__(self):
        return "LYM-USDT"


LYM_USDT = LYM_USDT()
"""
    name: LYM-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USDT_USDC:
    """
        name: USDT-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USDT-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-USDC"

    def __str__(self):
        return "USDT-USDC"

    def __call__(self):
        return "USDT-USDC"


USDT_USDC = USDT_USDC()
"""
    name: USDT-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH_USDC:
    """
        name: ETH-USDC
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ETH-USDC"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-USDC"

    def __str__(self):
        return "ETH-USDC"

    def __call__(self):
        return "ETH-USDC"


ETH_USDC = ETH_USDC()
"""
    name: ETH-USDC
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DAG_BTC:
    """
        name: DAG-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DAG-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAG-BTC"

    def __str__(self):
        return "DAG-BTC"

    def __call__(self):
        return "DAG-BTC"


DAG_BTC = DAG_BTC()
"""
    name: DAG-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AVA_BTC:
    """
        name: AVA-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AVA-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVA-BTC"

    def __str__(self):
        return "AVA-BTC"

    def __call__(self):
        return "AVA-BTC"


AVA_BTC = AVA_BTC()
"""
    name: AVA-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BTC_USDT:
    """
        name: BTC-USDT
        precision: 0.1
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.00001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BTC-USDT"
    precision: int = 0.1
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.00001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-USDT"

    def __str__(self):
        return "BTC-USDT"

    def __call__(self):
        return "BTC-USDT"


BTC_USDT = BTC_USDT()
"""
    name: BTC-USDT
    precision: 0.1
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.00001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class WAXP_ETH:
    """
        name: WAX-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WAX-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAX-ETH"

    def __str__(self):
        return "WAX-ETH"

    def __call__(self):
        return "WAX-ETH"


WAXP_ETH = WAXP_ETH()
"""
    name: WAX-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XRP_USDT:
    """
        name: XRP-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XRP-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-USDT"

    def __str__(self):
        return "XRP-USDT"

    def __call__(self):
        return "XRP-USDT"


XRP_USDT = XRP_USDT()
"""
    name: XRP-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KEY_ETH:
    """
        name: KEY-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KEY-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KEY-ETH"

    def __str__(self):
        return "KEY-ETH"

    def __call__(self):
        return "KEY-ETH"


KEY_ETH = KEY_ETH()
"""
    name: KEY-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VET_ETH:
    """
        name: VET-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VET-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET-ETH"

    def __str__(self):
        return "VET-ETH"

    def __call__(self):
        return "VET-ETH"


VET_ETH = VET_ETH()
"""
    name: VET-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FTM_BTC:
    """
        name: FTM-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FTM-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM-BTC"

    def __str__(self):
        return "FTM-BTC"

    def __call__(self):
        return "FTM-BTC"


FTM_BTC = FTM_BTC()
"""
    name: FTM-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class USDT_DAI:
    """
        name: USDT-DAI
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USDT-DAI"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-DAI"

    def __str__(self):
        return "USDT-DAI"

    def __call__(self):
        return "USDT-DAI"


USDT_DAI = USDT_DAI()
"""
    name: USDT-DAI
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QKC_ETH:
    """
        name: QKC-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QKC-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QKC-ETH"

    def __str__(self):
        return "QKC-ETH"

    def __call__(self):
        return "QKC-ETH"


QKC_ETH = QKC_ETH()
"""
    name: QKC-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH_BTC:
    """
        name: ETH-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ETH-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-BTC"

    def __str__(self):
        return "ETH-BTC"

    def __call__(self):
        return "ETH-BTC"


ETH_BTC = ETH_BTC()
"""
    name: ETH-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MAN_BTC:
    """
        name: MAN-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAN-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAN-BTC"

    def __str__(self):
        return "MAN-BTC"

    def __call__(self):
        return "MAN-BTC"


MAN_BTC = MAN_BTC()
"""
    name: MAN-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CPC_ETH:
    """
        name: CPC-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 120
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CPC-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 120
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CPC-ETH"

    def __str__(self):
        return "CPC-ETH"

    def __call__(self):
        return "CPC-ETH"


CPC_ETH = CPC_ETH()
"""
    name: CPC-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 120
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRX_USDT:
    """
        name: TRX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "TRX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-USDT"

    def __str__(self):
        return "TRX-USDT"

    def __call__(self):
        return "TRX-USDT"


TRX_USDT = TRX_USDT()
"""
    name: TRX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BTC_DAI:
    """
        name: BTC-DAI
        precision: 0.1
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.00001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BTC-DAI"
    precision: int = 0.1
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.00001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-DAI"

    def __str__(self):
        return "BTC-DAI"

    def __call__(self):
        return "BTC-DAI"


BTC_DAI = BTC_DAI()
"""
    name: BTC-DAI
    precision: 0.1
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.00001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ONT_USDT:
    """
        name: ONT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ONT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONT-USDT"

    def __str__(self):
        return "ONT-USDT"

    def __call__(self):
        return "ONT-USDT"


ONT_USDT = ONT_USDT()
"""
    name: ONT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DASH_ETH:
    """
        name: DASH-ETH
        precision: 0.00001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DASH-ETH"
    precision: int = 0.00001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASH-ETH"

    def __str__(self):
        return "DASH-ETH"

    def __call__(self):
        return "DASH-ETH"


DASH_ETH = DASH_ETH()
"""
    name: DASH-ETH
    precision: 0.00001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BAX_BTC:
    """
        name: BAX-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BAX-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAX-BTC"

    def __str__(self):
        return "BAX-BTC"

    def __call__(self):
        return "BAX-BTC"


BAX_BTC = BAX_BTC()
"""
    name: BAX-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AVA_ETH:
    """
        name: AVA-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AVA-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVA-ETH"

    def __str__(self):
        return "AVA-ETH"

    def __call__(self):
        return "AVA-ETH"


AVA_ETH = AVA_ETH()
"""
    name: AVA-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LOOM_BTC:
    """
        name: LOOM-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOOM-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOM-BTC"

    def __str__(self):
        return "LOOM-BTC"

    def __call__(self):
        return "LOOM-BTC"


LOOM_BTC = LOOM_BTC()
"""
    name: LOOM-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MVP_BTC:
    """
        name: MVP-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MVP-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MVP-BTC"

    def __str__(self):
        return "MVP-BTC"

    def __call__(self):
        return "MVP-BTC"


MVP_BTC = MVP_BTC()
"""
    name: MVP-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MKR_ETH:
    """
        name: MKR-ETH
        precision: 0.0001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MKR-ETH"
    precision: int = 0.0001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKR-ETH"

    def __str__(self):
        return "MKR-ETH"

    def __call__(self):
        return "MKR-ETH"


MKR_ETH = MKR_ETH()
"""
    name: MKR-ETH
    precision: 0.0001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class COV_BTC:
    """
        name: COV-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "COV-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COV-BTC"

    def __str__(self):
        return "COV-BTC"

    def __call__(self):
        return "COV-BTC"


COV_BTC = COV_BTC()
"""
    name: COV-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CPC_BTC:
    """
        name: CPC-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 120
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CPC-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 120
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CPC-BTC"

    def __str__(self):
        return "CPC-BTC"

    def __call__(self):
        return "CPC-BTC"


CPC_BTC = CPC_BTC()
"""
    name: CPC-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 120
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class REQ_ETH:
    """
        name: REQ-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REQ-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQ-ETH"

    def __str__(self):
        return "REQ-ETH"

    def __call__(self):
        return "REQ-ETH"


REQ_ETH = REQ_ETH()
"""
    name: REQ-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EOS_BTC:
    """
        name: EOS-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "EOS-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-BTC"

    def __str__(self):
        return "EOS-BTC"

    def __call__(self):
        return "EOS-BTC"


EOS_BTC = EOS_BTC()
"""
    name: EOS-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class LTC_BTC:
    """
        name: LTC-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LTC-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-BTC"

    def __str__(self):
        return "LTC-BTC"

    def __call__(self):
        return "LTC-BTC"


LTC_BTC = LTC_BTC()
"""
    name: LTC-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XRP_ETH:
    """
        name: XRP-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XRP-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP-ETH"

    def __str__(self):
        return "XRP-ETH"

    def __call__(self):
        return "XRP-ETH"


XRP_ETH = XRP_ETH()
"""
    name: XRP-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CAPP_BTC:
    """
        name: CAPP-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CAPP-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAPP-BTC"

    def __str__(self):
        return "CAPP-BTC"

    def __call__(self):
        return "CAPP-BTC"


CAPP_BTC = CAPP_BTC()
"""
    name: CAPP-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FTM_ETH:
    """
        name: FTM-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FTM-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM-ETH"

    def __str__(self):
        return "FTM-ETH"

    def __call__(self):
        return "FTM-ETH"


FTM_ETH = FTM_ETH()
"""
    name: FTM-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZRX_ETH:
    """
        name: ZRX-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZRX-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZRX-ETH"

    def __str__(self):
        return "ZRX-ETH"

    def __call__(self):
        return "ZRX-ETH"


ZRX_ETH = ZRX_ETH()
"""
    name: ZRX-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DGB_ETH:
    """
        name: DGB-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DGB-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DGB-ETH"

    def __str__(self):
        return "DGB-ETH"

    def __call__(self):
        return "DGB-ETH"


DGB_ETH = DGB_ETH()
"""
    name: DGB-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VET_USDT:
    """
        name: VET-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "VET-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET-USDT"

    def __str__(self):
        return "VET-USDT"

    def __call__(self):
        return "VET-USDT"


VET_USDT = VET_USDT()
"""
    name: VET-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class REQ_BTC:
    """
        name: REQ-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REQ-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQ-BTC"

    def __str__(self):
        return "REQ-BTC"

    def __call__(self):
        return "REQ-BTC"


REQ_BTC = REQ_BTC()
"""
    name: REQ-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UTK_BTC:
    """
        name: UTK-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UTK-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTK-BTC"

    def __str__(self):
        return "UTK-BTC"

    def __call__(self):
        return "UTK-BTC"


UTK_BTC = UTK_BTC()
"""
    name: UTK-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PLAY_BTC:
    """
        name: PLAY-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PLAY-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLAY-BTC"

    def __str__(self):
        return "PLAY-BTC"

    def __call__(self):
        return "PLAY-BTC"


PLAY_BTC = PLAY_BTC()
"""
    name: PLAY-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UTK_ETH:
    """
        name: UTK-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UTK-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UTK-ETH"

    def __str__(self):
        return "UTK-ETH"

    def __call__(self):
        return "UTK-ETH"


UTK_ETH = UTK_ETH()
"""
    name: UTK-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SNX_BTC:
    """
        name: SNX-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SNX-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SNX-BTC"

    def __str__(self):
        return "SNX-BTC"

    def __call__(self):
        return "SNX-BTC"


SNX_BTC = SNX_BTC()
"""
    name: SNX-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MVP_ETH:
    """
        name: MVP-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MVP-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MVP-ETH"

    def __str__(self):
        return "MVP-ETH"

    def __call__(self):
        return "MVP-ETH"


MVP_ETH = MVP_ETH()
"""
    name: MVP-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NEO_BTC:
    """
        name: NEO-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 100000
        margin: False
    """
    name: str = "NEO-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 100000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEO-BTC"

    def __str__(self):
        return "NEO-BTC"

    def __call__(self):
        return "NEO-BTC"


NEO_BTC = NEO_BTC()
"""
    name: NEO-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 100000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOUL_ETH:
    """
        name: SOUL-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SOUL-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOUL-ETH"

    def __str__(self):
        return "SOUL-ETH"

    def __call__(self):
        return "SOUL-ETH"


SOUL_ETH = SOUL_ETH()
"""
    name: SOUL-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NEO_USDT:
    """
        name: NEO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "NEO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEO-USDT"

    def __str__(self):
        return "NEO-USDT"

    def __call__(self):
        return "NEO-USDT"


NEO_USDT = NEO_USDT()
"""
    name: NEO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ELA_ETH:
    """
        name: ELA-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ELA-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELA-ETH"

    def __str__(self):
        return "ELA-ETH"

    def __call__(self):
        return "ELA-ETH"


ELA_ETH = ELA_ETH()
"""
    name: ELA-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OMG_BTC:
    """
        name: OMG-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "OMG-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMG-BTC"

    def __str__(self):
        return "OMG-BTC"

    def __call__(self):
        return "OMG-BTC"


OMG_BTC = OMG_BTC()
"""
    name: OMG-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class TIME_BTC:
    """
        name: TIME-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TIME-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TIME-BTC"

    def __str__(self):
        return "TIME-BTC"

    def __call__(self):
        return "TIME-BTC"


TIME_BTC = TIME_BTC()
"""
    name: TIME-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AOA_BTC:
    """
        name: AOA-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AOA-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AOA-BTC"

    def __str__(self):
        return "AOA-BTC"

    def __call__(self):
        return "AOA-BTC"


AOA_BTC = AOA_BTC()
"""
    name: AOA-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETC_BTC:
    """
        name: ETC-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETC-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETC-BTC"

    def __str__(self):
        return "ETC-BTC"

    def __call__(self):
        return "ETC-BTC"


ETC_BTC = ETC_BTC()
"""
    name: ETC-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DCR_BTC:
    """
        name: DCR-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DCR-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DCR-BTC"

    def __str__(self):
        return "DCR-BTC"

    def __call__(self):
        return "DCR-BTC"


DCR_BTC = DCR_BTC()
"""
    name: DCR-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BTC_USDC:
    """
        name: BTC-USDC
        precision: 0.1
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.00001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BTC-USDC"
    precision: int = 0.1
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.00001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-USDC"

    def __str__(self):
        return "BTC-USDC"

    def __call__(self):
        return "BTC-USDC"


BTC_USDC = BTC_USDC()
"""
    name: BTC-USDC
    precision: 0.1
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.00001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ENJ_ETH:
    """
        name: ENJ-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ENJ-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJ-ETH"

    def __str__(self):
        return "ENJ-ETH"

    def __call__(self):
        return "ENJ-ETH"


ENJ_ETH = ENJ_ETH()
"""
    name: ENJ-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IOST_BTC:
    """
        name: IOST-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "IOST-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOST-BTC"

    def __str__(self):
        return "IOST-BTC"

    def __call__(self):
        return "IOST-BTC"


IOST_BTC = IOST_BTC()
"""
    name: IOST-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DASH_BTC:
    """
        name: DASH-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DASH-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASH-BTC"

    def __str__(self):
        return "DASH-BTC"

    def __call__(self):
        return "DASH-BTC"


DASH_BTC = DASH_BTC()
"""
    name: DASH-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class EOS_USDT:
    """
        name: EOS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "EOS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-USDT"

    def __str__(self):
        return "EOS-USDT"

    def __call__(self):
        return "EOS-USDT"


EOS_USDT = EOS_USDT()
"""
    name: EOS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class EOS_ETH:
    """
        name: EOS-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "EOS-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-ETH"

    def __str__(self):
        return "EOS-ETH"

    def __call__(self):
        return "EOS-ETH"


EOS_ETH = EOS_ETH()
"""
    name: EOS-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ZIL_ETH:
    """
        name: ZIL-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZIL-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZIL-ETH"

    def __str__(self):
        return "ZIL-ETH"

    def __call__(self):
        return "ZIL-ETH"


ZIL_ETH = ZIL_ETH()
"""
    name: ZIL-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH_TUSD:
    """
        name: ETH-TUSD
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETH-TUSD"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-TUSD"

    def __str__(self):
        return "ETH-TUSD"

    def __call__(self):
        return "ETH-TUSD"


ETH_TUSD = ETH_TUSD()
"""
    name: ETH-TUSD
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GAS_BTC:
    """
        name: GAS-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GAS-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GAS-BTC"

    def __str__(self):
        return "GAS-BTC"

    def __call__(self):
        return "GAS-BTC"


GAS_BTC = GAS_BTC()
"""
    name: GAS-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LYM_BTC:
    """
        name: LYM-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LYM-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LYM-BTC"

    def __str__(self):
        return "LYM-BTC"

    def __call__(self):
        return "LYM-BTC"


LYM_BTC = LYM_BTC()
"""
    name: LYM-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BCH_BTC:
    """
        name: BCH-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BCH-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH-BTC"

    def __str__(self):
        return "BCH-BTC"

    def __call__(self):
        return "BCH-BTC"


BCH_BTC = BCH_BTC()
"""
    name: BCH-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class VSYS_BTC:
    """
        name: VSYS-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VSYS-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VSYS-BTC"

    def __str__(self):
        return "VSYS-BTC"

    def __call__(self):
        return "VSYS-BTC"


VSYS_BTC = VSYS_BTC()
"""
    name: VSYS-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BCH_USDT:
    """
        name: BCH-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BCH-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH-USDT"

    def __str__(self):
        return "BCH-USDT"

    def __call__(self):
        return "BCH-USDT"


BCH_USDT = BCH_USDT()
"""
    name: BCH-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MKR_DAI:
    """
        name: MKR-DAI
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MKR-DAI"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MKR-DAI"

    def __str__(self):
        return "MKR-DAI"

    def __call__(self):
        return "MKR-DAI"


MKR_DAI = MKR_DAI()
"""
    name: MKR-DAI
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOLVE_BTC:
    """
        name: SOLVE-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SOLVE-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLVE-BTC"

    def __str__(self):
        return "SOLVE-BTC"

    def __call__(self):
        return "SOLVE-BTC"


SOLVE_BTC = SOLVE_BTC()
"""
    name: SOLVE-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GRIN_BTC:
    """
        name: GRIN-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GRIN-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRIN-BTC"

    def __str__(self):
        return "GRIN-BTC"

    def __call__(self):
        return "GRIN-BTC"


GRIN_BTC = GRIN_BTC()
"""
    name: GRIN-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GRIN_USDT:
    """
        name: GRIN-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GRIN-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRIN-USDT"

    def __str__(self):
        return "GRIN-USDT"

    def __call__(self):
        return "GRIN-USDT"


GRIN_USDT = GRIN_USDT()
"""
    name: GRIN-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UQC_BTC:
    """
        name: UQC-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UQC-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UQC-BTC"

    def __str__(self):
        return "UQC-BTC"

    def __call__(self):
        return "UQC-BTC"


UQC_BTC = UQC_BTC()
"""
    name: UQC-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UQC_ETH:
    """
        name: UQC-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UQC-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UQC-ETH"

    def __str__(self):
        return "UQC-ETH"

    def __call__(self):
        return "UQC-ETH"


UQC_ETH = UQC_ETH()
"""
    name: UQC-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OPCT_BTC:
    """
        name: OPCT-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OPCT-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPCT-BTC"

    def __str__(self):
        return "OPCT-BTC"

    def __call__(self):
        return "OPCT-BTC"


OPCT_BTC = OPCT_BTC()
"""
    name: OPCT-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OPCT_ETH:
    """
        name: OPCT-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OPCT-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPCT-ETH"

    def __str__(self):
        return "OPCT-ETH"

    def __call__(self):
        return "OPCT-ETH"


OPCT_ETH = OPCT_ETH()
"""
    name: OPCT-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PRE_USDT:
    """
        name: PRE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PRE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRE-USDT"

    def __str__(self):
        return "PRE-USDT"

    def __call__(self):
        return "PRE-USDT"


PRE_USDT = PRE_USDT()
"""
    name: PRE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHR_BTC:
    """
        name: SHR-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHR-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHR-BTC"

    def __str__(self):
        return "SHR-BTC"

    def __call__(self):
        return "SHR-BTC"


SHR_BTC = SHR_BTC()
"""
    name: SHR-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHR_USDT:
    """
        name: SHR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHR-USDT"

    def __str__(self):
        return "SHR-USDT"

    def __call__(self):
        return "SHR-USDT"


SHR_USDT = SHR_USDT()
"""
    name: SHR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VIDT_USDT:
    """
        name: VIDT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VIDT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VIDT-USDT"

    def __str__(self):
        return "VIDT-USDT"

    def __call__(self):
        return "VIDT-USDT"


VIDT_USDT = VIDT_USDT()
"""
    name: VIDT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ROSE_USDT:
    """
        name: ROSE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ROSE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSE-USDT"

    def __str__(self):
        return "ROSE-USDT"

    def __call__(self):
        return "ROSE-USDT"


ROSE_USDT = ROSE_USDT()
"""
    name: ROSE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class USDC_USDT:
    """
        name: USDC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "USDC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDC-USDT"

    def __str__(self):
        return "USDC-USDT"

    def __call__(self):
        return "USDC-USDT"


USDC_USDT = USDC_USDT()
"""
    name: USDC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CTI_USDT:
    """
        name: CTI-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CTI-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTI-USDT"

    def __str__(self):
        return "CTI-USDT"

    def __call__(self):
        return "CTI-USDT"


CTI_USDT = CTI_USDT()
"""
    name: CTI-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CTI_ETH:
    """
        name: CTI-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CTI-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTI-ETH"

    def __str__(self):
        return "CTI-ETH"

    def __call__(self):
        return "CTI-ETH"


CTI_ETH = CTI_ETH()
"""
    name: CTI-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH2_ETH:
    """
        name: ETH2-ETH
        precision: 0.0001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETH2-ETH"
    precision: int = 0.0001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH2-ETH"

    def __str__(self):
        return "ETH2-ETH"

    def __call__(self):
        return "ETH2-ETH"


ETH2_ETH = ETH2_ETH()
"""
    name: ETH2-ETH
    precision: 0.0001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BUX_BTC:
    """
        name: BUX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BUX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUX-BTC"

    def __str__(self):
        return "BUX-BTC"

    def __call__(self):
        return "BUX-BTC"


BUX_BTC = BUX_BTC()
"""
    name: BUX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XHV_USDT:
    """
        name: XHV-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XHV-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XHV-USDT"

    def __str__(self):
        return "XHV-USDT"

    def __call__(self):
        return "XHV-USDT"


XHV_USDT = XHV_USDT()
"""
    name: XHV-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PLU_USDT:
    """
        name: PLU-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PLU-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLU-USDT"

    def __str__(self):
        return "PLU-USDT"

    def __call__(self):
        return "PLU-USDT"


PLU_USDT = PLU_USDT()
"""
    name: PLU-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GRT_USDT:
    """
        name: GRT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "GRT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRT-USDT"

    def __str__(self):
        return "GRT-USDT"

    def __call__(self):
        return "GRT-USDT"


GRT_USDT = GRT_USDT()
"""
    name: GRT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CAS_BTC:
    """
        name: CAS-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 50
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CAS-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 50
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAS-BTC"

    def __str__(self):
        return "CAS-BTC"

    def __call__(self):
        return "CAS-BTC"


CAS_BTC = CAS_BTC()
"""
    name: CAS-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 50
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CAS_USDT:
    """
        name: CAS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 50
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CAS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 50
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAS-USDT"

    def __str__(self):
        return "CAS-USDT"

    def __call__(self):
        return "CAS-USDT"


CAS_USDT = CAS_USDT()
"""
    name: CAS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 50
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MSWAP_BTC:
    """
        name: MSWAP-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MSWAP-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MSWAP-BTC"

    def __str__(self):
        return "MSWAP-BTC"

    def __call__(self):
        return "MSWAP-BTC"


MSWAP_BTC = MSWAP_BTC()
"""
    name: MSWAP-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MSWAP_USDT:
    """
        name: MSWAP-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MSWAP-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MSWAP-USDT"

    def __str__(self):
        return "MSWAP-USDT"

    def __call__(self):
        return "MSWAP-USDT"


MSWAP_USDT = MSWAP_USDT()
"""
    name: MSWAP-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GOM2_BTC:
    """
        name: GOM2-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GOM2-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOM2-BTC"

    def __str__(self):
        return "GOM2-BTC"

    def __call__(self):
        return "GOM2-BTC"


GOM2_BTC = GOM2_BTC()
"""
    name: GOM2-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GOM2_USDT:
    """
        name: GOM2-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GOM2-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOM2-USDT"

    def __str__(self):
        return "GOM2-USDT"

    def __call__(self):
        return "GOM2-USDT"


GOM2_USDT = GOM2_USDT()
"""
    name: GOM2-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class REVV_BTC:
    """
        name: REVV-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REVV-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REVV-BTC"

    def __str__(self):
        return "REVV-BTC"

    def __call__(self):
        return "REVV-BTC"


REVV_BTC = REVV_BTC()
"""
    name: REVV-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class REVV_USDT:
    """
        name: REVV-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REVV-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REVV-USDT"

    def __str__(self):
        return "REVV-USDT"

    def __call__(self):
        return "REVV-USDT"


REVV_USDT = REVV_USDT()
"""
    name: REVV-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LON_USDT:
    """
        name: LON-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LON-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LON-USDT"

    def __str__(self):
        return "LON-USDT"

    def __call__(self):
        return "LON-USDT"


LON_USDT = LON_USDT()
"""
    name: LON-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ONEINCH_USDT:
    """
        name: 1INCH-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "1INCH-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1INCH-USDT"

    def __str__(self):
        return "1INCH-USDT"

    def __call__(self):
        return "1INCH-USDT"


ONEINCH_USDT = ONEINCH_USDT()
"""
    name: 1INCH-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class LOC_USDT:
    """
        name: LOC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOC-USDT"

    def __str__(self):
        return "LOC-USDT"

    def __call__(self):
        return "LOC-USDT"


LOC_USDT = LOC_USDT()
"""
    name: LOC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class API3_USDT:
    """
        name: API3-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "API3-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "API3-USDT"

    def __str__(self):
        return "API3-USDT"

    def __call__(self):
        return "API3-USDT"


API3_USDT = API3_USDT()
"""
    name: API3-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class UNFI_USDT:
    """
        name: UNFI-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UNFI-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNFI-USDT"

    def __str__(self):
        return "UNFI-USDT"

    def __call__(self):
        return "UNFI-USDT"


UNFI_USDT = UNFI_USDT()
"""
    name: UNFI-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HTR_USDT:
    """
        name: HTR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HTR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HTR-USDT"

    def __str__(self):
        return "HTR-USDT"

    def __call__(self):
        return "HTR-USDT"


HTR_USDT = HTR_USDT()
"""
    name: HTR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FRONT_USDT:
    """
        name: FRONT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FRONT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONT-USDT"

    def __str__(self):
        return "FRONT-USDT"

    def __call__(self):
        return "FRONT-USDT"


FRONT_USDT = FRONT_USDT()
"""
    name: FRONT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class FRONT_BTC:
    """
        name: FRONT-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FRONT-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRONT-BTC"

    def __str__(self):
        return "FRONT-BTC"

    def __call__(self):
        return "FRONT-BTC"


FRONT_BTC = FRONT_BTC()
"""
    name: FRONT-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WBTC_BTC:
    """
        name: WBTC-BTC
        precision: 0.00001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WBTC-BTC"
    precision: int = 0.00001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTC-BTC"

    def __str__(self):
        return "WBTC-BTC"

    def __call__(self):
        return "WBTC-BTC"


WBTC_BTC = WBTC_BTC()
"""
    name: WBTC-BTC
    precision: 0.00001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WBTC_ETH:
    """
        name: WBTC-ETH
        precision: 0.0001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WBTC-ETH"
    precision: int = 0.0001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WBTC-ETH"

    def __str__(self):
        return "WBTC-ETH"

    def __call__(self):
        return "WBTC-ETH"


WBTC_ETH = WBTC_ETH()
"""
    name: WBTC-ETH
    precision: 0.0001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MIR_USDT:
    """
        name: MIR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MIR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIR-USDT"

    def __str__(self):
        return "MIR-USDT"

    def __call__(self):
        return "MIR-USDT"


MIR_USDT = MIR_USDT()
"""
    name: MIR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTC_USDC:
    """
        name: LTC-USDC
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LTC-USDC"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC-USDC"

    def __str__(self):
        return "LTC-USDC"

    def __call__(self):
        return "LTC-USDC"


LTC_USDC = LTC_USDC()
"""
    name: LTC-USDC
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BCH_USDC:
    """
        name: BCH-USDC
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BCH-USDC"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH-USDC"

    def __str__(self):
        return "BCH-USDC"

    def __call__(self):
        return "BCH-USDC"


BCH_USDC = BCH_USDC()
"""
    name: BCH-USDC
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HYDRA_USDT:
    """
        name: HYDRA-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HYDRA-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HYDRA-USDT"

    def __str__(self):
        return "HYDRA-USDT"

    def __call__(self):
        return "HYDRA-USDT"


HYDRA_USDT = HYDRA_USDT()
"""
    name: HYDRA-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DFI_USDT:
    """
        name: DFI-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DFI-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFI-USDT"

    def __str__(self):
        return "DFI-USDT"

    def __call__(self):
        return "DFI-USDT"


DFI_USDT = DFI_USDT()
"""
    name: DFI-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DFI_BTC:
    """
        name: DFI-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DFI-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFI-BTC"

    def __str__(self):
        return "DFI-BTC"

    def __call__(self):
        return "DFI-BTC"


DFI_BTC = DFI_BTC()
"""
    name: DFI-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CRV_USDT:
    """
        name: CRV-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CRV-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRV-USDT"

    def __str__(self):
        return "CRV-USDT"

    def __call__(self):
        return "CRV-USDT"


CRV_USDT = CRV_USDT()
"""
    name: CRV-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SUSHI_USDT:
    """
        name: SUSHI-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SUSHI-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHI-USDT"

    def __str__(self):
        return "SUSHI-USDT"

    def __call__(self):
        return "SUSHI-USDT"


SUSHI_USDT = SUSHI_USDT()
"""
    name: SUSHI-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class FRM_USDT:
    """
        name: FRM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 25
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FRM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 25
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRM-USDT"

    def __str__(self):
        return "FRM-USDT"

    def __call__(self):
        return "FRM-USDT"


FRM_USDT = FRM_USDT()
"""
    name: FRM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 25
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EOS_USDC:
    """
        name: EOS-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "EOS-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS-USDC"

    def __str__(self):
        return "EOS-USDC"

    def __call__(self):
        return "EOS-USDC"


EOS_USDC = EOS_USDC()
"""
    name: EOS-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BSV_USDC:
    """
        name: BCHSV-USDC
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BCHSV-USDC"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-USDC"

    def __str__(self):
        return "BCHSV-USDC"

    def __call__(self):
        return "BCHSV-USDC"


BSV_USDC = BSV_USDC()
"""
    name: BCHSV-USDC
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZEN_USDT:
    """
        name: ZEN-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZEN-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEN-USDT"

    def __str__(self):
        return "ZEN-USDT"

    def __call__(self):
        return "ZEN-USDT"


ZEN_USDT = ZEN_USDT()
"""
    name: ZEN-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CUDOS_USDT:
    """
        name: CUDOS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CUDOS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CUDOS-USDT"

    def __str__(self):
        return "CUDOS-USDT"

    def __call__(self):
        return "CUDOS-USDT"


CUDOS_USDT = CUDOS_USDT()
"""
    name: CUDOS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ADA_USDC:
    """
        name: ADA-USDC
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ADA-USDC"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA-USDC"

    def __str__(self):
        return "ADA-USDC"

    def __call__(self):
        return "ADA-USDC"


ADA_USDC = ADA_USDC()
"""
    name: ADA-USDC
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class REN_USDT:
    """
        name: REN-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "REN-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REN-USDT"

    def __str__(self):
        return "REN-USDT"

    def __call__(self):
        return "REN-USDT"


REN_USDT = REN_USDT()
"""
    name: REN-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class LRC_USDT:
    """
        name: LRC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LRC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRC-USDT"

    def __str__(self):
        return "LRC-USDT"

    def __call__(self):
        return "LRC-USDT"


LRC_USDT = LRC_USDT()
"""
    name: LRC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class LINK_USDC:
    """
        name: LINK-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LINK-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK-USDC"

    def __str__(self):
        return "LINK-USDC"

    def __call__(self):
        return "LINK-USDC"


LINK_USDC = LINK_USDC()
"""
    name: LINK-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KLV_USDT:
    """
        name: KLV-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KLV-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLV-USDT"

    def __str__(self):
        return "KLV-USDT"

    def __call__(self):
        return "KLV-USDT"


KLV_USDT = KLV_USDT()
"""
    name: KLV-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KLV_BTC:
    """
        name: KLV-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KLV-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLV-BTC"

    def __str__(self):
        return "KLV-BTC"

    def __call__(self):
        return "KLV-BTC"


KLV_BTC = KLV_BTC()
"""
    name: KLV-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BOA_USDT:
    """
        name: BOA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BOA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOA-USDT"

    def __str__(self):
        return "BOA-USDT"

    def __call__(self):
        return "BOA-USDT"


BOA_USDT = BOA_USDT()
"""
    name: BOA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class THETA_USDT:
    """
        name: THETA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "THETA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "THETA-USDT"

    def __str__(self):
        return "THETA-USDT"

    def __call__(self):
        return "THETA-USDT"


THETA_USDT = THETA_USDT()
"""
    name: THETA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class QNT_USDT:
    """
        name: QNT-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "QNT-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QNT-USDT"

    def __str__(self):
        return "QNT-USDT"

    def __call__(self):
        return "QNT-USDT"


QNT_USDT = QNT_USDT()
"""
    name: QNT-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BAT_USDT:
    """
        name: BAT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BAT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAT-USDT"

    def __str__(self):
        return "BAT-USDT"

    def __call__(self):
        return "BAT-USDT"


BAT_USDT = BAT_USDT()
"""
    name: BAT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DOGE_USDT:
    """
        name: DOGE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DOGE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE-USDT"

    def __str__(self):
        return "DOGE-USDT"

    def __call__(self):
        return "DOGE-USDT"


DOGE_USDT = DOGE_USDT()
"""
    name: DOGE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DOGE_USDC:
    """
        name: DOGE-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DOGE-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE-USDC"

    def __str__(self):
        return "DOGE-USDC"

    def __call__(self):
        return "DOGE-USDC"


DOGE_USDC = DOGE_USDC()
"""
    name: DOGE-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DAO_USDT:
    """
        name: DAO-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DAO-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAO-USDT"

    def __str__(self):
        return "DAO-USDT"

    def __call__(self):
        return "DAO-USDT"


DAO_USDT = DAO_USDT()
"""
    name: DAO-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class STRONG_USDT:
    """
        name: STRONG-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STRONG-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRONG-USDT"

    def __str__(self):
        return "STRONG-USDT"

    def __call__(self):
        return "STRONG-USDT"


STRONG_USDT = STRONG_USDT()
"""
    name: STRONG-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRIAS_USDT:
    """
        name: TRIAS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRIAS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIAS-USDT"

    def __str__(self):
        return "TRIAS-USDT"

    def __call__(self):
        return "TRIAS-USDT"


TRIAS_USDT = TRIAS_USDT()
"""
    name: TRIAS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRIAS_BTC:
    """
        name: TRIAS-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRIAS-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIAS-BTC"

    def __str__(self):
        return "TRIAS-BTC"

    def __call__(self):
        return "TRIAS-BTC"


TRIAS_BTC = TRIAS_BTC()
"""
    name: TRIAS-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOGE_BTC:
    """
        name: DOGE-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DOGE-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE-BTC"

    def __str__(self):
        return "DOGE-BTC"

    def __call__(self):
        return "DOGE-BTC"


DOGE_BTC = DOGE_BTC()
"""
    name: DOGE-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MITX_BTC:
    """
        name: MITX-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MITX-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITX-BTC"

    def __str__(self):
        return "MITX-BTC"

    def __call__(self):
        return "MITX-BTC"


MITX_BTC = MITX_BTC()
"""
    name: MITX-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MITX_USDT:
    """
        name: MITX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MITX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MITX-USDT"

    def __str__(self):
        return "MITX-USDT"

    def __call__(self):
        return "MITX-USDT"


MITX_USDT = MITX_USDT()
"""
    name: MITX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CAKE_USDT:
    """
        name: CAKE-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CAKE-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CAKE-USDT"

    def __str__(self):
        return "CAKE-USDT"

    def __call__(self):
        return "CAKE-USDT"


CAKE_USDT = CAKE_USDT()
"""
    name: CAKE-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ORAI_USDT:
    """
        name: ORAI-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ORAI-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORAI-USDT"

    def __str__(self):
        return "ORAI-USDT"

    def __call__(self):
        return "ORAI-USDT"


ORAI_USDT = ORAI_USDT()
"""
    name: ORAI-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZEE_USDT:
    """
        name: ZEE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZEE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEE-USDT"

    def __str__(self):
        return "ZEE-USDT"

    def __call__(self):
        return "ZEE-USDT"


ZEE_USDT = ZEE_USDT()
"""
    name: ZEE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTX_USDT:
    """
        name: LTX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LTX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTX-USDT"

    def __str__(self):
        return "LTX-USDT"

    def __call__(self):
        return "LTX-USDT"


LTX_USDT = LTX_USDT()
"""
    name: LTX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTX_BTC:
    """
        name: LTX-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LTX-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTX-BTC"

    def __str__(self):
        return "LTX-BTC"

    def __call__(self):
        return "LTX-BTC"


LTX_BTC = LTX_BTC()
"""
    name: LTX-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MASK_USDT:
    """
        name: MASK-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "MASK-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MASK-USDT"

    def __str__(self):
        return "MASK-USDT"

    def __call__(self):
        return "MASK-USDT"


MASK_USDT = MASK_USDT()
"""
    name: MASK-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KLV_TRX:
    """
        name: KLV-TRX
        precision: 0.00001
        minimum_margin: 10
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KLV-TRX"
    precision: int = 0.00001
    minimum_margin: float = 10
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLV-TRX"

    def __str__(self):
        return "KLV-TRX"

    def __call__(self):
        return "KLV-TRX"


KLV_TRX = KLV_TRX()
"""
    name: KLV-TRX
    precision: 0.00001
    minimum_margin: 10
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IDEA_USDT:
    """
        name: IDEA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "IDEA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IDEA-USDT"

    def __str__(self):
        return "IDEA-USDT"

    def __call__(self):
        return "IDEA-USDT"


IDEA_USDT = IDEA_USDT()
"""
    name: IDEA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PHA_USDT:
    """
        name: PHA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PHA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHA-USDT"

    def __str__(self):
        return "PHA-USDT"

    def __call__(self):
        return "PHA-USDT"


PHA_USDT = PHA_USDT()
"""
    name: PHA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PHA_ETH:
    """
        name: PHA-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PHA-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHA-ETH"

    def __str__(self):
        return "PHA-ETH"

    def __call__(self):
        return "PHA-ETH"


PHA_ETH = PHA_ETH()
"""
    name: PHA-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BCH_KCS:
    """
        name: BCH-KCS
        precision: 0.001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BCH-KCS"
    precision: int = 0.001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH-KCS"

    def __str__(self):
        return "BCH-KCS"

    def __call__(self):
        return "BCH-KCS"


BCH_KCS = BCH_KCS()
"""
    name: BCH-KCS
    precision: 0.001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SRK_USDT:
    """
        name: SRK-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SRK-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRK-USDT"

    def __str__(self):
        return "SRK-USDT"

    def __call__(self):
        return "SRK-USDT"


SRK_USDT = SRK_USDT()
"""
    name: SRK-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SRK_BTC:
    """
        name: SRK-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SRK-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRK-BTC"

    def __str__(self):
        return "SRK-BTC"

    def __call__(self):
        return "SRK-BTC"


SRK_BTC = SRK_BTC()
"""
    name: SRK-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ADA_KCS:
    """
        name: ADA-KCS
        precision: 0.00001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ADA-KCS"
    precision: int = 0.00001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA-KCS"

    def __str__(self):
        return "ADA-KCS"

    def __call__(self):
        return "ADA-KCS"


ADA_KCS = ADA_KCS()
"""
    name: ADA-KCS
    precision: 0.00001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HTR_BTC:
    """
        name: HTR-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HTR-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HTR-BTC"

    def __str__(self):
        return "HTR-BTC"

    def __call__(self):
        return "HTR-BTC"


HTR_BTC = HTR_BTC()
"""
    name: HTR-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BSV_KCS:
    """
        name: BCHSV-KCS
        precision: 0.001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BCHSV-KCS"
    precision: int = 0.001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCHSV-KCS"

    def __str__(self):
        return "BCHSV-KCS"

    def __call__(self):
        return "BCHSV-KCS"


BSV_KCS = BSV_KCS()
"""
    name: BCHSV-KCS
    precision: 0.001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOT_KCS:
    """
        name: DOT-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DOT-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT-KCS"

    def __str__(self):
        return "DOT-KCS"

    def __call__(self):
        return "DOT-KCS"


DOT_KCS = DOT_KCS()
"""
    name: DOT-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LINK_KCS:
    """
        name: LINK-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LINK-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK-KCS"

    def __str__(self):
        return "LINK-KCS"

    def __call__(self):
        return "LINK-KCS"


LINK_KCS = LINK_KCS()
"""
    name: LINK-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MIR_KCS:
    """
        name: MIR-KCS
        precision: 0.00001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MIR-KCS"
    precision: int = 0.00001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MIR-KCS"

    def __str__(self):
        return "MIR-KCS"

    def __call__(self):
        return "MIR-KCS"


MIR_KCS = MIR_KCS()
"""
    name: MIR-KCS
    precision: 0.00001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNB_KCS:
    """
        name: BNB-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BNB-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB-KCS"

    def __str__(self):
        return "BNB-KCS"

    def __call__(self):
        return "BNB-KCS"


BNB_KCS = BNB_KCS()
"""
    name: BNB-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XLM_KCS:
    """
        name: XLM-KCS
        precision: 0.000001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XLM-KCS"
    precision: int = 0.000001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XLM-KCS"

    def __str__(self):
        return "XLM-KCS"

    def __call__(self):
        return "XLM-KCS"


XLM_KCS = XLM_KCS()
"""
    name: XLM-KCS
    precision: 0.000001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VET_KCS:
    """
        name: VET-KCS
        precision: 0.000001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VET-KCS"
    precision: int = 0.000001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET-KCS"

    def __str__(self):
        return "VET-KCS"

    def __call__(self):
        return "VET-KCS"


VET_KCS = VET_KCS()
"""
    name: VET-KCS
    precision: 0.000001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SWINGBY_USDT:
    """
        name: SWINGBY-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SWINGBY-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWINGBY-USDT"

    def __str__(self):
        return "SWINGBY-USDT"

    def __call__(self):
        return "SWINGBY-USDT"


SWINGBY_USDT = SWINGBY_USDT()
"""
    name: SWINGBY-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SWINGBY_BTC:
    """
        name: SWINGBY-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SWINGBY-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWINGBY-BTC"

    def __str__(self):
        return "SWINGBY-BTC"

    def __call__(self):
        return "SWINGBY-BTC"


SWINGBY_BTC = SWINGBY_BTC()
"""
    name: SWINGBY-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XHV_BTC:
    """
        name: XHV-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XHV-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XHV-BTC"

    def __str__(self):
        return "XHV-BTC"

    def __call__(self):
        return "XHV-BTC"


XHV_BTC = XHV_BTC()
"""
    name: XHV-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DASH_KCS:
    """
        name: DASH-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DASH-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DASH-KCS"

    def __str__(self):
        return "DASH-KCS"

    def __call__(self):
        return "DASH-KCS"


DASH_KCS = DASH_KCS()
"""
    name: DASH-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UNI_KCS:
    """
        name: UNI-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UNI-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNI-KCS"

    def __str__(self):
        return "UNI-KCS"

    def __call__(self):
        return "UNI-KCS"


UNI_KCS = UNI_KCS()
"""
    name: UNI-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AAVE_KCS:
    """
        name: AAVE-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AAVE-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE-KCS"

    def __str__(self):
        return "AAVE-KCS"

    def __call__(self):
        return "AAVE-KCS"


AAVE_KCS = AAVE_KCS()
"""
    name: AAVE-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOGE_KCS:
    """
        name: DOGE-KCS
        precision: 0.000001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DOGE-KCS"
    precision: int = 0.000001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE-KCS"

    def __str__(self):
        return "DOGE-KCS"

    def __call__(self):
        return "DOGE-KCS"


DOGE_KCS = DOGE_KCS()
"""
    name: DOGE-KCS
    precision: 0.000001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZEC_KCS:
    """
        name: ZEC-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZEC-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZEC-KCS"

    def __str__(self):
        return "ZEC-KCS"

    def __call__(self):
        return "ZEC-KCS"


ZEC_KCS = ZEC_KCS()
"""
    name: ZEC-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XTZ_KCS:
    """
        name: XTZ-KCS
        precision: 0.00001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XTZ-KCS"
    precision: int = 0.00001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTZ-KCS"

    def __str__(self):
        return "XTZ-KCS"

    def __call__(self):
        return "XTZ-KCS"


XTZ_KCS = XTZ_KCS()
"""
    name: XTZ-KCS
    precision: 0.00001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GRT_KCS:
    """
        name: GRT-KCS
        precision: 0.000001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GRT-KCS"
    precision: int = 0.000001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GRT-KCS"

    def __str__(self):
        return "GRT-KCS"

    def __call__(self):
        return "GRT-KCS"


GRT_KCS = GRT_KCS()
"""
    name: GRT-KCS
    precision: 0.000001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALGO_KCS:
    """
        name: ALGO-KCS
        precision: 0.00001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALGO-KCS"
    precision: int = 0.00001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-KCS"

    def __str__(self):
        return "ALGO-KCS"

    def __call__(self):
        return "ALGO-KCS"


ALGO_KCS = ALGO_KCS()
"""
    name: ALGO-KCS
    precision: 0.00001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EWT_KCS:
    """
        name: EWT-KCS
        precision: 0.0001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EWT-KCS"
    precision: int = 0.0001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EWT-KCS"

    def __str__(self):
        return "EWT-KCS"

    def __call__(self):
        return "EWT-KCS"


EWT_KCS = EWT_KCS()
"""
    name: EWT-KCS
    precision: 0.0001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GAS_USDT:
    """
        name: GAS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GAS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GAS-USDT"

    def __str__(self):
        return "GAS-USDT"

    def __call__(self):
        return "GAS-USDT"


GAS_USDT = GAS_USDT()
"""
    name: GAS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AVAX_USDT:
    """
        name: AVAX-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "AVAX-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX-USDT"

    def __str__(self):
        return "AVAX-USDT"

    def __call__(self):
        return "AVAX-USDT"


AVAX_USDT = AVAX_USDT()
"""
    name: AVAX-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class AVAX_BTC:
    """
        name: AVAX-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AVAX-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX-BTC"

    def __str__(self):
        return "AVAX-BTC"

    def __call__(self):
        return "AVAX-BTC"


AVAX_BTC = AVAX_BTC()
"""
    name: AVAX-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KRL_BTC:
    """
        name: KRL-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KRL-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KRL-BTC"

    def __str__(self):
        return "KRL-BTC"

    def __call__(self):
        return "KRL-BTC"


KRL_BTC = KRL_BTC()
"""
    name: KRL-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KRL_USDT:
    """
        name: KRL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KRL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KRL-USDT"

    def __str__(self):
        return "KRL-USDT"

    def __call__(self):
        return "KRL-USDT"


KRL_USDT = KRL_USDT()
"""
    name: KRL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class POLK_USDT:
    """
        name: POLK-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POLK-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLK-USDT"

    def __str__(self):
        return "POLK-USDT"

    def __call__(self):
        return "POLK-USDT"


POLK_USDT = POLK_USDT()
"""
    name: POLK-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class POLK_BTC:
    """
        name: POLK-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POLK-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLK-BTC"

    def __str__(self):
        return "POLK-BTC"

    def __call__(self):
        return "POLK-BTC"


POLK_BTC = POLK_BTC()
"""
    name: POLK-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ENJ_USDT:
    """
        name: ENJ-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ENJ-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENJ-USDT"

    def __str__(self):
        return "ENJ-USDT"

    def __call__(self):
        return "ENJ-USDT"


ENJ_USDT = ENJ_USDT()
"""
    name: ENJ-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MANA_USDT:
    """
        name: MANA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "MANA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA-USDT"

    def __str__(self):
        return "MANA-USDT"

    def __call__(self):
        return "MANA-USDT"


MANA_USDT = MANA_USDT()
"""
    name: MANA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class RNDR_USDT:
    """
        name: RNDR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.5
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "RNDR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.5
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDR-USDT"

    def __str__(self):
        return "RNDR-USDT"

    def __call__(self):
        return "RNDR-USDT"


RNDR_USDT = RNDR_USDT()
"""
    name: RNDR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.5
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class RNDR_BTC:
    """
        name: RNDR-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.5
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RNDR-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.5
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RNDR-BTC"

    def __str__(self):
        return "RNDR-BTC"

    def __call__(self):
        return "RNDR-BTC"


RNDR_BTC = RNDR_BTC()
"""
    name: RNDR-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.5
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RLY_USDT:
    """
        name: RLY-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 100000000
        margin: False
    """
    name: str = "RLY-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 100000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLY-USDT"

    def __str__(self):
        return "RLY-USDT"

    def __call__(self):
        return "RLY-USDT"


RLY_USDT = RLY_USDT()
"""
    name: RLY-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 100000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ANC_USDT:
    """
        name: ANC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ANC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANC-USDT"

    def __str__(self):
        return "ANC-USDT"

    def __call__(self):
        return "ANC-USDT"


ANC_USDT = ANC_USDT()
"""
    name: ANC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SKEY_USDT:
    """
        name: SKEY-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SKEY-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKEY-USDT"

    def __str__(self):
        return "SKEY-USDT"

    def __call__(self):
        return "SKEY-USDT"


SKEY_USDT = SKEY_USDT()
"""
    name: SKEY-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LAYER_USDT:
    """
        name: LAYER-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LAYER-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAYER-USDT"

    def __str__(self):
        return "LAYER-USDT"

    def __call__(self):
        return "LAYER-USDT"


LAYER_USDT = LAYER_USDT()
"""
    name: LAYER-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TARA_USDT:
    """
        name: TARA-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TARA-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TARA-USDT"

    def __str__(self):
        return "TARA-USDT"

    def __call__(self):
        return "TARA-USDT"


TARA_USDT = TARA_USDT()
"""
    name: TARA-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TARA_ETH:
    """
        name: TARA-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TARA-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TARA-ETH"

    def __str__(self):
        return "TARA-ETH"

    def __call__(self):
        return "TARA-ETH"


TARA_ETH = TARA_ETH()
"""
    name: TARA-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IOST_USDT:
    """
        name: IOST-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "IOST-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOST-USDT"

    def __str__(self):
        return "IOST-USDT"

    def __call__(self):
        return "IOST-USDT"


IOST_USDT = IOST_USDT()
"""
    name: IOST-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DYP_USDT:
    """
        name: DYP-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DYP-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYP-USDT"

    def __str__(self):
        return "DYP-USDT"

    def __call__(self):
        return "DYP-USDT"


DYP_USDT = DYP_USDT()
"""
    name: DYP-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DYP_ETH:
    """
        name: DYP-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DYP-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYP-ETH"

    def __str__(self):
        return "DYP-ETH"

    def __call__(self):
        return "DYP-ETH"


DYP_ETH = DYP_ETH()
"""
    name: DYP-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XYM_USDT:
    """
        name: XYM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XYM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYM-USDT"

    def __str__(self):
        return "XYM-USDT"

    def __call__(self):
        return "XYM-USDT"


XYM_USDT = XYM_USDT()
"""
    name: XYM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XYM_BTC:
    """
        name: XYM-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XYM-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYM-BTC"

    def __str__(self):
        return "XYM-BTC"

    def __call__(self):
        return "XYM-BTC"


XYM_BTC = XYM_BTC()
"""
    name: XYM-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PCX_USDT:
    """
        name: PCX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PCX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PCX-USDT"

    def __str__(self):
        return "PCX-USDT"

    def __call__(self):
        return "PCX-USDT"


PCX_USDT = PCX_USDT()
"""
    name: PCX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PCX_BTC:
    """
        name: PCX-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PCX-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PCX-BTC"

    def __str__(self):
        return "PCX-BTC"

    def __call__(self):
        return "PCX-BTC"


PCX_BTC = PCX_BTC()
"""
    name: PCX-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ORBS_USDT:
    """
        name: ORBS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ORBS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORBS-USDT"

    def __str__(self):
        return "ORBS-USDT"

    def __call__(self):
        return "ORBS-USDT"


ORBS_USDT = ORBS_USDT()
"""
    name: ORBS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ORBS_BTC:
    """
        name: ORBS-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ORBS-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORBS-BTC"

    def __str__(self):
        return "ORBS-BTC"

    def __call__(self):
        return "ORBS-BTC"


ORBS_BTC = ORBS_BTC()
"""
    name: ORBS-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BTC3L_USDT:
    """
        name: BTC3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BTC3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC3L-USDT"

    def __str__(self):
        return "BTC3L-USDT"

    def __call__(self):
        return "BTC3L-USDT"


BTC3L_USDT = BTC3L_USDT()
"""
    name: BTC3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BTC3S_USDT:
    """
        name: BTC3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BTC3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC3S-USDT"

    def __str__(self):
        return "BTC3S-USDT"

    def __call__(self):
        return "BTC3S-USDT"


BTC3S_USDT = BTC3S_USDT()
"""
    name: BTC3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH3L_USDT:
    """
        name: ETH3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETH3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH3L-USDT"

    def __str__(self):
        return "ETH3L-USDT"

    def __call__(self):
        return "ETH3L-USDT"


ETH3L_USDT = ETH3L_USDT()
"""
    name: ETH3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH3S_USDT:
    """
        name: ETH3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETH3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH3S-USDT"

    def __str__(self):
        return "ETH3S-USDT"

    def __call__(self):
        return "ETH3S-USDT"


ETH3S_USDT = ETH3S_USDT()
"""
    name: ETH3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ANKR_USDT:
    """
        name: ANKR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ANKR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANKR-USDT"

    def __str__(self):
        return "ANKR-USDT"

    def __call__(self):
        return "ANKR-USDT"


ANKR_USDT = ANKR_USDT()
"""
    name: ANKR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DSLA_USDT:
    """
        name: DSLA-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DSLA-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DSLA-USDT"

    def __str__(self):
        return "DSLA-USDT"

    def __call__(self):
        return "DSLA-USDT"


DSLA_USDT = DSLA_USDT()
"""
    name: DSLA-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DSLA_BTC:
    """
        name: DSLA-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DSLA-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DSLA-BTC"

    def __str__(self):
        return "DSLA-BTC"

    def __call__(self):
        return "DSLA-BTC"


DSLA_BTC = DSLA_BTC()
"""
    name: DSLA-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SAND_USDT:
    """
        name: SAND-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SAND-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SAND-USDT"

    def __str__(self):
        return "SAND-USDT"

    def __call__(self):
        return "SAND-USDT"


SAND_USDT = SAND_USDT()
"""
    name: SAND-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class VAI_USDT:
    """
        name: VAI-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VAI-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VAI-USDT"

    def __str__(self):
        return "VAI-USDT"

    def __call__(self):
        return "VAI-USDT"


VAI_USDT = VAI_USDT()
"""
    name: VAI-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XCUR_USDT:
    """
        name: XCUR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XCUR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCUR-USDT"

    def __str__(self):
        return "XCUR-USDT"

    def __call__(self):
        return "XCUR-USDT"


XCUR_USDT = XCUR_USDT()
"""
    name: XCUR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XCUR_BTC:
    """
        name: XCUR-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XCUR-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCUR-BTC"

    def __str__(self):
        return "XCUR-BTC"

    def __call__(self):
        return "XCUR-BTC"


XCUR_BTC = XCUR_BTC()
"""
    name: XCUR-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FLUX_USDT:
    """
        name: FLUX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FLUX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUX-USDT"

    def __str__(self):
        return "FLUX-USDT"

    def __call__(self):
        return "FLUX-USDT"


FLUX_USDT = FLUX_USDT()
"""
    name: FLUX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class OMG_USDT:
    """
        name: OMG-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "OMG-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OMG-USDT"

    def __str__(self):
        return "OMG-USDT"

    def __call__(self):
        return "OMG-USDT"


OMG_USDT = OMG_USDT()
"""
    name: OMG-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ZIL_USDT:
    """
        name: ZIL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ZIL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZIL-USDT"

    def __str__(self):
        return "ZIL-USDT"

    def __call__(self):
        return "ZIL-USDT"


ZIL_USDT = ZIL_USDT()
"""
    name: ZIL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DODO_USDT:
    """
        name: DODO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DODO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DODO-USDT"

    def __str__(self):
        return "DODO-USDT"

    def __call__(self):
        return "DODO-USDT"


DODO_USDT = DODO_USDT()
"""
    name: DODO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MAN_USDT:
    """
        name: MAN-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAN-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAN-USDT"

    def __str__(self):
        return "MAN-USDT"

    def __call__(self):
        return "MAN-USDT"


MAN_USDT = MAN_USDT()
"""
    name: MAN-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BAX_USDT:
    """
        name: BAX-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BAX-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAX-USDT"

    def __str__(self):
        return "BAX-USDT"

    def __call__(self):
        return "BAX-USDT"


BAX_USDT = BAX_USDT()
"""
    name: BAX-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BOSON_USDT:
    """
        name: BOSON-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BOSON-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOSON-USDT"

    def __str__(self):
        return "BOSON-USDT"

    def __call__(self):
        return "BOSON-USDT"


BOSON_USDT = BOSON_USDT()
"""
    name: BOSON-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BOSON_ETH:
    """
        name: BOSON-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BOSON-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOSON-ETH"

    def __str__(self):
        return "BOSON-ETH"

    def __call__(self):
        return "BOSON-ETH"


BOSON_ETH = BOSON_ETH()
"""
    name: BOSON-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PUNDIX_USDT:
    """
        name: PUNDIX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PUNDIX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIX-USDT"

    def __str__(self):
        return "PUNDIX-USDT"

    def __call__(self):
        return "PUNDIX-USDT"


PUNDIX_USDT = PUNDIX_USDT()
"""
    name: PUNDIX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PUNDIX_BTC:
    """
        name: PUNDIX-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PUNDIX-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUNDIX-BTC"

    def __str__(self):
        return "PUNDIX-BTC"

    def __call__(self):
        return "PUNDIX-BTC"


PUNDIX_BTC = PUNDIX_BTC()
"""
    name: PUNDIX-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WAXP_USDT:
    """
        name: WAX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "WAX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAX-USDT"

    def __str__(self):
        return "WAX-USDT"

    def __call__(self):
        return "WAX-USDT"


WAXP_USDT = WAXP_USDT()
"""
    name: WAX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class HT_USDT:
    """
        name: HT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HT-USDT"

    def __str__(self):
        return "HT-USDT"

    def __call__(self):
        return "HT-USDT"


HT_USDT = HT_USDT()
"""
    name: HT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PDEX_USDT:
    """
        name: PDEX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PDEX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PDEX-USDT"

    def __str__(self):
        return "PDEX-USDT"

    def __call__(self):
        return "PDEX-USDT"


PDEX_USDT = PDEX_USDT()
"""
    name: PDEX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LABS_USDT:
    """
        name: LABS-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LABS-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LABS-USDT"

    def __str__(self):
        return "LABS-USDT"

    def __call__(self):
        return "LABS-USDT"


LABS_USDT = LABS_USDT()
"""
    name: LABS-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LABS_ETH:
    """
        name: LABS-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LABS-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LABS-ETH"

    def __str__(self):
        return "LABS-ETH"

    def __call__(self):
        return "LABS-ETH"


LABS_ETH = LABS_ETH()
"""
    name: LABS-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMB_USDT:
    """
        name: GMB-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GMB-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMB-USDT"

    def __str__(self):
        return "GMB-USDT"

    def __call__(self):
        return "GMB-USDT"


GMB_USDT = GMB_USDT()
"""
    name: GMB-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PHNX_USDT:
    """
        name: PHNX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PHNX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHNX-USDT"

    def __str__(self):
        return "PHNX-USDT"

    def __call__(self):
        return "PHNX-USDT"


PHNX_USDT = PHNX_USDT()
"""
    name: PHNX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PHNX_BTC:
    """
        name: PHNX-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PHNX-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PHNX-BTC"

    def __str__(self):
        return "PHNX-BTC"

    def __call__(self):
        return "PHNX-BTC"


PHNX_BTC = PHNX_BTC()
"""
    name: PHNX-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HAI_USDT:
    """
        name: HAI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HAI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAI-USDT"

    def __str__(self):
        return "HAI-USDT"

    def __call__(self):
        return "HAI-USDT"


HAI_USDT = HAI_USDT()
"""
    name: HAI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EQZ_USDT:
    """
        name: EQZ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EQZ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EQZ-USDT"

    def __str__(self):
        return "EQZ-USDT"

    def __call__(self):
        return "EQZ-USDT"


EQZ_USDT = EQZ_USDT()
"""
    name: EQZ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FORTH_USDT:
    """
        name: FORTH-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FORTH-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORTH-USDT"

    def __str__(self):
        return "FORTH-USDT"

    def __call__(self):
        return "FORTH-USDT"


FORTH_USDT = FORTH_USDT()
"""
    name: FORTH-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CGG_USDT:
    """
        name: CGG-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CGG-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CGG-USDT"

    def __str__(self):
        return "CGG-USDT"

    def __call__(self):
        return "CGG-USDT"


CGG_USDT = CGG_USDT()
"""
    name: CGG-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UBX_USDT:
    """
        name: UBX-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UBX-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UBX-USDT"

    def __str__(self):
        return "UBX-USDT"

    def __call__(self):
        return "UBX-USDT"


UBX_USDT = UBX_USDT()
"""
    name: UBX-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GHX_USDT:
    """
        name: GHX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GHX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GHX-USDT"

    def __str__(self):
        return "GHX-USDT"

    def __call__(self):
        return "GHX-USDT"


GHX_USDT = GHX_USDT()
"""
    name: GHX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STND_USDT:
    """
        name: STND-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STND-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STND-USDT"

    def __str__(self):
        return "STND-USDT"

    def __call__(self):
        return "STND-USDT"


STND_USDT = STND_USDT()
"""
    name: STND-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STND_ETH:
    """
        name: STND-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STND-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STND-ETH"

    def __str__(self):
        return "STND-ETH"

    def __call__(self):
        return "STND-ETH"


STND_ETH = STND_ETH()
"""
    name: STND-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TOWER_USDT:
    """
        name: TOWER-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TOWER-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOWER-USDT"

    def __str__(self):
        return "TOWER-USDT"

    def __call__(self):
        return "TOWER-USDT"


TOWER_USDT = TOWER_USDT()
"""
    name: TOWER-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TOWER_BTC:
    """
        name: TOWER-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TOWER-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOWER-BTC"

    def __str__(self):
        return "TOWER-BTC"

    def __call__(self):
        return "TOWER-BTC"


TOWER_BTC = TOWER_BTC()
"""
    name: TOWER-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ACE_USDT:
    """
        name: ACE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ACE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACE-USDT"

    def __str__(self):
        return "ACE-USDT"

    def __call__(self):
        return "ACE-USDT"


ACE_USDT = ACE_USDT()
"""
    name: ACE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LOCG_USDT:
    """
        name: LOCG-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOCG-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOCG-USDT"

    def __str__(self):
        return "LOCG-USDT"

    def __call__(self):
        return "LOCG-USDT"


LOCG_USDT = LOCG_USDT()
"""
    name: LOCG-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CARD_USDT:
    """
        name: CARD-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CARD-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CARD-USDT"

    def __str__(self):
        return "CARD-USDT"

    def __call__(self):
        return "CARD-USDT"


CARD_USDT = CARD_USDT()
"""
    name: CARD-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FLY_USDT:
    """
        name: FLY-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FLY-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLY-USDT"

    def __str__(self):
        return "FLY-USDT"

    def __call__(self):
        return "FLY-USDT"


FLY_USDT = FLY_USDT()
"""
    name: FLY-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CWS_USDT:
    """
        name: CWS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CWS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CWS-USDT"

    def __str__(self):
        return "CWS-USDT"

    def __call__(self):
        return "CWS-USDT"


CWS_USDT = CWS_USDT()
"""
    name: CWS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XDC_USDT:
    """
        name: XDC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XDC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDC-USDT"

    def __str__(self):
        return "XDC-USDT"

    def __call__(self):
        return "XDC-USDT"


XDC_USDT = XDC_USDT()
"""
    name: XDC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XDC_ETH:
    """
        name: XDC-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XDC-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDC-ETH"

    def __str__(self):
        return "XDC-ETH"

    def __call__(self):
        return "XDC-ETH"


XDC_ETH = XDC_ETH()
"""
    name: XDC-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STRK_BTC:
    """
        name: STRK-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STRK-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRK-BTC"

    def __str__(self):
        return "STRK-BTC"

    def __call__(self):
        return "STRK-BTC"


STRK_BTC = STRK_BTC()
"""
    name: STRK-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STRK_ETH:
    """
        name: STRK-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STRK-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STRK-ETH"

    def __str__(self):
        return "STRK-ETH"

    def __call__(self):
        return "STRK-ETH"


STRK_ETH = STRK_ETH()
"""
    name: STRK-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHIB_USDT:
    """
        name: SHIB-USDT
        precision: 0.000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SHIB-USDT"
    precision: int = 0.000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIB-USDT"

    def __str__(self):
        return "SHIB-USDT"

    def __call__(self):
        return "SHIB-USDT"


SHIB_USDT = SHIB_USDT()
"""
    name: SHIB-USDT
    precision: 0.000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class POLX_USDT:
    """
        name: POLX-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POLX-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLX-USDT"

    def __str__(self):
        return "POLX-USDT"

    def __call__(self):
        return "POLX-USDT"


POLX_USDT = POLX_USDT()
"""
    name: POLX-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KDA_USDT:
    """
        name: KDA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "KDA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDA-USDT"

    def __str__(self):
        return "KDA-USDT"

    def __call__(self):
        return "KDA-USDT"


KDA_USDT = KDA_USDT()
"""
    name: KDA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KDA_BTC:
    """
        name: KDA-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KDA-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDA-BTC"

    def __str__(self):
        return "KDA-BTC"

    def __call__(self):
        return "KDA-BTC"


KDA_BTC = KDA_BTC()
"""
    name: KDA-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ICP_USDT:
    """
        name: ICP-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ICP-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICP-USDT"

    def __str__(self):
        return "ICP-USDT"

    def __call__(self):
        return "ICP-USDT"


ICP_USDT = ICP_USDT()
"""
    name: ICP-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ICP_BTC:
    """
        name: ICP-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ICP-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICP-BTC"

    def __str__(self):
        return "ICP-BTC"

    def __call__(self):
        return "ICP-BTC"


ICP_BTC = ICP_BTC()
"""
    name: ICP-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STC_USDT:
    """
        name: STC-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STC-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STC-USDT"

    def __str__(self):
        return "STC-USDT"

    def __call__(self):
        return "STC-USDT"


STC_USDT = STC_USDT()
"""
    name: STC-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STC_BTC:
    """
        name: STC-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STC-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STC-BTC"

    def __str__(self):
        return "STC-BTC"

    def __call__(self):
        return "STC-BTC"


STC_BTC = STC_BTC()
"""
    name: STC-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GOVI_USDT:
    """
        name: GOVI-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GOVI-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOVI-USDT"

    def __str__(self):
        return "GOVI-USDT"

    def __call__(self):
        return "GOVI-USDT"


GOVI_USDT = GOVI_USDT()
"""
    name: GOVI-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GOVI_BTC:
    """
        name: GOVI-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GOVI-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GOVI-BTC"

    def __str__(self):
        return "GOVI-BTC"

    def __call__(self):
        return "GOVI-BTC"


GOVI_BTC = GOVI_BTC()
"""
    name: GOVI-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FKX_USDT:
    """
        name: FKX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FKX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FKX-USDT"

    def __str__(self):
        return "FKX-USDT"

    def __call__(self):
        return "FKX-USDT"


FKX_USDT = FKX_USDT()
"""
    name: FKX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CELO_USDT:
    """
        name: CELO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CELO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELO-USDT"

    def __str__(self):
        return "CELO-USDT"

    def __call__(self):
        return "CELO-USDT"


CELO_USDT = CELO_USDT()
"""
    name: CELO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CELO_BTC:
    """
        name: CELO-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CELO-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELO-BTC"

    def __str__(self):
        return "CELO-BTC"

    def __call__(self):
        return "CELO-BTC"


CELO_BTC = CELO_BTC()
"""
    name: CELO-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CUSD_USDT:
    """
        name: CUSD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CUSD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CUSD-USDT"

    def __str__(self):
        return "CUSD-USDT"

    def __call__(self):
        return "CUSD-USDT"


CUSD_USDT = CUSD_USDT()
"""
    name: CUSD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CUSD_BTC:
    """
        name: CUSD-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CUSD-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CUSD-BTC"

    def __str__(self):
        return "CUSD-BTC"

    def __call__(self):
        return "CUSD-BTC"


CUSD_BTC = CUSD_BTC()
"""
    name: CUSD-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MATIC_USDT:
    """
        name: MATIC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "MATIC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC-USDT"

    def __str__(self):
        return "MATIC-USDT"

    def __call__(self):
        return "MATIC-USDT"


MATIC_USDT = MATIC_USDT()
"""
    name: MATIC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MATIC_BTC:
    """
        name: MATIC-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MATIC-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC-BTC"

    def __str__(self):
        return "MATIC-BTC"

    def __call__(self):
        return "MATIC-BTC"


MATIC_BTC = MATIC_BTC()
"""
    name: MATIC-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ELA_USDT:
    """
        name: ELA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ELA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELA-USDT"

    def __str__(self):
        return "ELA-USDT"

    def __call__(self):
        return "ELA-USDT"


ELA_USDT = ELA_USDT()
"""
    name: ELA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CRPT_USDT:
    """
        name: CRPT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CRPT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CRPT-USDT"

    def __str__(self):
        return "CRPT-USDT"

    def __call__(self):
        return "CRPT-USDT"


CRPT_USDT = CRPT_USDT()
"""
    name: CRPT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OPCT_USDT:
    """
        name: OPCT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OPCT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPCT-USDT"

    def __str__(self):
        return "OPCT-USDT"

    def __call__(self):
        return "OPCT-USDT"


OPCT_USDT = OPCT_USDT()
"""
    name: OPCT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OGN_USDT:
    """
        name: OGN-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "OGN-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGN-USDT"

    def __str__(self):
        return "OGN-USDT"

    def __call__(self):
        return "OGN-USDT"


OGN_USDT = OGN_USDT()
"""
    name: OGN-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class OGN_BTC:
    """
        name: OGN-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OGN-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGN-BTC"

    def __str__(self):
        return "OGN-BTC"

    def __call__(self):
        return "OGN-BTC"


OGN_BTC = OGN_BTC()
"""
    name: OGN-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OUSD_USDT:
    """
        name: OUSD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OUSD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OUSD-USDT"

    def __str__(self):
        return "OUSD-USDT"

    def __call__(self):
        return "OUSD-USDT"


OUSD_USDT = OUSD_USDT()
"""
    name: OUSD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OUSD_BTC:
    """
        name: OUSD-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OUSD-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OUSD-BTC"

    def __str__(self):
        return "OUSD-BTC"

    def __call__(self):
        return "OUSD-BTC"


OUSD_BTC = OUSD_BTC()
"""
    name: OUSD-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TLOS_USDT:
    """
        name: TLOS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TLOS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLOS-USDT"

    def __str__(self):
        return "TLOS-USDT"

    def __call__(self):
        return "TLOS-USDT"


TLOS_USDT = TLOS_USDT()
"""
    name: TLOS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TLOS_BTC:
    """
        name: TLOS-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TLOS-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLOS-BTC"

    def __str__(self):
        return "TLOS-BTC"

    def __call__(self):
        return "TLOS-BTC"


TLOS_BTC = TLOS_BTC()
"""
    name: TLOS-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GLQ_USDT:
    """
        name: GLQ-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GLQ-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLQ-USDT"

    def __str__(self):
        return "GLQ-USDT"

    def __call__(self):
        return "GLQ-USDT"


GLQ_USDT = GLQ_USDT()
"""
    name: GLQ-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GLQ_BTC:
    """
        name: GLQ-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GLQ-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLQ-BTC"

    def __str__(self):
        return "GLQ-BTC"

    def __call__(self):
        return "GLQ-BTC"


GLQ_BTC = GLQ_BTC()
"""
    name: GLQ-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MXC_USDT:
    """
        name: MXC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "MXC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MXC-USDT"

    def __str__(self):
        return "MXC-USDT"

    def __call__(self):
        return "MXC-USDT"


MXC_USDT = MXC_USDT()
"""
    name: MXC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ERSDL_USDT:
    """
        name: ERSDL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ERSDL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERSDL-USDT"

    def __str__(self):
        return "ERSDL-USDT"

    def __call__(self):
        return "ERSDL-USDT"


ERSDL_USDT = ERSDL_USDT()
"""
    name: ERSDL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HOTCROSS_USDT:
    """
        name: HOTCROSS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HOTCROSS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HOTCROSS-USDT"

    def __str__(self):
        return "HOTCROSS-USDT"

    def __call__(self):
        return "HOTCROSS-USDT"


HOTCROSS_USDT = HOTCROSS_USDT()
"""
    name: HOTCROSS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ADA3L_USDT:
    """
        name: ADA3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ADA3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA3L-USDT"

    def __str__(self):
        return "ADA3L-USDT"

    def __call__(self):
        return "ADA3L-USDT"


ADA3L_USDT = ADA3L_USDT()
"""
    name: ADA3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ADA3S_USDT:
    """
        name: ADA3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ADA3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADA3S-USDT"

    def __str__(self):
        return "ADA3S-USDT"

    def __call__(self):
        return "ADA3S-USDT"


ADA3S_USDT = ADA3S_USDT()
"""
    name: ADA3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HYVE_USDT:
    """
        name: HYVE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 5
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HYVE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 5
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HYVE-USDT"

    def __str__(self):
        return "HYVE-USDT"

    def __call__(self):
        return "HYVE-USDT"


HYVE_USDT = HYVE_USDT()
"""
    name: HYVE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 5
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HYVE_BTC:
    """
        name: HYVE-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 5
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HYVE-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 5
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HYVE-BTC"

    def __str__(self):
        return "HYVE-BTC"

    def __call__(self):
        return "HYVE-BTC"


HYVE_BTC = HYVE_BTC()
"""
    name: HYVE-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 5
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DAPPX_USDT:
    """
        name: DAPPX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DAPPX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAPPX-USDT"

    def __str__(self):
        return "DAPPX-USDT"

    def __call__(self):
        return "DAPPX-USDT"


DAPPX_USDT = DAPPX_USDT()
"""
    name: DAPPX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KONO_USDT:
    """
        name: KONO-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KONO-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KONO-USDT"

    def __str__(self):
        return "KONO-USDT"

    def __call__(self):
        return "KONO-USDT"


KONO_USDT = KONO_USDT()
"""
    name: KONO-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PRQ_USDT:
    """
        name: PRQ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PRQ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRQ-USDT"

    def __str__(self):
        return "PRQ-USDT"

    def __call__(self):
        return "PRQ-USDT"


PRQ_USDT = PRQ_USDT()
"""
    name: PRQ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MAHA_USDT:
    """
        name: MAHA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAHA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAHA-USDT"

    def __str__(self):
        return "MAHA-USDT"

    def __call__(self):
        return "MAHA-USDT"


MAHA_USDT = MAHA_USDT()
"""
    name: MAHA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MAHA_BTC:
    """
        name: MAHA-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAHA-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAHA-BTC"

    def __str__(self):
        return "MAHA-BTC"

    def __call__(self):
        return "MAHA-BTC"


MAHA_BTC = MAHA_BTC()
"""
    name: MAHA-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FEAR_USDT:
    """
        name: FEAR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FEAR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FEAR-USDT"

    def __str__(self):
        return "FEAR-USDT"

    def __call__(self):
        return "FEAR-USDT"


FEAR_USDT = FEAR_USDT()
"""
    name: FEAR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PYR_USDT:
    """
        name: PYR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "PYR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYR-USDT"

    def __str__(self):
        return "PYR-USDT"

    def __call__(self):
        return "PYR-USDT"


PYR_USDT = PYR_USDT()
"""
    name: PYR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class PYR_BTC:
    """
        name: PYR-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PYR-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PYR-BTC"

    def __str__(self):
        return "PYR-BTC"

    def __call__(self):
        return "PYR-BTC"


PYR_BTC = PYR_BTC()
"""
    name: PYR-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PROM_USDT:
    """
        name: PROM-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PROM-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROM-USDT"

    def __str__(self):
        return "PROM-USDT"

    def __call__(self):
        return "PROM-USDT"


PROM_USDT = PROM_USDT()
"""
    name: PROM-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PROM_BTC:
    """
        name: PROM-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PROM-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PROM-BTC"

    def __str__(self):
        return "PROM-BTC"

    def __call__(self):
        return "PROM-BTC"


PROM_BTC = PROM_BTC()
"""
    name: PROM-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GLCH_USDT:
    """
        name: GLCH-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GLCH-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLCH-USDT"

    def __str__(self):
        return "GLCH-USDT"

    def __call__(self):
        return "GLCH-USDT"


GLCH_USDT = GLCH_USDT()
"""
    name: GLCH-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UNO_USDT:
    """
        name: UNO-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UNO-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNO-USDT"

    def __str__(self):
        return "UNO-USDT"

    def __call__(self):
        return "UNO-USDT"


UNO_USDT = UNO_USDT()
"""
    name: UNO-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALBT_USDT:
    """
        name: ALBT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALBT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALBT-USDT"

    def __str__(self):
        return "ALBT-USDT"

    def __call__(self):
        return "ALBT-USDT"


ALBT_USDT = ALBT_USDT()
"""
    name: ALBT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALBT_ETH:
    """
        name: ALBT-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALBT-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALBT-ETH"

    def __str__(self):
        return "ALBT-ETH"

    def __call__(self):
        return "ALBT-ETH"


ALBT_ETH = ALBT_ETH()
"""
    name: ALBT-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XCAD_USDT:
    """
        name: XCAD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XCAD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCAD-USDT"

    def __str__(self):
        return "XCAD-USDT"

    def __call__(self):
        return "XCAD-USDT"


XCAD_USDT = XCAD_USDT()
"""
    name: XCAD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EOS3L_USDT:
    """
        name: EOS3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EOS3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS3L-USDT"

    def __str__(self):
        return "EOS3L-USDT"

    def __call__(self):
        return "EOS3L-USDT"


EOS3L_USDT = EOS3L_USDT()
"""
    name: EOS3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EOS3S_USDT:
    """
        name: EOS3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EOS3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EOS3S-USDT"

    def __str__(self):
        return "EOS3S-USDT"

    def __call__(self):
        return "EOS3S-USDT"


EOS3S_USDT = EOS3S_USDT()
"""
    name: EOS3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BCH3L_USDT:
    """
        name: BCH3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BCH3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH3L-USDT"

    def __str__(self):
        return "BCH3L-USDT"

    def __call__(self):
        return "BCH3L-USDT"


BCH3L_USDT = BCH3L_USDT()
"""
    name: BCH3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BCH3S_USDT:
    """
        name: BCH3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BCH3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BCH3S-USDT"

    def __str__(self):
        return "BCH3S-USDT"

    def __call__(self):
        return "BCH3S-USDT"


BCH3S_USDT = BCH3S_USDT()
"""
    name: BCH3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ELON_USDT:
    """
        name: ELON-USDT
        precision: 0.0000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100000
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ELON-USDT"
    precision: int = 0.0000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100000
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ELON-USDT"

    def __str__(self):
        return "ELON-USDT"

    def __call__(self):
        return "ELON-USDT"


ELON_USDT = ELON_USDT()
"""
    name: ELON-USDT
    precision: 0.0000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100000
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class APL_USDT:
    """
        name: APL-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "APL-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APL-USDT"

    def __str__(self):
        return "APL-USDT"

    def __call__(self):
        return "APL-USDT"


APL_USDT = APL_USDT()
"""
    name: APL-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VEED_USDT:
    """
        name: VEED-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VEED-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEED-USDT"

    def __str__(self):
        return "VEED-USDT"

    def __call__(self):
        return "VEED-USDT"


VEED_USDT = VEED_USDT()
"""
    name: VEED-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VEED_BTC:
    """
        name: VEED-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VEED-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEED-BTC"

    def __str__(self):
        return "VEED-BTC"

    def __call__(self):
        return "VEED-BTC"


VEED_BTC = VEED_BTC()
"""
    name: VEED-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DIVI_USDT:
    """
        name: DIVI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DIVI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DIVI-USDT"

    def __str__(self):
        return "DIVI-USDT"

    def __call__(self):
        return "DIVI-USDT"


DIVI_USDT = DIVI_USDT()
"""
    name: DIVI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PDEX_BTC:
    """
        name: PDEX-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PDEX-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PDEX-BTC"

    def __str__(self):
        return "PDEX-BTC"

    def __call__(self):
        return "PDEX-BTC"


PDEX_BTC = PDEX_BTC()
"""
    name: PDEX-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class POLS_USDT:
    """
        name: POLS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "POLS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLS-USDT"

    def __str__(self):
        return "POLS-USDT"

    def __call__(self):
        return "POLS-USDT"


POLS_USDT = POLS_USDT()
"""
    name: POLS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class POLS_BTC:
    """
        name: POLS-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POLS-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLS-BTC"

    def __str__(self):
        return "POLS-BTC"

    def __call__(self):
        return "POLS-BTC"


POLS_BTC = POLS_BTC()
"""
    name: POLS-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LPOOL_USDT:
    """
        name: LPOOL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LPOOL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPOOL-USDT"

    def __str__(self):
        return "LPOOL-USDT"

    def __call__(self):
        return "LPOOL-USDT"


LPOOL_USDT = LPOOL_USDT()
"""
    name: LPOOL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LPOOL_BTC:
    """
        name: LPOOL-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LPOOL-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPOOL-BTC"

    def __str__(self):
        return "LPOOL-BTC"

    def __call__(self):
        return "LPOOL-BTC"


LPOOL_BTC = LPOOL_BTC()
"""
    name: LPOOL-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LSS_USDT:
    """
        name: LSS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LSS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LSS-USDT"

    def __str__(self):
        return "LSS-USDT"

    def __call__(self):
        return "LSS-USDT"


LSS_USDT = LSS_USDT()
"""
    name: LSS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VET3L_USDT:
    """
        name: VET3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VET3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET3L-USDT"

    def __str__(self):
        return "VET3L-USDT"

    def __call__(self):
        return "VET3L-USDT"


VET3L_USDT = VET3L_USDT()
"""
    name: VET3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VET3S_USDT:
    """
        name: VET3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VET3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VET3S-USDT"

    def __str__(self):
        return "VET3S-USDT"

    def __call__(self):
        return "VET3S-USDT"


VET3S_USDT = VET3S_USDT()
"""
    name: VET3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTC3L_USDT:
    """
        name: LTC3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LTC3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC3L-USDT"

    def __str__(self):
        return "LTC3L-USDT"

    def __call__(self):
        return "LTC3L-USDT"


LTC3L_USDT = LTC3L_USDT()
"""
    name: LTC3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTC3S_USDT:
    """
        name: LTC3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LTC3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTC3S-USDT"

    def __str__(self):
        return "LTC3S-USDT"

    def __call__(self):
        return "LTC3S-USDT"


LTC3S_USDT = LTC3S_USDT()
"""
    name: LTC3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ABBC_USDT:
    """
        name: ABBC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ABBC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ABBC-USDT"

    def __str__(self):
        return "ABBC-USDT"

    def __call__(self):
        return "ABBC-USDT"


ABBC_USDT = ABBC_USDT()
"""
    name: ABBC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ABBC_BTC:
    """
        name: ABBC-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ABBC-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ABBC-BTC"

    def __str__(self):
        return "ABBC-BTC"

    def __call__(self):
        return "ABBC-BTC"


ABBC_BTC = ABBC_BTC()
"""
    name: ABBC-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KOK_USDT:
    """
        name: KOK-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KOK-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KOK-USDT"

    def __str__(self):
        return "KOK-USDT"

    def __call__(self):
        return "KOK-USDT"


KOK_USDT = KOK_USDT()
"""
    name: KOK-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ROSN_USDT:
    """
        name: ROSN-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ROSN-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROSN-USDT"

    def __str__(self):
        return "ROSN-USDT"

    def __call__(self):
        return "ROSN-USDT"


ROSN_USDT = ROSN_USDT()
"""
    name: ROSN-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZCX_USDT:
    """
        name: ZCX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZCX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZCX-USDT"

    def __str__(self):
        return "ZCX-USDT"

    def __call__(self):
        return "ZCX-USDT"


ZCX_USDT = ZCX_USDT()
"""
    name: ZCX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZCX_BTC:
    """
        name: ZCX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZCX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZCX-BTC"

    def __str__(self):
        return "ZCX-BTC"

    def __call__(self):
        return "ZCX-BTC"


ZCX_BTC = ZCX_BTC()
"""
    name: ZCX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NORD_USDT:
    """
        name: NORD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NORD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NORD-USDT"

    def __str__(self):
        return "NORD-USDT"

    def __call__(self):
        return "NORD-USDT"


NORD_USDT = NORD_USDT()
"""
    name: NORD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMEE_USDT:
    """
        name: GMEE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GMEE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMEE-USDT"

    def __str__(self):
        return "GMEE-USDT"

    def __call__(self):
        return "GMEE-USDT"


GMEE_USDT = GMEE_USDT()
"""
    name: GMEE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SFUND_USDT:
    """
        name: SFUND-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 5
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SFUND-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 5
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFUND-USDT"

    def __str__(self):
        return "SFUND-USDT"

    def __call__(self):
        return "SFUND-USDT"


SFUND_USDT = SFUND_USDT()
"""
    name: SFUND-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 5
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XAVA_USDT:
    """
        name: XAVA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XAVA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XAVA-USDT"

    def __str__(self):
        return "XAVA-USDT"

    def __call__(self):
        return "XAVA-USDT"


XAVA_USDT = XAVA_USDT()
"""
    name: XAVA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AI_USDT:
    """
        name: AI-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AI-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AI-USDT"

    def __str__(self):
        return "AI-USDT"

    def __call__(self):
        return "AI-USDT"


AI_USDT = AI_USDT()
"""
    name: AI-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IOI_USDT:
    """
        name: IOI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "IOI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOI-USDT"

    def __str__(self):
        return "IOI-USDT"

    def __call__(self):
        return "IOI-USDT"


IOI_USDT = IOI_USDT()
"""
    name: IOI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NFT_USDT:
    """
        name: NFT-USDT
        precision: 0.0000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100000
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "NFT-USDT"
    precision: int = 0.0000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100000
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NFT-USDT"

    def __str__(self):
        return "NFT-USDT"

    def __call__(self):
        return "NFT-USDT"


NFT_USDT = NFT_USDT()
"""
    name: NFT-USDT
    precision: 0.0000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100000
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class NFT_TRX:
    """
        name: NFT-TRX
        precision: 0.000000001
        minimum_margin: 10
        initial_margin: None
        minimum_order_size: 100000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NFT-TRX"
    precision: int = 0.000000001
    minimum_margin: float = 10
    initial_margin: float = None
    minimum_order_size: float = 100000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NFT-TRX"

    def __str__(self):
        return "NFT-TRX"

    def __call__(self):
        return "NFT-TRX"


NFT_TRX = NFT_TRX()
"""
    name: NFT-TRX
    precision: 0.000000001
    minimum_margin: 10
    initial_margin: None
    minimum_order_size: 100000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MNST_USDT:
    """
        name: MNST-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MNST-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MNST-USDT"

    def __str__(self):
        return "MNST-USDT"

    def __call__(self):
        return "MNST-USDT"


MNST_USDT = MNST_USDT()
"""
    name: MNST-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MEM_USDT:
    """
        name: MEM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MEM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MEM-USDT"

    def __str__(self):
        return "MEM-USDT"

    def __call__(self):
        return "MEM-USDT"


MEM_USDT = MEM_USDT()
"""
    name: MEM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AGIX_USDT:
    """
        name: AGIX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 5
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AGIX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 5
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIX-USDT"

    def __str__(self):
        return "AGIX-USDT"

    def __call__(self):
        return "AGIX-USDT"


AGIX_USDT = AGIX_USDT()
"""
    name: AGIX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 5
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AGIX_BTC:
    """
        name: AGIX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 5
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AGIX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 5
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIX-BTC"

    def __str__(self):
        return "AGIX-BTC"

    def __call__(self):
        return "AGIX-BTC"


AGIX_BTC = AGIX_BTC()
"""
    name: AGIX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 5
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AGIX_ETH:
    """
        name: AGIX-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 5
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AGIX-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 5
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGIX-ETH"

    def __str__(self):
        return "AGIX-ETH"

    def __call__(self):
        return "AGIX-ETH"


AGIX_ETH = AGIX_ETH()
"""
    name: AGIX-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 5
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CQT_USDT:
    """
        name: CQT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CQT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CQT-USDT"

    def __str__(self):
        return "CQT-USDT"

    def __call__(self):
        return "CQT-USDT"


CQT_USDT = CQT_USDT()
"""
    name: CQT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AIOZ_USDT:
    """
        name: AIOZ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "AIOZ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AIOZ-USDT"

    def __str__(self):
        return "AIOZ-USDT"

    def __call__(self):
        return "AIOZ-USDT"


AIOZ_USDT = AIOZ_USDT()
"""
    name: AIOZ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MARSH_USDT:
    """
        name: MARSH-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MARSH-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MARSH-USDT"

    def __str__(self):
        return "MARSH-USDT"

    def __call__(self):
        return "MARSH-USDT"


MARSH_USDT = MARSH_USDT()
"""
    name: MARSH-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HAPI_USDT:
    """
        name: HAPI-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HAPI-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAPI-USDT"

    def __str__(self):
        return "HAPI-USDT"

    def __call__(self):
        return "HAPI-USDT"


HAPI_USDT = HAPI_USDT()
"""
    name: HAPI-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MODEFI_USDT:
    """
        name: MODEFI-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MODEFI-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MODEFI-USDT"

    def __str__(self):
        return "MODEFI-USDT"

    def __call__(self):
        return "MODEFI-USDT"


MODEFI_USDT = MODEFI_USDT()
"""
    name: MODEFI-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MODEFI_BTC:
    """
        name: MODEFI-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MODEFI-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MODEFI-BTC"

    def __str__(self):
        return "MODEFI-BTC"

    def __call__(self):
        return "MODEFI-BTC"


MODEFI_BTC = MODEFI_BTC()
"""
    name: MODEFI-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class YFDAI_USDT:
    """
        name: YFDAI-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "YFDAI-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFDAI-USDT"

    def __str__(self):
        return "YFDAI-USDT"

    def __call__(self):
        return "YFDAI-USDT"


YFDAI_USDT = YFDAI_USDT()
"""
    name: YFDAI-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class YFDAI_BTC:
    """
        name: YFDAI-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "YFDAI-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YFDAI-BTC"

    def __str__(self):
        return "YFDAI-BTC"

    def __call__(self):
        return "YFDAI-BTC"


YFDAI_BTC = YFDAI_BTC()
"""
    name: YFDAI-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GENS_USDT:
    """
        name: GENS-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GENS-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GENS-USDT"

    def __str__(self):
        return "GENS-USDT"

    def __call__(self):
        return "GENS-USDT"


GENS_USDT = GENS_USDT()
"""
    name: GENS-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FORM_USDT:
    """
        name: FORM-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FORM-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORM-USDT"

    def __str__(self):
        return "FORM-USDT"

    def __call__(self):
        return "FORM-USDT"


FORM_USDT = FORM_USDT()
"""
    name: FORM-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ARRR_USDT:
    """
        name: ARRR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ARRR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARRR-USDT"

    def __str__(self):
        return "ARRR-USDT"

    def __call__(self):
        return "ARRR-USDT"


ARRR_USDT = ARRR_USDT()
"""
    name: ARRR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ARRR_BTC:
    """
        name: ARRR-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ARRR-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARRR-BTC"

    def __str__(self):
        return "ARRR-BTC"

    def __call__(self):
        return "ARRR-BTC"


ARRR_BTC = ARRR_BTC()
"""
    name: ARRR-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TOKO_KCS:
    """
        name: TOKO-KCS
        precision: 0.0000001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TOKO-KCS"
    precision: int = 0.0000001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TOKO-KCS"

    def __str__(self):
        return "TOKO-KCS"

    def __call__(self):
        return "TOKO-KCS"


TOKO_KCS = TOKO_KCS()
"""
    name: TOKO-KCS
    precision: 0.0000001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EXRD_USDT:
    """
        name: EXRD-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EXRD-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EXRD-USDT"

    def __str__(self):
        return "EXRD-USDT"

    def __call__(self):
        return "EXRD-USDT"


EXRD_USDT = EXRD_USDT()
"""
    name: EXRD-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NGM_USDT:
    """
        name: NGM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NGM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NGM-USDT"

    def __str__(self):
        return "NGM-USDT"

    def __call__(self):
        return "NGM-USDT"


NGM_USDT = NGM_USDT()
"""
    name: NGM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LPT_USDT:
    """
        name: LPT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LPT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LPT-USDT"

    def __str__(self):
        return "LPT-USDT"

    def __call__(self):
        return "LPT-USDT"


LPT_USDT = LPT_USDT()
"""
    name: LPT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ASD_USDT:
    """
        name: ASD-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ASD-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASD-USDT"

    def __str__(self):
        return "ASD-USDT"

    def __call__(self):
        return "ASD-USDT"


ASD_USDT = ASD_USDT()
"""
    name: ASD-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BOND_USDT:
    """
        name: BOND-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BOND-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOND-USDT"

    def __str__(self):
        return "BOND-USDT"

    def __call__(self):
        return "BOND-USDT"


BOND_USDT = BOND_USDT()
"""
    name: BOND-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HAI_BTC:
    """
        name: HAI-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HAI-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAI-BTC"

    def __str__(self):
        return "HAI-BTC"

    def __call__(self):
        return "HAI-BTC"


HAI_BTC = HAI_BTC()
"""
    name: HAI-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOUL_USDT:
    """
        name: SOUL-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SOUL-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOUL-USDT"

    def __str__(self):
        return "SOUL-USDT"

    def __call__(self):
        return "SOUL-USDT"


SOUL_USDT = SOUL_USDT()
"""
    name: SOUL-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TWOCRZ_USDT:
    """
        name: 2CRZ-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "2CRZ-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "2CRZ-USDT"

    def __str__(self):
        return "2CRZ-USDT"

    def __call__(self):
        return "2CRZ-USDT"


TWOCRZ_USDT = TWOCRZ_USDT()
"""
    name: 2CRZ-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NEAR_USDT:
    """
        name: NEAR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "NEAR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR-USDT"

    def __str__(self):
        return "NEAR-USDT"

    def __call__(self):
        return "NEAR-USDT"


NEAR_USDT = NEAR_USDT()
"""
    name: NEAR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class NEAR_BTC:
    """
        name: NEAR-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NEAR-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR-BTC"

    def __str__(self):
        return "NEAR-BTC"

    def __call__(self):
        return "NEAR-BTC"


NEAR_BTC = NEAR_BTC()
"""
    name: NEAR-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DFYN_USDT:
    """
        name: DFYN-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DFYN-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFYN-USDT"

    def __str__(self):
        return "DFYN-USDT"

    def __call__(self):
        return "DFYN-USDT"


DFYN_USDT = DFYN_USDT()
"""
    name: DFYN-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OOE_USDT:
    """
        name: OOE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OOE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OOE-USDT"

    def __str__(self):
        return "OOE-USDT"

    def __call__(self):
        return "OOE-USDT"


OOE_USDT = OOE_USDT()
"""
    name: OOE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CFG_USDT:
    """
        name: CFG-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CFG-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFG-USDT"

    def __str__(self):
        return "CFG-USDT"

    def __call__(self):
        return "CFG-USDT"


CFG_USDT = CFG_USDT()
"""
    name: CFG-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CFG_BTC:
    """
        name: CFG-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CFG-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFG-BTC"

    def __str__(self):
        return "CFG-BTC"

    def __call__(self):
        return "CFG-BTC"


CFG_BTC = CFG_BTC()
"""
    name: CFG-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AXS_USDT:
    """
        name: AXS-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "AXS-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXS-USDT"

    def __str__(self):
        return "AXS-USDT"

    def __call__(self):
        return "AXS-USDT"


AXS_USDT = AXS_USDT()
"""
    name: AXS-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CLV_USDT:
    """
        name: CLV-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CLV-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLV-USDT"

    def __str__(self):
        return "CLV-USDT"

    def __call__(self):
        return "CLV-USDT"


CLV_USDT = CLV_USDT()
"""
    name: CLV-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ROUTE_USDT:
    """
        name: ROUTE-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ROUTE-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROUTE-USDT"

    def __str__(self):
        return "ROUTE-USDT"

    def __call__(self):
        return "ROUTE-USDT"


ROUTE_USDT = ROUTE_USDT()
"""
    name: ROUTE-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KAR_USDT:
    """
        name: KAR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KAR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAR-USDT"

    def __str__(self):
        return "KAR-USDT"

    def __call__(self):
        return "KAR-USDT"


KAR_USDT = KAR_USDT()
"""
    name: KAR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EFX_USDT:
    """
        name: EFX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EFX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EFX-USDT"

    def __str__(self):
        return "EFX-USDT"

    def __call__(self):
        return "EFX-USDT"


EFX_USDT = EFX_USDT()
"""
    name: EFX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XDC_BTC:
    """
        name: XDC-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XDC-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDC-BTC"

    def __str__(self):
        return "XDC-BTC"

    def __call__(self):
        return "XDC-BTC"


XDC_BTC = XDC_BTC()
"""
    name: XDC-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHFT_USDT:
    """
        name: SHFT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHFT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHFT-USDT"

    def __str__(self):
        return "SHFT-USDT"

    def __call__(self):
        return "SHFT-USDT"


SHFT_USDT = SHFT_USDT()
"""
    name: SHFT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PMON_USDT:
    """
        name: PMON-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PMON-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PMON-USDT"

    def __str__(self):
        return "PMON-USDT"

    def __call__(self):
        return "PMON-USDT"


PMON_USDT = PMON_USDT()
"""
    name: PMON-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DPET_USDT:
    """
        name: DPET-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DPET-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DPET-USDT"

    def __str__(self):
        return "DPET-USDT"

    def __call__(self):
        return "DPET-USDT"


DPET_USDT = DPET_USDT()
"""
    name: DPET-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ERG_USDT:
    """
        name: ERG-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ERG-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERG-USDT"

    def __str__(self):
        return "ERG-USDT"

    def __call__(self):
        return "ERG-USDT"


ERG_USDT = ERG_USDT()
"""
    name: ERG-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ERG_BTC:
    """
        name: ERG-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ERG-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERG-BTC"

    def __str__(self):
        return "ERG-BTC"

    def __call__(self):
        return "ERG-BTC"


ERG_BTC = ERG_BTC()
"""
    name: ERG-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOL_USDT:
    """
        name: SOL-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SOL-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOL-USDT"

    def __str__(self):
        return "SOL-USDT"

    def __call__(self):
        return "SOL-USDT"


SOL_USDT = SOL_USDT()
"""
    name: SOL-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SLP_USDT:
    """
        name: SLP-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SLP-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLP-USDT"

    def __str__(self):
        return "SLP-USDT"

    def __call__(self):
        return "SLP-USDT"


SLP_USDT = SLP_USDT()
"""
    name: SLP-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class LITH_USDT:
    """
        name: LITH-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LITH-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITH-USDT"

    def __str__(self):
        return "LITH-USDT"

    def __call__(self):
        return "LITH-USDT"


LITH_USDT = LITH_USDT()
"""
    name: LITH-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LITH_ETH:
    """
        name: LITH-ETH
        precision: 0.0000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LITH-ETH"
    precision: int = 0.0000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LITH-ETH"

    def __str__(self):
        return "LITH-ETH"

    def __call__(self):
        return "LITH-ETH"


LITH_ETH = LITH_ETH()
"""
    name: LITH-ETH
    precision: 0.0000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XCH_USDT:
    """
        name: XCH-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XCH-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCH-USDT"

    def __str__(self):
        return "XCH-USDT"

    def __call__(self):
        return "XCH-USDT"


XCH_USDT = XCH_USDT()
"""
    name: XCH-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HAKA_USDT:
    """
        name: HAKA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HAKA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAKA-USDT"

    def __str__(self):
        return "HAKA-USDT"

    def __call__(self):
        return "HAKA-USDT"


HAKA_USDT = HAKA_USDT()
"""
    name: HAKA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LAYER_BTC:
    """
        name: LAYER-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LAYER-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAYER-BTC"

    def __str__(self):
        return "LAYER-BTC"

    def __call__(self):
        return "LAYER-BTC"


LAYER_BTC = LAYER_BTC()
"""
    name: LAYER-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MTL_USDT:
    """
        name: MTL-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MTL-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTL-USDT"

    def __str__(self):
        return "MTL-USDT"

    def __call__(self):
        return "MTL-USDT"


MTL_USDT = MTL_USDT()
"""
    name: MTL-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MTL_BTC:
    """
        name: MTL-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MTL-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTL-BTC"

    def __str__(self):
        return "MTL-BTC"

    def __call__(self):
        return "MTL-BTC"


MTL_BTC = MTL_BTC()
"""
    name: MTL-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IOTX_USDT:
    """
        name: IOTX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "IOTX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTX-USDT"

    def __str__(self):
        return "IOTX-USDT"

    def __call__(self):
        return "IOTX-USDT"


IOTX_USDT = IOTX_USDT()
"""
    name: IOTX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class GALA_USDT:
    """
        name: GALAX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "GALAX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAX-USDT"

    def __str__(self):
        return "GALAX-USDT"

    def __call__(self):
        return "GALAX-USDT"


GALA_USDT = GALA_USDT()
"""
    name: GALAX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class REQ_USDT:
    """
        name: REQ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "REQ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REQ-USDT"

    def __str__(self):
        return "REQ-USDT"

    def __call__(self):
        return "REQ-USDT"


REQ_USDT = REQ_USDT()
"""
    name: REQ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class TXA_USDT:
    """
        name: TXA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TXA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TXA-USDT"

    def __str__(self):
        return "TXA-USDT"

    def __call__(self):
        return "TXA-USDT"


TXA_USDT = TXA_USDT()
"""
    name: TXA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TXA_USDC:
    """
        name: TXA-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TXA-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TXA-USDC"

    def __str__(self):
        return "TXA-USDC"

    def __call__(self):
        return "TXA-USDC"


TXA_USDC = TXA_USDC()
"""
    name: TXA-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CIRUS_USDT:
    """
        name: CIRUS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CIRUS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CIRUS-USDT"

    def __str__(self):
        return "CIRUS-USDT"

    def __call__(self):
        return "CIRUS-USDT"


CIRUS_USDT = CIRUS_USDT()
"""
    name: CIRUS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QI_USDT:
    """
        name: QI-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "QI-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QI-USDT"

    def __str__(self):
        return "QI-USDT"

    def __call__(self):
        return "QI-USDT"


QI_USDT = QI_USDT()
"""
    name: QI-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class QI_BTC:
    """
        name: QI-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QI-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QI-BTC"

    def __str__(self):
        return "QI-BTC"

    def __call__(self):
        return "QI-BTC"


QI_BTC = QI_BTC()
"""
    name: QI-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ODDZ_USDT:
    """
        name: ODDZ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ODDZ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ODDZ-USDT"

    def __str__(self):
        return "ODDZ-USDT"

    def __call__(self):
        return "ODDZ-USDT"


ODDZ_USDT = ODDZ_USDT()
"""
    name: ODDZ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PNT_USDT:
    """
        name: PNT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PNT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PNT-USDT"

    def __str__(self):
        return "PNT-USDT"

    def __call__(self):
        return "PNT-USDT"


PNT_USDT = PNT_USDT()
"""
    name: PNT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PNT_BTC:
    """
        name: PNT-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PNT-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PNT-BTC"

    def __str__(self):
        return "PNT-BTC"

    def __call__(self):
        return "PNT-BTC"


PNT_BTC = PNT_BTC()
"""
    name: PNT-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XPR_USDT:
    """
        name: XPR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "XPR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XPR-USDT"

    def __str__(self):
        return "XPR-USDT"

    def __call__(self):
        return "XPR-USDT"


XPR_USDT = XPR_USDT()
"""
    name: XPR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XPR_BTC:
    """
        name: XPR-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XPR-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XPR-BTC"

    def __str__(self):
        return "XPR-BTC"

    def __call__(self):
        return "XPR-BTC"


XPR_BTC = XPR_BTC()
"""
    name: XPR-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRIBE_USDT:
    """
        name: TRIBE-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRIBE-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBE-USDT"

    def __str__(self):
        return "TRIBE-USDT"

    def __call__(self):
        return "TRIBE-USDT"


TRIBE_USDT = TRIBE_USDT()
"""
    name: TRIBE-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHFT_BTC:
    """
        name: SHFT-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHFT-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHFT-BTC"

    def __str__(self):
        return "SHFT-BTC"

    def __call__(self):
        return "SHFT-BTC"


SHFT_BTC = SHFT_BTC()
"""
    name: SHFT-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MOVR_USDT:
    """
        name: MOVR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "MOVR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVR-USDT"

    def __str__(self):
        return "MOVR-USDT"

    def __call__(self):
        return "MOVR-USDT"


MOVR_USDT = MOVR_USDT()
"""
    name: MOVR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MOVR_ETH:
    """
        name: MOVR-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MOVR-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOVR-ETH"

    def __str__(self):
        return "MOVR-ETH"

    def __call__(self):
        return "MOVR-ETH"


MOVR_ETH = MOVR_ETH()
"""
    name: MOVR-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WOO_USDT:
    """
        name: WOO-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "WOO-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOO-USDT"

    def __str__(self):
        return "WOO-USDT"

    def __call__(self):
        return "WOO-USDT"


WOO_USDT = WOO_USDT()
"""
    name: WOO-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class WILD_USDT:
    """
        name: WILD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WILD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WILD-USDT"

    def __str__(self):
        return "WILD-USDT"

    def __call__(self):
        return "WILD-USDT"


WILD_USDT = WILD_USDT()
"""
    name: WILD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QRDO_USDT:
    """
        name: QRDO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QRDO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QRDO-USDT"

    def __str__(self):
        return "QRDO-USDT"

    def __call__(self):
        return "QRDO-USDT"


QRDO_USDT = QRDO_USDT()
"""
    name: QRDO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QRDO_ETH:
    """
        name: QRDO-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QRDO-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QRDO-ETH"

    def __str__(self):
        return "QRDO-ETH"

    def __call__(self):
        return "QRDO-ETH"


QRDO_ETH = QRDO_ETH()
"""
    name: QRDO-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MAKI_USDT:
    """
        name: MAKI-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAKI-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAKI-USDT"

    def __str__(self):
        return "MAKI-USDT"

    def __call__(self):
        return "MAKI-USDT"


MAKI_USDT = MAKI_USDT()
"""
    name: MAKI-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MAKI_BTC:
    """
        name: MAKI-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAKI-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAKI-BTC"

    def __str__(self):
        return "MAKI-BTC"

    def __call__(self):
        return "MAKI-BTC"


MAKI_BTC = MAKI_BTC()
"""
    name: MAKI-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OXT_USDT:
    """
        name: OXT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OXT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXT-USDT"

    def __str__(self):
        return "OXT-USDT"

    def __call__(self):
        return "OXT-USDT"


OXT_USDT = OXT_USDT()
"""
    name: OXT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OXT_BTC:
    """
        name: OXT-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OXT-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXT-BTC"

    def __str__(self):
        return "OXT-BTC"

    def __call__(self):
        return "OXT-BTC"


OXT_BTC = OXT_BTC()
"""
    name: OXT-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OXT_ETH:
    """
        name: OXT-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OXT-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OXT-ETH"

    def __str__(self):
        return "OXT-ETH"

    def __call__(self):
        return "OXT-ETH"


OXT_ETH = OXT_ETH()
"""
    name: OXT-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BAL_USDT:
    """
        name: BAL-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BAL-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAL-USDT"

    def __str__(self):
        return "BAL-USDT"

    def __call__(self):
        return "BAL-USDT"


BAL_USDT = BAL_USDT()
"""
    name: BAL-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BAL_BTC:
    """
        name: BAL-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BAL-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAL-BTC"

    def __str__(self):
        return "BAL-BTC"

    def __call__(self):
        return "BAL-BTC"


BAL_BTC = BAL_BTC()
"""
    name: BAL-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BAL_ETH:
    """
        name: BAL-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BAL-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAL-ETH"

    def __str__(self):
        return "BAL-ETH"

    def __call__(self):
        return "BAL-ETH"


BAL_ETH = BAL_ETH()
"""
    name: BAL-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STORJ_USDT:
    """
        name: STORJ-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "STORJ-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJ-USDT"

    def __str__(self):
        return "STORJ-USDT"

    def __call__(self):
        return "STORJ-USDT"


STORJ_USDT = STORJ_USDT()
"""
    name: STORJ-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class STORJ_BTC:
    """
        name: STORJ-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STORJ-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJ-BTC"

    def __str__(self):
        return "STORJ-BTC"

    def __call__(self):
        return "STORJ-BTC"


STORJ_BTC = STORJ_BTC()
"""
    name: STORJ-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STORJ_ETH:
    """
        name: STORJ-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STORJ-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORJ-ETH"

    def __str__(self):
        return "STORJ-ETH"

    def __call__(self):
        return "STORJ-ETH"


STORJ_ETH = STORJ_ETH()
"""
    name: STORJ-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class YGG_USDT:
    """
        name: YGG-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "YGG-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YGG-USDT"

    def __str__(self):
        return "YGG-USDT"

    def __call__(self):
        return "YGG-USDT"


YGG_USDT = YGG_USDT()
"""
    name: YGG-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class NDAU_USDT:
    """
        name: NDAU-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NDAU-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NDAU-USDT"

    def __str__(self):
        return "NDAU-USDT"

    def __call__(self):
        return "NDAU-USDT"


NDAU_USDT = NDAU_USDT()
"""
    name: NDAU-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SDAO_USDT:
    """
        name: SDAO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SDAO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SDAO-USDT"

    def __str__(self):
        return "SDAO-USDT"

    def __call__(self):
        return "SDAO-USDT"


SDAO_USDT = SDAO_USDT()
"""
    name: SDAO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SDAO_ETH:
    """
        name: SDAO-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SDAO-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SDAO-ETH"

    def __str__(self):
        return "SDAO-ETH"

    def __call__(self):
        return "SDAO-ETH"


SDAO_ETH = SDAO_ETH()
"""
    name: SDAO-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XRP3L_USDT:
    """
        name: XRP3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XRP3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP3L-USDT"

    def __str__(self):
        return "XRP3L-USDT"

    def __call__(self):
        return "XRP3L-USDT"


XRP3L_USDT = XRP3L_USDT()
"""
    name: XRP3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XRP3S_USDT:
    """
        name: XRP3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 9999999
        margin: False
    """
    name: str = "XRP3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 9999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XRP3S-USDT"

    def __str__(self):
        return "XRP3S-USDT"

    def __call__(self):
        return "XRP3S-USDT"


XRP3S_USDT = XRP3S_USDT()
"""
    name: XRP3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 9999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SKL_USDT:
    """
        name: SKL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SKL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKL-USDT"

    def __str__(self):
        return "SKL-USDT"

    def __call__(self):
        return "SKL-USDT"


SKL_USDT = SKL_USDT()
"""
    name: SKL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SKL_BTC:
    """
        name: SKL-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SKL-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKL-BTC"

    def __str__(self):
        return "SKL-BTC"

    def __call__(self):
        return "SKL-BTC"


SKL_BTC = SKL_BTC()
"""
    name: SKL-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NMR_USDT:
    """
        name: NMR-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NMR-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMR-USDT"

    def __str__(self):
        return "NMR-USDT"

    def __call__(self):
        return "NMR-USDT"


NMR_USDT = NMR_USDT()
"""
    name: NMR-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NMR_BTC:
    """
        name: NMR-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NMR-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NMR-BTC"

    def __str__(self):
        return "NMR-BTC"

    def __call__(self):
        return "NMR-BTC"


NMR_BTC = NMR_BTC()
"""
    name: NMR-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IXS_USDT:
    """
        name: IXS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "IXS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IXS-USDT"

    def __str__(self):
        return "IXS-USDT"

    def __call__(self):
        return "IXS-USDT"


IXS_USDT = IXS_USDT()
"""
    name: IXS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRB_USDT:
    """
        name: TRB-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRB-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRB-USDT"

    def __str__(self):
        return "TRB-USDT"

    def __call__(self):
        return "TRB-USDT"


TRB_USDT = TRB_USDT()
"""
    name: TRB-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRB_BTC:
    """
        name: TRB-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRB-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRB-BTC"

    def __str__(self):
        return "TRB-BTC"

    def __call__(self):
        return "TRB-BTC"


TRB_BTC = TRB_BTC()
"""
    name: TRB-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DYDX_USDT:
    """
        name: DYDX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DYDX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DYDX-USDT"

    def __str__(self):
        return "DYDX-USDT"

    def __call__(self):
        return "DYDX-USDT"


DYDX_USDT = DYDX_USDT()
"""
    name: DYDX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class XYO_USDT:
    """
        name: XYO-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XYO-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XYO-USDT"

    def __str__(self):
        return "XYO-USDT"

    def __call__(self):
        return "XYO-USDT"


XYO_USDT = XYO_USDT()
"""
    name: XYO-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GTC_USDT:
    """
        name: GTC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GTC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTC-USDT"

    def __str__(self):
        return "GTC-USDT"

    def __call__(self):
        return "GTC-USDT"


GTC_USDT = GTC_USDT()
"""
    name: GTC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GTC_BTC:
    """
        name: GTC-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GTC-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GTC-BTC"

    def __str__(self):
        return "GTC-BTC"

    def __call__(self):
        return "GTC-BTC"


GTC_BTC = GTC_BTC()
"""
    name: GTC-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EQX_USDT:
    """
        name: EQX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EQX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EQX-USDT"

    def __str__(self):
        return "EQX-USDT"

    def __call__(self):
        return "EQX-USDT"


EQX_USDT = EQX_USDT()
"""
    name: EQX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EQX_BTC:
    """
        name: EQX-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EQX-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EQX-BTC"

    def __str__(self):
        return "EQX-BTC"

    def __call__(self):
        return "EQX-BTC"


EQX_BTC = EQX_BTC()
"""
    name: EQX-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RLC_USDT:
    """
        name: RLC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "RLC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLC-USDT"

    def __str__(self):
        return "RLC-USDT"

    def __call__(self):
        return "RLC-USDT"


RLC_USDT = RLC_USDT()
"""
    name: RLC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class RLC_BTC:
    """
        name: RLC-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RLC-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RLC-BTC"

    def __str__(self):
        return "RLC-BTC"

    def __call__(self):
        return "RLC-BTC"


RLC_BTC = RLC_BTC()
"""
    name: RLC-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XPRT_USDT:
    """
        name: XPRT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XPRT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XPRT-USDT"

    def __str__(self):
        return "XPRT-USDT"

    def __call__(self):
        return "XPRT-USDT"


XPRT_USDT = XPRT_USDT()
"""
    name: XPRT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EGLD_USDT:
    """
        name: EGLD-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "EGLD-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLD-USDT"

    def __str__(self):
        return "EGLD-USDT"

    def __call__(self):
        return "EGLD-USDT"


EGLD_USDT = EGLD_USDT()
"""
    name: EGLD-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class EGLD_BTC:
    """
        name: EGLD-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EGLD-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGLD-BTC"

    def __str__(self):
        return "EGLD-BTC"

    def __call__(self):
        return "EGLD-BTC"


EGLD_BTC = EGLD_BTC()
"""
    name: EGLD-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HBAR_USDT:
    """
        name: HBAR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "HBAR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBAR-USDT"

    def __str__(self):
        return "HBAR-USDT"

    def __call__(self):
        return "HBAR-USDT"


HBAR_USDT = HBAR_USDT()
"""
    name: HBAR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class HBAR_BTC:
    """
        name: HBAR-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HBAR-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBAR-BTC"

    def __str__(self):
        return "HBAR-BTC"

    def __call__(self):
        return "HBAR-BTC"


HBAR_BTC = HBAR_BTC()
"""
    name: HBAR-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOGE3L_USDT:
    """
        name: DOGE3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "DOGE3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE3L-USDT"

    def __str__(self):
        return "DOGE3L-USDT"

    def __call__(self):
        return "DOGE3L-USDT"


DOGE3L_USDT = DOGE3L_USDT()
"""
    name: DOGE3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOGE3S_USDT:
    """
        name: DOGE3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "DOGE3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOGE3S-USDT"

    def __str__(self):
        return "DOGE3S-USDT"

    def __call__(self):
        return "DOGE3S-USDT"


DOGE3S_USDT = DOGE3S_USDT()
"""
    name: DOGE3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FLOW_USDT:
    """
        name: FLOW-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FLOW-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOW-USDT"

    def __str__(self):
        return "FLOW-USDT"

    def __call__(self):
        return "FLOW-USDT"


FLOW_USDT = FLOW_USDT()
"""
    name: FLOW-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class FLOW_BTC:
    """
        name: FLOW-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FLOW-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLOW-BTC"

    def __str__(self):
        return "FLOW-BTC"

    def __call__(self):
        return "FLOW-BTC"


FLOW_BTC = FLOW_BTC()
"""
    name: FLOW-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NKN_USDT:
    """
        name: NKN-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "NKN-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKN-USDT"

    def __str__(self):
        return "NKN-USDT"

    def __call__(self):
        return "NKN-USDT"


NKN_USDT = NKN_USDT()
"""
    name: NKN-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class NKN_BTC:
    """
        name: NKN-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NKN-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NKN-BTC"

    def __str__(self):
        return "NKN-BTC"

    def __call__(self):
        return "NKN-BTC"


NKN_BTC = NKN_BTC()
"""
    name: NKN-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PBX_USDT:
    """
        name: PBX-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PBX-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PBX-USDT"

    def __str__(self):
        return "PBX-USDT"

    def __call__(self):
        return "PBX-USDT"


PBX_USDT = PBX_USDT()
"""
    name: PBX-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOL3L_USDT:
    """
        name: SOL3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "SOL3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOL3L-USDT"

    def __str__(self):
        return "SOL3L-USDT"

    def __call__(self):
        return "SOL3L-USDT"


SOL3L_USDT = SOL3L_USDT()
"""
    name: SOL3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOL3S_USDT:
    """
        name: SOL3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "SOL3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOL3S-USDT"

    def __str__(self):
        return "SOL3S-USDT"

    def __call__(self):
        return "SOL3S-USDT"


SOL3S_USDT = SOL3S_USDT()
"""
    name: SOL3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MLN_USDT:
    """
        name: MLN-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MLN-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLN-USDT"

    def __str__(self):
        return "MLN-USDT"

    def __call__(self):
        return "MLN-USDT"


MLN_USDT = MLN_USDT()
"""
    name: MLN-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MLN_BTC:
    """
        name: MLN-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MLN-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLN-BTC"

    def __str__(self):
        return "MLN-BTC"

    def __call__(self):
        return "MLN-BTC"


MLN_BTC = MLN_BTC()
"""
    name: MLN-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XNL_USDT:
    """
        name: XNL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XNL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNL-USDT"

    def __str__(self):
        return "XNL-USDT"

    def __call__(self):
        return "XNL-USDT"


XNL_USDT = XNL_USDT()
"""
    name: XNL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOLVE_USDT:
    """
        name: SOLVE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SOLVE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLVE-USDT"

    def __str__(self):
        return "SOLVE-USDT"

    def __call__(self):
        return "SOLVE-USDT"


SOLVE_USDT = SOLVE_USDT()
"""
    name: SOLVE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DMTR_USDT:
    """
        name: DMTR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DMTR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DMTR-USDT"

    def __str__(self):
        return "DMTR-USDT"

    def __call__(self):
        return "DMTR-USDT"


DMTR_USDT = DMTR_USDT()
"""
    name: DMTR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LINK3L_USDT:
    """
        name: LINK3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "LINK3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK3L-USDT"

    def __str__(self):
        return "LINK3L-USDT"

    def __call__(self):
        return "LINK3L-USDT"


LINK3L_USDT = LINK3L_USDT()
"""
    name: LINK3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LINK3S_USDT:
    """
        name: LINK3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999
        margin: False
    """
    name: str = "LINK3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINK3S-USDT"

    def __str__(self):
        return "LINK3S-USDT"

    def __call__(self):
        return "LINK3S-USDT"


LINK3S_USDT = LINK3S_USDT()
"""
    name: LINK3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOT3L_USDT:
    """
        name: DOT3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999
        margin: False
    """
    name: str = "DOT3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT3L-USDT"

    def __str__(self):
        return "DOT3L-USDT"

    def __call__(self):
        return "DOT3L-USDT"


DOT3L_USDT = DOT3L_USDT()
"""
    name: DOT3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOT3S_USDT:
    """
        name: DOT3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "DOT3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT3S-USDT"

    def __str__(self):
        return "DOT3S-USDT"

    def __call__(self):
        return "DOT3S-USDT"


DOT3S_USDT = DOT3S_USDT()
"""
    name: DOT3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CTSI_USDT:
    """
        name: CTSI-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "CTSI-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSI-USDT"

    def __str__(self):
        return "CTSI-USDT"

    def __call__(self):
        return "CTSI-USDT"


CTSI_USDT = CTSI_USDT()
"""
    name: CTSI-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class CTSI_BTC:
    """
        name: CTSI-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CTSI-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTSI-BTC"

    def __str__(self):
        return "CTSI-BTC"

    def __call__(self):
        return "CTSI-BTC"


CTSI_BTC = CTSI_BTC()
"""
    name: CTSI-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALICE_USDT:
    """
        name: ALICE-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ALICE-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICE-USDT"

    def __str__(self):
        return "ALICE-USDT"

    def __call__(self):
        return "ALICE-USDT"


ALICE_USDT = ALICE_USDT()
"""
    name: ALICE-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ALICE_BTC:
    """
        name: ALICE-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALICE-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICE-BTC"

    def __str__(self):
        return "ALICE-BTC"

    def __call__(self):
        return "ALICE-BTC"


ALICE_BTC = ALICE_BTC()
"""
    name: ALICE-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALICE_ETH:
    """
        name: ALICE-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALICE-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALICE-ETH"

    def __str__(self):
        return "ALICE-ETH"

    def __call__(self):
        return "ALICE-ETH"


ALICE_ETH = ALICE_ETH()
"""
    name: ALICE-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OPUL_USDT:
    """
        name: OPUL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OPUL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OPUL-USDT"

    def __str__(self):
        return "OPUL-USDT"

    def __call__(self):
        return "OPUL-USDT"


OPUL_USDT = OPUL_USDT()
"""
    name: OPUL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ILV_USDT:
    """
        name: ILV-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ILV-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILV-USDT"

    def __str__(self):
        return "ILV-USDT"

    def __call__(self):
        return "ILV-USDT"


ILV_USDT = ILV_USDT()
"""
    name: ILV-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BAND_USDT:
    """
        name: BAND-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BAND-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAND-USDT"

    def __str__(self):
        return "BAND-USDT"

    def __call__(self):
        return "BAND-USDT"


BAND_USDT = BAND_USDT()
"""
    name: BAND-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BAND_BTC:
    """
        name: BAND-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BAND-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BAND-BTC"

    def __str__(self):
        return "BAND-BTC"

    def __call__(self):
        return "BAND-BTC"


BAND_BTC = BAND_BTC()
"""
    name: BAND-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FTT_USDT:
    """
        name: FTT-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FTT-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTT-USDT"

    def __str__(self):
        return "FTT-USDT"

    def __call__(self):
        return "FTT-USDT"


FTT_USDT = FTT_USDT()
"""
    name: FTT-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FTT_BTC:
    """
        name: FTT-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FTT-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTT-BTC"

    def __str__(self):
        return "FTT-BTC"

    def __call__(self):
        return "FTT-BTC"


FTT_BTC = FTT_BTC()
"""
    name: FTT-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DVPN_USDT:
    """
        name: DVPN-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DVPN-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DVPN-USDT"

    def __str__(self):
        return "DVPN-USDT"

    def __call__(self):
        return "DVPN-USDT"


DVPN_USDT = DVPN_USDT()
"""
    name: DVPN-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SKU_USDT:
    """
        name: SKU-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SKU-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKU-USDT"

    def __str__(self):
        return "SKU-USDT"

    def __call__(self):
        return "SKU-USDT"


SKU_USDT = SKU_USDT()
"""
    name: SKU-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SKU_BTC:
    """
        name: SKU-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SKU-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SKU-BTC"

    def __str__(self):
        return "SKU-BTC"

    def __call__(self):
        return "SKU-BTC"


SKU_BTC = SKU_BTC()
"""
    name: SKU-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EDG_USDT:
    """
        name: EDG-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EDG-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDG-USDT"

    def __str__(self):
        return "EDG-USDT"

    def __call__(self):
        return "EDG-USDT"


EDG_USDT = EDG_USDT()
"""
    name: EDG-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SLIM_USDT:
    """
        name: SLIM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SLIM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLIM-USDT"

    def __str__(self):
        return "SLIM-USDT"

    def __call__(self):
        return "SLIM-USDT"


SLIM_USDT = SLIM_USDT()
"""
    name: SLIM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TLM_USDT:
    """
        name: TLM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "TLM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLM-USDT"

    def __str__(self):
        return "TLM-USDT"

    def __call__(self):
        return "TLM-USDT"


TLM_USDT = TLM_USDT()
"""
    name: TLM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class TLM_BTC:
    """
        name: TLM-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TLM-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLM-BTC"

    def __str__(self):
        return "TLM-BTC"

    def __call__(self):
        return "TLM-BTC"


TLM_BTC = TLM_BTC()
"""
    name: TLM-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TLM_ETH:
    """
        name: TLM-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TLM-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TLM-ETH"

    def __str__(self):
        return "TLM-ETH"

    def __call__(self):
        return "TLM-ETH"


TLM_ETH = TLM_ETH()
"""
    name: TLM-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DEXE_USDT:
    """
        name: DEXE-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DEXE-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXE-USDT"

    def __str__(self):
        return "DEXE-USDT"

    def __call__(self):
        return "DEXE-USDT"


DEXE_USDT = DEXE_USDT()
"""
    name: DEXE-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DEXE_BTC:
    """
        name: DEXE-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DEXE-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXE-BTC"

    def __str__(self):
        return "DEXE-BTC"

    def __call__(self):
        return "DEXE-BTC"


DEXE_BTC = DEXE_BTC()
"""
    name: DEXE-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DEXE_ETH:
    """
        name: DEXE-ETH
        precision: 0.000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DEXE-ETH"
    precision: int = 0.000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DEXE-ETH"

    def __str__(self):
        return "DEXE-ETH"

    def __call__(self):
        return "DEXE-ETH"


DEXE_ETH = DEXE_ETH()
"""
    name: DEXE-ETH
    precision: 0.000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MATTER_USDT:
    """
        name: MATTER-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MATTER-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATTER-USDT"

    def __str__(self):
        return "MATTER-USDT"

    def __call__(self):
        return "MATTER-USDT"


MATTER_USDT = MATTER_USDT()
"""
    name: MATTER-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CUDOS_BTC:
    """
        name: CUDOS-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CUDOS-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CUDOS-BTC"

    def __str__(self):
        return "CUDOS-BTC"

    def __call__(self):
        return "CUDOS-BTC"


CUDOS_BTC = CUDOS_BTC()
"""
    name: CUDOS-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RUNE_USDT:
    """
        name: RUNE-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "RUNE-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNE-USDT"

    def __str__(self):
        return "RUNE-USDT"

    def __call__(self):
        return "RUNE-USDT"


RUNE_USDT = RUNE_USDT()
"""
    name: RUNE-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class RUNE_BTC:
    """
        name: RUNE-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RUNE-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNE-BTC"

    def __str__(self):
        return "RUNE-BTC"

    def __call__(self):
        return "RUNE-BTC"


RUNE_BTC = RUNE_BTC()
"""
    name: RUNE-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RMRK_USDT:
    """
        name: RMRK-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RMRK-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RMRK-USDT"

    def __str__(self):
        return "RMRK-USDT"

    def __call__(self):
        return "RMRK-USDT"


RMRK_USDT = RMRK_USDT()
"""
    name: RMRK-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class C98_USDT:
    """
        name: C98-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "C98-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "C98-USDT"

    def __str__(self):
        return "C98-USDT"

    def __call__(self):
        return "C98-USDT"


C98_USDT = C98_USDT()
"""
    name: C98-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BLOK_USDT:
    """
        name: BLOK-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BLOK-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BLOK-USDT"

    def __str__(self):
        return "BLOK-USDT"

    def __call__(self):
        return "BLOK-USDT"


BLOK_USDT = BLOK_USDT()
"""
    name: BLOK-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOLR_USDT:
    """
        name: SOLR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SOLR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOLR-USDT"

    def __str__(self):
        return "SOLR-USDT"

    def __call__(self):
        return "SOLR-USDT"


SOLR_USDT = SOLR_USDT()
"""
    name: SOLR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ATOM3L_USDT:
    """
        name: ATOM3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "ATOM3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM3L-USDT"

    def __str__(self):
        return "ATOM3L-USDT"

    def __call__(self):
        return "ATOM3L-USDT"


ATOM3L_USDT = ATOM3L_USDT()
"""
    name: ATOM3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ATOM3S_USDT:
    """
        name: ATOM3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "ATOM3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM3S-USDT"

    def __str__(self):
        return "ATOM3S-USDT"

    def __call__(self):
        return "ATOM3S-USDT"


ATOM3S_USDT = ATOM3S_USDT()
"""
    name: ATOM3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UNI3L_USDT:
    """
        name: UNI3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "UNI3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNI3L-USDT"

    def __str__(self):
        return "UNI3L-USDT"

    def __call__(self):
        return "UNI3L-USDT"


UNI3L_USDT = UNI3L_USDT()
"""
    name: UNI3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UNI3S_USDT:
    """
        name: UNI3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "UNI3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNI3S-USDT"

    def __str__(self):
        return "UNI3S-USDT"

    def __call__(self):
        return "UNI3S-USDT"


UNI3S_USDT = UNI3S_USDT()
"""
    name: UNI3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WSIENNA_USDT:
    """
        name: WSIENNA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WSIENNA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WSIENNA-USDT"

    def __str__(self):
        return "WSIENNA-USDT"

    def __call__(self):
        return "WSIENNA-USDT"


WSIENNA_USDT = WSIENNA_USDT()
"""
    name: WSIENNA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PUSH_USDT:
    """
        name: PUSH-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PUSH-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUSH-USDT"

    def __str__(self):
        return "PUSH-USDT"

    def __call__(self):
        return "PUSH-USDT"


PUSH_USDT = PUSH_USDT()
"""
    name: PUSH-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PUSH_BTC:
    """
        name: PUSH-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PUSH-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUSH-BTC"

    def __str__(self):
        return "PUSH-BTC"

    def __call__(self):
        return "PUSH-BTC"


PUSH_BTC = PUSH_BTC()
"""
    name: PUSH-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FORM_ETH:
    """
        name: FORM-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FORM-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORM-ETH"

    def __str__(self):
        return "FORM-ETH"

    def __call__(self):
        return "FORM-ETH"


FORM_ETH = FORM_ETH()
"""
    name: FORM-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NTVRK_USDT:
    """
        name: NTVRK-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NTVRK-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NTVRK-USDT"

    def __str__(self):
        return "NTVRK-USDT"

    def __call__(self):
        return "NTVRK-USDT"


NTVRK_USDT = NTVRK_USDT()
"""
    name: NTVRK-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NTVRK_USDC:
    """
        name: NTVRK-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NTVRK-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NTVRK-USDC"

    def __str__(self):
        return "NTVRK-USDC"

    def __call__(self):
        return "NTVRK-USDC"


NTVRK_USDC = NTVRK_USDC()
"""
    name: NTVRK-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AXS3L_USDT:
    """
        name: AXS3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "AXS3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXS3L-USDT"

    def __str__(self):
        return "AXS3L-USDT"

    def __call__(self):
        return "AXS3L-USDT"


AXS3L_USDT = AXS3L_USDT()
"""
    name: AXS3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AXS3S_USDT:
    """
        name: AXS3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999999
        margin: False
    """
    name: str = "AXS3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AXS3S-USDT"

    def __str__(self):
        return "AXS3S-USDT"

    def __call__(self):
        return "AXS3S-USDT"


AXS3S_USDT = AXS3S_USDT()
"""
    name: AXS3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FTM3L_USDT:
    """
        name: FTM3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999999
        margin: False
    """
    name: str = "FTM3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM3L-USDT"

    def __str__(self):
        return "FTM3L-USDT"

    def __call__(self):
        return "FTM3L-USDT"


FTM3L_USDT = FTM3L_USDT()
"""
    name: FTM3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FTM3S_USDT:
    """
        name: FTM3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "FTM3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM3S-USDT"

    def __str__(self):
        return "FTM3S-USDT"

    def __call__(self):
        return "FTM3S-USDT"


FTM3S_USDT = FTM3S_USDT()
"""
    name: FTM3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FLAME_USDT:
    """
        name: FLAME-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FLAME-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLAME-USDT"

    def __str__(self):
        return "FLAME-USDT"

    def __call__(self):
        return "FLAME-USDT"


FLAME_USDT = FLAME_USDT()
"""
    name: FLAME-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AGLD_USDT:
    """
        name: AGLD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AGLD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AGLD-USDT"

    def __str__(self):
        return "AGLD-USDT"

    def __call__(self):
        return "AGLD-USDT"


AGLD_USDT = AGLD_USDT()
"""
    name: AGLD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NAKA_USDT:
    """
        name: NAKA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NAKA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAKA-USDT"

    def __str__(self):
        return "NAKA-USDT"

    def __call__(self):
        return "NAKA-USDT"


NAKA_USDT = NAKA_USDT()
"""
    name: NAKA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class YLD_USDT:
    """
        name: YLD-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "YLD-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "YLD-USDT"

    def __str__(self):
        return "YLD-USDT"

    def __call__(self):
        return "YLD-USDT"


YLD_USDT = YLD_USDT()
"""
    name: YLD-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TONE_USDT:
    """
        name: TONE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TONE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TONE-USDT"

    def __str__(self):
        return "TONE-USDT"

    def __call__(self):
        return "TONE-USDT"


TONE_USDT = TONE_USDT()
"""
    name: TONE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class REEF_USDT:
    """
        name: REEF-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REEF-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEF-USDT"

    def __str__(self):
        return "REEF-USDT"

    def __call__(self):
        return "REEF-USDT"


REEF_USDT = REEF_USDT()
"""
    name: REEF-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class REEF_BTC:
    """
        name: REEF-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REEF-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REEF-BTC"

    def __str__(self):
        return "REEF-BTC"

    def __call__(self):
        return "REEF-BTC"


REEF_BTC = REEF_BTC()
"""
    name: REEF-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TIDAL_USDT:
    """
        name: TIDAL-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TIDAL-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TIDAL-USDT"

    def __str__(self):
        return "TIDAL-USDT"

    def __call__(self):
        return "TIDAL-USDT"


TIDAL_USDT = TIDAL_USDT()
"""
    name: TIDAL-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TVK_USDT:
    """
        name: TVK-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TVK-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVK-USDT"

    def __str__(self):
        return "TVK-USDT"

    def __call__(self):
        return "TVK-USDT"


TVK_USDT = TVK_USDT()
"""
    name: TVK-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TVK_BTC:
    """
        name: TVK-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TVK-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TVK-BTC"

    def __str__(self):
        return "TVK-BTC"

    def __call__(self):
        return "TVK-BTC"


TVK_BTC = TVK_BTC()
"""
    name: TVK-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class INJ_USDT:
    """
        name: INJ-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "INJ-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJ-USDT"

    def __str__(self):
        return "INJ-USDT"

    def __call__(self):
        return "INJ-USDT"


INJ_USDT = INJ_USDT()
"""
    name: INJ-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class INJ_BTC:
    """
        name: INJ-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "INJ-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INJ-BTC"

    def __str__(self):
        return "INJ-BTC"

    def __call__(self):
        return "INJ-BTC"


INJ_BTC = INJ_BTC()
"""
    name: INJ-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNB3L_USDT:
    """
        name: BNB3L-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "BNB3L-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB3L-USDT"

    def __str__(self):
        return "BNB3L-USDT"

    def __call__(self):
        return "BNB3L-USDT"


BNB3L_USDT = BNB3L_USDT()
"""
    name: BNB3L-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNB3S_USDT:
    """
        name: BNB3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999
        margin: False
    """
    name: str = "BNB3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB3S-USDT"

    def __str__(self):
        return "BNB3S-USDT"

    def __call__(self):
        return "BNB3S-USDT"


BNB3S_USDT = BNB3S_USDT()
"""
    name: BNB3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MATIC3L_USDT:
    """
        name: MATIC3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "MATIC3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC3L-USDT"

    def __str__(self):
        return "MATIC3L-USDT"

    def __call__(self):
        return "MATIC3L-USDT"


MATIC3L_USDT = MATIC3L_USDT()
"""
    name: MATIC3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MATIC3S_USDT:
    """
        name: MATIC3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999999
        margin: False
    """
    name: str = "MATIC3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC3S-USDT"

    def __str__(self):
        return "MATIC3S-USDT"

    def __call__(self):
        return "MATIC3S-USDT"


MATIC3S_USDT = MATIC3S_USDT()
"""
    name: MATIC3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VEGA_USDT:
    """
        name: VEGA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VEGA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEGA-USDT"

    def __str__(self):
        return "VEGA-USDT"

    def __call__(self):
        return "VEGA-USDT"


VEGA_USDT = VEGA_USDT()
"""
    name: VEGA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VEGA_ETH:
    """
        name: VEGA-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VEGA-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEGA-ETH"

    def __str__(self):
        return "VEGA-ETH"

    def __call__(self):
        return "VEGA-ETH"


VEGA_ETH = VEGA_ETH()
"""
    name: VEGA-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALPHA_USDT:
    """
        name: ALPHA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALPHA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHA-USDT"

    def __str__(self):
        return "ALPHA-USDT"

    def __call__(self):
        return "ALPHA-USDT"


ALPHA_USDT = ALPHA_USDT()
"""
    name: ALPHA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALPHA_BTC:
    """
        name: ALPHA-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALPHA-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPHA-BTC"

    def __str__(self):
        return "ALPHA-BTC"

    def __call__(self):
        return "ALPHA-BTC"


ALPHA_BTC = ALPHA_BTC()
"""
    name: ALPHA-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UNO_BTC:
    """
        name: UNO-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UNO-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNO-BTC"

    def __str__(self):
        return "UNO-BTC"

    def __call__(self):
        return "UNO-BTC"


UNO_BTC = UNO_BTC()
"""
    name: UNO-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZKT_USDT:
    """
        name: ZKT-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZKT-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZKT-USDT"

    def __str__(self):
        return "ZKT-USDT"

    def __call__(self):
        return "ZKT-USDT"


ZKT_USDT = ZKT_USDT()
"""
    name: ZKT-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AR_USDT:
    """
        name: AR-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "AR-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AR-USDT"

    def __str__(self):
        return "AR-USDT"

    def __call__(self):
        return "AR-USDT"


AR_USDT = AR_USDT()
"""
    name: AR-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class AR_BTC:
    """
        name: AR-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AR-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AR-BTC"

    def __str__(self):
        return "AR-BTC"

    def __call__(self):
        return "AR-BTC"


AR_BTC = AR_BTC()
"""
    name: AR-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class JASMY_USDT:
    """
        name: JASMY-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "JASMY-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMY-USDT"

    def __str__(self):
        return "JASMY-USDT"

    def __call__(self):
        return "JASMY-USDT"


JASMY_USDT = JASMY_USDT()
"""
    name: JASMY-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class PERP_USDT:
    """
        name: PERP-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PERP-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERP-USDT"

    def __str__(self):
        return "PERP-USDT"

    def __call__(self):
        return "PERP-USDT"


PERP_USDT = PERP_USDT()
"""
    name: PERP-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PERP_BTC:
    """
        name: PERP-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PERP-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PERP-BTC"

    def __str__(self):
        return "PERP-BTC"

    def __call__(self):
        return "PERP-BTC"


PERP_BTC = PERP_BTC()
"""
    name: PERP-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SCLP_USDT:
    """
        name: SCLP-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SCLP-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCLP-USDT"

    def __str__(self):
        return "SCLP-USDT"

    def __call__(self):
        return "SCLP-USDT"


SCLP_USDT = SCLP_USDT()
"""
    name: SCLP-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SCLP_BTC:
    """
        name: SCLP-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SCLP-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCLP-BTC"

    def __str__(self):
        return "SCLP-BTC"

    def __call__(self):
        return "SCLP-BTC"


SCLP_BTC = SCLP_BTC()
"""
    name: SCLP-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SUPER_USDT:
    """
        name: SUPER-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SUPER-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPER-USDT"

    def __str__(self):
        return "SUPER-USDT"

    def __call__(self):
        return "SUPER-USDT"


SUPER_USDT = SUPER_USDT()
"""
    name: SUPER-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SUPER_BTC:
    """
        name: SUPER-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SUPER-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUPER-BTC"

    def __str__(self):
        return "SUPER-BTC"

    def __call__(self):
        return "SUPER-BTC"


SUPER_BTC = SUPER_BTC()
"""
    name: SUPER-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CPOOL_USDT:
    """
        name: CPOOL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CPOOL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CPOOL-USDT"

    def __str__(self):
        return "CPOOL-USDT"

    def __call__(self):
        return "CPOOL-USDT"


CPOOL_USDT = CPOOL_USDT()
"""
    name: CPOOL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HERO_USDT:
    """
        name: HERO-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 50
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HERO-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 50
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HERO-USDT"

    def __str__(self):
        return "HERO-USDT"

    def __call__(self):
        return "HERO-USDT"


HERO_USDT = HERO_USDT()
"""
    name: HERO-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 50
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BASIC_USDT:
    """
        name: BASIC-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BASIC-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BASIC-USDT"

    def __str__(self):
        return "BASIC-USDT"

    def __call__(self):
        return "BASIC-USDT"


BASIC_USDT = BASIC_USDT()
"""
    name: BASIC-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XED_USDT:
    """
        name: XED-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XED-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XED-USDT"

    def __str__(self):
        return "XED-USDT"

    def __call__(self):
        return "XED-USDT"


XED_USDT = XED_USDT()
"""
    name: XED-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XED_BTC:
    """
        name: XED-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XED-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XED-BTC"

    def __str__(self):
        return "XED-BTC"

    def __call__(self):
        return "XED-BTC"


XED_BTC = XED_BTC()
"""
    name: XED-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AURY_USDT:
    """
        name: AURY-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AURY-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AURY-USDT"

    def __str__(self):
        return "AURY-USDT"

    def __call__(self):
        return "AURY-USDT"


AURY_USDT = AURY_USDT()
"""
    name: AURY-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SWASH_USDT:
    """
        name: SWASH-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SWASH-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWASH-USDT"

    def __str__(self):
        return "SWASH-USDT"

    def __call__(self):
        return "SWASH-USDT"


SWASH_USDT = SWASH_USDT()
"""
    name: SWASH-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LTO_USDT:
    """
        name: LTO-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LTO-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTO-USDT"

    def __str__(self):
        return "LTO-USDT"

    def __call__(self):
        return "LTO-USDT"


LTO_USDT = LTO_USDT()
"""
    name: LTO-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class LTO_BTC:
    """
        name: LTO-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LTO-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LTO-BTC"

    def __str__(self):
        return "LTO-BTC"

    def __call__(self):
        return "LTO-BTC"


LTO_BTC = LTO_BTC()
"""
    name: LTO-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BUX_USDT:
    """
        name: BUX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BUX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUX-USDT"

    def __str__(self):
        return "BUX-USDT"

    def __call__(self):
        return "BUX-USDT"


BUX_USDT = BUX_USDT()
"""
    name: BUX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MTRG_USDT:
    """
        name: MTRG-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MTRG-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTRG-USDT"

    def __str__(self):
        return "MTRG-USDT"

    def __call__(self):
        return "MTRG-USDT"


MTRG_USDT = MTRG_USDT()
"""
    name: MTRG-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DREAMS_USDT:
    """
        name: DREAMS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DREAMS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DREAMS-USDT"

    def __str__(self):
        return "DREAMS-USDT"

    def __call__(self):
        return "DREAMS-USDT"


DREAMS_USDT = DREAMS_USDT()
"""
    name: DREAMS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHIB_DOGE:
    """
        name: SHIB-DOGE
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHIB-DOGE"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIB-DOGE"

    def __str__(self):
        return "SHIB-DOGE"

    def __call__(self):
        return "SHIB-DOGE"


SHIB_DOGE = SHIB_DOGE()
"""
    name: SHIB-DOGE
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QUICK_USDT:
    """
        name: QUICK-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QUICK-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICK-USDT"

    def __str__(self):
        return "QUICK-USDT"

    def __call__(self):
        return "QUICK-USDT"


QUICK_USDT = QUICK_USDT()
"""
    name: QUICK-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QUICK_BTC:
    """
        name: QUICK-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QUICK-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUICK-BTC"

    def __str__(self):
        return "QUICK-BTC"

    def __call__(self):
        return "QUICK-BTC"


QUICK_BTC = QUICK_BTC()
"""
    name: QUICK-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRU_USDT:
    """
        name: TRU-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRU-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRU-USDT"

    def __str__(self):
        return "TRU-USDT"

    def __call__(self):
        return "TRU-USDT"


TRU_USDT = TRU_USDT()
"""
    name: TRU-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRU_BTC:
    """
        name: TRU-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRU-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRU-BTC"

    def __str__(self):
        return "TRU-BTC"

    def __call__(self):
        return "TRU-BTC"


TRU_BTC = TRU_BTC()
"""
    name: TRU-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WRX_USDT:
    """
        name: WRX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WRX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRX-USDT"

    def __str__(self):
        return "WRX-USDT"

    def __call__(self):
        return "WRX-USDT"


WRX_USDT = WRX_USDT()
"""
    name: WRX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WRX_BTC:
    """
        name: WRX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WRX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WRX-BTC"

    def __str__(self):
        return "WRX-BTC"

    def __call__(self):
        return "WRX-BTC"


WRX_BTC = WRX_BTC()
"""
    name: WRX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SUSHI3L_USDT:
    """
        name: SUSHI3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999999
        margin: False
    """
    name: str = "SUSHI3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHI3L-USDT"

    def __str__(self):
        return "SUSHI3L-USDT"

    def __call__(self):
        return "SUSHI3L-USDT"


SUSHI3L_USDT = SUSHI3L_USDT()
"""
    name: SUSHI3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SUSHI3S_USDT:
    """
        name: SUSHI3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "SUSHI3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SUSHI3S-USDT"

    def __str__(self):
        return "SUSHI3S-USDT"

    def __call__(self):
        return "SUSHI3S-USDT"


SUSHI3S_USDT = SUSHI3S_USDT()
"""
    name: SUSHI3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NEAR3L_USDT:
    """
        name: NEAR3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999
        margin: False
    """
    name: str = "NEAR3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR3L-USDT"

    def __str__(self):
        return "NEAR3L-USDT"

    def __call__(self):
        return "NEAR3L-USDT"


NEAR3L_USDT = NEAR3L_USDT()
"""
    name: NEAR3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NEAR3S_USDT:
    """
        name: NEAR3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999999999
        margin: False
    """
    name: str = "NEAR3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR3S-USDT"

    def __str__(self):
        return "NEAR3S-USDT"

    def __call__(self):
        return "NEAR3S-USDT"


NEAR3S_USDT = NEAR3S_USDT()
"""
    name: NEAR3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DATA_USDT:
    """
        name: DATA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DATA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATA-USDT"

    def __str__(self):
        return "DATA-USDT"

    def __call__(self):
        return "DATA-USDT"


DATA_USDT = DATA_USDT()
"""
    name: DATA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DATA_BTC:
    """
        name: DATA-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DATA-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DATA-BTC"

    def __str__(self):
        return "DATA-BTC"

    def __call__(self):
        return "DATA-BTC"


DATA_BTC = DATA_BTC()
"""
    name: DATA-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NORD_BTC:
    """
        name: NORD-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NORD-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NORD-BTC"

    def __str__(self):
        return "NORD-BTC"

    def __call__(self):
        return "NORD-BTC"


NORD_BTC = NORD_BTC()
"""
    name: NORD-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ISP_USDT:
    """
        name: ISP-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ISP-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ISP-USDT"

    def __str__(self):
        return "ISP-USDT"

    def __call__(self):
        return "ISP-USDT"


ISP_USDT = ISP_USDT()
"""
    name: ISP-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CERE_USDT:
    """
        name: CERE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CERE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CERE-USDT"

    def __str__(self):
        return "CERE-USDT"

    def __call__(self):
        return "CERE-USDT"


CERE_USDT = CERE_USDT()
"""
    name: CERE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHILL_USDT:
    """
        name: SHILL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHILL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHILL-USDT"

    def __str__(self):
        return "SHILL-USDT"

    def __call__(self):
        return "SHILL-USDT"


SHILL_USDT = SHILL_USDT()
"""
    name: SHILL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HEGIC_USDT:
    """
        name: HEGIC-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HEGIC-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEGIC-USDT"

    def __str__(self):
        return "HEGIC-USDT"

    def __call__(self):
        return "HEGIC-USDT"


HEGIC_USDT = HEGIC_USDT()
"""
    name: HEGIC-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HEGIC_BTC:
    """
        name: HEGIC-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HEGIC-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEGIC-BTC"

    def __str__(self):
        return "HEGIC-BTC"

    def __call__(self):
        return "HEGIC-BTC"


HEGIC_BTC = HEGIC_BTC()
"""
    name: HEGIC-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ERN_USDT:
    """
        name: ERN-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ERN-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERN-USDT"

    def __str__(self):
        return "ERN-USDT"

    def __call__(self):
        return "ERN-USDT"


ERN_USDT = ERN_USDT()
"""
    name: ERN-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ERN_BTC:
    """
        name: ERN-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ERN-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERN-BTC"

    def __str__(self):
        return "ERN-BTC"

    def __call__(self):
        return "ERN-BTC"


ERN_BTC = ERN_BTC()
"""
    name: ERN-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FTG_USDT:
    """
        name: FTG-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FTG-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTG-USDT"

    def __str__(self):
        return "FTG-USDT"

    def __call__(self):
        return "FTG-USDT"


FTG_USDT = FTG_USDT()
"""
    name: FTG-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PAXG_USDT:
    """
        name: PAXG-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PAXG-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXG-USDT"

    def __str__(self):
        return "PAXG-USDT"

    def __call__(self):
        return "PAXG-USDT"


PAXG_USDT = PAXG_USDT()
"""
    name: PAXG-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PAXG_BTC:
    """
        name: PAXG-BTC
        precision: 0.000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PAXG-BTC"
    precision: int = 0.000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PAXG-BTC"

    def __str__(self):
        return "PAXG-BTC"

    def __call__(self):
        return "PAXG-BTC"


PAXG_BTC = PAXG_BTC()
"""
    name: PAXG-BTC
    precision: 0.000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AUDIO_USDT:
    """
        name: AUDIO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "AUDIO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIO-USDT"

    def __str__(self):
        return "AUDIO-USDT"

    def __call__(self):
        return "AUDIO-USDT"


AUDIO_USDT = AUDIO_USDT()
"""
    name: AUDIO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class AUDIO_BTC:
    """
        name: AUDIO-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AUDIO-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUDIO-BTC"

    def __str__(self):
        return "AUDIO-BTC"

    def __call__(self):
        return "AUDIO-BTC"


AUDIO_BTC = AUDIO_BTC()
"""
    name: AUDIO-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ENS_USDT:
    """
        name: ENS-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ENS-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ENS-USDT"

    def __str__(self):
        return "ENS-USDT"

    def __call__(self):
        return "ENS-USDT"


ENS_USDT = ENS_USDT()
"""
    name: ENS-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class AAVE3L_USDT:
    """
        name: AAVE3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999999
        margin: False
    """
    name: str = "AAVE3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE3L-USDT"

    def __str__(self):
        return "AAVE3L-USDT"

    def __call__(self):
        return "AAVE3L-USDT"


AAVE3L_USDT = AAVE3L_USDT()
"""
    name: AAVE3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AAVE3S_USDT:
    """
        name: AAVE3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "AAVE3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AAVE3S-USDT"

    def __str__(self):
        return "AAVE3S-USDT"

    def __call__(self):
        return "AAVE3S-USDT"


AAVE3S_USDT = AAVE3S_USDT()
"""
    name: AAVE3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SAND3L_USDT:
    """
        name: SAND3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999999
        margin: False
    """
    name: str = "SAND3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SAND3L-USDT"

    def __str__(self):
        return "SAND3L-USDT"

    def __call__(self):
        return "SAND3L-USDT"


SAND3L_USDT = SAND3L_USDT()
"""
    name: SAND3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SAND3S_USDT:
    """
        name: SAND3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999999999
        margin: False
    """
    name: str = "SAND3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SAND3S-USDT"

    def __str__(self):
        return "SAND3S-USDT"

    def __call__(self):
        return "SAND3S-USDT"


SAND3S_USDT = SAND3S_USDT()
"""
    name: SAND3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XTM_USDT:
    """
        name: XTM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XTM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTM-USDT"

    def __str__(self):
        return "XTM-USDT"

    def __call__(self):
        return "XTM-USDT"


XTM_USDT = XTM_USDT()
"""
    name: XTM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MNW_USDT:
    """
        name: MNW-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MNW-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MNW-USDT"

    def __str__(self):
        return "MNW-USDT"

    def __call__(self):
        return "MNW-USDT"


MNW_USDT = MNW_USDT()
"""
    name: MNW-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FXS_USDT:
    """
        name: FXS-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FXS-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXS-USDT"

    def __str__(self):
        return "FXS-USDT"

    def __call__(self):
        return "FXS-USDT"


FXS_USDT = FXS_USDT()
"""
    name: FXS-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class FXS_BTC:
    """
        name: FXS-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FXS-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FXS-BTC"

    def __str__(self):
        return "FXS-BTC"

    def __call__(self):
        return "FXS-BTC"


FXS_BTC = FXS_BTC()
"""
    name: FXS-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ATA_USDT:
    """
        name: ATA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ATA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATA-USDT"

    def __str__(self):
        return "ATA-USDT"

    def __call__(self):
        return "ATA-USDT"


ATA_USDT = ATA_USDT()
"""
    name: ATA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ATA_BTC:
    """
        name: ATA-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ATA-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATA-BTC"

    def __str__(self):
        return "ATA-BTC"

    def __call__(self):
        return "ATA-BTC"


ATA_BTC = ATA_BTC()
"""
    name: ATA-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VXV_USDT:
    """
        name: VXV-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VXV-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VXV-USDT"

    def __str__(self):
        return "VXV-USDT"

    def __call__(self):
        return "VXV-USDT"


VXV_USDT = VXV_USDT()
"""
    name: VXV-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LRC_BTC:
    """
        name: LRC-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LRC-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRC-BTC"

    def __str__(self):
        return "LRC-BTC"

    def __call__(self):
        return "LRC-BTC"


LRC_BTC = LRC_BTC()
"""
    name: LRC-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LRC_ETH:
    """
        name: LRC-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LRC-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LRC-ETH"

    def __str__(self):
        return "LRC-ETH"

    def __call__(self):
        return "LRC-ETH"


LRC_ETH = LRC_ETH()
"""
    name: LRC-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DPR_USDT:
    """
        name: DPR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DPR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DPR-USDT"

    def __str__(self):
        return "DPR-USDT"

    def __call__(self):
        return "DPR-USDT"


DPR_USDT = DPR_USDT()
"""
    name: DPR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CWAR_USDT:
    """
        name: CWAR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CWAR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CWAR-USDT"

    def __str__(self):
        return "CWAR-USDT"

    def __call__(self):
        return "CWAR-USDT"


CWAR_USDT = CWAR_USDT()
"""
    name: CWAR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CWAR_BTC:
    """
        name: CWAR-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CWAR-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CWAR-BTC"

    def __str__(self):
        return "CWAR-BTC"

    def __call__(self):
        return "CWAR-BTC"


CWAR_BTC = CWAR_BTC()
"""
    name: CWAR-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FLUX_BTC:
    """
        name: FLUX-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FLUX-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLUX-BTC"

    def __str__(self):
        return "FLUX-BTC"

    def __call__(self):
        return "FLUX-BTC"


FLUX_BTC = FLUX_BTC()
"""
    name: FLUX-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EDG_BTC:
    """
        name: EDG-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EDG-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EDG-BTC"

    def __str__(self):
        return "EDG-BTC"

    def __call__(self):
        return "EDG-BTC"


EDG_BTC = EDG_BTC()
"""
    name: EDG-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PBR_USDT:
    """
        name: PBR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PBR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PBR-USDT"

    def __str__(self):
        return "PBR-USDT"

    def __call__(self):
        return "PBR-USDT"


PBR_USDT = PBR_USDT()
"""
    name: PBR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ANT_USDT:
    """
        name: ANT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "ANT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANT-USDT"

    def __str__(self):
        return "ANT-USDT"

    def __call__(self):
        return "ANT-USDT"


ANT_USDT = ANT_USDT()
"""
    name: ANT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ANT_BTC:
    """
        name: ANT-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ANT-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ANT-BTC"

    def __str__(self):
        return "ANT-BTC"

    def __call__(self):
        return "ANT-BTC"


ANT_BTC = ANT_BTC()
"""
    name: ANT-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class COV_USDT:
    """
        name: COV-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "COV-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COV-USDT"

    def __str__(self):
        return "COV-USDT"

    def __call__(self):
        return "COV-USDT"


COV_USDT = COV_USDT()
"""
    name: COV-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SWP_USDT:
    """
        name: SWP-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SWP-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWP-USDT"

    def __str__(self):
        return "SWP-USDT"

    def __call__(self):
        return "SWP-USDT"


SWP_USDT = SWP_USDT()
"""
    name: SWP-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TWT_USDT:
    """
        name: TWT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TWT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWT-USDT"

    def __str__(self):
        return "TWT-USDT"

    def __call__(self):
        return "TWT-USDT"


TWT_USDT = TWT_USDT()
"""
    name: TWT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TWT_BTC:
    """
        name: TWT-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TWT-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TWT-BTC"

    def __str__(self):
        return "TWT-BTC"

    def __call__(self):
        return "TWT-BTC"


TWT_BTC = TWT_BTC()
"""
    name: TWT-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OM_USDT:
    """
        name: OM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OM-USDT"

    def __str__(self):
        return "OM-USDT"

    def __call__(self):
        return "OM-USDT"


OM_USDT = OM_USDT()
"""
    name: OM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OM_BTC:
    """
        name: OM-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OM-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OM-BTC"

    def __str__(self):
        return "OM-BTC"

    def __call__(self):
        return "OM-BTC"


OM_BTC = OM_BTC()
"""
    name: OM-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ADX_USDT:
    """
        name: ADX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ADX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADX-USDT"

    def __str__(self):
        return "ADX-USDT"

    def __call__(self):
        return "ADX-USDT"


ADX_USDT = ADX_USDT()
"""
    name: ADX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AVAX3L_USDT:
    """
        name: AVAX3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999999999
        margin: False
    """
    name: str = "AVAX3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX3L-USDT"

    def __str__(self):
        return "AVAX3L-USDT"

    def __call__(self):
        return "AVAX3L-USDT"


AVAX3L_USDT = AVAX3L_USDT()
"""
    name: AVAX3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AVAX3S_USDT:
    """
        name: AVAX3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999999999
        margin: False
    """
    name: str = "AVAX3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX3S-USDT"

    def __str__(self):
        return "AVAX3S-USDT"

    def __call__(self):
        return "AVAX3S-USDT"


AVAX3S_USDT = AVAX3S_USDT()
"""
    name: AVAX3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MANA3L_USDT:
    """
        name: MANA3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 99999999999
        margin: False
    """
    name: str = "MANA3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 99999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA3L-USDT"

    def __str__(self):
        return "MANA3L-USDT"

    def __call__(self):
        return "MANA3L-USDT"


MANA3L_USDT = MANA3L_USDT()
"""
    name: MANA3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 99999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MANA3S_USDT:
    """
        name: MANA3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999999999
        margin: False
    """
    name: str = "MANA3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MANA3S-USDT"

    def __str__(self):
        return "MANA3S-USDT"

    def __call__(self):
        return "MANA3S-USDT"


MANA3S_USDT = MANA3S_USDT()
"""
    name: MANA3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GLM_USDT:
    """
        name: GLM-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GLM-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLM-USDT"

    def __str__(self):
        return "GLM-USDT"

    def __call__(self):
        return "GLM-USDT"


GLM_USDT = GLM_USDT()
"""
    name: GLM-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GLM_BTC:
    """
        name: GLM-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GLM-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLM-BTC"

    def __str__(self):
        return "GLM-BTC"

    def __call__(self):
        return "GLM-BTC"


GLM_BTC = GLM_BTC()
"""
    name: GLM-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NUM_USDT:
    """
        name: NUM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NUM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NUM-USDT"

    def __str__(self):
        return "NUM-USDT"

    def __call__(self):
        return "NUM-USDT"


NUM_USDT = NUM_USDT()
"""
    name: NUM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VLX_USDT:
    """
        name: VLX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VLX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VLX-USDT"

    def __str__(self):
        return "VLX-USDT"

    def __call__(self):
        return "VLX-USDT"


VLX_USDT = VLX_USDT()
"""
    name: VLX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VLX_BTC:
    """
        name: VLX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VLX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VLX-BTC"

    def __str__(self):
        return "VLX-BTC"

    def __call__(self):
        return "VLX-BTC"


VLX_BTC = VLX_BTC()
"""
    name: VLX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRADE_USDT:
    """
        name: TRADE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRADE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRADE-USDT"

    def __str__(self):
        return "TRADE-USDT"

    def __call__(self):
        return "TRADE-USDT"


TRADE_USDT = TRADE_USDT()
"""
    name: TRADE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRADE_BTC:
    """
        name: TRADE-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRADE-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRADE-BTC"

    def __str__(self):
        return "TRADE-BTC"

    def __call__(self):
        return "TRADE-BTC"


TRADE_BTC = TRADE_BTC()
"""
    name: TRADE-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ONEEARTH_USDT:
    """
        name: 1EARTH-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "1EARTH-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "1EARTH-USDT"

    def __str__(self):
        return "1EARTH-USDT"

    def __call__(self):
        return "1EARTH-USDT"


ONEEARTH_USDT = ONEEARTH_USDT()
"""
    name: 1EARTH-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MONI_USDT:
    """
        name: MONI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MONI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MONI-USDT"

    def __str__(self):
        return "MONI-USDT"

    def __call__(self):
        return "MONI-USDT"


MONI_USDT = MONI_USDT()
"""
    name: MONI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LIKE_USDT:
    """
        name: LIKE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LIKE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LIKE-USDT"

    def __str__(self):
        return "LIKE-USDT"

    def __call__(self):
        return "LIKE-USDT"


LIKE_USDT = LIKE_USDT()
"""
    name: LIKE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MFT_USDT:
    """
        name: MFT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MFT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFT-USDT"

    def __str__(self):
        return "MFT-USDT"

    def __call__(self):
        return "MFT-USDT"


MFT_USDT = MFT_USDT()
"""
    name: MFT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MFT_BTC:
    """
        name: MFT-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MFT-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MFT-BTC"

    def __str__(self):
        return "MFT-BTC"

    def __call__(self):
        return "MFT-BTC"


MFT_BTC = MFT_BTC()
"""
    name: MFT-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LIT_USDT:
    """
        name: LIT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LIT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LIT-USDT"

    def __str__(self):
        return "LIT-USDT"

    def __call__(self):
        return "LIT-USDT"


LIT_USDT = LIT_USDT()
"""
    name: LIT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LIT_BTC:
    """
        name: LIT-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LIT-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LIT-BTC"

    def __str__(self):
        return "LIT-BTC"

    def __call__(self):
        return "LIT-BTC"


LIT_BTC = LIT_BTC()
"""
    name: LIT-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KAVA_USDT:
    """
        name: KAVA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "KAVA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KAVA-USDT"

    def __str__(self):
        return "KAVA-USDT"

    def __call__(self):
        return "KAVA-USDT"


KAVA_USDT = KAVA_USDT()
"""
    name: KAVA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SFP_USDT:
    """
        name: SFP-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SFP-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFP-USDT"

    def __str__(self):
        return "SFP-USDT"

    def __call__(self):
        return "SFP-USDT"


SFP_USDT = SFP_USDT()
"""
    name: SFP-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SFP_BTC:
    """
        name: SFP-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SFP-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SFP-BTC"

    def __str__(self):
        return "SFP-BTC"

    def __call__(self):
        return "SFP-BTC"


SFP_BTC = SFP_BTC()
"""
    name: SFP-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BURGER_USDT:
    """
        name: BURGER-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BURGER-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGER-USDT"

    def __str__(self):
        return "BURGER-USDT"

    def __call__(self):
        return "BURGER-USDT"


BURGER_USDT = BURGER_USDT()
"""
    name: BURGER-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BURGER_BTC:
    """
        name: BURGER-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BURGER-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BURGER-BTC"

    def __str__(self):
        return "BURGER-BTC"

    def __call__(self):
        return "BURGER-BTC"


BURGER_BTC = BURGER_BTC()
"""
    name: BURGER-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ILA_USDT:
    """
        name: ILA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ILA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ILA-USDT"

    def __str__(self):
        return "ILA-USDT"

    def __call__(self):
        return "ILA-USDT"


ILA_USDT = ILA_USDT()
"""
    name: ILA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CREAM_USDT:
    """
        name: CREAM-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CREAM-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREAM-USDT"

    def __str__(self):
        return "CREAM-USDT"

    def __call__(self):
        return "CREAM-USDT"


CREAM_USDT = CREAM_USDT()
"""
    name: CREAM-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CREAM_BTC:
    """
        name: CREAM-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CREAM-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREAM-BTC"

    def __str__(self):
        return "CREAM-BTC"

    def __call__(self):
        return "CREAM-BTC"


CREAM_BTC = CREAM_BTC()
"""
    name: CREAM-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RSR_USDT:
    """
        name: RSR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "RSR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSR-USDT"

    def __str__(self):
        return "RSR-USDT"

    def __call__(self):
        return "RSR-USDT"


RSR_USDT = RSR_USDT()
"""
    name: RSR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class RSR_BTC:
    """
        name: RSR-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RSR-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RSR-BTC"

    def __str__(self):
        return "RSR-BTC"

    def __call__(self):
        return "RSR-BTC"


RSR_BTC = RSR_BTC()
"""
    name: RSR-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BUY_BTC:
    """
        name: BUY-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BUY-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUY-BTC"

    def __str__(self):
        return "BUY-BTC"

    def __call__(self):
        return "BUY-BTC"


BUY_BTC = BUY_BTC()
"""
    name: BUY-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IMX_USDT:
    """
        name: IMX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "IMX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IMX-USDT"

    def __str__(self):
        return "IMX-USDT"

    def __call__(self):
        return "IMX-USDT"


IMX_USDT = IMX_USDT()
"""
    name: IMX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class GODS_USDT:
    """
        name: GODS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GODS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GODS-USDT"

    def __str__(self):
        return "GODS-USDT"

    def __call__(self):
        return "GODS-USDT"


GODS_USDT = GODS_USDT()
"""
    name: GODS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KMA_USDT:
    """
        name: KMA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KMA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KMA-USDT"

    def __str__(self):
        return "KMA-USDT"

    def __call__(self):
        return "KMA-USDT"


KMA_USDT = KMA_USDT()
"""
    name: KMA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SRM_USDT:
    """
        name: SRM-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SRM-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRM-USDT"

    def __str__(self):
        return "SRM-USDT"

    def __call__(self):
        return "SRM-USDT"


SRM_USDT = SRM_USDT()
"""
    name: SRM-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SRM_BTC:
    """
        name: SRM-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SRM-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRM-BTC"

    def __str__(self):
        return "SRM-BTC"

    def __call__(self):
        return "SRM-BTC"


SRM_BTC = SRM_BTC()
"""
    name: SRM-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class POLC_USDT:
    """
        name: POLC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POLC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POLC-USDT"

    def __str__(self):
        return "POLC-USDT"

    def __call__(self):
        return "POLC-USDT"


POLC_USDT = POLC_USDT()
"""
    name: POLC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XTAG_USDT:
    """
        name: XTAG-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XTAG-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XTAG-USDT"

    def __str__(self):
        return "XTAG-USDT"

    def __call__(self):
        return "XTAG-USDT"


XTAG_USDT = XTAG_USDT()
"""
    name: XTAG-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MNET_USDT:
    """
        name: MNET-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MNET-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MNET-USDT"

    def __str__(self):
        return "MNET-USDT"

    def __call__(self):
        return "MNET-USDT"


MNET_USDT = MNET_USDT()
"""
    name: MNET-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NGC_USDT:
    """
        name: NGC-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NGC-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NGC-USDT"

    def __str__(self):
        return "NGC-USDT"

    def __call__(self):
        return "NGC-USDT"


NGC_USDT = NGC_USDT()
"""
    name: NGC-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HARD_USDT:
    """
        name: HARD-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HARD-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HARD-USDT"

    def __str__(self):
        return "HARD-USDT"

    def __call__(self):
        return "HARD-USDT"


HARD_USDT = HARD_USDT()
"""
    name: HARD-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GALAX3L_USDT:
    """
        name: GALAX3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999999
        margin: False
    """
    name: str = "GALAX3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAX3L-USDT"

    def __str__(self):
        return "GALAX3L-USDT"

    def __call__(self):
        return "GALAX3L-USDT"


GALAX3L_USDT = GALAX3L_USDT()
"""
    name: GALAX3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GALAX3S_USDT:
    """
        name: GALAX3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999999999
        margin: False
    """
    name: str = "GALAX3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GALAX3S-USDT"

    def __str__(self):
        return "GALAX3S-USDT"

    def __call__(self):
        return "GALAX3S-USDT"


GALAX3S_USDT = GALAX3S_USDT()
"""
    name: GALAX3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UNIC_USDT:
    """
        name: UNIC-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UNIC-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNIC-USDT"

    def __str__(self):
        return "UNIC-USDT"

    def __call__(self):
        return "UNIC-USDT"


UNIC_USDT = UNIC_USDT()
"""
    name: UNIC-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class POND_USDT:
    """
        name: POND-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "POND-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POND-USDT"

    def __str__(self):
        return "POND-USDT"

    def __call__(self):
        return "POND-USDT"


POND_USDT = POND_USDT()
"""
    name: POND-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class POND_BTC:
    """
        name: POND-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POND-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POND-BTC"

    def __str__(self):
        return "POND-BTC"

    def __call__(self):
        return "POND-BTC"


POND_BTC = POND_BTC()
"""
    name: POND-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VR_USDT:
    """
        name: VR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VR-USDT"

    def __str__(self):
        return "VR-USDT"

    def __call__(self):
        return "VR-USDT"


VR_USDT = VR_USDT()
"""
    name: VR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EPIK_USDT:
    """
        name: EPIK-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EPIK-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPIK-USDT"

    def __str__(self):
        return "EPIK-USDT"

    def __call__(self):
        return "EPIK-USDT"


EPIK_USDT = EPIK_USDT()
"""
    name: EPIK-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NGL_USDT:
    """
        name: NGL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NGL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NGL-USDT"

    def __str__(self):
        return "NGL-USDT"

    def __call__(self):
        return "NGL-USDT"


NGL_USDT = NGL_USDT()
"""
    name: NGL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NGL_BTC:
    """
        name: NGL-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NGL-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NGL-BTC"

    def __str__(self):
        return "NGL-BTC"

    def __call__(self):
        return "NGL-BTC"


NGL_BTC = NGL_BTC()
"""
    name: NGL-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KDON_USDT:
    """
        name: KDON-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KDON-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDON-USDT"

    def __str__(self):
        return "KDON-USDT"

    def __call__(self):
        return "KDON-USDT"


KDON_USDT = KDON_USDT()
"""
    name: KDON-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PEL_USDT:
    """
        name: PEL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PEL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEL-USDT"

    def __str__(self):
        return "PEL-USDT"

    def __call__(self):
        return "PEL-USDT"


PEL_USDT = PEL_USDT()
"""
    name: PEL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CIRUS_ETH:
    """
        name: CIRUS-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CIRUS-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CIRUS-ETH"

    def __str__(self):
        return "CIRUS-ETH"

    def __call__(self):
        return "CIRUS-ETH"


CIRUS_ETH = CIRUS_ETH()
"""
    name: CIRUS-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LINA_USDT:
    """
        name: LINA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "LINA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINA-USDT"

    def __str__(self):
        return "LINA-USDT"

    def __call__(self):
        return "LINA-USDT"


LINA_USDT = LINA_USDT()
"""
    name: LINA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class LINA_BTC:
    """
        name: LINA-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LINA-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LINA-BTC"

    def __str__(self):
        return "LINA-BTC"

    def __call__(self):
        return "LINA-BTC"


LINA_BTC = LINA_BTC()
"""
    name: LINA-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KLAY_USDT:
    """
        name: KLAY-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KLAY-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAY-USDT"

    def __str__(self):
        return "KLAY-USDT"

    def __call__(self):
        return "KLAY-USDT"


KLAY_USDT = KLAY_USDT()
"""
    name: KLAY-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KLAY_BTC:
    """
        name: KLAY-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KLAY-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KLAY-BTC"

    def __str__(self):
        return "KLAY-BTC"

    def __call__(self):
        return "KLAY-BTC"


KLAY_BTC = KLAY_BTC()
"""
    name: KLAY-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CREDI_USDT:
    """
        name: CREDI-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CREDI-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CREDI-USDT"

    def __str__(self):
        return "CREDI-USDT"

    def __call__(self):
        return "CREDI-USDT"


CREDI_USDT = CREDI_USDT()
"""
    name: CREDI-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRVL_USDT:
    """
        name: TRVL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRVL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRVL-USDT"

    def __str__(self):
        return "TRVL-USDT"

    def __call__(self):
        return "TRVL-USDT"


TRVL_USDT = TRVL_USDT()
"""
    name: TRVL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LACE_USDT:
    """
        name: LACE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LACE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LACE-USDT"

    def __str__(self):
        return "LACE-USDT"

    def __call__(self):
        return "LACE-USDT"


LACE_USDT = LACE_USDT()
"""
    name: LACE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LACE_ETH:
    """
        name: LACE-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LACE-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LACE-ETH"

    def __str__(self):
        return "LACE-ETH"

    def __call__(self):
        return "LACE-ETH"


LACE_ETH = LACE_ETH()
"""
    name: LACE-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ARKER_USDT:
    """
        name: ARKER-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ARKER-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARKER-USDT"

    def __str__(self):
        return "ARKER-USDT"

    def __call__(self):
        return "ARKER-USDT"


ARKER_USDT = ARKER_USDT()
"""
    name: ARKER-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BONDLY_USDT:
    """
        name: BONDLY-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BONDLY-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDLY-USDT"

    def __str__(self):
        return "BONDLY-USDT"

    def __call__(self):
        return "BONDLY-USDT"


BONDLY_USDT = BONDLY_USDT()
"""
    name: BONDLY-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BONDLY_ETH:
    """
        name: BONDLY-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BONDLY-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BONDLY-ETH"

    def __str__(self):
        return "BONDLY-ETH"

    def __call__(self):
        return "BONDLY-ETH"


BONDLY_ETH = BONDLY_ETH()
"""
    name: BONDLY-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XEC_USDT:
    """
        name: XEC-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XEC-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XEC-USDT"

    def __str__(self):
        return "XEC-USDT"

    def __call__(self):
        return "XEC-USDT"


XEC_USDT = XEC_USDT()
"""
    name: XEC-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HEART_USDT:
    """
        name: HEART-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HEART-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEART-USDT"

    def __str__(self):
        return "HEART-USDT"

    def __call__(self):
        return "HEART-USDT"


HEART_USDT = HEART_USDT()
"""
    name: HEART-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HEART_BTC:
    """
        name: HEART-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HEART-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HEART-BTC"

    def __str__(self):
        return "HEART-BTC"

    def __call__(self):
        return "HEART-BTC"


HEART_BTC = HEART_BTC()
"""
    name: HEART-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UNB_USDT:
    """
        name: UNB-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UNB-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UNB-USDT"

    def __str__(self):
        return "UNB-USDT"

    def __call__(self):
        return "UNB-USDT"


UNB_USDT = UNB_USDT()
"""
    name: UNB-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GAFI_USDT:
    """
        name: GAFI-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GAFI-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GAFI-USDT"

    def __str__(self):
        return "GAFI-USDT"

    def __call__(self):
        return "GAFI-USDT"


GAFI_USDT = GAFI_USDT()
"""
    name: GAFI-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KOL_USDT:
    """
        name: KOL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KOL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KOL-USDT"

    def __str__(self):
        return "KOL-USDT"

    def __call__(self):
        return "KOL-USDT"


KOL_USDT = KOL_USDT()
"""
    name: KOL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KOL_ETH:
    """
        name: KOL-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KOL-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KOL-ETH"

    def __str__(self):
        return "KOL-ETH"

    def __call__(self):
        return "KOL-ETH"


KOL_ETH = KOL_ETH()
"""
    name: KOL-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class H3RO3S_USDT:
    """
        name: H3RO3S-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "H3RO3S-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "H3RO3S-USDT"

    def __str__(self):
        return "H3RO3S-USDT"

    def __call__(self):
        return "H3RO3S-USDT"


H3RO3S_USDT = H3RO3S_USDT()
"""
    name: H3RO3S-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FALCONS_USDT:
    """
        name: FALCONS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FALCONS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FALCONS-USDT"

    def __str__(self):
        return "FALCONS-USDT"

    def __call__(self):
        return "FALCONS-USDT"


FALCONS_USDT = FALCONS_USDT()
"""
    name: FALCONS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UFO_USDT:
    """
        name: UFO-USDT
        precision: 0.000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UFO-USDT"
    precision: int = 0.000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UFO-USDT"

    def __str__(self):
        return "UFO-USDT"

    def __call__(self):
        return "UFO-USDT"


UFO_USDT = UFO_USDT()
"""
    name: UFO-USDT
    precision: 0.000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CHMB_USDT:
    """
        name: CHMB-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CHMB-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CHMB-USDT"

    def __str__(self):
        return "CHMB-USDT"

    def __call__(self):
        return "CHMB-USDT"


CHMB_USDT = CHMB_USDT()
"""
    name: CHMB-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GEEQ_USDT:
    """
        name: GEEQ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GEEQ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GEEQ-USDT"

    def __str__(self):
        return "GEEQ-USDT"

    def __call__(self):
        return "GEEQ-USDT"


GEEQ_USDT = GEEQ_USDT()
"""
    name: GEEQ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ORC_USDT:
    """
        name: ORC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ORC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ORC-USDT"

    def __str__(self):
        return "ORC-USDT"

    def __call__(self):
        return "ORC-USDT"


ORC_USDT = ORC_USDT()
"""
    name: ORC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RACEFI_USDT:
    """
        name: RACEFI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RACEFI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RACEFI-USDT"

    def __str__(self):
        return "RACEFI-USDT"

    def __call__(self):
        return "RACEFI-USDT"


RACEFI_USDT = RACEFI_USDT()
"""
    name: RACEFI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PEOPLE_USDT:
    """
        name: PEOPLE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "PEOPLE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEOPLE-USDT"

    def __str__(self):
        return "PEOPLE-USDT"

    def __call__(self):
        return "PEOPLE-USDT"


PEOPLE_USDT = PEOPLE_USDT()
"""
    name: PEOPLE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ADS_USDT:
    """
        name: ADS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ADS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADS-USDT"

    def __str__(self):
        return "ADS-USDT"

    def __call__(self):
        return "ADS-USDT"


ADS_USDT = ADS_USDT()
"""
    name: ADS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ADS_BTC:
    """
        name: ADS-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ADS-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ADS-BTC"

    def __str__(self):
        return "ADS-BTC"

    def __call__(self):
        return "ADS-BTC"


ADS_BTC = ADS_BTC()
"""
    name: ADS-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OCEAN_USDT:
    """
        name: OCEAN-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "OCEAN-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OCEAN-USDT"

    def __str__(self):
        return "OCEAN-USDT"

    def __call__(self):
        return "OCEAN-USDT"


OCEAN_USDT = OCEAN_USDT()
"""
    name: OCEAN-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SOS_USDT:
    """
        name: SOS-USDT
        precision: 0.0000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10000
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SOS-USDT"
    precision: int = 0.0000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10000
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOS-USDT"

    def __str__(self):
        return "SOS-USDT"

    def __call__(self):
        return "SOS-USDT"


SOS_USDT = SOS_USDT()
"""
    name: SOS-USDT
    precision: 0.0000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10000
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class WHALE_USDT:
    """
        name: WHALE-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WHALE-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WHALE-USDT"

    def __str__(self):
        return "WHALE-USDT"

    def __call__(self):
        return "WHALE-USDT"


WHALE_USDT = WHALE_USDT()
"""
    name: WHALE-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TIME_USDT:
    """
        name: TIME-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TIME-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TIME-USDT"

    def __str__(self):
        return "TIME-USDT"

    def __call__(self):
        return "TIME-USDT"


TIME_USDT = TIME_USDT()
"""
    name: TIME-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CWEB_USDT:
    """
        name: CWEB-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CWEB-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CWEB-USDT"

    def __str__(self):
        return "CWEB-USDT"

    def __call__(self):
        return "CWEB-USDT"


CWEB_USDT = CWEB_USDT()
"""
    name: CWEB-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IOTA_USDT:
    """
        name: IOTA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "IOTA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTA-USDT"

    def __str__(self):
        return "IOTA-USDT"

    def __call__(self):
        return "IOTA-USDT"


IOTA_USDT = IOTA_USDT()
"""
    name: IOTA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class IOTA_BTC:
    """
        name: IOTA-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "IOTA-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IOTA-BTC"

    def __str__(self):
        return "IOTA-BTC"

    def __call__(self):
        return "IOTA-BTC"


IOTA_BTC = IOTA_BTC()
"""
    name: IOTA-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HNT_USDT:
    """
        name: HNT-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HNT-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNT-USDT"

    def __str__(self):
        return "HNT-USDT"

    def __call__(self):
        return "HNT-USDT"


HNT_USDT = HNT_USDT()
"""
    name: HNT-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HNT_BTC:
    """
        name: HNT-BTC
        precision: 0.0000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HNT-BTC"
    precision: int = 0.0000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HNT-BTC"

    def __str__(self):
        return "HNT-BTC"

    def __call__(self):
        return "HNT-BTC"


HNT_BTC = HNT_BTC()
"""
    name: HNT-BTC
    precision: 0.0000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GGG_USDT:
    """
        name: GGG-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GGG-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GGG-USDT"

    def __str__(self):
        return "GGG-USDT"

    def __call__(self):
        return "GGG-USDT"


GGG_USDT = GGG_USDT()
"""
    name: GGG-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class REVU_USDT:
    """
        name: REVU-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REVU-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REVU-USDT"

    def __str__(self):
        return "REVU-USDT"

    def __call__(self):
        return "REVU-USDT"


REVU_USDT = REVU_USDT()
"""
    name: REVU-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CLH_USDT:
    """
        name: CLH-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CLH-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLH-USDT"

    def __str__(self):
        return "CLH-USDT"

    def __call__(self):
        return "CLH-USDT"


CLH_USDT = CLH_USDT()
"""
    name: CLH-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PLGR_USDT:
    """
        name: PLGR-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PLGR-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLGR-USDT"

    def __str__(self):
        return "PLGR-USDT"

    def __call__(self):
        return "PLGR-USDT"


PLGR_USDT = PLGR_USDT()
"""
    name: PLGR-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GLMR_USDT:
    """
        name: GLMR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "GLMR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMR-USDT"

    def __str__(self):
        return "GLMR-USDT"

    def __call__(self):
        return "GLMR-USDT"


GLMR_USDT = GLMR_USDT()
"""
    name: GLMR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class GLMR_BTC:
    """
        name: GLMR-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GLMR-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GLMR-BTC"

    def __str__(self):
        return "GLMR-BTC"

    def __call__(self):
        return "GLMR-BTC"


GLMR_BTC = GLMR_BTC()
"""
    name: GLMR-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LOVE_USDT:
    """
        name: LOVE-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOVE-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOVE-USDT"

    def __str__(self):
        return "LOVE-USDT"

    def __call__(self):
        return "LOVE-USDT"


LOVE_USDT = LOVE_USDT()
"""
    name: LOVE-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CTC_USDT:
    """
        name: CTC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CTC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTC-USDT"

    def __str__(self):
        return "CTC-USDT"

    def __call__(self):
        return "CTC-USDT"


CTC_USDT = CTC_USDT()
"""
    name: CTC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CTC_BTC:
    """
        name: CTC-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CTC-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CTC-BTC"

    def __str__(self):
        return "CTC-BTC"

    def __call__(self):
        return "CTC-BTC"


CTC_BTC = CTC_BTC()
"""
    name: CTC-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GARI_USDT:
    """
        name: GARI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GARI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GARI-USDT"

    def __str__(self):
        return "GARI-USDT"

    def __call__(self):
        return "GARI-USDT"


GARI_USDT = GARI_USDT()
"""
    name: GARI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FRR_USDT:
    """
        name: FRR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FRR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRR-USDT"

    def __str__(self):
        return "FRR-USDT"

    def __call__(self):
        return "FRR-USDT"


FRR_USDT = FRR_USDT()
"""
    name: FRR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ASTR_USDT:
    """
        name: ASTR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ASTR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTR-USDT"

    def __str__(self):
        return "ASTR-USDT"

    def __call__(self):
        return "ASTR-USDT"


ASTR_USDT = ASTR_USDT()
"""
    name: ASTR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ASTR_BTC:
    """
        name: ASTR-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ASTR-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTR-BTC"

    def __str__(self):
        return "ASTR-BTC"

    def __call__(self):
        return "ASTR-BTC"


ASTR_BTC = ASTR_BTC()
"""
    name: ASTR-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ERTHA_USDT:
    """
        name: ERTHA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ERTHA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ERTHA-USDT"

    def __str__(self):
        return "ERTHA-USDT"

    def __call__(self):
        return "ERTHA-USDT"


ERTHA_USDT = ERTHA_USDT()
"""
    name: ERTHA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FCON_USDT:
    """
        name: FCON-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FCON-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FCON-USDT"

    def __str__(self):
        return "FCON-USDT"

    def __call__(self):
        return "FCON-USDT"


FCON_USDT = FCON_USDT()
"""
    name: FCON-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ACA_USDT:
    """
        name: ACA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ACA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACA-USDT"

    def __str__(self):
        return "ACA-USDT"

    def __call__(self):
        return "ACA-USDT"


ACA_USDT = ACA_USDT()
"""
    name: ACA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ACA_BTC:
    """
        name: ACA-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ACA-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACA-BTC"

    def __str__(self):
        return "ACA-BTC"

    def __call__(self):
        return "ACA-BTC"


ACA_BTC = ACA_BTC()
"""
    name: ACA-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MTS_USDT:
    """
        name: MTS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MTS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MTS-USDT"

    def __str__(self):
        return "MTS-USDT"

    def __call__(self):
        return "MTS-USDT"


MTS_USDT = MTS_USDT()
"""
    name: MTS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ROAR_USDT:
    """
        name: ROAR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ROAR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ROAR-USDT"

    def __str__(self):
        return "ROAR-USDT"

    def __call__(self):
        return "ROAR-USDT"


ROAR_USDT = ROAR_USDT()
"""
    name: ROAR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HBB_USDT:
    """
        name: HBB-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HBB-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HBB-USDT"

    def __str__(self):
        return "HBB-USDT"

    def __call__(self):
        return "HBB-USDT"


HBB_USDT = HBB_USDT()
"""
    name: HBB-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CVX_USDT:
    """
        name: CVX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CVX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CVX-USDT"

    def __str__(self):
        return "CVX-USDT"

    def __call__(self):
        return "CVX-USDT"


CVX_USDT = CVX_USDT()
"""
    name: CVX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AMP_USDT:
    """
        name: AMP-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AMP-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMP-USDT"

    def __str__(self):
        return "AMP-USDT"

    def __call__(self):
        return "AMP-USDT"


AMP_USDT = AMP_USDT()
"""
    name: AMP-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ACT_USDT:
    """
        name: ACT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ACT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACT-USDT"

    def __str__(self):
        return "ACT-USDT"

    def __call__(self):
        return "ACT-USDT"


ACT_USDT = ACT_USDT()
"""
    name: ACT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MJT_USDT:
    """
        name: MJT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MJT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MJT-USDT"

    def __str__(self):
        return "MJT-USDT"

    def __call__(self):
        return "MJT-USDT"


MJT_USDT = MJT_USDT()
"""
    name: MJT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MJT_KCS:
    """
        name: MJT-KCS
        precision: 0.000001
        minimum_margin: 0.001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MJT-KCS"
    precision: int = 0.000001
    minimum_margin: float = 0.001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MJT-KCS"

    def __str__(self):
        return "MJT-KCS"

    def __call__(self):
        return "MJT-KCS"


MJT_KCS = MJT_KCS()
"""
    name: MJT-KCS
    precision: 0.000001
    minimum_margin: 0.001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHX_USDT:
    """
        name: SHX-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHX-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHX-USDT"

    def __str__(self):
        return "SHX-USDT"

    def __call__(self):
        return "SHX-USDT"


SHX_USDT = SHX_USDT()
"""
    name: SHX-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SHX_BTC:
    """
        name: SHX-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHX-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHX-BTC"

    def __str__(self):
        return "SHX-BTC"

    def __call__(self):
        return "SHX-BTC"


SHX_BTC = SHX_BTC()
"""
    name: SHX-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STARLY_USDT:
    """
        name: STARLY-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STARLY-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STARLY-USDT"

    def __str__(self):
        return "STARLY-USDT"

    def __call__(self):
        return "STARLY-USDT"


STARLY_USDT = STARLY_USDT()
"""
    name: STARLY-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ONSTON_USDT:
    """
        name: ONSTON-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ONSTON-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ONSTON-USDT"

    def __str__(self):
        return "ONSTON-USDT"

    def __call__(self):
        return "ONSTON-USDT"


ONSTON_USDT = ONSTON_USDT()
"""
    name: ONSTON-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RANKER_USDT:
    """
        name: RANKER-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RANKER-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RANKER-USDT"

    def __str__(self):
        return "RANKER-USDT"

    def __call__(self):
        return "RANKER-USDT"


RANKER_USDT = RANKER_USDT()
"""
    name: RANKER-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WMT_USDT:
    """
        name: WMT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WMT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WMT-USDT"

    def __str__(self):
        return "WMT-USDT"

    def __call__(self):
        return "WMT-USDT"


WMT_USDT = WMT_USDT()
"""
    name: WMT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XNO_USDT:
    """
        name: XNO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XNO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNO-USDT"

    def __str__(self):
        return "XNO-USDT"

    def __call__(self):
        return "XNO-USDT"


XNO_USDT = XNO_USDT()
"""
    name: XNO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XNO_BTC:
    """
        name: XNO-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XNO-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XNO-BTC"

    def __str__(self):
        return "XNO-BTC"

    def __call__(self):
        return "XNO-BTC"


XNO_BTC = XNO_BTC()
"""
    name: XNO-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MARS4_USDT:
    """
        name: MARS4-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MARS4-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MARS4-USDT"

    def __str__(self):
        return "MARS4-USDT"

    def __call__(self):
        return "MARS4-USDT"


MARS4_USDT = MARS4_USDT()
"""
    name: MARS4-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TFUEL_USDT:
    """
        name: TFUEL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TFUEL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUEL-USDT"

    def __str__(self):
        return "TFUEL-USDT"

    def __call__(self):
        return "TFUEL-USDT"


TFUEL_USDT = TFUEL_USDT()
"""
    name: TFUEL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TFUEL_BTC:
    """
        name: TFUEL-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TFUEL-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TFUEL-BTC"

    def __str__(self):
        return "TFUEL-BTC"

    def __call__(self):
        return "TFUEL-BTC"


TFUEL_BTC = TFUEL_BTC()
"""
    name: TFUEL-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class METIS_USDT:
    """
        name: METIS-USDT
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "METIS-USDT"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "METIS-USDT"

    def __str__(self):
        return "METIS-USDT"

    def __call__(self):
        return "METIS-USDT"


METIS_USDT = METIS_USDT()
"""
    name: METIS-USDT
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LAVAX_USDT:
    """
        name: LAVAX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LAVAX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LAVAX-USDT"

    def __str__(self):
        return "LAVAX-USDT"

    def __call__(self):
        return "LAVAX-USDT"


LAVAX_USDT = LAVAX_USDT()
"""
    name: LAVAX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WAL_USDT:
    """
        name: WAL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WAL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WAL-USDT"

    def __str__(self):
        return "WAL-USDT"

    def __call__(self):
        return "WAL-USDT"


WAL_USDT = WAL_USDT()
"""
    name: WAL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BULL_USDT:
    """
        name: BULL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BULL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BULL-USDT"

    def __str__(self):
        return "BULL-USDT"

    def __call__(self):
        return "BULL-USDT"


BULL_USDT = BULL_USDT()
"""
    name: BULL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SON_USDT:
    """
        name: SON-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SON-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SON-USDT"

    def __str__(self):
        return "SON-USDT"

    def __call__(self):
        return "SON-USDT"


SON_USDT = SON_USDT()
"""
    name: SON-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MELOS_USDT:
    """
        name: MELOS-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MELOS-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MELOS-USDT"

    def __str__(self):
        return "MELOS-USDT"

    def __call__(self):
        return "MELOS-USDT"


MELOS_USDT = MELOS_USDT()
"""
    name: MELOS-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class APE_USDT:
    """
        name: APE-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "APE-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APE-USDT"

    def __str__(self):
        return "APE-USDT"

    def __call__(self):
        return "APE-USDT"


APE_USDT = APE_USDT()
"""
    name: APE-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class GMT_USDT:
    """
        name: GMT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "GMT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMT-USDT"

    def __str__(self):
        return "GMT-USDT"

    def __call__(self):
        return "GMT-USDT"


GMT_USDT = GMT_USDT()
"""
    name: GMT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BICO_USDT:
    """
        name: BICO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BICO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BICO-USDT"

    def __str__(self):
        return "BICO-USDT"

    def __call__(self):
        return "BICO-USDT"


BICO_USDT = BICO_USDT()
"""
    name: BICO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STG_USDT:
    """
        name: STG-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STG-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STG-USDT"

    def __str__(self):
        return "STG-USDT"

    def __call__(self):
        return "STG-USDT"


STG_USDT = STG_USDT()
"""
    name: STG-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LMR_USDT:
    """
        name: LMR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LMR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LMR-USDT"

    def __str__(self):
        return "LMR-USDT"

    def __call__(self):
        return "LMR-USDT"


LMR_USDT = LMR_USDT()
"""
    name: LMR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LMR_BTC:
    """
        name: LMR-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LMR-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LMR-BTC"

    def __str__(self):
        return "LMR-BTC"

    def __call__(self):
        return "LMR-BTC"


LMR_BTC = LMR_BTC()
"""
    name: LMR-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LOKA_USDT:
    """
        name: LOKA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOKA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOKA-USDT"

    def __str__(self):
        return "LOKA-USDT"

    def __call__(self):
        return "LOKA-USDT"


LOKA_USDT = LOKA_USDT()
"""
    name: LOKA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class URUS_USDT:
    """
        name: URUS-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "URUS-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "URUS-USDT"

    def __str__(self):
        return "URUS-USDT"

    def __call__(self):
        return "URUS-USDT"


URUS_USDT = URUS_USDT()
"""
    name: URUS-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class JAM_USDT:
    """
        name: JAM-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "JAM-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JAM-USDT"

    def __str__(self):
        return "JAM-USDT"

    def __call__(self):
        return "JAM-USDT"


JAM_USDT = JAM_USDT()
"""
    name: JAM-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class JAM_ETH:
    """
        name: JAM-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "JAM-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JAM-ETH"

    def __str__(self):
        return "JAM-ETH"

    def __call__(self):
        return "JAM-ETH"


JAM_ETH = JAM_ETH()
"""
    name: JAM-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNC_USDT:
    """
        name: BNC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BNC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNC-USDT"

    def __str__(self):
        return "BNC-USDT"

    def __call__(self):
        return "BNC-USDT"


BNC_USDT = BNC_USDT()
"""
    name: BNC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LBP_USDT:
    """
        name: LBP-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LBP-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LBP-USDT"

    def __str__(self):
        return "LBP-USDT"

    def __call__(self):
        return "LBP-USDT"


LBP_USDT = LBP_USDT()
"""
    name: LBP-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CFX_USDT:
    """
        name: CFX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CFX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CFX-USDT"

    def __str__(self):
        return "CFX-USDT"

    def __call__(self):
        return "CFX-USDT"


CFX_USDT = CFX_USDT()
"""
    name: CFX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LOOKS_USDT:
    """
        name: LOOKS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LOOKS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LOOKS-USDT"

    def __str__(self):
        return "LOOKS-USDT"

    def __call__(self):
        return "LOOKS-USDT"


LOOKS_USDT = LOOKS_USDT()
"""
    name: LOOKS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XCN_USDT:
    """
        name: XCN-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XCN-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCN-USDT"

    def __str__(self):
        return "XCN-USDT"

    def __call__(self):
        return "XCN-USDT"


XCN_USDT = XCN_USDT()
"""
    name: XCN-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XCN_BTC:
    """
        name: XCN-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XCN-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCN-BTC"

    def __str__(self):
        return "XCN-BTC"

    def __call__(self):
        return "XCN-BTC"


XCN_BTC = XCN_BTC()
"""
    name: XCN-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TITAN_USDT:
    """
        name: TITAN-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TITAN-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TITAN-USDT"

    def __str__(self):
        return "TITAN-USDT"

    def __call__(self):
        return "TITAN-USDT"


TITAN_USDT = TITAN_USDT()
"""
    name: TITAN-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class INDI_USDT:
    """
        name: INDI-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "INDI-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "INDI-USDT"

    def __str__(self):
        return "INDI-USDT"

    def __call__(self):
        return "INDI-USDT"


INDI_USDT = INDI_USDT()
"""
    name: INDI-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class UPO_USDT:
    """
        name: UPO-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "UPO-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "UPO-USDT"

    def __str__(self):
        return "UPO-USDT"

    def __call__(self):
        return "UPO-USDT"


UPO_USDT = UPO_USDT()
"""
    name: UPO-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SLCL_USDT:
    """
        name: SLCL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SLCL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SLCL-USDT"

    def __str__(self):
        return "SLCL-USDT"

    def __call__(self):
        return "SLCL-USDT"


SLCL_USDT = SLCL_USDT()
"""
    name: SLCL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CEEK_USDT:
    """
        name: CEEK-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CEEK-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CEEK-USDT"

    def __str__(self):
        return "CEEK-USDT"

    def __call__(self):
        return "CEEK-USDT"


CEEK_USDT = CEEK_USDT()
"""
    name: CEEK-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NHCT_USDT:
    """
        name: NHCT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NHCT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NHCT-USDT"

    def __str__(self):
        return "NHCT-USDT"

    def __call__(self):
        return "NHCT-USDT"


NHCT_USDT = NHCT_USDT()
"""
    name: NHCT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ARNM_USDT:
    """
        name: ARNM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ARNM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ARNM-USDT"

    def __str__(self):
        return "ARNM-USDT"

    def __call__(self):
        return "ARNM-USDT"


ARNM_USDT = ARNM_USDT()
"""
    name: ARNM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FRA_USDT:
    """
        name: FRA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FRA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FRA-USDT"

    def __str__(self):
        return "FRA-USDT"

    def __call__(self):
        return "FRA-USDT"


FRA_USDT = FRA_USDT()
"""
    name: FRA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VISION_USDT:
    """
        name: VISION-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VISION-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VISION-USDT"

    def __str__(self):
        return "VISION-USDT"

    def __call__(self):
        return "VISION-USDT"


VISION_USDT = VISION_USDT()
"""
    name: VISION-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class COCOS_USDT:
    """
        name: COCOS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "COCOS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COCOS-USDT"

    def __str__(self):
        return "COCOS-USDT"

    def __call__(self):
        return "COCOS-USDT"


COCOS_USDT = COCOS_USDT()
"""
    name: COCOS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALPINE_USDT:
    """
        name: ALPINE-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALPINE-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALPINE-USDT"

    def __str__(self):
        return "ALPINE-USDT"

    def __call__(self):
        return "ALPINE-USDT"


ALPINE_USDT = ALPINE_USDT()
"""
    name: ALPINE-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNX_USDT:
    """
        name: BNX-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BNX-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNX-USDT"

    def __str__(self):
        return "BNX-USDT"

    def __call__(self):
        return "BNX-USDT"


BNX_USDT = BNX_USDT()
"""
    name: BNX-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ZBC_USDT:
    """
        name: ZBC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZBC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZBC-USDT"

    def __str__(self):
        return "ZBC-USDT"

    def __call__(self):
        return "ZBC-USDT"


ZBC_USDT = ZBC_USDT()
"""
    name: ZBC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WOOP_USDT:
    """
        name: WOOP-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WOOP-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOOP-USDT"

    def __str__(self):
        return "WOOP-USDT"

    def __call__(self):
        return "WOOP-USDT"


WOOP_USDT = WOOP_USDT()
"""
    name: WOOP-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class T_USDT:
    """
        name: T-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "T-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "T-USDT"

    def __str__(self):
        return "T-USDT"

    def __call__(self):
        return "T-USDT"


T_USDT = T_USDT()
"""
    name: T-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NYM_USDT:
    """
        name: NYM-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NYM-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NYM-USDT"

    def __str__(self):
        return "NYM-USDT"

    def __call__(self):
        return "NYM-USDT"


NYM_USDT = NYM_USDT()
"""
    name: NYM-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VOXEL_USDT:
    """
        name: VOXEL-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VOXEL-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXEL-USDT"

    def __str__(self):
        return "VOXEL-USDT"

    def __call__(self):
        return "VOXEL-USDT"


VOXEL_USDT = VOXEL_USDT()
"""
    name: VOXEL-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VOXEL_ETH:
    """
        name: VOXEL-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VOXEL-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VOXEL-ETH"

    def __str__(self):
        return "VOXEL-ETH"

    def __call__(self):
        return "VOXEL-ETH"


VOXEL_ETH = VOXEL_ETH()
"""
    name: VOXEL-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PSTAKE_USDT:
    """
        name: PSTAKE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PSTAKE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSTAKE-USDT"

    def __str__(self):
        return "PSTAKE-USDT"

    def __call__(self):
        return "PSTAKE-USDT"


PSTAKE_USDT = PSTAKE_USDT()
"""
    name: PSTAKE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SPA_USDT:
    """
        name: SPA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SPA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPA-USDT"

    def __str__(self):
        return "SPA-USDT"

    def __call__(self):
        return "SPA-USDT"


SPA_USDT = SPA_USDT()
"""
    name: SPA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SPA_ETH:
    """
        name: SPA-ETH
        precision: 0.000000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SPA-ETH"
    precision: int = 0.000000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SPA-ETH"

    def __str__(self):
        return "SPA-ETH"

    def __call__(self):
        return "SPA-ETH"


SPA_ETH = SPA_ETH()
"""
    name: SPA-ETH
    precision: 0.000000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SYNR_USDT:
    """
        name: SYNR-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SYNR-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYNR-USDT"

    def __str__(self):
        return "SYNR-USDT"

    def __call__(self):
        return "SYNR-USDT"


SYNR_USDT = SYNR_USDT()
"""
    name: SYNR-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DAR_USDT:
    """
        name: DAR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DAR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAR-USDT"

    def __str__(self):
        return "DAR-USDT"

    def __call__(self):
        return "DAR-USDT"


DAR_USDT = DAR_USDT()
"""
    name: DAR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class DAR_BTC:
    """
        name: DAR-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DAR-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DAR-BTC"

    def __str__(self):
        return "DAR-BTC"

    def __call__(self):
        return "DAR-BTC"


DAR_BTC = DAR_BTC()
"""
    name: DAR-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MV_USDT:
    """
        name: MV-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MV-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MV-USDT"

    def __str__(self):
        return "MV-USDT"

    def __call__(self):
        return "MV-USDT"


MV_USDT = MV_USDT()
"""
    name: MV-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XDEFI_USDT:
    """
        name: XDEFI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XDEFI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XDEFI-USDT"

    def __str__(self):
        return "XDEFI-USDT"

    def __call__(self):
        return "XDEFI-USDT"


XDEFI_USDT = XDEFI_USDT()
"""
    name: XDEFI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RACA_USDT:
    """
        name: RACA-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RACA-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RACA-USDT"

    def __str__(self):
        return "RACA-USDT"

    def __call__(self):
        return "RACA-USDT"


RACA_USDT = RACA_USDT()
"""
    name: RACA-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XWG_USDT:
    """
        name: XWG-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XWG-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XWG-USDT"

    def __str__(self):
        return "XWG-USDT"

    def __call__(self):
        return "XWG-USDT"


XWG_USDT = XWG_USDT()
"""
    name: XWG-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HAWK_USDT:
    """
        name: HAWK-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HAWK-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HAWK-USDT"

    def __str__(self):
        return "HAWK-USDT"

    def __call__(self):
        return "HAWK-USDT"


HAWK_USDT = HAWK_USDT()
"""
    name: HAWK-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRVL_BTC:
    """
        name: TRVL-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRVL-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRVL-BTC"

    def __str__(self):
        return "TRVL-BTC"

    def __call__(self):
        return "TRVL-BTC"


TRVL_BTC = TRVL_BTC()
"""
    name: TRVL-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SWFTC_USDT:
    """
        name: SWFTC-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SWFTC-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWFTC-USDT"

    def __str__(self):
        return "SWFTC-USDT"

    def __call__(self):
        return "SWFTC-USDT"


SWFTC_USDT = SWFTC_USDT()
"""
    name: SWFTC-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BRWL_USDT:
    """
        name: BRWL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BRWL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRWL-USDT"

    def __str__(self):
        return "BRWL-USDT"

    def __call__(self):
        return "BRWL-USDT"


BRWL_USDT = BRWL_USDT()
"""
    name: BRWL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TAUM_USDT:
    """
        name: TAUM-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TAUM-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TAUM-USDT"

    def __str__(self):
        return "TAUM-USDT"

    def __call__(self):
        return "TAUM-USDT"


TAUM_USDT = TAUM_USDT()
"""
    name: TAUM-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CELR_USDT:
    """
        name: CELR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CELR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELR-USDT"

    def __str__(self):
        return "CELR-USDT"

    def __call__(self):
        return "CELR-USDT"


CELR_USDT = CELR_USDT()
"""
    name: CELR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AURORA_USDT:
    """
        name: AURORA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AURORA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AURORA-USDT"

    def __str__(self):
        return "AURORA-USDT"

    def __call__(self):
        return "AURORA-USDT"


AURORA_USDT = AURORA_USDT()
"""
    name: AURORA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class POSI_USDT:
    """
        name: POSI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POSI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POSI-USDT"

    def __str__(self):
        return "POSI-USDT"

    def __call__(self):
        return "POSI-USDT"


POSI_USDT = POSI_USDT()
"""
    name: POSI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class COOHA_USDT:
    """
        name: COOHA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "COOHA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "COOHA-USDT"

    def __str__(self):
        return "COOHA-USDT"

    def __call__(self):
        return "COOHA-USDT"


COOHA_USDT = COOHA_USDT()
"""
    name: COOHA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KNC_USDT:
    """
        name: KNC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KNC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KNC-USDT"

    def __str__(self):
        return "KNC-USDT"

    def __call__(self):
        return "KNC-USDT"


KNC_USDT = KNC_USDT()
"""
    name: KNC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EPK_USDT:
    """
        name: EPK-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EPK-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPK-USDT"

    def __str__(self):
        return "EPK-USDT"

    def __call__(self):
        return "EPK-USDT"


EPK_USDT = EPK_USDT()
"""
    name: EPK-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PLD_USDT:
    """
        name: PLD-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PLD-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLD-USDT"

    def __str__(self):
        return "PLD-USDT"

    def __call__(self):
        return "PLD-USDT"


PLD_USDT = PLD_USDT()
"""
    name: PLD-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PSL_USDT:
    """
        name: PSL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PSL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PSL-USDT"

    def __str__(self):
        return "PSL-USDT"

    def __call__(self):
        return "PSL-USDT"


PSL_USDT = PSL_USDT()
"""
    name: PSL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PKF_USDT:
    """
        name: PKF-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PKF-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PKF-USDT"

    def __str__(self):
        return "PKF-USDT"

    def __call__(self):
        return "PKF-USDT"


PKF_USDT = PKF_USDT()
"""
    name: PKF-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OVR_USDT:
    """
        name: OVR-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OVR-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OVR-USDT"

    def __str__(self):
        return "OVR-USDT"

    def __call__(self):
        return "OVR-USDT"


OVR_USDT = OVR_USDT()
"""
    name: OVR-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SYS_USDT:
    """
        name: SYS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SYS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYS-USDT"

    def __str__(self):
        return "SYS-USDT"

    def __call__(self):
        return "SYS-USDT"


SYS_USDT = SYS_USDT()
"""
    name: SYS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SYS_BTC:
    """
        name: SYS-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SYS-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SYS-BTC"

    def __str__(self):
        return "SYS-BTC"

    def __call__(self):
        return "SYS-BTC"


SYS_BTC = SYS_BTC()
"""
    name: SYS-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BRISE_USDT:
    """
        name: BRISE-USDT
        precision: 0.0000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BRISE-USDT"
    precision: int = 0.0000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BRISE-USDT"

    def __str__(self):
        return "BRISE-USDT"

    def __call__(self):
        return "BRISE-USDT"


BRISE_USDT = BRISE_USDT()
"""
    name: BRISE-USDT
    precision: 0.0000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DG_USDT:
    """
        name: DG-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DG-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DG-USDT"

    def __str__(self):
        return "DG-USDT"

    def __call__(self):
        return "DG-USDT"


DG_USDT = DG_USDT()
"""
    name: DG-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EPX_USDT:
    """
        name: EPX-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EPX-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EPX-USDT"

    def __str__(self):
        return "EPX-USDT"

    def __call__(self):
        return "EPX-USDT"


EPX_USDT = EPX_USDT()
"""
    name: EPX-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GST_USDT:
    """
        name: GST-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GST-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GST-USDT"

    def __str__(self):
        return "GST-USDT"

    def __call__(self):
        return "GST-USDT"


GST_USDT = GST_USDT()
"""
    name: GST-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PLY_USDT:
    """
        name: PLY-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PLY-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PLY-USDT"

    def __str__(self):
        return "PLY-USDT"

    def __call__(self):
        return "PLY-USDT"


PLY_USDT = PLY_USDT()
"""
    name: PLY-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GAL_USDT:
    """
        name: GAL-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "GAL-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GAL-USDT"

    def __str__(self):
        return "GAL-USDT"

    def __call__(self):
        return "GAL-USDT"


GAL_USDT = GAL_USDT()
"""
    name: GAL-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BSW_USDT:
    """
        name: BSW-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BSW-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BSW-USDT"

    def __str__(self):
        return "BSW-USDT"

    def __call__(self):
        return "BSW-USDT"


BSW_USDT = BSW_USDT()
"""
    name: BSW-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FITFI_USDT:
    """
        name: FITFI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FITFI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FITFI-USDT"

    def __str__(self):
        return "FITFI-USDT"

    def __call__(self):
        return "FITFI-USDT"


FITFI_USDT = FITFI_USDT()
"""
    name: FITFI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class FSN_USDT:
    """
        name: FSN-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FSN-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FSN-USDT"

    def __str__(self):
        return "FSN-USDT"

    def __call__(self):
        return "FSN-USDT"


FSN_USDT = FSN_USDT()
"""
    name: FSN-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class H2O_USDT:
    """
        name: H2O-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "H2O-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "H2O-USDT"

    def __str__(self):
        return "H2O-USDT"

    def __call__(self):
        return "H2O-USDT"


H2O_USDT = H2O_USDT()
"""
    name: H2O-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMM_USDT:
    """
        name: GMM-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GMM-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMM-USDT"

    def __str__(self):
        return "GMM-USDT"

    def __call__(self):
        return "GMM-USDT"


GMM_USDT = GMM_USDT()
"""
    name: GMM-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AKT_USDT:
    """
        name: AKT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AKT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AKT-USDT"

    def __str__(self):
        return "AKT-USDT"

    def __call__(self):
        return "AKT-USDT"


AKT_USDT = AKT_USDT()
"""
    name: AKT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SIN_USDT:
    """
        name: SIN-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SIN-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SIN-USDT"

    def __str__(self):
        return "SIN-USDT"

    def __call__(self):
        return "SIN-USDT"


SIN_USDT = SIN_USDT()
"""
    name: SIN-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AUSD_USDT:
    """
        name: AUSD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AUSD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AUSD-USDT"

    def __str__(self):
        return "AUSD-USDT"

    def __call__(self):
        return "AUSD-USDT"


AUSD_USDT = AUSD_USDT()
"""
    name: AUSD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BOBA_USDT:
    """
        name: BOBA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BOBA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BOBA-USDT"

    def __str__(self):
        return "BOBA-USDT"

    def __call__(self):
        return "BOBA-USDT"


BOBA_USDT = BOBA_USDT()
"""
    name: BOBA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KARA_USDT:
    """
        name: KARA-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KARA-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KARA-USDT"

    def __str__(self):
        return "KARA-USDT"

    def __call__(self):
        return "KARA-USDT"


KARA_USDT = KARA_USDT()
"""
    name: KARA-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BFC_USDT:
    """
        name: BFC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BFC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BFC-USDT"

    def __str__(self):
        return "BFC-USDT"

    def __call__(self):
        return "BFC-USDT"


BFC_USDT = BFC_USDT()
"""
    name: BFC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BIFI_USDT:
    """
        name: BIFI-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BIFI-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BIFI-USDT"

    def __str__(self):
        return "BIFI-USDT"

    def __call__(self):
        return "BIFI-USDT"


BIFI_USDT = BIFI_USDT()
"""
    name: BIFI-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DFA_USDT:
    """
        name: DFA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DFA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DFA-USDT"

    def __str__(self):
        return "DFA-USDT"

    def __call__(self):
        return "DFA-USDT"


DFA_USDT = DFA_USDT()
"""
    name: DFA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KYL_USDT:
    """
        name: KYL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KYL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KYL-USDT"

    def __str__(self):
        return "KYL-USDT"

    def __call__(self):
        return "KYL-USDT"


KYL_USDT = KYL_USDT()
"""
    name: KYL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FCD_USDT:
    """
        name: FCD-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FCD-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FCD-USDT"

    def __str__(self):
        return "FCD-USDT"

    def __call__(self):
        return "FCD-USDT"


FCD_USDT = FCD_USDT()
"""
    name: FCD-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MBL_USDT:
    """
        name: MBL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MBL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MBL-USDT"

    def __str__(self):
        return "MBL-USDT"

    def __call__(self):
        return "MBL-USDT"


MBL_USDT = MBL_USDT()
"""
    name: MBL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CELT_USDT:
    """
        name: CELT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CELT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CELT-USDT"

    def __str__(self):
        return "CELT-USDT"

    def __call__(self):
        return "CELT-USDT"


CELT_USDT = CELT_USDT()
"""
    name: CELT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DUSK_USDT:
    """
        name: DUSK-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DUSK-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DUSK-USDT"

    def __str__(self):
        return "DUSK-USDT"

    def __call__(self):
        return "DUSK-USDT"


DUSK_USDT = DUSK_USDT()
"""
    name: DUSK-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USDD_USDT:
    """
        name: USDD-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "USDD-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDD-USDT"

    def __str__(self):
        return "USDD-USDT"

    def __call__(self):
        return "USDD-USDT"


USDD_USDT = USDD_USDT()
"""
    name: USDD-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class USDD_USDC:
    """
        name: USDD-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "USDD-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDD-USDC"

    def __str__(self):
        return "USDD-USDC"

    def __call__(self):
        return "USDD-USDC"


USDD_USDC = USDD_USDC()
"""
    name: USDD-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class FITFI_USDC:
    """
        name: FITFI-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FITFI-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FITFI-USDC"

    def __str__(self):
        return "FITFI-USDC"

    def __call__(self):
        return "FITFI-USDC"


FITFI_USDC = FITFI_USDC()
"""
    name: FITFI-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class APE_USDC:
    """
        name: APE-USDC
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "APE-USDC"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APE-USDC"

    def __str__(self):
        return "APE-USDC"

    def __call__(self):
        return "APE-USDC"


APE_USDC = APE_USDC()
"""
    name: APE-USDC
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AVAX_USDC:
    """
        name: AVAX-USDC
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "AVAX-USDC"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AVAX-USDC"

    def __str__(self):
        return "AVAX-USDC"

    def __call__(self):
        return "AVAX-USDC"


AVAX_USDC = AVAX_USDC()
"""
    name: AVAX-USDC
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class SHIB_USDC:
    """
        name: SHIB-USDC
        precision: 0.000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SHIB-USDC"
    precision: int = 0.000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SHIB-USDC"

    def __str__(self):
        return "SHIB-USDC"

    def __call__(self):
        return "SHIB-USDC"


SHIB_USDC = SHIB_USDC()
"""
    name: SHIB-USDC
    precision: 0.000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XCN_USDC:
    """
        name: XCN-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XCN-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCN-USDC"

    def __str__(self):
        return "XCN-USDC"

    def __call__(self):
        return "XCN-USDC"


XCN_USDC = XCN_USDC()
"""
    name: XCN-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRX_USDC:
    """
        name: TRX-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "TRX-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRX-USDC"

    def __str__(self):
        return "TRX-USDC"

    def __call__(self):
        return "TRX-USDC"


TRX_USDC = TRX_USDC()
"""
    name: TRX-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class NEAR_USDC:
    """
        name: NEAR-USDC
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "NEAR-USDC"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEAR-USDC"

    def __str__(self):
        return "NEAR-USDC"

    def __call__(self):
        return "NEAR-USDC"


NEAR_USDC = NEAR_USDC()
"""
    name: NEAR-USDC
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MATIC_USDC:
    """
        name: MATIC-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "MATIC-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MATIC-USDC"

    def __str__(self):
        return "MATIC-USDC"

    def __call__(self):
        return "MATIC-USDC"


MATIC_USDC = MATIC_USDC()
"""
    name: MATIC-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class FTM_USDC:
    """
        name: FTM-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "FTM-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FTM-USDC"

    def __str__(self):
        return "FTM-USDC"

    def __call__(self):
        return "FTM-USDC"


FTM_USDC = FTM_USDC()
"""
    name: FTM-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ZIL_USDC:
    """
        name: ZIL-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ZIL-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ZIL-USDC"

    def __str__(self):
        return "ZIL-USDC"

    def __call__(self):
        return "ZIL-USDC"


ZIL_USDC = ZIL_USDC()
"""
    name: ZIL-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SOL_USDC:
    """
        name: SOL-USDC
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "SOL-USDC"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SOL-USDC"

    def __str__(self):
        return "SOL-USDC"

    def __call__(self):
        return "SOL-USDC"


SOL_USDC = SOL_USDC()
"""
    name: SOL-USDC
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class MLS_USDT:
    """
        name: MLS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MLS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MLS-USDT"

    def __str__(self):
        return "MLS-USDT"

    def __call__(self):
        return "MLS-USDT"


MLS_USDT = MLS_USDT()
"""
    name: MLS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AFK_USDT:
    """
        name: AFK-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AFK-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AFK-USDT"

    def __str__(self):
        return "AFK-USDT"

    def __call__(self):
        return "AFK-USDT"


AFK_USDT = AFK_USDT()
"""
    name: AFK-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AFK_USDC:
    """
        name: AFK-USDC
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AFK-USDC"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AFK-USDC"

    def __str__(self):
        return "AFK-USDC"

    def __call__(self):
        return "AFK-USDC"


AFK_USDC = AFK_USDC()
"""
    name: AFK-USDC
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ACH_USDT:
    """
        name: ACH-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ACH-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACH-USDT"

    def __str__(self):
        return "ACH-USDT"

    def __call__(self):
        return "ACH-USDT"


ACH_USDT = ACH_USDT()
"""
    name: ACH-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SCRT_USDT:
    """
        name: SCRT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SCRT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRT-USDT"

    def __str__(self):
        return "SCRT-USDT"

    def __call__(self):
        return "SCRT-USDT"


SCRT_USDT = SCRT_USDT()
"""
    name: SCRT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SCRT_BTC:
    """
        name: SCRT-BTC
        precision: 0.00000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SCRT-BTC"
    precision: int = 0.00000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SCRT-BTC"

    def __str__(self):
        return "SCRT-BTC"

    def __call__(self):
        return "SCRT-BTC"


SCRT_BTC = SCRT_BTC()
"""
    name: SCRT-BTC
    precision: 0.00000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class APE3L_USDT:
    """
        name: APE3L-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999999
        margin: False
    """
    name: str = "APE3L-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APE3L-USDT"

    def __str__(self):
        return "APE3L-USDT"

    def __call__(self):
        return "APE3L-USDT"


APE3L_USDT = APE3L_USDT()
"""
    name: APE3L-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class APE3S_USDT:
    """
        name: APE3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999999999
        margin: False
    """
    name: str = "APE3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APE3S-USDT"

    def __str__(self):
        return "APE3S-USDT"

    def __call__(self):
        return "APE3S-USDT"


APE3S_USDT = APE3S_USDT()
"""
    name: APE3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STORE_USDT:
    """
        name: STORE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STORE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORE-USDT"

    def __str__(self):
        return "STORE-USDT"

    def __call__(self):
        return "STORE-USDT"


STORE_USDT = STORE_USDT()
"""
    name: STORE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STORE_ETH:
    """
        name: STORE-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STORE-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STORE-ETH"

    def __str__(self):
        return "STORE-ETH"

    def __call__(self):
        return "STORE-ETH"


STORE_ETH = STORE_ETH()
"""
    name: STORE-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMT3L_USDT:
    """
        name: GMT3L-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 999999999
        margin: False
    """
    name: str = "GMT3L-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMT3L-USDT"

    def __str__(self):
        return "GMT3L-USDT"

    def __call__(self):
        return "GMT3L-USDT"


GMT3L_USDT = GMT3L_USDT()
"""
    name: GMT3L-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMT3S_USDT:
    """
        name: GMT3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 9999999999
        margin: False
    """
    name: str = "GMT3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 9999999999
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMT3S-USDT"

    def __str__(self):
        return "GMT3S-USDT"

    def __call__(self):
        return "GMT3S-USDT"


GMT3S_USDT = GMT3S_USDT()
"""
    name: GMT3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 9999999999
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CCD_USDT:
    """
        name: CCD-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CCD-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CCD-USDT"

    def __str__(self):
        return "CCD-USDT"

    def __call__(self):
        return "CCD-USDT"


CCD_USDT = CCD_USDT()
"""
    name: CCD-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOSE_USDC:
    """
        name: DOSE-USDC
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DOSE-USDC"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOSE-USDC"

    def __str__(self):
        return "DOSE-USDC"

    def __call__(self):
        return "DOSE-USDC"


DOSE_USDC = DOSE_USDC()
"""
    name: DOSE-USDC
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LUNC_USDT:
    """
        name: LUNC-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LUNC-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNC-USDT"

    def __str__(self):
        return "LUNC-USDT"

    def __call__(self):
        return "LUNC-USDT"


LUNC_USDT = LUNC_USDT()
"""
    name: LUNC-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LUNC_USDC:
    """
        name: LUNC-USDC
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LUNC-USDC"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNC-USDC"

    def __str__(self):
        return "LUNC-USDC"

    def __call__(self):
        return "LUNC-USDC"


LUNC_USDC = LUNC_USDC()
"""
    name: LUNC-USDC
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USTC_USDT:
    """
        name: USTC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USTC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTC-USDT"

    def __str__(self):
        return "USTC-USDT"

    def __call__(self):
        return "USTC-USDT"


USTC_USDT = USTC_USDT()
"""
    name: USTC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USTC_USDC:
    """
        name: USTC-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USTC-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USTC-USDC"

    def __str__(self):
        return "USTC-USDC"

    def __call__(self):
        return "USTC-USDC"


USTC_USDC = USTC_USDC()
"""
    name: USTC-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMT_USDC:
    """
        name: GMT-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GMT-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMT-USDC"

    def __str__(self):
        return "GMT-USDC"

    def __call__(self):
        return "GMT-USDC"


GMT_USDC = GMT_USDC()
"""
    name: GMT-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VRA_USDC:
    """
        name: VRA-USDC
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VRA-USDC"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VRA-USDC"

    def __str__(self):
        return "VRA-USDC"

    def __call__(self):
        return "VRA-USDC"


VRA_USDC = VRA_USDC()
"""
    name: VRA-USDC
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DOT_USDC:
    """
        name: DOT-USDC
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "DOT-USDC"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DOT-USDC"

    def __str__(self):
        return "DOT-USDC"

    def __call__(self):
        return "DOT-USDC"


DOT_USDC = DOT_USDC()
"""
    name: DOT-USDC
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class RUNE_USDC:
    """
        name: RUNE-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RUNE-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RUNE-USDC"

    def __str__(self):
        return "RUNE-USDC"

    def __call__(self):
        return "RUNE-USDC"


RUNE_USDC = RUNE_USDC()
"""
    name: RUNE-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ATOM_USDC:
    """
        name: ATOM-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ATOM-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ATOM-USDC"

    def __str__(self):
        return "ATOM-USDC"

    def __call__(self):
        return "ATOM-USDC"


ATOM_USDC = ATOM_USDC()
"""
    name: ATOM-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BNB_USDC:
    """
        name: BNB-USDC
        precision: 0.01
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.001
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "BNB-USDC"
    precision: int = 0.01
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.001
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BNB-USDC"

    def __str__(self):
        return "BNB-USDC"

    def __call__(self):
        return "BNB-USDC"


BNB_USDC = BNB_USDC()
"""
    name: BNB-USDC
    precision: 0.01
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.001
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class JASMY_USDC:
    """
        name: JASMY-USDC
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "JASMY-USDC"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMY-USDC"

    def __str__(self):
        return "JASMY-USDC"

    def __call__(self):
        return "JASMY-USDC"


JASMY_USDC = JASMY_USDC()
"""
    name: JASMY-USDC
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KCS_USDC:
    """
        name: KCS-USDC
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "KCS-USDC"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KCS-USDC"

    def __str__(self):
        return "KCS-USDC"

    def __call__(self):
        return "KCS-USDC"


KCS_USDC = KCS_USDC()
"""
    name: KCS-USDC
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class KDA_USDC:
    """
        name: KDA-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "KDA-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KDA-USDC"

    def __str__(self):
        return "KDA-USDC"

    def __call__(self):
        return "KDA-USDC"


KDA_USDC = KDA_USDC()
"""
    name: KDA-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class ALGO_USDC:
    """
        name: ALGO-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALGO-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALGO-USDC"

    def __str__(self):
        return "ALGO-USDC"

    def __call__(self):
        return "ALGO-USDC"


ALGO_USDC = ALGO_USDC()
"""
    name: ALGO-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LUNA_USDC:
    """
        name: LUNA-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LUNA-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LUNA-USDC"

    def __str__(self):
        return "LUNA-USDC"

    def __call__(self):
        return "LUNA-USDC"


LUNA_USDC = LUNA_USDC()
"""
    name: LUNA-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OP_USDT:
    """
        name: OP-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "OP-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OP-USDT"

    def __str__(self):
        return "OP-USDT"

    def __call__(self):
        return "OP-USDT"


OP_USDT = OP_USDT()
"""
    name: OP-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class OP_USDC:
    """
        name: OP-USDC
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "OP-USDC"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OP-USDC"

    def __str__(self):
        return "OP-USDC"

    def __call__(self):
        return "OP-USDC"


OP_USDC = OP_USDC()
"""
    name: OP-USDC
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class JASMY3L_USDT:
    """
        name: JASMY3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000000000
        margin: False
    """
    name: str = "JASMY3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMY3L-USDT"

    def __str__(self):
        return "JASMY3L-USDT"

    def __call__(self):
        return "JASMY3L-USDT"


JASMY3L_USDT = JASMY3L_USDT()
"""
    name: JASMY3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class JASMY3S_USDT:
    """
        name: JASMY3S-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 100000000000000000
        margin: False
    """
    name: str = "JASMY3S-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 100000000000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "JASMY3S-USDT"

    def __str__(self):
        return "JASMY3S-USDT"

    def __call__(self):
        return "JASMY3S-USDT"


JASMY3S_USDT = JASMY3S_USDT()
"""
    name: JASMY3S-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 100000000000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EVER_USDT:
    """
        name: EVER-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EVER-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EVER-USDT"

    def __str__(self):
        return "EVER-USDT"

    def __call__(self):
        return "EVER-USDT"


EVER_USDT = EVER_USDT()
"""
    name: EVER-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MOOV_USDT:
    """
        name: MOOV-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MOOV-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MOOV-USDT"

    def __str__(self):
        return "MOOV-USDT"

    def __call__(self):
        return "MOOV-USDT"


MOOV_USDT = MOOV_USDT()
"""
    name: MOOV-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class IHC_USDT:
    """
        name: IHC-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "IHC-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "IHC-USDT"

    def __str__(self):
        return "IHC-USDT"

    def __call__(self):
        return "IHC-USDT"


IHC_USDT = IHC_USDT()
"""
    name: IHC-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ICX_USDT:
    """
        name: ICX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ICX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICX-USDT"

    def __str__(self):
        return "ICX-USDT"

    def __call__(self):
        return "ICX-USDT"


ICX_USDT = ICX_USDT()
"""
    name: ICX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ICX_ETH:
    """
        name: ICX-ETH
        precision: 0.0000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ICX-ETH"
    precision: int = 0.0000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ICX-ETH"

    def __str__(self):
        return "ICX-ETH"

    def __call__(self):
        return "ICX-ETH"


ICX_ETH = ICX_ETH()
"""
    name: ICX-ETH
    precision: 0.0000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BTC_BRL:
    """
        name: BTC-BRL
        precision: 0.1
        minimum_margin: None
        initial_margin: None
        minimum_order_size: 0.000001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BTC-BRL"
    precision: int = 0.1
    minimum_margin: float = None
    initial_margin: float = None
    minimum_order_size: float = 0.000001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BTC-BRL"

    def __str__(self):
        return "BTC-BRL"

    def __call__(self):
        return "BTC-BRL"


BTC_BRL = BTC_BRL()
"""
    name: BTC-BRL
    precision: 0.1
    minimum_margin: None
    initial_margin: None
    minimum_order_size: 0.000001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETH_BRL:
    """
        name: ETH-BRL
        precision: 0.01
        minimum_margin: None
        initial_margin: None
        minimum_order_size: 0.0001
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETH-BRL"
    precision: int = 0.01
    minimum_margin: float = None
    initial_margin: float = None
    minimum_order_size: float = 0.0001
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETH-BRL"

    def __str__(self):
        return "ETH-BRL"

    def __call__(self):
        return "ETH-BRL"


ETH_BRL = ETH_BRL()
"""
    name: ETH-BRL
    precision: 0.01
    minimum_margin: None
    initial_margin: None
    minimum_order_size: 0.0001
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USDT_BRL:
    """
        name: USDT-BRL
        precision: 0.0001
        minimum_margin: None
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USDT-BRL"
    precision: int = 0.0001
    minimum_margin: float = None
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDT-BRL"

    def __str__(self):
        return "USDT-BRL"

    def __call__(self):
        return "USDT-BRL"


USDT_BRL = USDT_BRL()
"""
    name: USDT-BRL
    precision: 0.0001
    minimum_margin: None
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WELL_USDT:
    """
        name: WELL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WELL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WELL-USDT"

    def __str__(self):
        return "WELL-USDT"

    def __call__(self):
        return "WELL-USDT"


WELL_USDT = WELL_USDT()
"""
    name: WELL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FORT_USDT:
    """
        name: FORT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FORT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FORT-USDT"

    def __str__(self):
        return "FORT-USDT"

    def __call__(self):
        return "FORT-USDT"


FORT_USDT = FORT_USDT()
"""
    name: FORT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USDP_USDT:
    """
        name: USDP-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USDP-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDP-USDT"

    def __str__(self):
        return "USDP-USDT"

    def __call__(self):
        return "USDP-USDT"


USDP_USDT = USDP_USDT()
"""
    name: USDP-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class USDD_TRX:
    """
        name: USDD-TRX
        precision: 0.001
        minimum_margin: 10
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "USDD-TRX"
    precision: int = 0.001
    minimum_margin: float = 10
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "USDD-TRX"

    def __str__(self):
        return "USDD-TRX"

    def __call__(self):
        return "USDD-TRX"


USDD_TRX = USDD_TRX()
"""
    name: USDD-TRX
    precision: 0.001
    minimum_margin: 10
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CSPR_USDT:
    """
        name: CSPR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CSPR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CSPR-USDT"

    def __str__(self):
        return "CSPR-USDT"

    def __call__(self):
        return "CSPR-USDT"


CSPR_USDT = CSPR_USDT()
"""
    name: CSPR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CSPR_ETH:
    """
        name: CSPR-ETH
        precision: 0.00000001
        minimum_margin: 0.00001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CSPR-ETH"
    precision: int = 0.00000001
    minimum_margin: float = 0.00001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CSPR-ETH"

    def __str__(self):
        return "CSPR-ETH"

    def __call__(self):
        return "CSPR-ETH"


CSPR_ETH = CSPR_ETH()
"""
    name: CSPR-ETH
    precision: 0.00000001
    minimum_margin: 0.00001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WEMIX_USDT:
    """
        name: WEMIX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WEMIX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WEMIX-USDT"

    def __str__(self):
        return "WEMIX-USDT"

    def __call__(self):
        return "WEMIX-USDT"


WEMIX_USDT = WEMIX_USDT()
"""
    name: WEMIX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class REV3L_USDT:
    """
        name: REV3L-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "REV3L-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "REV3L-USDT"

    def __str__(self):
        return "REV3L-USDT"

    def __call__(self):
        return "REV3L-USDT"


REV3L_USDT = REV3L_USDT()
"""
    name: REV3L-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OLE_USDT:
    """
        name: OLE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OLE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OLE-USDT"

    def __str__(self):
        return "OLE-USDT"

    def __call__(self):
        return "OLE-USDT"


OLE_USDT = OLE_USDT()
"""
    name: OLE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LDO_USDT:
    """
        name: LDO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LDO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDO-USDT"

    def __str__(self):
        return "LDO-USDT"

    def __call__(self):
        return "LDO-USDT"


LDO_USDT = LDO_USDT()
"""
    name: LDO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class LDO_USDC:
    """
        name: LDO-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "LDO-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "LDO-USDC"

    def __str__(self):
        return "LDO-USDC"

    def __call__(self):
        return "LDO-USDC"


LDO_USDC = LDO_USDC()
"""
    name: LDO-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CULT_USDT:
    """
        name: CULT-USDT
        precision: 0.000000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CULT-USDT"
    precision: int = 0.000000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CULT-USDT"

    def __str__(self):
        return "CULT-USDT"

    def __call__(self):
        return "CULT-USDT"


CULT_USDT = CULT_USDT()
"""
    name: CULT-USDT
    precision: 0.000000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SWFTC_USDC:
    """
        name: SWFTC-USDC
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SWFTC-USDC"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWFTC-USDC"

    def __str__(self):
        return "SWFTC-USDC"

    def __call__(self):
        return "SWFTC-USDC"


SWFTC_USDC = SWFTC_USDC()
"""
    name: SWFTC-USDC
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FIDA_USDT:
    """
        name: FIDA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FIDA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FIDA-USDT"

    def __str__(self):
        return "FIDA-USDT"

    def __call__(self):
        return "FIDA-USDT"


FIDA_USDT = FIDA_USDT()
"""
    name: FIDA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BUSD_USDT:
    """
        name: BUSD-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BUSD-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSD-USDT"

    def __str__(self):
        return "BUSD-USDT"

    def __call__(self):
        return "BUSD-USDT"


BUSD_USDT = BUSD_USDT()
"""
    name: BUSD-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RBP_USDT:
    """
        name: RBP-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RBP-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RBP-USDT"

    def __str__(self):
        return "RBP-USDT"

    def __call__(self):
        return "RBP-USDT"


RBP_USDT = RBP_USDT()
"""
    name: RBP-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SRBP_USDT:
    """
        name: SRBP-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SRBP-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SRBP-USDT"

    def __str__(self):
        return "SRBP-USDT"

    def __call__(self):
        return "SRBP-USDT"


SRBP_USDT = SRBP_USDT()
"""
    name: SRBP-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIBAYC_USDT:
    """
        name: HIBAYC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIBAYC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIBAYC-USDT"

    def __str__(self):
        return "HIBAYC-USDT"

    def __call__(self):
        return "HIBAYC-USDT"


HIBAYC_USDT = HIBAYC_USDT()
"""
    name: HIBAYC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BUSD_USDC:
    """
        name: BUSD-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BUSD-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BUSD-USDC"

    def __str__(self):
        return "BUSD-USDC"

    def __call__(self):
        return "BUSD-USDC"


BUSD_USDC = BUSD_USDC()
"""
    name: BUSD-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OGV_USDT:
    """
        name: OGV-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OGV-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OGV-USDT"

    def __str__(self):
        return "OGV-USDT"

    def __call__(self):
        return "OGV-USDT"


OGV_USDT = OGV_USDT()
"""
    name: OGV-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class WOMBAT_USDT:
    """
        name: WOMBAT-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "WOMBAT-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "WOMBAT-USDT"

    def __str__(self):
        return "WOMBAT-USDT"

    def __call__(self):
        return "WOMBAT-USDT"


WOMBAT_USDT = WOMBAT_USDT()
"""
    name: WOMBAT-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIPUNKS_USDT:
    """
        name: HIPUNKS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIPUNKS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIPUNKS-USDT"

    def __str__(self):
        return "HIPUNKS-USDT"

    def __call__(self):
        return "HIPUNKS-USDT"


HIPUNKS_USDT = HIPUNKS_USDT()
"""
    name: HIPUNKS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FT_USDT:
    """
        name: FT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FT-USDT"

    def __str__(self):
        return "FT-USDT"

    def __call__(self):
        return "FT-USDT"


FT_USDT = FT_USDT()
"""
    name: FT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETC_USDC:
    """
        name: ETC-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETC-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETC-USDC"

    def __str__(self):
        return "ETC-USDC"

    def __call__(self):
        return "ETC-USDC"


ETC_USDC = ETC_USDC()
"""
    name: ETC-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIENS4_USDT:
    """
        name: HIENS4-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIENS4-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIENS4-USDT"

    def __str__(self):
        return "HIENS4-USDT"

    def __call__(self):
        return "HIENS4-USDT"


HIENS4_USDT = HIENS4_USDT()
"""
    name: HIENS4-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EGAME_USDT:
    """
        name: EGAME-USDT
        precision: 0.00000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EGAME-USDT"
    precision: int = 0.00000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGAME-USDT"

    def __str__(self):
        return "EGAME-USDT"

    def __call__(self):
        return "EGAME-USDT"


EGAME_USDT = EGAME_USDT()
"""
    name: EGAME-USDT
    precision: 0.00000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EGAME_BTC:
    """
        name: EGAME-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1000
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EGAME-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1000
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EGAME-BTC"

    def __str__(self):
        return "EGAME-BTC"

    def __call__(self):
        return "EGAME-BTC"


EGAME_BTC = EGAME_BTC()
"""
    name: EGAME-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1000
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class STEPWATCH_USDT:
    """
        name: STEPWATCH-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "STEPWATCH-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "STEPWATCH-USDT"

    def __str__(self):
        return "STEPWATCH-USDT"

    def __call__(self):
        return "STEPWATCH-USDT"


STEPWATCH_USDT = STEPWATCH_USDT()
"""
    name: STEPWATCH-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HISAND33_USDT:
    """
        name: HISAND33-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HISAND33-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HISAND33-USDT"

    def __str__(self):
        return "HISAND33-USDT"

    def __call__(self):
        return "HISAND33-USDT"


HISAND33_USDT = HISAND33_USDT()
"""
    name: HISAND33-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DC_USDT:
    """
        name: DC-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DC-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DC-USDT"

    def __str__(self):
        return "DC-USDT"

    def __call__(self):
        return "DC-USDT"


DC_USDT = DC_USDT()
"""
    name: DC-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NEER_USDT:
    """
        name: NEER-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NEER-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NEER-USDT"

    def __str__(self):
        return "NEER-USDT"

    def __call__(self):
        return "NEER-USDT"


NEER_USDT = NEER_USDT()
"""
    name: NEER-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RVN_USDT:
    """
        name: RVN-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RVN-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RVN-USDT"

    def __str__(self):
        return "RVN-USDT"

    def __call__(self):
        return "RVN-USDT"


RVN_USDT = RVN_USDT()
"""
    name: RVN-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIENS3_USDT:
    """
        name: HIENS3-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIENS3-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIENS3-USDT"

    def __str__(self):
        return "HIENS3-USDT"

    def __call__(self):
        return "HIENS3-USDT"


HIENS3_USDT = HIENS3_USDT()
"""
    name: HIENS3-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MC_USDT:
    """
        name: MC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MC-USDT"

    def __str__(self):
        return "MC-USDT"

    def __call__(self):
        return "MC-USDT"


MC_USDT = MC_USDT()
"""
    name: MC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PEEL_USDT:
    """
        name: PEEL-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PEEL-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEEL-USDT"

    def __str__(self):
        return "PEEL-USDT"

    def __call__(self):
        return "PEEL-USDT"


PEEL_USDT = PEEL_USDT()
"""
    name: PEEL-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PEEL_BTC:
    """
        name: PEEL-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PEEL-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PEEL-BTC"

    def __str__(self):
        return "PEEL-BTC"

    def __call__(self):
        return "PEEL-BTC"


PEEL_BTC = PEEL_BTC()
"""
    name: PEEL-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SDL_USDT:
    """
        name: SDL-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SDL-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SDL-USDT"

    def __str__(self):
        return "SDL-USDT"

    def __call__(self):
        return "SDL-USDT"


SDL_USDT = SDL_USDT()
"""
    name: SDL-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SDL_BTC:
    """
        name: SDL-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SDL-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SDL-BTC"

    def __str__(self):
        return "SDL-BTC"

    def __call__(self):
        return "SDL-BTC"


SDL_BTC = SDL_BTC()
"""
    name: SDL-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SWEAT_USDT:
    """
        name: SWEAT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SWEAT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SWEAT-USDT"

    def __str__(self):
        return "SWEAT-USDT"

    def __call__(self):
        return "SWEAT-USDT"


SWEAT_USDT = SWEAT_USDT()
"""
    name: SWEAT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIODBS_USDT:
    """
        name: HIODBS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIODBS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIODBS-USDT"

    def __str__(self):
        return "HIODBS-USDT"

    def __call__(self):
        return "HIODBS-USDT"


HIODBS_USDT = HIODBS_USDT()
"""
    name: HIODBS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CMP_USDT:
    """
        name: CMP-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CMP-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CMP-USDT"

    def __str__(self):
        return "CMP-USDT"

    def __call__(self):
        return "CMP-USDT"


CMP_USDT = CMP_USDT()
"""
    name: CMP-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PIX_USDT:
    """
        name: PIX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PIX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PIX-USDT"

    def __str__(self):
        return "PIX-USDT"

    def __call__(self):
        return "PIX-USDT"


PIX_USDT = PIX_USDT()
"""
    name: PIX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MPLX_USDT:
    """
        name: MPLX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MPLX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MPLX-USDT"

    def __str__(self):
        return "MPLX-USDT"

    def __call__(self):
        return "MPLX-USDT"


MPLX_USDT = MPLX_USDT()
"""
    name: MPLX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIDOODLES_USDT:
    """
        name: HIDOODLES-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIDOODLES-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIDOODLES-USDT"

    def __str__(self):
        return "HIDOODLES-USDT"

    def __call__(self):
        return "HIDOODLES-USDT"


HIDOODLES_USDT = HIDOODLES_USDT()
"""
    name: HIDOODLES-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ETHW_USDT:
    """
        name: ETHW-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ETHW-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ETHW-USDT"

    def __str__(self):
        return "ETHW-USDT"

    def __call__(self):
        return "ETHW-USDT"


ETHW_USDT = ETHW_USDT()
"""
    name: ETHW-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class QUARTZ_USDT:
    """
        name: QUARTZ-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "QUARTZ-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "QUARTZ-USDT"

    def __str__(self):
        return "QUARTZ-USDT"

    def __call__(self):
        return "QUARTZ-USDT"


QUARTZ_USDT = QUARTZ_USDT()
"""
    name: QUARTZ-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ACQ_USDT:
    """
        name: ACQ-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ACQ-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACQ-USDT"

    def __str__(self):
        return "ACQ-USDT"

    def __call__(self):
        return "ACQ-USDT"


ACQ_USDT = ACQ_USDT()
"""
    name: ACQ-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ACQ_USDC:
    """
        name: ACQ-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ACQ-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ACQ-USDC"

    def __str__(self):
        return "ACQ-USDC"

    def __call__(self):
        return "ACQ-USDC"


ACQ_USDC = ACQ_USDC()
"""
    name: ACQ-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AOG_USDT:
    """
        name: AOG-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AOG-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AOG-USDT"

    def __str__(self):
        return "AOG-USDT"

    def __call__(self):
        return "AOG-USDT"


AOG_USDT = AOG_USDT()
"""
    name: AOG-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIMAYC_USDT:
    """
        name: HIMAYC-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIMAYC-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIMAYC-USDT"

    def __str__(self):
        return "HIMAYC-USDT"

    def __call__(self):
        return "HIMAYC-USDT"


HIMAYC_USDT = HIMAYC_USDT()
"""
    name: HIMAYC-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PRMX_USDT:
    """
        name: PRMX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PRMX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRMX-USDT"

    def __str__(self):
        return "PRMX-USDT"

    def __call__(self):
        return "PRMX-USDT"


PRMX_USDT = PRMX_USDT()
"""
    name: PRMX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class RED_USDT:
    """
        name: RED-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "RED-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "RED-USDT"

    def __str__(self):
        return "RED-USDT"

    def __call__(self):
        return "RED-USDT"


RED_USDT = RED_USDT()
"""
    name: RED-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PUMLX_USDT:
    """
        name: PUMLX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PUMLX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PUMLX-USDT"

    def __str__(self):
        return "PUMLX-USDT"

    def __call__(self):
        return "PUMLX-USDT"


PUMLX_USDT = PUMLX_USDT()
"""
    name: PUMLX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XETA_USDT:
    """
        name: XETA-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XETA-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XETA-USDT"

    def __str__(self):
        return "XETA-USDT"

    def __call__(self):
        return "XETA-USDT"


XETA_USDT = XETA_USDT()
"""
    name: XETA-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GEM_USDT:
    """
        name: GEM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GEM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GEM-USDT"

    def __str__(self):
        return "GEM-USDT"

    def __call__(self):
        return "GEM-USDT"


GEM_USDT = GEM_USDT()
"""
    name: GEM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class DERC_USDT:
    """
        name: DERC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "DERC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "DERC-USDT"

    def __str__(self):
        return "DERC-USDT"

    def __call__(self):
        return "DERC-USDT"


DERC_USDT = DERC_USDT()
"""
    name: DERC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class P00LS_USDT:
    """
        name: P00LS-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "P00LS-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "P00LS-USDT"

    def __str__(self):
        return "P00LS-USDT"

    def __call__(self):
        return "P00LS-USDT"


P00LS_USDT = P00LS_USDT()
"""
    name: P00LS-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class P00LS_USDC:
    """
        name: P00LS-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "P00LS-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "P00LS-USDC"

    def __str__(self):
        return "P00LS-USDC"

    def __call__(self):
        return "P00LS-USDC"


P00LS_USDC = P00LS_USDC()
"""
    name: P00LS-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class KICKS_USDT:
    """
        name: KICKS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "KICKS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "KICKS-USDT"

    def __str__(self):
        return "KICKS-USDT"

    def __call__(self):
        return "KICKS-USDT"


KICKS_USDT = KICKS_USDT()
"""
    name: KICKS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TRIBL_USDT:
    """
        name: TRIBL-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TRIBL-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TRIBL-USDT"

    def __str__(self):
        return "TRIBL-USDT"

    def __call__(self):
        return "TRIBL-USDT"


TRIBL_USDT = TRIBL_USDT()
"""
    name: TRIBL-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class GMX_USDT:
    """
        name: GMX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.01
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "GMX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.01
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "GMX-USDT"

    def __str__(self):
        return "GMX-USDT"

    def __call__(self):
        return "GMX-USDT"


GMX_USDT = GMX_USDT()
"""
    name: GMX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.01
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIOD_USDT:
    """
        name: HIOD-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIOD-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIOD-USDT"

    def __str__(self):
        return "HIOD-USDT"

    def __call__(self):
        return "HIOD-USDT"


HIOD_USDT = HIOD_USDT()
"""
    name: HIOD-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class POKT_USDT:
    """
        name: POKT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "POKT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "POKT-USDT"

    def __str__(self):
        return "POKT-USDT"

    def __call__(self):
        return "POKT-USDT"


POKT_USDT = POKT_USDT()
"""
    name: POKT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EFI_USDT:
    """
        name: EFI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EFI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EFI-USDT"

    def __str__(self):
        return "EFI-USDT"

    def __call__(self):
        return "EFI-USDT"


EFI_USDT = EFI_USDT()
"""
    name: EFI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class APT_USDT:
    """
        name: APT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: True
    """
    name: str = "APT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = True

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "APT-USDT"

    def __str__(self):
        return "APT-USDT"

    def __call__(self):
        return "APT-USDT"


APT_USDT = APT_USDT()
"""
    name: APT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: True
"""


@dataclass(slots=True, frozen=True)
class BBC_USDT:
    """
        name: BBC-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BBC-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BBC-USDT"

    def __str__(self):
        return "BBC-USDT"

    def __call__(self):
        return "BBC-USDT"


BBC_USDT = BBC_USDT()
"""
    name: BBC-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class EUL_USDT:
    """
        name: EUL-USDT
        precision: 0.001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "EUL-USDT"
    precision: int = 0.001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "EUL-USDT"

    def __str__(self):
        return "EUL-USDT"

    def __call__(self):
        return "EUL-USDT"


EUL_USDT = EUL_USDT()
"""
    name: EUL-USDT
    precision: 0.001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TON_USDT:
    """
        name: TON-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 0.1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TON-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 0.1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TON-USDT"

    def __str__(self):
        return "TON-USDT"

    def __call__(self):
        return "TON-USDT"


TON_USDT = TON_USDT()
"""
    name: TON-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 0.1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PIAS_USDT:
    """
        name: PIAS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PIAS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PIAS-USDT"

    def __str__(self):
        return "PIAS-USDT"

    def __call__(self):
        return "PIAS-USDT"


PIAS_USDT = PIAS_USDT()
"""
    name: PIAS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIMEEBITS_USDT:
    """
        name: HIMEEBITS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIMEEBITS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIMEEBITS-USDT"

    def __str__(self):
        return "HIMEEBITS-USDT"

    def __call__(self):
        return "HIMEEBITS-USDT"


HIMEEBITS_USDT = HIMEEBITS_USDT()
"""
    name: HIMEEBITS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HISQUIGGLE_USDT:
    """
        name: HISQUIGGLE-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HISQUIGGLE-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HISQUIGGLE-USDT"

    def __str__(self):
        return "HISQUIGGLE-USDT"

    def __call__(self):
        return "HISQUIGGLE-USDT"


HISQUIGGLE_USDT = HISQUIGGLE_USDT()
"""
    name: HISQUIGGLE-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class XCV_USDT:
    """
        name: XCV-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "XCV-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "XCV-USDT"

    def __str__(self):
        return "XCV-USDT"

    def __call__(self):
        return "XCV-USDT"


XCV_USDT = XCV_USDT()
"""
    name: XCV-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HFT_USDT:
    """
        name: HFT-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HFT-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFT-USDT"

    def __str__(self):
        return "HFT-USDT"

    def __call__(self):
        return "HFT-USDT"


HFT_USDT = HFT_USDT()
"""
    name: HFT-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HFT_USDC:
    """
        name: HFT-USDC
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HFT-USDC"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HFT-USDC"

    def __str__(self):
        return "HFT-USDC"

    def __call__(self):
        return "HFT-USDC"


HFT_USDC = HFT_USDC()
"""
    name: HFT-USDC
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ECOX_USDT:
    """
        name: ECOX-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ECOX-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ECOX-USDT"

    def __str__(self):
        return "ECOX-USDT"

    def __call__(self):
        return "ECOX-USDT"


ECOX_USDT = ECOX_USDT()
"""
    name: ECOX-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AMB_USDT:
    """
        name: AMB-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AMB-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AMB-USDT"

    def __str__(self):
        return "AMB-USDT"

    def __call__(self):
        return "AMB-USDT"


AMB_USDT = AMB_USDT()
"""
    name: AMB-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class AZERO_USDT:
    """
        name: AZERO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "AZERO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "AZERO-USDT"

    def __str__(self):
        return "AZERO-USDT"

    def __call__(self):
        return "AZERO-USDT"


AZERO_USDT = AZERO_USDT()
"""
    name: AZERO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIFIDENZA_USDT:
    """
        name: HIFIDENZA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIFIDENZA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFIDENZA-USDT"

    def __str__(self):
        return "HIFIDENZA-USDT"

    def __call__(self):
        return "HIFIDENZA-USDT"


HIFIDENZA_USDT = HIFIDENZA_USDT()
"""
    name: HIFIDENZA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BEAT_USDT:
    """
        name: BEAT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BEAT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BEAT-USDT"

    def __str__(self):
        return "BEAT-USDT"

    def __call__(self):
        return "BEAT-USDT"


BEAT_USDT = BEAT_USDT()
"""
    name: BEAT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NRFB_USDT:
    """
        name: NRFB-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NRFB-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NRFB-USDT"

    def __str__(self):
        return "NRFB-USDT"

    def __call__(self):
        return "NRFB-USDT"


NRFB_USDT = NRFB_USDT()
"""
    name: NRFB-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NRFB_BTC:
    """
        name: NRFB-BTC
        precision: 0.0000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NRFB-BTC"
    precision: int = 0.0000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NRFB-BTC"

    def __str__(self):
        return "NRFB-BTC"

    def __call__(self):
        return "NRFB-BTC"


NRFB_BTC = NRFB_BTC()
"""
    name: NRFB-BTC
    precision: 0.0000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIGAZERS_USDT:
    """
        name: HIGAZERS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIGAZERS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIGAZERS-USDT"

    def __str__(self):
        return "HIGAZERS-USDT"

    def __call__(self):
        return "HIGAZERS-USDT"


HIGAZERS_USDT = HIGAZERS_USDT()
"""
    name: HIGAZERS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class NAVI_USDT:
    """
        name: NAVI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "NAVI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "NAVI-USDT"

    def __str__(self):
        return "NAVI-USDT"

    def __call__(self):
        return "NAVI-USDT"


NAVI_USDT = NAVI_USDT()
"""
    name: NAVI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CARE_USDT:
    """
        name: CARE-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CARE-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CARE-USDT"

    def __str__(self):
        return "CARE-USDT"

    def __call__(self):
        return "CARE-USDT"


CARE_USDT = CARE_USDT()
"""
    name: CARE-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class CLUB_USDT:
    """
        name: CLUB-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "CLUB-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "CLUB-USDT"

    def __str__(self):
        return "CLUB-USDT"

    def __call__(self):
        return "CLUB-USDT"


CLUB_USDT = CLUB_USDT()
"""
    name: CLUB-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIPENGUINS_USDT:
    """
        name: HIPENGUINS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIPENGUINS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIPENGUINS-USDT"

    def __str__(self):
        return "HIPENGUINS-USDT"

    def __call__(self):
        return "HIPENGUINS-USDT"


HIPENGUINS_USDT = HIPENGUINS_USDT()
"""
    name: HIPENGUINS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ALT_USDT:
    """
        name: ALT-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ALT-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ALT-USDT"

    def __str__(self):
        return "ALT-USDT"

    def __call__(self):
        return "ALT-USDT"


ALT_USDT = ALT_USDT()
"""
    name: ALT-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HICLONEX_USDT:
    """
        name: HICLONEX-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HICLONEX-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HICLONEX-USDT"

    def __str__(self):
        return "HICLONEX-USDT"

    def __call__(self):
        return "HICLONEX-USDT"


HICLONEX_USDT = HICLONEX_USDT()
"""
    name: HICLONEX-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PRIMAL_USDT:
    """
        name: PRIMAL-USDT
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PRIMAL-USDT"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRIMAL-USDT"

    def __str__(self):
        return "PRIMAL-USDT"

    def __call__(self):
        return "PRIMAL-USDT"


PRIMAL_USDT = PRIMAL_USDT()
"""
    name: PRIMAL-USDT
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class PRIMAL_USDC:
    """
        name: PRIMAL-USDC
        precision: 0.0000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "PRIMAL-USDC"
    precision: int = 0.0000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "PRIMAL-USDC"

    def __str__(self):
        return "PRIMAL-USDC"

    def __call__(self):
        return "PRIMAL-USDC"


PRIMAL_USDC = PRIMAL_USDC()
"""
    name: PRIMAL-USDC
    precision: 0.0000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OAS_USDT:
    """
        name: OAS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OAS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OAS-USDT"

    def __str__(self):
        return "OAS-USDT"

    def __call__(self):
        return "OAS-USDT"


OAS_USDT = OAS_USDT()
"""
    name: OAS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class VEMP_USDC:
    """
        name: VEMP-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "VEMP-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "VEMP-USDC"

    def __str__(self):
        return "VEMP-USDC"

    def __call__(self):
        return "VEMP-USDC"


VEMP_USDC = VEMP_USDC()
"""
    name: VEMP-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HICOOLCATS_USDT:
    """
        name: HICOOLCATS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HICOOLCATS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HICOOLCATS-USDT"

    def __str__(self):
        return "HICOOLCATS-USDT"

    def __call__(self):
        return "HICOOLCATS-USDT"


HICOOLCATS_USDT = HICOOLCATS_USDT()
"""
    name: HICOOLCATS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIAZUKI_USDT:
    """
        name: HIAZUKI-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIAZUKI-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIAZUKI-USDT"

    def __str__(self):
        return "HIAZUKI-USDT"

    def __call__(self):
        return "HIAZUKI-USDT"


HIAZUKI_USDT = HIAZUKI_USDT()
"""
    name: HIAZUKI-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class TEM_USDT:
    """
        name: TEM-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "TEM-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "TEM-USDT"

    def __str__(self):
        return "TEM-USDT"

    def __call__(self):
        return "TEM-USDT"


TEM_USDT = TEM_USDT()
"""
    name: TEM-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIFLUF_USDT:
    """
        name: HIFLUF-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIFLUF-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIFLUF-USDT"

    def __str__(self):
        return "HIFLUF-USDT"

    def __call__(self):
        return "HIFLUF-USDT"


HIFLUF_USDT = HIFLUF_USDT()
"""
    name: HIFLUF-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIBIRDS_USDT:
    """
        name: HIBIRDS-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIBIRDS-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIBIRDS-USDT"

    def __str__(self):
        return "HIBIRDS-USDT"

    def __call__(self):
        return "HIBIRDS-USDT"


HIBIRDS_USDT = HIBIRDS_USDT()
"""
    name: HIBIRDS-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BDX_USDT:
    """
        name: BDX-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BDX-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BDX-USDT"

    def __str__(self):
        return "BDX-USDT"

    def __call__(self):
        return "BDX-USDT"


BDX_USDT = BDX_USDT()
"""
    name: BDX-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class BDX_BTC:
    """
        name: BDX-BTC
        precision: 0.000000001
        minimum_margin: 0.000001
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "BDX-BTC"
    precision: int = 0.000000001
    minimum_margin: float = 0.000001
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "BDX-BTC"

    def __str__(self):
        return "BDX-BTC"

    def __call__(self):
        return "BDX-BTC"


BDX_BTC = BDX_BTC()
"""
    name: BDX-BTC
    precision: 0.000000001
    minimum_margin: 0.000001
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FLR_USDT:
    """
        name: FLR-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FLR-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLR-USDT"

    def __str__(self):
        return "FLR-USDT"

    def __call__(self):
        return "FLR-USDT"


FLR_USDT = FLR_USDT()
"""
    name: FLR-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class FLR_USDC:
    """
        name: FLR-USDC
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "FLR-USDC"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "FLR-USDC"

    def __str__(self):
        return "FLR-USDC"

    def __call__(self):
        return "FLR-USDC"


FLR_USDC = FLR_USDC()
"""
    name: FLR-USDC
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class HIMFERS_USDT:
    """
        name: HIMFERS-USDT
        precision: 0.000001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 100
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "HIMFERS-USDT"
    precision: int = 0.000001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 100
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "HIMFERS-USDT"

    def __str__(self):
        return "HIMFERS-USDT"

    def __call__(self):
        return "HIMFERS-USDT"


HIMFERS_USDT = HIMFERS_USDT()
"""
    name: HIMFERS-USDT
    precision: 0.000001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 100
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class OSMO_USDT:
    """
        name: OSMO-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "OSMO-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "OSMO-USDT"

    def __str__(self):
        return "OSMO-USDT"

    def __call__(self):
        return "OSMO-USDT"


OSMO_USDT = OSMO_USDT()
"""
    name: OSMO-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class ASTRA_USDT:
    """
        name: ASTRA-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "ASTRA-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "ASTRA-USDT"

    def __str__(self):
        return "ASTRA-USDT"

    def __call__(self):
        return "ASTRA-USDT"


ASTRA_USDT = ASTRA_USDT()
"""
    name: ASTRA-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class MAGIC_USDT:
    """
        name: MAGIC-USDT
        precision: 0.0001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 1
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "MAGIC-USDT"
    precision: int = 0.0001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 1
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "MAGIC-USDT"

    def __str__(self):
        return "MAGIC-USDT"

    def __call__(self):
        return "MAGIC-USDT"


MAGIC_USDT = MAGIC_USDT()
"""
    name: MAGIC-USDT
    precision: 0.0001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 1
    maximum_order_size: 10000000000
    margin: False
"""


@dataclass(slots=True, frozen=True)
class SQUAD_USDT:
    """
        name: SQUAD-USDT
        precision: 0.00001
        minimum_margin: 0.1
        initial_margin: None
        minimum_order_size: 10
        maximum_order_size: 10000000000
        margin: False
    """
    name: str = "SQUAD-USDT"
    precision: int = 0.00001
    minimum_margin: float = 0.1
    initial_margin: float = None
    minimum_order_size: float = 10
    maximum_order_size: float = 10000000000
    margin: bool = False

    def __eq__(self, other):
        if type(other) == str:
            return self.name == other
        if type(self) == type(other):
            return self.name == other.name

    def __repr__(self):
        return "SQUAD-USDT"

    def __str__(self):
        return "SQUAD-USDT"

    def __call__(self):
        return "SQUAD-USDT"


SQUAD_USDT = SQUAD_USDT()
"""
    name: SQUAD-USDT
    precision: 0.00001
    minimum_margin: 0.1
    initial_margin: None
    minimum_order_size: 10
    maximum_order_size: 10000000000
    margin: False
"""
